
primera_prueba_real_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000507c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08005188  08005188  00006188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005214  08005214  0000705c  2**0
                  CONTENTS
  4 .ARM          00000008  08005214  08005214  00006214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800521c  0800521c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800521c  0800521c  0000621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005220  08005220  00006220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005224  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000005c  08005280  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08005280  00007248  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000debc  00000000  00000000  00007085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002054  00000000  00000000  00014f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db8  00000000  00000000  00016f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  00017d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018514  00000000  00000000  00018818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa61  00000000  00000000  00030d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6e8  00000000  00000000  0004078d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfe75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003978  00000000  00000000  000cfeb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000d3830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005170 	.word	0x08005170

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08005170 	.word	0x08005170

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <enableZCP>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void enableZCP(uint8_t step) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	71fb      	strb	r3, [r7, #7]
    // Deshabilitar todas las interrupciones relevantes primero
    EXTI->IMR &= ~(1 << 0);  // Deshabilitar EXTI0
 800017a:	4b21      	ldr	r3, [pc, #132]	@ (8000200 <enableZCP+0x90>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	4a20      	ldr	r2, [pc, #128]	@ (8000200 <enableZCP+0x90>)
 8000180:	f023 0301 	bic.w	r3, r3, #1
 8000184:	6013      	str	r3, [r2, #0]
    EXTI->IMR &= ~(1 << 1);  // Deshabilitar EXTI1
 8000186:	4b1e      	ldr	r3, [pc, #120]	@ (8000200 <enableZCP+0x90>)
 8000188:	681b      	ldr	r3, [r3, #0]
 800018a:	4a1d      	ldr	r2, [pc, #116]	@ (8000200 <enableZCP+0x90>)
 800018c:	f023 0302 	bic.w	r3, r3, #2
 8000190:	6013      	str	r3, [r2, #0]
    EXTI->IMR &= ~(1 << 10); // Deshabilitar EXTI15
 8000192:	4b1b      	ldr	r3, [pc, #108]	@ (8000200 <enableZCP+0x90>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	4a1a      	ldr	r2, [pc, #104]	@ (8000200 <enableZCP+0x90>)
 8000198:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800019c:	6013      	str	r3, [r2, #0]

    // Validar si el sistema está listo para habilitar la detección de cruces por cero
        // Obtener la fase actual desde la tabla de búsqueda
    if(startup_ok){
 800019e:	4b19      	ldr	r3, [pc, #100]	@ (8000204 <enableZCP+0x94>)
 80001a0:	781b      	ldrb	r3, [r3, #0]
 80001a2:	2b00      	cmp	r3, #0
 80001a4:	d026      	beq.n	80001f4 <enableZCP+0x84>
    switch (float_phase_lookuptable[step]) {
 80001a6:	79fb      	ldrb	r3, [r7, #7]
 80001a8:	4a17      	ldr	r2, [pc, #92]	@ (8000208 <enableZCP+0x98>)
 80001aa:	5cd3      	ldrb	r3, [r2, r3]
 80001ac:	2b02      	cmp	r3, #2
 80001ae:	d00e      	beq.n	80001ce <enableZCP+0x5e>
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	dc1e      	bgt.n	80001f2 <enableZCP+0x82>
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d013      	beq.n	80001e0 <enableZCP+0x70>
 80001b8:	2b01      	cmp	r3, #1
 80001ba:	d11a      	bne.n	80001f2 <enableZCP+0x82>
            case PHASE_V:

            	EXTI->IMR |= (1 << 10); // Habilitar interrupción para fase V (EXTI15)
 80001bc:	4b10      	ldr	r3, [pc, #64]	@ (8000200 <enableZCP+0x90>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000200 <enableZCP+0x90>)
 80001c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001c6:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80001c8:	b662      	cpsie	i
}
 80001ca:	bf00      	nop

                __enable_irq();
                break;
 80001cc:	e012      	b.n	80001f4 <enableZCP+0x84>
            case PHASE_W:

                EXTI->IMR |= (1 << 0);  // Habilitar interrupción para fase W (EXTI0)
 80001ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000200 <enableZCP+0x90>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000200 <enableZCP+0x90>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80001da:	b662      	cpsie	i
}
 80001dc:	bf00      	nop
                __enable_irq();

                break;
 80001de:	e009      	b.n	80001f4 <enableZCP+0x84>
            case PHASE_U:

                EXTI->IMR |= (1 << 1);  // Habilitar interrupción para fase U (EXTI1)
 80001e0:	4b07      	ldr	r3, [pc, #28]	@ (8000200 <enableZCP+0x90>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <enableZCP+0x90>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80001ec:	b662      	cpsie	i
}
 80001ee:	bf00      	nop
                __enable_irq();

                break;
 80001f0:	e000      	b.n	80001f4 <enableZCP+0x84>
            default:
                // Manejar errores o fases no válidas
                break;
 80001f2:	bf00      	nop
        }
    }
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	bc80      	pop	{r7}
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40010400 	.word	0x40010400
 8000204:	20000240 	.word	0x20000240
 8000208:	080051e0 	.word	0x080051e0

0800020c <pwm_stop>:


void pwm_stop(void) {
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <pwm_stop+0x2c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	2200      	movs	r2, #0
 8000216:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <pwm_stop+0x2c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	2200      	movs	r2, #0
 800021e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000220:	4b05      	ldr	r3, [pc, #20]	@ (8000238 <pwm_stop+0x2c>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	2200      	movs	r2, #0
 8000226:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000228:	4b03      	ldr	r3, [pc, #12]	@ (8000238 <pwm_stop+0x2c>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	2200      	movs	r2, #0
 800022e:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	bc80      	pop	{r7}
 8000236:	4770      	bx	lr
 8000238:	200000f0 	.word	0x200000f0

0800023c <pwm_init>:

void pwm_init(void){
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000240:	4b0c      	ldr	r3, [pc, #48]	@ (8000274 <pwm_init+0x38>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	2200      	movs	r2, #0
 8000246:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8000248:	4b0a      	ldr	r3, [pc, #40]	@ (8000274 <pwm_init+0x38>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	2200      	movs	r2, #0
 800024e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000250:	4b08      	ldr	r3, [pc, #32]	@ (8000274 <pwm_init+0x38>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	2200      	movs	r2, #0
 8000256:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3, IN_U);
 8000258:	2100      	movs	r1, #0
 800025a:	4806      	ldr	r0, [pc, #24]	@ (8000274 <pwm_init+0x38>)
 800025c:	f003 f910 	bl	8003480 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,IN_V);
 8000260:	2104      	movs	r1, #4
 8000262:	4804      	ldr	r0, [pc, #16]	@ (8000274 <pwm_init+0x38>)
 8000264:	f003 f90c 	bl	8003480 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, IN_W);
 8000268:	2108      	movs	r1, #8
 800026a:	4802      	ldr	r0, [pc, #8]	@ (8000274 <pwm_init+0x38>)
 800026c:	f003 f908 	bl	8003480 <HAL_TIM_PWM_Start>
	return;
 8000270:	bf00      	nop
}
 8000272:	bd80      	pop	{r7, pc}
 8000274:	200000f0 	.word	0x200000f0

08000278 <alignment>:

void alignment(void){
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
	aligned_flag = false;
 800027c:	4b1a      	ldr	r3, [pc, #104]	@ (80002e8 <alignment+0x70>)
 800027e:	2200      	movs	r2, #0
 8000280:	701a      	strb	r2, [r3, #0]
	state_machine = ALIGNING;
 8000282:	4b1a      	ldr	r3, [pc, #104]	@ (80002ec <alignment+0x74>)
 8000284:	2204      	movs	r2, #4
 8000286:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 8000288:	4819      	ldr	r0, [pc, #100]	@ (80002f0 <alignment+0x78>)
 800028a:	f002 fe79 	bl	8002f80 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800028e:	2100      	movs	r1, #0
 8000290:	4817      	ldr	r0, [pc, #92]	@ (80002f0 <alignment+0x78>)
 8000292:	f002 ffeb 	bl	800326c <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim4);
 8000296:	4816      	ldr	r0, [pc, #88]	@ (80002f0 <alignment+0x78>)
 8000298:	f002 fdf9 	bl	8002e8e <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800029c:	4b14      	ldr	r3, [pc, #80]	@ (80002f0 <alignment+0x78>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	2200      	movs	r2, #0
 80002a2:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ALIGN_TIME);
 80002a4:	4b12      	ldr	r3, [pc, #72]	@ (80002f0 <alignment+0x78>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80002ac:	635a      	str	r2, [r3, #52]	@ 0x34
	pwm_init();
 80002ae:	f7ff ffc5 	bl	800023c <pwm_init>

	commutation(POS_UV, DC_ALIGN);
 80002b2:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 80002b6:	2000      	movs	r0, #0
 80002b8:	f000 fa20 	bl	80006fc <commutation>
	HAL_TIM_Base_Start_IT(&htim4);
 80002bc:	480c      	ldr	r0, [pc, #48]	@ (80002f0 <alignment+0x78>)
 80002be:	f002 fe0d 	bl	8002edc <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80002c2:	2100      	movs	r1, #0
 80002c4:	480a      	ldr	r0, [pc, #40]	@ (80002f0 <alignment+0x78>)
 80002c6:	f002 fee1 	bl	800308c <HAL_TIM_OC_Start_IT>
	while(!aligned_flag);
 80002ca:	bf00      	nop
 80002cc:	4b06      	ldr	r3, [pc, #24]	@ (80002e8 <alignment+0x70>)
 80002ce:	781b      	ldrb	r3, [r3, #0]
 80002d0:	f083 0301 	eor.w	r3, r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d1f8      	bne.n	80002cc <alignment+0x54>
	state_machine = READY;
 80002da:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <alignment+0x74>)
 80002dc:	2205      	movs	r2, #5
 80002de:	701a      	strb	r2, [r3, #0]
	pwm_stop();
 80002e0:	f7ff ff94 	bl	800020c <pwm_stop>
}
 80002e4:	bf00      	nop
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000023e 	.word	0x2000023e
 80002ec:	20000231 	.word	0x20000231
 80002f0:	20000138 	.word	0x20000138

080002f4 <startup>:

void startup(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
	alignment();
 80002fa:	f7ff ffbd 	bl	8000278 <alignment>
	state_machine =  STARTUP;
 80002fe:	4b43      	ldr	r3, [pc, #268]	@ (800040c <startup+0x118>)
 8000300:	2202      	movs	r2, #2
 8000302:	701a      	strb	r2, [r3, #0]
	bool  localFlag = false;
 8000304:	2300      	movs	r3, #0
 8000306:	71fb      	strb	r3, [r7, #7]
	pwmVal = DC_STARTUP_INIT;
 8000308:	4b41      	ldr	r3, [pc, #260]	@ (8000410 <startup+0x11c>)
 800030a:	f44f 7216 	mov.w	r2, #600	@ 0x258
 800030e:	801a      	strh	r2, [r3, #0]
	pwm_init();
 8000310:	f7ff ff94 	bl	800023c <pwm_init>
	commutationStep = POS_UV;
 8000314:	4b3f      	ldr	r3, [pc, #252]	@ (8000414 <startup+0x120>)
 8000316:	2200      	movs	r2, #0
 8000318:	701a      	strb	r2, [r3, #0]
	commutationTime = TIME_STARTUP_COMMUTATION_INIT;
 800031a:	4b3f      	ldr	r3, [pc, #252]	@ (8000418 <startup+0x124>)
 800031c:	2278      	movs	r2, #120	@ 0x78
 800031e:	801a      	strh	r2, [r3, #0]
	uint16_t duration = 0;
 8000320:	2300      	movs	r3, #0
 8000322:	80bb      	strh	r3, [r7, #4]
	pwm_init();
 8000324:	f7ff ff8a 	bl	800023c <pwm_init>
	while(!localFlag){
 8000328:	e053      	b.n	80003d2 <startup+0xde>
		//__HAL_TIM_SET_COUNTER(&htim4, 0);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, time);
		HAL_Delay(commutationTime);
 800032a:	4b3b      	ldr	r3, [pc, #236]	@ (8000418 <startup+0x124>)
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	b29b      	uxth	r3, r3
 8000330:	4618      	mov	r0, r3
 8000332:	f001 f9a3 	bl	800167c <HAL_Delay>
		commutation(commutationStep, pwmVal);
 8000336:	4b37      	ldr	r3, [pc, #220]	@ (8000414 <startup+0x120>)
 8000338:	781b      	ldrb	r3, [r3, #0]
 800033a:	b2db      	uxtb	r3, r3
 800033c:	4a34      	ldr	r2, [pc, #208]	@ (8000410 <startup+0x11c>)
 800033e:	8812      	ldrh	r2, [r2, #0]
 8000340:	b292      	uxth	r2, r2
 8000342:	4611      	mov	r1, r2
 8000344:	4618      	mov	r0, r3
 8000346:	f000 f9d9 	bl	80006fc <commutation>
		//HAL_TIM_Base_Start_IT(&htim4);
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		//while(!startup_flag);

		commutationStep = (commutationStep + 1) % NUM_POS;
 800034a:	4b32      	ldr	r3, [pc, #200]	@ (8000414 <startup+0x120>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	b2db      	uxtb	r3, r3
 8000350:	1c5a      	adds	r2, r3, #1
 8000352:	4b32      	ldr	r3, [pc, #200]	@ (800041c <startup+0x128>)
 8000354:	fb83 3102 	smull	r3, r1, r3, r2
 8000358:	17d3      	asrs	r3, r2, #31
 800035a:	1ac9      	subs	r1, r1, r3
 800035c:	460b      	mov	r3, r1
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	440b      	add	r3, r1
 8000362:	005b      	lsls	r3, r3, #1
 8000364:	1ad1      	subs	r1, r2, r3
 8000366:	b2ca      	uxtb	r2, r1
 8000368:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <startup+0x120>)
 800036a:	701a      	strb	r2, [r3, #0]
		(pwmVal < DC_STARTUP_END) ? pwmVal += DC_STARTUP_STEP : pwmVal;
 800036c:	4b28      	ldr	r3, [pc, #160]	@ (8000410 <startup+0x11c>)
 800036e:	881b      	ldrh	r3, [r3, #0]
 8000370:	b29b      	uxth	r3, r3
 8000372:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000376:	d207      	bcs.n	8000388 <startup+0x94>
 8000378:	4b25      	ldr	r3, [pc, #148]	@ (8000410 <startup+0x11c>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	b29b      	uxth	r3, r3
 800037e:	330a      	adds	r3, #10
 8000380:	b29a      	uxth	r2, r3
 8000382:	4b23      	ldr	r3, [pc, #140]	@ (8000410 <startup+0x11c>)
 8000384:	801a      	strh	r2, [r3, #0]
 8000386:	e001      	b.n	800038c <startup+0x98>
 8000388:	4b21      	ldr	r3, [pc, #132]	@ (8000410 <startup+0x11c>)
 800038a:	881b      	ldrh	r3, [r3, #0]
	    if (commutationTime > TIME_STARTUP_COMMUTATION_FINAL) {
 800038c:	4b22      	ldr	r3, [pc, #136]	@ (8000418 <startup+0x124>)
 800038e:	881b      	ldrh	r3, [r3, #0]
 8000390:	b29b      	uxth	r3, r3
 8000392:	2b08      	cmp	r3, #8
 8000394:	d907      	bls.n	80003a6 <startup+0xb2>
	    	commutationTime -= TIME_STARTUP_STEP;
 8000396:	4b20      	ldr	r3, [pc, #128]	@ (8000418 <startup+0x124>)
 8000398:	881b      	ldrh	r3, [r3, #0]
 800039a:	b29b      	uxth	r3, r3
 800039c:	3b02      	subs	r3, #2
 800039e:	b29a      	uxth	r2, r3
 80003a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <startup+0x124>)
 80003a2:	801a      	strh	r2, [r3, #0]
 80003a4:	e015      	b.n	80003d2 <startup+0xde>
	    } else if (duration < 500){
 80003a6:	88bb      	ldrh	r3, [r7, #4]
 80003a8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80003ac:	d20b      	bcs.n	80003c6 <startup+0xd2>
	        duration++;
 80003ae:	88bb      	ldrh	r3, [r7, #4]
 80003b0:	3301      	adds	r3, #1
 80003b2:	80bb      	strh	r3, [r7, #4]
	        if(duration == 499)startup_ok=true;
 80003b4:	88bb      	ldrh	r3, [r7, #4]
 80003b6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d109      	bne.n	80003d2 <startup+0xde>
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <startup+0x12c>)
 80003c0:	2201      	movs	r2, #1
 80003c2:	701a      	strb	r2, [r3, #0]
 80003c4:	e005      	b.n	80003d2 <startup+0xde>
	    }
	    else {

			localFlag = true;
 80003c6:	2301      	movs	r3, #1
 80003c8:	71fb      	strb	r3, [r7, #7]

			__HAL_TIM_SET_COUNTER(&htim4, 0);
 80003ca:	4b16      	ldr	r3, [pc, #88]	@ (8000424 <startup+0x130>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2200      	movs	r2, #0
 80003d0:	625a      	str	r2, [r3, #36]	@ 0x24
	while(!localFlag){
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	f083 0301 	eor.w	r3, r3, #1
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1a5      	bne.n	800032a <startup+0x36>
//		startup_flag = false;


	}
	//commutationTime*=10;
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1); // Detiene canal 1
 80003de:	2100      	movs	r1, #0
 80003e0:	4810      	ldr	r0, [pc, #64]	@ (8000424 <startup+0x130>)
 80003e2:	f002 ff43 	bl	800326c <HAL_TIM_OC_Stop_IT>
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, commutationTime); // Configura canal 2
	reference_zcp = 0;
 80003e6:	4b10      	ldr	r3, [pc, #64]	@ (8000428 <startup+0x134>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	801a      	strh	r2, [r3, #0]

	TIM4->ARR = 0xFFFF;
 80003ec:	4b0f      	ldr	r3, [pc, #60]	@ (800042c <startup+0x138>)
 80003ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80003f2:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 4;
 80003f4:	4b0d      	ldr	r3, [pc, #52]	@ (800042c <startup+0x138>)
 80003f6:	2204      	movs	r2, #4
 80003f8:	629a      	str	r2, [r3, #40]	@ 0x28
	//HAL_ADC_Start_IT(&hadc1);
	// Habilitar interrupción para fase W (EXTI0)

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <startup+0x130>)
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	2200      	movs	r2, #0
 8000400:	625a      	str	r2, [r3, #36]	@ 0x24


	// Inicia el canal 2 en modo Output Compare


}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	20000231 	.word	0x20000231
 8000410:	20000234 	.word	0x20000234
 8000414:	20000236 	.word	0x20000236
 8000418:	20000238 	.word	0x20000238
 800041c:	2aaaaaab 	.word	0x2aaaaaab
 8000420:	20000240 	.word	0x20000240
 8000424:	20000138 	.word	0x20000138
 8000428:	2000023c 	.word	0x2000023c
 800042c:	40000800 	.word	0x40000800

08000430 <ledON>:


void ledON(){
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0

	eventFlag = true;
 8000434:	4b06      	ldr	r3, [pc, #24]	@ (8000450 <ledON+0x20>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 19999);
 800043a:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <ledON+0x24>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000442:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000444:	2100      	movs	r1, #0
 8000446:	4803      	ldr	r0, [pc, #12]	@ (8000454 <ledON+0x24>)
 8000448:	f002 fe20 	bl	800308c <HAL_TIM_OC_Start_IT>


}
 800044c:	bf00      	nop
 800044e:	bd80      	pop	{r7, pc}
 8000450:	20000232 	.word	0x20000232
 8000454:	20000138 	.word	0x20000138

08000458 <processCommand>:
void processCommand(char *input) {
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
    for (int i = 0; commandTable[i].command != NULL; i++) {
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
 8000464:	e019      	b.n	800049a <processCommand+0x42>
        if (strcmp(input, commandTable[i].command) == 0) {  // Compara el comando recibido
 8000466:	4a17      	ldr	r2, [pc, #92]	@ (80004c4 <processCommand+0x6c>)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800046e:	4619      	mov	r1, r3
 8000470:	6878      	ldr	r0, [r7, #4]
 8000472:	f7ff fe6b 	bl	800014c <strcmp>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d10b      	bne.n	8000494 <processCommand+0x3c>
            eventFlag = true;
 800047c:	4b12      	ldr	r3, [pc, #72]	@ (80004c8 <processCommand+0x70>)
 800047e:	2201      	movs	r2, #1
 8000480:	701a      	strb	r2, [r3, #0]
        	commandTable[i].execute();  // Ejecuta la función asociada
 8000482:	4a10      	ldr	r2, [pc, #64]	@ (80004c4 <processCommand+0x6c>)
 8000484:	68fb      	ldr	r3, [r7, #12]
 8000486:	00db      	lsls	r3, r3, #3
 8000488:	4413      	add	r3, r2
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	4798      	blx	r3
            clearRxBuffer();  // Limpia el buffer acumulador
 800048e:	f000 f823 	bl	80004d8 <clearRxBuffer>

            return;
 8000492:	e014      	b.n	80004be <processCommand+0x66>
    for (int i = 0; commandTable[i].command != NULL; i++) {
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	3301      	adds	r3, #1
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	4a0a      	ldr	r2, [pc, #40]	@ (80004c4 <processCommand+0x6c>)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d1df      	bne.n	8000466 <processCommand+0xe>
        }
    }
    // Si no se encuentra el comando
    HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Command\r\n", 17, 3);
 80004a6:	2303      	movs	r3, #3
 80004a8:	2211      	movs	r2, #17
 80004aa:	4908      	ldr	r1, [pc, #32]	@ (80004cc <processCommand+0x74>)
 80004ac:	4808      	ldr	r0, [pc, #32]	@ (80004d0 <processCommand+0x78>)
 80004ae:	f004 f818 	bl	80044e2 <HAL_UART_Transmit>
    clearRxBuffer();
 80004b2:	f000 f811 	bl	80004d8 <clearRxBuffer>
    state_machine = IDLE;
 80004b6:	4b07      	ldr	r3, [pc, #28]	@ (80004d4 <processCommand+0x7c>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	701a      	strb	r2, [r3, #0]
    return;// Limpia el buffer acumulador
 80004bc:	bf00      	nop

}
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000000 	.word	0x20000000
 80004c8:	20000232 	.word	0x20000232
 80004cc:	080051a0 	.word	0x080051a0
 80004d0:	20000180 	.word	0x20000180
 80004d4:	20000231 	.word	0x20000231

080004d8 <clearRxBuffer>:


void clearRxBuffer(void) {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, BUFFER_SIZE);  // Establece todos los elementos a 0
 80004dc:	2220      	movs	r2, #32
 80004de:	2100      	movs	r1, #0
 80004e0:	4803      	ldr	r0, [pc, #12]	@ (80004f0 <clearRxBuffer+0x18>)
 80004e2:	f004 fe19 	bl	8005118 <memset>
    rx_index = 0;                          // Reinicia el índice del buffer
 80004e6:	4b03      	ldr	r3, [pc, #12]	@ (80004f4 <clearRxBuffer+0x1c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
}
 80004ec:	bf00      	nop
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000210 	.word	0x20000210
 80004f4:	20000230 	.word	0x20000230

080004f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verifica el UART correcto
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a35      	ldr	r2, [pc, #212]	@ (80005dc <HAL_UART_RxCpltCallback+0xe4>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d164      	bne.n	80005d4 <HAL_UART_RxCpltCallback+0xdc>
        if (rx_data[0] == '\r') {  // Detecta el carácter de fin de línea
 800050a:	4b35      	ldr	r3, [pc, #212]	@ (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b0d      	cmp	r3, #13
 8000510:	d123      	bne.n	800055a <HAL_UART_RxCpltCallback+0x62>
            rx_buffer[rx_index] = '\0';  // Finaliza la cadena con terminador nulo
 8000512:	4b34      	ldr	r3, [pc, #208]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	461a      	mov	r2, r3
 8000518:	4b33      	ldr	r3, [pc, #204]	@ (80005e8 <HAL_UART_RxCpltCallback+0xf0>)
 800051a:	2100      	movs	r1, #0
 800051c:	5499      	strb	r1, [r3, r2]
            rx_index = 0;  // Reinicia el índice para el próximo mensaje
 800051e:	4b31      	ldr	r3, [pc, #196]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]

            // Procesa el mensaje completo
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nReceived: ", 12, 3);
 8000524:	2303      	movs	r3, #3
 8000526:	220c      	movs	r2, #12
 8000528:	4930      	ldr	r1, [pc, #192]	@ (80005ec <HAL_UART_RxCpltCallback+0xf4>)
 800052a:	4831      	ldr	r0, [pc, #196]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 800052c:	f003 ffd9 	bl	80044e2 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, rx_buffer	, strlen((char *)rx_buffer), 3);
 8000530:	482d      	ldr	r0, [pc, #180]	@ (80005e8 <HAL_UART_RxCpltCallback+0xf0>)
 8000532:	f7ff fe15 	bl	8000160 <strlen>
 8000536:	4603      	mov	r3, r0
 8000538:	b29a      	uxth	r2, r3
 800053a:	2303      	movs	r3, #3
 800053c:	492a      	ldr	r1, [pc, #168]	@ (80005e8 <HAL_UART_RxCpltCallback+0xf0>)
 800053e:	482c      	ldr	r0, [pc, #176]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 8000540:	f003 ffcf 	bl	80044e2 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000544:	f04f 33ff 	mov.w	r3, #4294967295
 8000548:	2202      	movs	r2, #2
 800054a:	492a      	ldr	r1, [pc, #168]	@ (80005f4 <HAL_UART_RxCpltCallback+0xfc>)
 800054c:	4828      	ldr	r0, [pc, #160]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 800054e:	f003 ffc8 	bl	80044e2 <HAL_UART_Transmit>
            state_machine = PROCESS_COMMAND;
 8000552:	4b29      	ldr	r3, [pc, #164]	@ (80005f8 <HAL_UART_RxCpltCallback+0x100>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e037      	b.n	80005ca <HAL_UART_RxCpltCallback+0xd2>
        } else if (rx_data[0] == '\b' || rx_data[0] == '\177') {  // Detecta Backspace
 800055a:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b08      	cmp	r3, #8
 8000560:	d003      	beq.n	800056a <HAL_UART_RxCpltCallback+0x72>
 8000562:	4b1f      	ldr	r3, [pc, #124]	@ (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b7f      	cmp	r3, #127	@ 0x7f
 8000568:	d110      	bne.n	800058c <HAL_UART_RxCpltCallback+0x94>
            if (rx_index > 0) {  // Si hay algo en el buffer
 800056a:	4b1e      	ldr	r3, [pc, #120]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d02b      	beq.n	80005ca <HAL_UART_RxCpltCallback+0xd2>
                rx_index--;  // Retrocede el índice
 8000572:	4b1c      	ldr	r3, [pc, #112]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	3b01      	subs	r3, #1
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b1a      	ldr	r3, [pc, #104]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 800057c:	701a      	strb	r2, [r3, #0]
                // Simula el borrado en el terminal
                HAL_UART_Transmit(&huart2, (uint8_t *)"\b \b", 3, 3);
 800057e:	2303      	movs	r3, #3
 8000580:	2203      	movs	r2, #3
 8000582:	491e      	ldr	r1, [pc, #120]	@ (80005fc <HAL_UART_RxCpltCallback+0x104>)
 8000584:	481a      	ldr	r0, [pc, #104]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 8000586:	f003 ffac 	bl	80044e2 <HAL_UART_Transmit>
            if (rx_index > 0) {  // Si hay algo en el buffer
 800058a:	e01e      	b.n	80005ca <HAL_UART_RxCpltCallback+0xd2>
            }
        } else {  // Cualquier otro carácter
            rx_buffer[rx_index++] = rx_data[0];  // Almacena el carácter en el buffer
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	1c5a      	adds	r2, r3, #1
 8000592:	b2d1      	uxtb	r1, r2
 8000594:	4a13      	ldr	r2, [pc, #76]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 8000596:	7011      	strb	r1, [r2, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b11      	ldr	r3, [pc, #68]	@ (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 800059c:	7819      	ldrb	r1, [r3, #0]
 800059e:	4b12      	ldr	r3, [pc, #72]	@ (80005e8 <HAL_UART_RxCpltCallback+0xf0>)
 80005a0:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);  // Eco del carácter recibido
 80005a2:	f04f 33ff 	mov.w	r3, #4294967295
 80005a6:	2201      	movs	r2, #1
 80005a8:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 80005aa:	4811      	ldr	r0, [pc, #68]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 80005ac:	f003 ff99 	bl	80044e2 <HAL_UART_Transmit>

            // Evita desbordamientos
            if (rx_index >= BUFFER_SIZE) {
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b1f      	cmp	r3, #31
 80005b6:	d908      	bls.n	80005ca <HAL_UART_RxCpltCallback+0xd2>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nBuffer Overflow\r\n", 19, 3);
 80005b8:	2303      	movs	r3, #3
 80005ba:	2213      	movs	r2, #19
 80005bc:	4910      	ldr	r1, [pc, #64]	@ (8000600 <HAL_UART_RxCpltCallback+0x108>)
 80005be:	480c      	ldr	r0, [pc, #48]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 80005c0:	f003 ff8f 	bl	80044e2 <HAL_UART_Transmit>
                rx_index = 0;  // Reinicia el índice en caso de desbordamiento
 80005c4:	4b07      	ldr	r3, [pc, #28]	@ (80005e4 <HAL_UART_RxCpltCallback+0xec>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
            }
        }

        // Reinicia la recepción para el siguiente byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4904      	ldr	r1, [pc, #16]	@ (80005e0 <HAL_UART_RxCpltCallback+0xe8>)
 80005ce:	4808      	ldr	r0, [pc, #32]	@ (80005f0 <HAL_UART_RxCpltCallback+0xf8>)
 80005d0:	f004 f812 	bl	80045f8 <HAL_UART_Receive_IT>
    }
}
 80005d4:	bf00      	nop
 80005d6:	3708      	adds	r7, #8
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40004400 	.word	0x40004400
 80005e0:	2000020c 	.word	0x2000020c
 80005e4:	20000230 	.word	0x20000230
 80005e8:	20000210 	.word	0x20000210
 80005ec:	080051b4 	.word	0x080051b4
 80005f0:	20000180 	.word	0x20000180
 80005f4:	080051c4 	.word	0x080051c4
 80005f8:	20000231 	.word	0x20000231
 80005fc:	080051c8 	.word	0x080051c8
 8000600:	080051cc 	.word	0x080051cc

08000604 <handleState>:
state handleState(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	switch(state_machine){
 8000608:	4b39      	ldr	r3, [pc, #228]	@ (80006f0 <handleState+0xec>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b06      	cmp	r3, #6
 8000610:	d868      	bhi.n	80006e4 <handleState+0xe0>
 8000612:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <handleState+0x14>)
 8000614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000618:	08000635 	.word	0x08000635
 800061c:	08000655 	.word	0x08000655
 8000620:	0800066d 	.word	0x0800066d
 8000624:	08000695 	.word	0x08000695
 8000628:	0800067f 	.word	0x0800067f
 800062c:	080006a7 	.word	0x080006a7
 8000630:	080006c7 	.word	0x080006c7
	case IDLE:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000634:	4b2f      	ldr	r3, [pc, #188]	@ (80006f4 <handleState+0xf0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	f003 0320 	and.w	r3, r3, #32
 800063e:	2b00      	cmp	r3, #0
 8000640:	d14d      	bne.n	80006de <handleState+0xda>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000642:	4b2c      	ldr	r3, [pc, #176]	@ (80006f4 <handleState+0xf0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68da      	ldr	r2, [r3, #12]
 8000648:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <handleState+0xf0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f042 0220 	orr.w	r2, r2, #32
 8000650:	60da      	str	r2, [r3, #12]
		}
		break;
 8000652:	e044      	b.n	80006de <handleState+0xda>

	case PROCESS_COMMAND:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000654:	4b27      	ldr	r3, [pc, #156]	@ (80006f4 <handleState+0xf0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	68da      	ldr	r2, [r3, #12]
 800065a:	4b26      	ldr	r3, [pc, #152]	@ (80006f4 <handleState+0xf0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	f022 0220 	bic.w	r2, r2, #32
 8000662:	60da      	str	r2, [r3, #12]
		processCommand((char*) rx_buffer);
 8000664:	4824      	ldr	r0, [pc, #144]	@ (80006f8 <handleState+0xf4>)
 8000666:	f7ff fef7 	bl	8000458 <processCommand>
		break;
 800066a:	e03b      	b.n	80006e4 <handleState+0xe0>

	case STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <handleState+0xf0>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	68da      	ldr	r2, [r3, #12]
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <handleState+0xf0>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f022 0220 	bic.w	r2, r2, #32
 800067a:	60da      	str	r2, [r3, #12]
		//startup();
		break;
 800067c:	e032      	b.n	80006e4 <handleState+0xe0>
	case ALIGNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800067e:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <handleState+0xf0>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <handleState+0xf0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f022 0220 	bic.w	r2, r2, #32
 800068c:	60da      	str	r2, [r3, #12]
		alignment();
 800068e:	f7ff fdf3 	bl	8000278 <alignment>
		break;
 8000692:	e027      	b.n	80006e4 <handleState+0xe0>
	case RUNNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <handleState+0xf0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	68da      	ldr	r2, [r3, #12]
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <handleState+0xf0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f022 0220 	bic.w	r2, r2, #32
 80006a2:	60da      	str	r2, [r3, #12]
		break;
 80006a4:	e01e      	b.n	80006e4 <handleState+0xe0>

	case READY:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <handleState+0xf0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	f003 0320 	and.w	r3, r3, #32
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d116      	bne.n	80006e2 <handleState+0xde>
					__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <handleState+0xf0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	68da      	ldr	r2, [r3, #12]
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <handleState+0xf0>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 0220 	orr.w	r2, r2, #32
 80006c2:	60da      	str	r2, [r3, #12]
				}
		break;
 80006c4:	e00d      	b.n	80006e2 <handleState+0xde>
	case FINISH:
		// Asegúrate de que las interrupciones de UART estén habilitadas al finalizar
		//timerCounter = 0; // Reinicia el contador
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <handleState+0xf0>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <handleState+0xf0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f042 0220 	orr.w	r2, r2, #32
 80006d4:	60da      	str	r2, [r3, #12]
		state_machine = IDLE; // Vuelve al estado IDLE
 80006d6:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <handleState+0xec>)
 80006d8:	2200      	movs	r2, #0
 80006da:	701a      	strb	r2, [r3, #0]

		break;
 80006dc:	e002      	b.n	80006e4 <handleState+0xe0>
		break;
 80006de:	bf00      	nop
 80006e0:	e000      	b.n	80006e4 <handleState+0xe0>
		break;
 80006e2:	bf00      	nop


}
	return (state_machine);
 80006e4:	4b02      	ldr	r3, [pc, #8]	@ (80006f0 <handleState+0xec>)
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000231 	.word	0x20000231
 80006f4:	20000180 	.word	0x20000180
 80006f8:	20000210 	.word	0x20000210

080006fc <commutation>:

	commutation(commutationStep, pwmVal);


}
void commutation(uint8_t step, uint16_t pwm) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	80bb      	strh	r3, [r7, #4]

    switch(step) {
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	2b05      	cmp	r3, #5
 8000710:	f200 80ee 	bhi.w	80008f0 <commutation+0x1f4>
 8000714:	a201      	add	r2, pc, #4	@ (adr r2, 800071c <commutation+0x20>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	08000735 	.word	0x08000735
 8000720:	08000787 	.word	0x08000787
 8000724:	080007cd 	.word	0x080007cd
 8000728:	08000813 	.word	0x08000813
 800072c:	08000865 	.word	0x08000865
 8000730:	080008ab 	.word	0x080008ab

        case POS_UV:
        	pwm_stop();
 8000734:	f7ff fd6a 	bl	800020c <pwm_stop>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000738:	b672      	cpsid	i
}
 800073a:	bf00      	nop
        	__disable_irq();
            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 800073c:	4b6f      	ldr	r3, [pc, #444]	@ (80008fc <commutation+0x200>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	4a6e      	ldr	r2, [pc, #440]	@ (80008fc <commutation+0x200>)
 8000742:	f023 0320 	bic.w	r3, r3, #32
 8000746:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR |= EN_U;
 8000748:	4b6d      	ldr	r3, [pc, #436]	@ (8000900 <commutation+0x204>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	4a6c      	ldr	r2, [pc, #432]	@ (8000900 <commutation+0x204>)
 800074e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000752:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR |= EN_V;  // Activar EN_U y EN_V
 8000754:	4b6a      	ldr	r3, [pc, #424]	@ (8000900 <commutation+0x204>)
 8000756:	68db      	ldr	r3, [r3, #12]
 8000758:	4a69      	ldr	r2, [pc, #420]	@ (8000900 <commutation+0x204>)
 800075a:	f043 0302 	orr.w	r3, r3, #2
 800075e:	60d3      	str	r3, [r2, #12]

            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 8000760:	4b68      	ldr	r3, [pc, #416]	@ (8000904 <commutation+0x208>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	88ba      	ldrh	r2, [r7, #4]
 8000766:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8000768:	4b66      	ldr	r3, [pc, #408]	@ (8000904 <commutation+0x208>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000770:	4b64      	ldr	r3, [pc, #400]	@ (8000904 <commutation+0x208>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8000778:	b662      	cpsie	i
}
 800077a:	bf00      	nop
        	__enable_irq();

            enableZCP(step);
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fcf6 	bl	8000170 <enableZCP>




            break;
 8000784:	e0b5      	b.n	80008f2 <commutation+0x1f6>
        case POS_UW:
        	pwm_stop();
 8000786:	f7ff fd41 	bl	800020c <pwm_stop>
  __ASM volatile ("cpsid i" : : : "memory");
 800078a:	b672      	cpsid	i
}
 800078c:	bf00      	nop
        	__disable_irq();

            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 800078e:	4b5c      	ldr	r3, [pc, #368]	@ (8000900 <commutation+0x204>)
 8000790:	68db      	ldr	r3, [r3, #12]
 8000792:	4a5b      	ldr	r2, [pc, #364]	@ (8000900 <commutation+0x204>)
 8000794:	f023 0302 	bic.w	r3, r3, #2
 8000798:	60d3      	str	r3, [r2, #12]

           // GPIOB->ODR |= EN_U ; // Activar EN_U y EN_W
            GPIOA->ODR |=  EN_W;
 800079a:	4b58      	ldr	r3, [pc, #352]	@ (80008fc <commutation+0x200>)
 800079c:	68db      	ldr	r3, [r3, #12]
 800079e:	4a57      	ldr	r2, [pc, #348]	@ (80008fc <commutation+0x200>)
 80007a0:	f043 0320 	orr.w	r3, r3, #32
 80007a4:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 80007a6:	4b57      	ldr	r3, [pc, #348]	@ (8000904 <commutation+0x208>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	88ba      	ldrh	r2, [r7, #4]
 80007ac:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80007ae:	4b55      	ldr	r3, [pc, #340]	@ (8000904 <commutation+0x208>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2200      	movs	r2, #0
 80007b4:	63da      	str	r2, [r3, #60]	@ 0x3c

        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80007b6:	4b53      	ldr	r3, [pc, #332]	@ (8000904 <commutation+0x208>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	2200      	movs	r2, #0
 80007bc:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 80007be:	b662      	cpsie	i
}
 80007c0:	bf00      	nop
__enable_irq();
                        enableZCP(step);
 80007c2:	79fb      	ldrb	r3, [r7, #7]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f7ff fcd3 	bl	8000170 <enableZCP>

            break;
 80007ca:	e092      	b.n	80008f2 <commutation+0x1f6>
        case POS_VW:
        	pwm_stop();
 80007cc:	f7ff fd1e 	bl	800020c <pwm_stop>
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
        	__disable_irq();

            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 80007d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000900 <commutation+0x204>)
 80007d6:	68db      	ldr	r3, [r3, #12]
 80007d8:	4a49      	ldr	r2, [pc, #292]	@ (8000900 <commutation+0x204>)
 80007da:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80007de:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 80007e0:	4b47      	ldr	r3, [pc, #284]	@ (8000900 <commutation+0x204>)
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	4a46      	ldr	r2, [pc, #280]	@ (8000900 <commutation+0x204>)
 80007e6:	f043 0302 	orr.w	r3, r3, #2
 80007ea:	60d3      	str	r3, [r2, #12]
            //GPIOA->ODR |=  EN_W;

            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 80007ec:	4b45      	ldr	r3, [pc, #276]	@ (8000904 <commutation+0x208>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	88ba      	ldrh	r2, [r7, #4]
 80007f2:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80007f4:	4b43      	ldr	r3, [pc, #268]	@ (8000904 <commutation+0x208>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2200      	movs	r2, #0
 80007fa:	63da      	str	r2, [r3, #60]	@ 0x3c
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80007fc:	4b41      	ldr	r3, [pc, #260]	@ (8000904 <commutation+0x208>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8000804:	b662      	cpsie	i
}
 8000806:	bf00      	nop
        	__enable_irq();

            enableZCP(step);
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff fcb0 	bl	8000170 <enableZCP>



            break;
 8000810:	e06f      	b.n	80008f2 <commutation+0x1f6>
        case POS_VU:
        	pwm_stop();
 8000812:	f7ff fcfb 	bl	800020c <pwm_stop>
  __ASM volatile ("cpsid i" : : : "memory");
 8000816:	b672      	cpsid	i
}
 8000818:	bf00      	nop
        	__disable_irq();


            GPIOB->ODR |= EN_U; // Activar EN_U y EN_V
 800081a:	4b39      	ldr	r3, [pc, #228]	@ (8000900 <commutation+0x204>)
 800081c:	68db      	ldr	r3, [r3, #12]
 800081e:	4a38      	ldr	r2, [pc, #224]	@ (8000900 <commutation+0x204>)
 8000820:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000824:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR |=  EN_V;
 8000826:	4b36      	ldr	r3, [pc, #216]	@ (8000900 <commutation+0x204>)
 8000828:	68db      	ldr	r3, [r3, #12]
 800082a:	4a35      	ldr	r2, [pc, #212]	@ (8000900 <commutation+0x204>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 8000832:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <commutation+0x200>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	4a31      	ldr	r2, [pc, #196]	@ (80008fc <commutation+0x200>)
 8000838:	f023 0320 	bic.w	r3, r3, #32
 800083c:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 800083e:	4b31      	ldr	r3, [pc, #196]	@ (8000904 <commutation+0x208>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	88ba      	ldrh	r2, [r7, #4]
 8000844:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000846:	4b2f      	ldr	r3, [pc, #188]	@ (8000904 <commutation+0x208>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2200      	movs	r2, #0
 800084c:	635a      	str	r2, [r3, #52]	@ 0x34
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800084e:	4b2d      	ldr	r3, [pc, #180]	@ (8000904 <commutation+0x208>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2200      	movs	r2, #0
 8000854:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 8000856:	b662      	cpsie	i
}
 8000858:	bf00      	nop
        	__enable_irq();

        	enableZCP(step);
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fc87 	bl	8000170 <enableZCP>



            break;
 8000862:	e046      	b.n	80008f2 <commutation+0x1f6>
        case POS_WU:
        	pwm_stop();
 8000864:	f7ff fcd2 	bl	800020c <pwm_stop>
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
        	__disable_irq();

            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 800086c:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <commutation+0x204>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a23      	ldr	r2, [pc, #140]	@ (8000900 <commutation+0x204>)
 8000872:	f023 0302 	bic.w	r3, r3, #2
 8000876:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8000878:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <commutation+0x200>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <commutation+0x200>)
 800087e:	f043 0320 	orr.w	r3, r3, #32
 8000882:	60d3      	str	r3, [r2, #12]
            //GPIOB->ODR |= EN_U; // Activar EN_U y EN_W

            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8000884:	4b1f      	ldr	r3, [pc, #124]	@ (8000904 <commutation+0x208>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	88ba      	ldrh	r2, [r7, #4]
 800088a:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 800088c:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <commutation+0x208>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2200      	movs	r2, #0
 8000892:	635a      	str	r2, [r3, #52]	@ 0x34
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <commutation+0x208>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 800089c:	b662      	cpsie	i
}
 800089e:	bf00      	nop
        	__enable_irq();

            enableZCP(step);
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fc64 	bl	8000170 <enableZCP>



            break;
 80008a8:	e023      	b.n	80008f2 <commutation+0x1f6>
        case POS_WV:
        	pwm_stop();
 80008aa:	f7ff fcaf 	bl	800020c <pwm_stop>
  __ASM volatile ("cpsid i" : : : "memory");
 80008ae:	b672      	cpsid	i
}
 80008b0:	bf00      	nop
        	__disable_irq();

            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 80008b2:	4b13      	ldr	r3, [pc, #76]	@ (8000900 <commutation+0x204>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <commutation+0x204>)
 80008b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008bc:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 80008be:	4b10      	ldr	r3, [pc, #64]	@ (8000900 <commutation+0x204>)
 80008c0:	68db      	ldr	r3, [r3, #12]
 80008c2:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <commutation+0x204>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	60d3      	str	r3, [r2, #12]
            //GPIOA->ODR |=  EN_W;
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <commutation+0x208>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	88ba      	ldrh	r2, [r7, #4]
 80008d0:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <commutation+0x208>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2200      	movs	r2, #0
 80008d8:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <commutation+0x208>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2200      	movs	r2, #0
 80008e0:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 80008e2:	b662      	cpsie	i
}
 80008e4:	bf00      	nop
        	__enable_irq();

        	enableZCP(step);
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff fc41 	bl	8000170 <enableZCP>



            break;
 80008ee:	e000      	b.n	80008f2 <commutation+0x1f6>
        default:
            break;
 80008f0:	bf00      	nop
    }
}
 80008f2:	bf00      	nop
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40010800 	.word	0x40010800
 8000900:	40010c00 	.word	0x40010c00
 8000904:	200000f0 	.word	0x200000f0

08000908 <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a58      	ldr	r2, [pc, #352]	@ (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d17b      	bne.n	8000a12 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	7f1b      	ldrb	r3, [r3, #28]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d177      	bne.n	8000a12 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
	    //TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
		__HAL_TIM_DISABLE(&htim4);
 8000922:	4b56      	ldr	r3, [pc, #344]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	6a1a      	ldr	r2, [r3, #32]
 8000928:	f241 1311 	movw	r3, #4369	@ 0x1111
 800092c:	4013      	ands	r3, r2
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10f      	bne.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 8000932:	4b52      	ldr	r3, [pc, #328]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	6a1a      	ldr	r2, [r3, #32]
 8000938:	f240 4344 	movw	r3, #1092	@ 0x444
 800093c:	4013      	ands	r3, r2
 800093e:	2b00      	cmp	r3, #0
 8000940:	d107      	bne.n	8000952 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 8000942:	4b4e      	ldr	r3, [pc, #312]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	4b4c      	ldr	r3, [pc, #304]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f022 0201 	bic.w	r2, r2, #1
 8000950:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000952:	4b4a      	ldr	r3, [pc, #296]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	2200      	movs	r2, #0
 8000958:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Stop_IT(&htim4);
 800095a:	4848      	ldr	r0, [pc, #288]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 800095c:	f002 fb10 	bl	8002f80 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim4);
 8000960:	4846      	ldr	r0, [pc, #280]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000962:	f002 fa94 	bl	8002e8e <HAL_TIM_Base_Stop>

		HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000966:	2100      	movs	r1, #0
 8000968:	4844      	ldr	r0, [pc, #272]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 800096a:	f002 fc7f 	bl	800326c <HAL_TIM_OC_Stop_IT>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	e036      	b.n	80009e2 <HAL_TIM_OC_DelayElapsedCallback+0xda>
			// Detener el temporizador y deshabilitar el contador
			if (eventTable[i].currentState == state_machine) {
 8000974:	4942      	ldr	r1, [pc, #264]	@ (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	4613      	mov	r3, r2
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	4413      	add	r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	440b      	add	r3, r1
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b3f      	ldr	r3, [pc, #252]	@ (8000a84 <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b2db      	uxtb	r3, r3
 800098a:	429a      	cmp	r2, r3
 800098c:	d126      	bne.n	80009dc <HAL_TIM_OC_DelayElapsedCallback+0xd4>
				if (eventTable[i].eventFlag != NULL) {
 800098e:	493c      	ldr	r1, [pc, #240]	@ (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 8000990:	68fa      	ldr	r2, [r7, #12]
 8000992:	4613      	mov	r3, r2
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	4413      	add	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	440b      	add	r3, r1
 800099c:	3304      	adds	r3, #4
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d022      	beq.n	80009ea <HAL_TIM_OC_DelayElapsedCallback+0xe2>
					*(eventTable[i].eventFlag) = true;
 80009a4:	4936      	ldr	r1, [pc, #216]	@ (8000a80 <HAL_TIM_OC_DelayElapsedCallback+0x178>)
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	4613      	mov	r3, r2
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	440b      	add	r3, r1
 80009b2:	3304      	adds	r3, #4
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_ENABLE(&htim4);
 80009ba:	4b30      	ldr	r3, [pc, #192]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b2e      	ldr	r3, [pc, #184]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f042 0201 	orr.w	r2, r2, #1
 80009c8:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 80009ca:	4b2c      	ldr	r3, [pc, #176]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	@ 0x24

					HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80009d2:	2100      	movs	r1, #0
 80009d4:	4829      	ldr	r0, [pc, #164]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009d6:	f002 fc49 	bl	800326c <HAL_TIM_OC_Stop_IT>

					return;
 80009da:	e049      	b.n	8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x168>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	2b03      	cmp	r3, #3
 80009e6:	d9c5      	bls.n	8000974 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 80009e8:	e000      	b.n	80009ec <HAL_TIM_OC_DelayElapsedCallback+0xe4>

				}
				break;
 80009ea:	bf00      	nop

			}


		}
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80009ec:	4b23      	ldr	r3, [pc, #140]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 80009f4:	4821      	ldr	r0, [pc, #132]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009f6:	f002 fa71 	bl	8002edc <HAL_TIM_Base_Start_IT>
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009fa:	2100      	movs	r1, #0
 80009fc:	481f      	ldr	r0, [pc, #124]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 80009fe:	f002 fb45 	bl	800308c <HAL_TIM_OC_Start_IT>
		__HAL_TIM_ENABLE(&htim4);
 8000a02:	4b1e      	ldr	r3, [pc, #120]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f042 0201 	orr.w	r2, r2, #1
 8000a10:	601a      	str	r2, [r3, #0]


	}
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a18      	ldr	r2, [pc, #96]	@ (8000a78 <HAL_TIM_OC_DelayElapsedCallback+0x170>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d129      	bne.n	8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x168>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	7f1b      	ldrb	r3, [r3, #28]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d125      	bne.n	8000a70 <HAL_TIM_OC_DelayElapsedCallback+0x168>
        //TIM4->CCR2 = commutationTime;
		//(commutationStep);
		commutation(commutationStep, pwmVal);
 8000a24:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8000a2c:	8812      	ldrh	r2, [r2, #0]
 8000a2e:	b292      	uxth	r2, r2
 8000a30:	4611      	mov	r1, r2
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fe62 	bl	80006fc <commutation>

		commutationStep = (commutationStep + 1) % NUM_POS;
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 8000a42:	fb83 3102 	smull	r3, r1, r3, r2
 8000a46:	17d3      	asrs	r3, r2, #31
 8000a48:	1ac9      	subs	r1, r1, r3
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	440b      	add	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	1ad1      	subs	r1, r2, r3
 8000a54:	b2ca      	uxtb	r2, r1
 8000a56:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8000a58:	701a      	strb	r2, [r3, #0]
		reference_comm++;
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 8000a5c:	881b      	ldrh	r3, [r3, #0]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3301      	adds	r3, #1
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 8000a66:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a68:	4b04      	ldr	r3, [pc, #16]	@ (8000a7c <HAL_TIM_OC_DelayElapsedCallback+0x174>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	@ 0x24
	}

}
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40000800 	.word	0x40000800
 8000a7c:	20000138 	.word	0x20000138
 8000a80:	20000020 	.word	0x20000020
 8000a84:	20000231 	.word	0x20000231
 8000a88:	20000236 	.word	0x20000236
 8000a8c:	20000234 	.word	0x20000234
 8000a90:	2aaaaaab 	.word	0x2aaaaaab
 8000a94:	2000023a 	.word	0x2000023a

08000a98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a9e:	f000 fd8b 	bl	80015b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa2:	f000 f825 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa6:	f000 fae9 	bl	800107c <MX_GPIO_Init>
  MX_DMA_Init();
 8000aaa:	f000 fac9 	bl	8001040 <MX_DMA_Init>
  MX_TIM4_Init();
 8000aae:	f000 fa13 	bl	8000ed8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000ab2:	f000 fa9b 	bl	8000fec <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000ab6:	f000 f96b 	bl	8000d90 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000aba:	f000 f875 	bl	8000ba8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000abe:	f000 f8b1 	bl	8000c24 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ac8:	4806      	ldr	r0, [pc, #24]	@ (8000ae4 <main+0x4c>)
 8000aca:	f001 fcb3 	bl	8002434 <HAL_GPIO_WritePin>
  state statetete;


  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4905      	ldr	r1, [pc, #20]	@ (8000ae8 <main+0x50>)
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <main+0x54>)
 8000ad4:	f003 fd90 	bl	80045f8 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  statetete = handleState();
 8000ad8:	f7ff fd94 	bl	8000604 <handleState>
 8000adc:	4603      	mov	r3, r0
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	bf00      	nop
 8000ae2:	e7f9      	b.n	8000ad8 <main+0x40>
 8000ae4:	40011000 	.word	0x40011000
 8000ae8:	2000020c 	.word	0x2000020c
 8000aec:	20000180 	.word	0x20000180

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	@ 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afa:	2228      	movs	r2, #40	@ 0x28
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f004 fb0a 	bl	8005118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 0314 	add.w	r3, r7, #20
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b32:	2302      	movs	r3, #2
 8000b34:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b36:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b3c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b46:	4618      	mov	r0, r3
 8000b48:	f001 fc8c 	bl	8002464 <HAL_RCC_OscConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000b52:	f000 fb31 	bl	80011b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b56:	230f      	movs	r3, #15
 8000b58:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2102      	movs	r1, #2
 8000b72:	4618      	mov	r0, r3
 8000b74:	f001 fef8 	bl	8002968 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000b7e:	f000 fb1b 	bl	80011b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b82:	2302      	movs	r3, #2
 8000b84:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000b86:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000b8a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	1d3b      	adds	r3, r7, #4
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f002 f878 	bl	8002c84 <HAL_RCCEx_PeriphCLKConfig>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b9a:	f000 fb0d 	bl	80011b8 <Error_Handler>
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3750      	adds	r7, #80	@ 0x50
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bba:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <MX_ADC1_Init+0x78>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be2:	480e      	ldr	r0, [pc, #56]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000be4:	f000 fd6e 	bl	80016c4 <HAL_ADC_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8000bee:	f000 fae3 	bl	80011b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000bf2:	2304      	movs	r3, #4
 8000bf4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	@ (8000c1c <MX_ADC1_Init+0x74>)
 8000c04:	f000 fe36 	bl	8001874 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8000c0e:	f000 fad3 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3710      	adds	r7, #16
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000078 	.word	0x20000078
 8000c20:	40012400 	.word	0x40012400

08000c24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09a      	sub	sp, #104	@ 0x68
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c2a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c38:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]
 8000c62:	615a      	str	r2, [r3, #20]
 8000c64:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c66:	463b      	mov	r3, r7
 8000c68:	2220      	movs	r2, #32
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f004 fa53 	bl	8005118 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c72:	4b45      	ldr	r3, [pc, #276]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c74:	4a45      	ldr	r2, [pc, #276]	@ (8000d8c <MX_TIM1_Init+0x168>)
 8000c76:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8000c78:	4b43      	ldr	r3, [pc, #268]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b42      	ldr	r3, [pc, #264]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8000c84:	4b40      	ldr	r3, [pc, #256]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c86:	f240 7207 	movw	r2, #1799	@ 0x707
 8000c8a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c92:	4b3d      	ldr	r3, [pc, #244]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c98:	4b3b      	ldr	r3, [pc, #236]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c9e:	483a      	ldr	r0, [pc, #232]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000ca0:	f002 f8a6 	bl	8002df0 <HAL_TIM_Base_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000caa:	f000 fa85 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cb4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4833      	ldr	r0, [pc, #204]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000cbc:	f002 fe90 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cc6:	f000 fa77 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000cca:	482f      	ldr	r0, [pc, #188]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000ccc:	f002 f986 	bl	8002fdc <HAL_TIM_OC_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000cd6:	f000 fa6f 	bl	80011b8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000cda:	2306      	movs	r3, #6
 8000cdc:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ce2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4827      	ldr	r0, [pc, #156]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000cea:	f002 ff40 	bl	8003b6e <HAL_TIM_SlaveConfigSynchro>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000cf4:	f000 fa60 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000cf8:	2350      	movs	r3, #80	@ 0x50
 8000cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d00:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000d04:	4619      	mov	r1, r3
 8000d06:	4820      	ldr	r0, [pc, #128]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000d08:	f003 fada 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8000d12:	f000 fa51 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 1770;
 8000d1a:	f240 63ea 	movw	r3, #1770	@ 0x6ea
 8000d1e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d24:	2300      	movs	r3, #0
 8000d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d30:	2300      	movs	r3, #0
 8000d32:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d34:	f107 0320 	add.w	r3, r7, #32
 8000d38:	2200      	movs	r2, #0
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4812      	ldr	r0, [pc, #72]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000d3e:	f002 fd31 	bl	80037a4 <HAL_TIM_OC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000d48:	f000 fa36 	bl	80011b8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d60:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d64:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d6a:	463b      	mov	r3, r7
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <MX_TIM1_Init+0x164>)
 8000d70:	f003 fb04 	bl	800437c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000d7a:	f000 fa1d 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d7e:	bf00      	nop
 8000d80:	3768      	adds	r7, #104	@ 0x68
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000a8 	.word	0x200000a8
 8000d8c:	40012c00 	.word	0x40012c00

08000d90 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	@ 0x38
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d96:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da4:	f107 0320 	add.w	r3, r7, #32
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dc0:	4b43      	ldr	r3, [pc, #268]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000dc2:	4a44      	ldr	r2, [pc, #272]	@ (8000ed4 <MX_TIM3_Init+0x144>)
 8000dc4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000dc6:	4b42      	ldr	r3, [pc, #264]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b40      	ldr	r3, [pc, #256]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8000dd2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000dd4:	f240 7207 	movw	r2, #1799	@ 0x707
 8000dd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dda:	4b3d      	ldr	r3, [pc, #244]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000de0:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000de2:	2280      	movs	r2, #128	@ 0x80
 8000de4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de6:	483a      	ldr	r0, [pc, #232]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000de8:	f002 f802 	bl	8002df0 <HAL_TIM_Base_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000df2:	f000 f9e1 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dfc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e00:	4619      	mov	r1, r3
 8000e02:	4833      	ldr	r0, [pc, #204]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e04:	f002 fdec 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e0e:	f000 f9d3 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e12:	482f      	ldr	r0, [pc, #188]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e14:	f002 fadc 	bl	80033d0 <HAL_TIM_PWM_Init>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e1e:	f000 f9cb 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e22:	2320      	movs	r3, #32
 8000e24:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4827      	ldr	r0, [pc, #156]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e32:	f003 fa45 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e3c:	f000 f9bc 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e40:	2360      	movs	r3, #96	@ 0x60
 8000e42:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e50:	1d3b      	adds	r3, r7, #4
 8000e52:	2200      	movs	r2, #0
 8000e54:	4619      	mov	r1, r3
 8000e56:	481e      	ldr	r0, [pc, #120]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e58:	f002 fd00 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e62:	f000 f9a9 	bl	80011b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000e66:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	699a      	ldr	r2, [r3, #24]
 8000e6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0208 	bic.w	r2, r2, #8
 8000e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	2204      	movs	r2, #4
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4814      	ldr	r0, [pc, #80]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e7e:	f002 fced 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000e88:	f000 f996 	bl	80011b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8000e8c:	4b10      	ldr	r3, [pc, #64]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	699a      	ldr	r2, [r3, #24]
 8000e92:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000e9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480b      	ldr	r0, [pc, #44]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000ea4:	f002 fcda 	bl	800385c <HAL_TIM_PWM_ConfigChannel>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 8000eae:	f000 f983 	bl	80011b8 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	69da      	ldr	r2, [r3, #28]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0208 	bic.w	r2, r2, #8
 8000ec0:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ec2:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <MX_TIM3_Init+0x140>)
 8000ec4:	f000 fa3a 	bl	800133c <HAL_TIM_MspPostInit>

}
 8000ec8:	bf00      	nop
 8000eca:	3738      	adds	r7, #56	@ 0x38
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	200000f0 	.word	0x200000f0
 8000ed4:	40000400 	.word	0x40000400

08000ed8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b096      	sub	sp, #88	@ 0x58
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ede:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	601a      	str	r2, [r3, #0]
 8000ee6:	605a      	str	r2, [r3, #4]
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eec:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  TIM_OnePulse_InitTypeDef sConfig;
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f0a:	4b36      	ldr	r3, [pc, #216]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f0c:	4a36      	ldr	r2, [pc, #216]	@ (8000fe8 <MX_TIM4_Init+0x110>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000f10:	4b34      	ldr	r3, [pc, #208]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f12:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000f16:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f18:	4b32      	ldr	r3, [pc, #200]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000f1e:	4b31      	ldr	r3, [pc, #196]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f20:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f24:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f32:	482c      	ldr	r0, [pc, #176]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f34:	f001 ff5c 	bl	8002df0 <HAL_TIM_Base_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000f3e:	f000 f93b 	bl	80011b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f46:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f48:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4825      	ldr	r0, [pc, #148]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f50:	f002 fd46 	bl	80039e0 <HAL_TIM_ConfigClockSource>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000f5a:	f000 f92d 	bl	80011b8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000f5e:	4821      	ldr	r0, [pc, #132]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f60:	f002 f83c 	bl	8002fdc <HAL_TIM_OC_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000f6a:	f000 f925 	bl	80011b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f76:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4819      	ldr	r0, [pc, #100]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000f7e:	f003 f99f 	bl	80042c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000f88:	f000 f916 	bl	80011b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	2300      	movs	r3, #0
 8000f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480f      	ldr	r0, [pc, #60]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000fa6:	f002 fbfd 	bl	80037a4 <HAL_TIM_OC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000fb0:	f000 f902 	bl	80011b8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8000fb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0208 	orr.w	r2, r2, #8
 8000fc2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc8:	2204      	movs	r2, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_TIM4_Init+0x10c>)
 8000fce:	f002 fbe9 	bl	80037a4 <HAL_TIM_OC_ConfigChannel>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000fd8:	f000 f8ee 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3758      	adds	r7, #88	@ 0x58
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000138 	.word	0x20000138
 8000fe8:	40000800 	.word	0x40000800

08000fec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	4a12      	ldr	r2, [pc, #72]	@ (800103c <MX_USART2_UART_Init+0x50>)
 8000ff4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ff6:	4b10      	ldr	r3, [pc, #64]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ffc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8001000:	2200      	movs	r2, #0
 8001002:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001004:	4b0c      	ldr	r3, [pc, #48]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8001006:	2200      	movs	r2, #0
 8001008:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800100a:	4b0b      	ldr	r3, [pc, #44]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001010:	4b09      	ldr	r3, [pc, #36]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8001012:	220c      	movs	r2, #12
 8001014:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001016:	4b08      	ldr	r3, [pc, #32]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800101c:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 800101e:	2200      	movs	r2, #0
 8001020:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001022:	4805      	ldr	r0, [pc, #20]	@ (8001038 <MX_USART2_UART_Init+0x4c>)
 8001024:	f003 fa0d 	bl	8004442 <HAL_UART_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800102e:	f000 f8c3 	bl	80011b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000180 	.word	0x20000180
 800103c:	40004400 	.word	0x40004400

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001046:	4b0c      	ldr	r3, [pc, #48]	@ (8001078 <MX_DMA_Init+0x38>)
 8001048:	695b      	ldr	r3, [r3, #20]
 800104a:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <MX_DMA_Init+0x38>)
 800104c:	f043 0301 	orr.w	r3, r3, #1
 8001050:	6153      	str	r3, [r2, #20]
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <MX_DMA_Init+0x38>)
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	2011      	movs	r0, #17
 8001064:	f000 fe17 	bl	8001c96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001068:	2011      	movs	r0, #17
 800106a:	f000 fe30 	bl	8001cce <HAL_NVIC_EnableIRQ>

}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b088      	sub	sp, #32
 8001080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001082:	f107 0310 	add.w	r3, r7, #16
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001090:	4b44      	ldr	r3, [pc, #272]	@ (80011a4 <MX_GPIO_Init+0x128>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a43      	ldr	r2, [pc, #268]	@ (80011a4 <MX_GPIO_Init+0x128>)
 8001096:	f043 0310 	orr.w	r3, r3, #16
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b41      	ldr	r3, [pc, #260]	@ (80011a4 <MX_GPIO_Init+0x128>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a8:	4b3e      	ldr	r3, [pc, #248]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a3d      	ldr	r2, [pc, #244]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010ae:	f043 0320 	orr.w	r3, r3, #32
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b3b      	ldr	r3, [pc, #236]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0320 	and.w	r3, r3, #32
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c0:	4b38      	ldr	r3, [pc, #224]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a37      	ldr	r2, [pc, #220]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010c6:	f043 0304 	orr.w	r3, r3, #4
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b35      	ldr	r3, [pc, #212]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d8:	4b32      	ldr	r3, [pc, #200]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	4a31      	ldr	r2, [pc, #196]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010de:	f043 0308 	orr.w	r3, r3, #8
 80010e2:	6193      	str	r3, [r2, #24]
 80010e4:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <MX_GPIO_Init+0x128>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	603b      	str	r3, [r7, #0]
 80010ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010f0:	2200      	movs	r2, #0
 80010f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010f6:	482c      	ldr	r0, [pc, #176]	@ (80011a8 <MX_GPIO_Init+0x12c>)
 80010f8:	f001 f99c 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_W_GPIO_Port, EN_W_Pin, GPIO_PIN_RESET);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2120      	movs	r1, #32
 8001100:	482a      	ldr	r0, [pc, #168]	@ (80011ac <MX_GPIO_Init+0x130>)
 8001102:	f001 f997 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_U_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f242 0102 	movw	r1, #8194	@ 0x2002
 800110c:	4828      	ldr	r0, [pc, #160]	@ (80011b0 <MX_GPIO_Init+0x134>)
 800110e:	f001 f991 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001112:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001118:	2311      	movs	r3, #17
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001120:	2303      	movs	r3, #3
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	481f      	ldr	r0, [pc, #124]	@ (80011a8 <MX_GPIO_Init+0x12c>)
 800112c:	f000 fffe 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : ZCP_W_Pin ZCP_U_Pin */
  GPIO_InitStruct.Pin = ZCP_W_Pin|ZCP_U_Pin;
 8001130:	2303      	movs	r3, #3
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <MX_GPIO_Init+0x138>)
 8001136:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001138:	2301      	movs	r3, #1
 800113a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	481a      	ldr	r0, [pc, #104]	@ (80011ac <MX_GPIO_Init+0x130>)
 8001144:	f000 fff2 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_W_Pin */
  GPIO_InitStruct.Pin = EN_W_Pin;
 8001148:	2320      	movs	r3, #32
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114c:	2301      	movs	r3, #1
 800114e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2302      	movs	r3, #2
 8001156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_W_GPIO_Port, &GPIO_InitStruct);
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4619      	mov	r1, r3
 800115e:	4813      	ldr	r0, [pc, #76]	@ (80011ac <MX_GPIO_Init+0x130>)
 8001160:	f000 ffe4 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_V_Pin EN_U_Pin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_U_Pin;
 8001164:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2302      	movs	r3, #2
 8001174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001176:	f107 0310 	add.w	r3, r7, #16
 800117a:	4619      	mov	r1, r3
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MX_GPIO_Init+0x134>)
 800117e:	f000 ffd5 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : ZCP_V_Pin */
  GPIO_InitStruct.Pin = ZCP_V_Pin;
 8001182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001188:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <MX_GPIO_Init+0x138>)
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ZCP_V_GPIO_Port, &GPIO_InitStruct);
 8001190:	f107 0310 	add.w	r3, r7, #16
 8001194:	4619      	mov	r1, r3
 8001196:	4806      	ldr	r0, [pc, #24]	@ (80011b0 <MX_GPIO_Init+0x134>)
 8001198:	f000 ffc8 	bl	800212c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119c:	bf00      	nop
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40011000 	.word	0x40011000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	10310000 	.word	0x10310000

080011b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011bc:	b672      	cpsid	i
}
 80011be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <Error_Handler+0x8>

080011c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ca:	4b15      	ldr	r3, [pc, #84]	@ (8001220 <HAL_MspInit+0x5c>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	4a14      	ldr	r2, [pc, #80]	@ (8001220 <HAL_MspInit+0x5c>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6193      	str	r3, [r2, #24]
 80011d6:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_MspInit+0x5c>)
 80011d8:	699b      	ldr	r3, [r3, #24]
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <HAL_MspInit+0x5c>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	@ (8001220 <HAL_MspInit+0x5c>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <HAL_MspInit+0x5c>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001224 <HAL_MspInit+0x60>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_MspInit+0x60>)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001216:	bf00      	nop
 8001218:	3714      	adds	r7, #20
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000

08001228 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a14      	ldr	r2, [pc, #80]	@ (8001294 <HAL_ADC_MspInit+0x6c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d121      	bne.n	800128c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_ADC_MspInit+0x70>)
 800124a:	699b      	ldr	r3, [r3, #24]
 800124c:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <HAL_ADC_MspInit+0x70>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001252:	6193      	str	r3, [r2, #24]
 8001254:	4b10      	ldr	r3, [pc, #64]	@ (8001298 <HAL_ADC_MspInit+0x70>)
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001260:	4b0d      	ldr	r3, [pc, #52]	@ (8001298 <HAL_ADC_MspInit+0x70>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a0c      	ldr	r2, [pc, #48]	@ (8001298 <HAL_ADC_MspInit+0x70>)
 8001266:	f043 0304 	orr.w	r3, r3, #4
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b0a      	ldr	r3, [pc, #40]	@ (8001298 <HAL_ADC_MspInit+0x70>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f003 0304 	and.w	r3, r3, #4
 8001274:	60bb      	str	r3, [r7, #8]
 8001276:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001278:	2310      	movs	r3, #16
 800127a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	4619      	mov	r1, r3
 8001286:	4805      	ldr	r0, [pc, #20]	@ (800129c <HAL_ADC_MspInit+0x74>)
 8001288:	f000 ff50 	bl	800212c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800128c:	bf00      	nop
 800128e:	3720      	adds	r7, #32
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40012400 	.word	0x40012400
 8001298:	40021000 	.word	0x40021000
 800129c:	40010800 	.word	0x40010800

080012a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a1f      	ldr	r2, [pc, #124]	@ (800132c <HAL_TIM_Base_MspInit+0x8c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d10c      	bne.n	80012cc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b1c      	ldr	r3, [pc, #112]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012ca:	e02a      	b.n	8001322 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a18      	ldr	r2, [pc, #96]	@ (8001334 <HAL_TIM_Base_MspInit+0x94>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d10c      	bne.n	80012f0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d6:	4b16      	ldr	r3, [pc, #88]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012d8:	69db      	ldr	r3, [r3, #28]
 80012da:	4a15      	ldr	r2, [pc, #84]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	61d3      	str	r3, [r2, #28]
 80012e2:	4b13      	ldr	r3, [pc, #76]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
}
 80012ee:	e018      	b.n	8001322 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a10      	ldr	r2, [pc, #64]	@ (8001338 <HAL_TIM_Base_MspInit+0x98>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d113      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	4b0a      	ldr	r3, [pc, #40]	@ (8001330 <HAL_TIM_Base_MspInit+0x90>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	f003 0304 	and.w	r3, r3, #4
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	201e      	movs	r0, #30
 8001318:	f000 fcbd 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800131c:	201e      	movs	r0, #30
 800131e:	f000 fcd6 	bl	8001cce <HAL_NVIC_EnableIRQ>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40012c00 	.word	0x40012c00
 8001330:	40021000 	.word	0x40021000
 8001334:	40000400 	.word	0x40000400
 8001338:	40000800 	.word	0x40000800

0800133c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <HAL_TIM_MspPostInit+0x88>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d12f      	bne.n	80013bc <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135c:	4b1a      	ldr	r3, [pc, #104]	@ (80013c8 <HAL_TIM_MspPostInit+0x8c>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a19      	ldr	r2, [pc, #100]	@ (80013c8 <HAL_TIM_MspPostInit+0x8c>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b17      	ldr	r3, [pc, #92]	@ (80013c8 <HAL_TIM_MspPostInit+0x8c>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001374:	4b14      	ldr	r3, [pc, #80]	@ (80013c8 <HAL_TIM_MspPostInit+0x8c>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a13      	ldr	r2, [pc, #76]	@ (80013c8 <HAL_TIM_MspPostInit+0x8c>)
 800137a:	f043 0308 	orr.w	r3, r3, #8
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <HAL_TIM_MspPostInit+0x8c>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0308 	and.w	r3, r3, #8
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = IN_U_Pin|IN_V_Pin;
 800138c:	23c0      	movs	r3, #192	@ 0xc0
 800138e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	4619      	mov	r1, r3
 800139e:	480b      	ldr	r0, [pc, #44]	@ (80013cc <HAL_TIM_MspPostInit+0x90>)
 80013a0:	f000 fec4 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_W_Pin;
 80013a4:	2301      	movs	r3, #1
 80013a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013ac:	2303      	movs	r3, #3
 80013ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IN_W_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	@ (80013d0 <HAL_TIM_MspPostInit+0x94>)
 80013b8:	f000 feb8 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40000400 	.word	0x40000400
 80013c8:	40021000 	.word	0x40021000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010c00 	.word	0x40010c00

080013d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b088      	sub	sp, #32
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013dc:	f107 0310 	add.w	r3, r7, #16
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a32      	ldr	r2, [pc, #200]	@ (80014b8 <HAL_UART_MspInit+0xe4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d15d      	bne.n	80014b0 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013f4:	4b31      	ldr	r3, [pc, #196]	@ (80014bc <HAL_UART_MspInit+0xe8>)
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	4a30      	ldr	r2, [pc, #192]	@ (80014bc <HAL_UART_MspInit+0xe8>)
 80013fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013fe:	61d3      	str	r3, [r2, #28]
 8001400:	4b2e      	ldr	r3, [pc, #184]	@ (80014bc <HAL_UART_MspInit+0xe8>)
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	4b2b      	ldr	r3, [pc, #172]	@ (80014bc <HAL_UART_MspInit+0xe8>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a2a      	ldr	r2, [pc, #168]	@ (80014bc <HAL_UART_MspInit+0xe8>)
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b28      	ldr	r3, [pc, #160]	@ (80014bc <HAL_UART_MspInit+0xe8>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001424:	2304      	movs	r3, #4
 8001426:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001428:	2302      	movs	r3, #2
 800142a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	4822      	ldr	r0, [pc, #136]	@ (80014c0 <HAL_UART_MspInit+0xec>)
 8001438:	f000 fe78 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800143c:	2308      	movs	r3, #8
 800143e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001448:	f107 0310 	add.w	r3, r7, #16
 800144c:	4619      	mov	r1, r3
 800144e:	481c      	ldr	r0, [pc, #112]	@ (80014c0 <HAL_UART_MspInit+0xec>)
 8001450:	f000 fe6c 	bl	800212c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001454:	4b1b      	ldr	r3, [pc, #108]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	@ (80014c8 <HAL_UART_MspInit+0xf4>)
 8001458:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 800145c:	2210      	movs	r2, #16
 800145e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001460:	4b18      	ldr	r3, [pc, #96]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001466:	4b17      	ldr	r3, [pc, #92]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001468:	2280      	movs	r2, #128	@ 0x80
 800146a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800146c:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001472:	4b14      	ldr	r3, [pc, #80]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001474:	2200      	movs	r2, #0
 8001476:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001478:	4b12      	ldr	r3, [pc, #72]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 800147a:	2220      	movs	r2, #32
 800147c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001480:	2200      	movs	r2, #0
 8001482:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001484:	480f      	ldr	r0, [pc, #60]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001486:	f000 fc3d 	bl	8001d04 <HAL_DMA_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001490:	f7ff fe92 	bl	80011b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 8001498:	639a      	str	r2, [r3, #56]	@ 0x38
 800149a:	4a0a      	ldr	r2, [pc, #40]	@ (80014c4 <HAL_UART_MspInit+0xf0>)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014a0:	2200      	movs	r2, #0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2026      	movs	r0, #38	@ 0x26
 80014a6:	f000 fbf6 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014aa:	2026      	movs	r0, #38	@ 0x26
 80014ac:	f000 fc0f 	bl	8001cce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014b0:	bf00      	nop
 80014b2:	3720      	adds	r7, #32
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40004400 	.word	0x40004400
 80014bc:	40021000 	.word	0x40021000
 80014c0:	40010800 	.word	0x40010800
 80014c4:	200001c8 	.word	0x200001c8
 80014c8:	40020080 	.word	0x40020080

080014cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <NMI_Handler+0x4>

080014d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <MemManage_Handler+0x4>

080014e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <BusFault_Handler+0x4>

080014ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f0:	bf00      	nop
 80014f2:	e7fd      	b.n	80014f0 <UsageFault_Handler+0x4>

080014f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001510:	bf00      	nop
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f892 	bl	8001644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001528:	4802      	ldr	r0, [pc, #8]	@ (8001534 <DMA1_Channel7_IRQHandler+0x10>)
 800152a:	f000 fcf9 	bl	8001f20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200001c8 	.word	0x200001c8

08001538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <TIM4_IRQHandler+0x10>)
 800153e:	f002 f841 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000138 	.word	0x20000138

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <USART2_IRQHandler+0x10>)
 8001552:	f003 f877 	bl	8004644 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000180 	.word	0x20000180

08001560 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800156c:	f7ff fff8 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001570:	480b      	ldr	r0, [pc, #44]	@ (80015a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001572:	490c      	ldr	r1, [pc, #48]	@ (80015a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001574:	4a0c      	ldr	r2, [pc, #48]	@ (80015a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001578:	e002      	b.n	8001580 <LoopCopyDataInit>

0800157a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800157a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800157c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800157e:	3304      	adds	r3, #4

08001580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001584:	d3f9      	bcc.n	800157a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001586:	4a09      	ldr	r2, [pc, #36]	@ (80015ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001588:	4c09      	ldr	r4, [pc, #36]	@ (80015b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800158a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800158c:	e001      	b.n	8001592 <LoopFillZerobss>

0800158e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800158e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001590:	3204      	adds	r2, #4

08001592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001594:	d3fb      	bcc.n	800158e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001596:	f003 fdc7 	bl	8005128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800159a:	f7ff fa7d 	bl	8000a98 <main>
  bx lr
 800159e:	4770      	bx	lr
  ldr r0, =_sdata
 80015a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015a8:	08005224 	.word	0x08005224
  ldr r2, =_sbss
 80015ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015b0:	20000248 	.word	0x20000248

080015b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015b4:	e7fe      	b.n	80015b4 <ADC1_2_IRQHandler>
	...

080015b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <HAL_Init+0x28>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_Init+0x28>)
 80015c2:	f043 0310 	orr.w	r3, r3, #16
 80015c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015c8:	2003      	movs	r0, #3
 80015ca:	f000 fb59 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ce:	200f      	movs	r0, #15
 80015d0:	f000 f808 	bl	80015e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d4:	f7ff fdf6 	bl	80011c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40022000 	.word	0x40022000

080015e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015ec:	4b12      	ldr	r3, [pc, #72]	@ (8001638 <HAL_InitTick+0x54>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b12      	ldr	r3, [pc, #72]	@ (800163c <HAL_InitTick+0x58>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80015fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001602:	4618      	mov	r0, r3
 8001604:	f000 fb71 	bl	8001cea <HAL_SYSTICK_Config>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e00e      	b.n	8001630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b0f      	cmp	r3, #15
 8001616:	d80a      	bhi.n	800162e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001618:	2200      	movs	r2, #0
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	f04f 30ff 	mov.w	r0, #4294967295
 8001620:	f000 fb39 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001624:	4a06      	ldr	r2, [pc, #24]	@ (8001640 <HAL_InitTick+0x5c>)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162a:	2300      	movs	r3, #0
 800162c:	e000      	b.n	8001630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000050 	.word	0x20000050
 800163c:	20000058 	.word	0x20000058
 8001640:	20000054 	.word	0x20000054

08001644 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <HAL_IncTick+0x1c>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	461a      	mov	r2, r3
 800164e:	4b05      	ldr	r3, [pc, #20]	@ (8001664 <HAL_IncTick+0x20>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a03      	ldr	r2, [pc, #12]	@ (8001664 <HAL_IncTick+0x20>)
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	bc80      	pop	{r7}
 800165e:	4770      	bx	lr
 8001660:	20000058 	.word	0x20000058
 8001664:	20000244 	.word	0x20000244

08001668 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return uwTick;
 800166c:	4b02      	ldr	r3, [pc, #8]	@ (8001678 <HAL_GetTick+0x10>)
 800166e:	681b      	ldr	r3, [r3, #0]
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bc80      	pop	{r7}
 8001676:	4770      	bx	lr
 8001678:	20000244 	.word	0x20000244

0800167c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001684:	f7ff fff0 	bl	8001668 <HAL_GetTick>
 8001688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	d005      	beq.n	80016a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001696:	4b0a      	ldr	r3, [pc, #40]	@ (80016c0 <HAL_Delay+0x44>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	461a      	mov	r2, r3
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016a2:	bf00      	nop
 80016a4:	f7ff ffe0 	bl	8001668 <HAL_GetTick>
 80016a8:	4602      	mov	r2, r0
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d8f7      	bhi.n	80016a4 <HAL_Delay+0x28>
  {
  }
}
 80016b4:	bf00      	nop
 80016b6:	bf00      	nop
 80016b8:	3710      	adds	r7, #16
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	20000058 	.word	0x20000058

080016c4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016cc:	2300      	movs	r3, #0
 80016ce:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0be      	b.n	8001864 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d109      	bne.n	8001708 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff fd90 	bl	8001228 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f000 f9ab 	bl	8001a64 <ADC_ConversionStop_Disable>
 800170e:	4603      	mov	r3, r0
 8001710:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001716:	f003 0310 	and.w	r3, r3, #16
 800171a:	2b00      	cmp	r3, #0
 800171c:	f040 8099 	bne.w	8001852 <HAL_ADC_Init+0x18e>
 8001720:	7dfb      	ldrb	r3, [r7, #23]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f040 8095 	bne.w	8001852 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001730:	f023 0302 	bic.w	r3, r3, #2
 8001734:	f043 0202 	orr.w	r2, r3, #2
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001744:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800174c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	4313      	orrs	r3, r2
 8001752:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800175c:	d003      	beq.n	8001766 <HAL_ADC_Init+0xa2>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d102      	bne.n	800176c <HAL_ADC_Init+0xa8>
 8001766:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800176a:	e000      	b.n	800176e <HAL_ADC_Init+0xaa>
 800176c:	2300      	movs	r3, #0
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	7d1b      	ldrb	r3, [r3, #20]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d119      	bne.n	80017b0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d109      	bne.n	8001798 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	3b01      	subs	r3, #1
 800178a:	035a      	lsls	r2, r3, #13
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	e00b      	b.n	80017b0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	f043 0220 	orr.w	r2, r3, #32
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a8:	f043 0201 	orr.w	r2, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	4b28      	ldr	r3, [pc, #160]	@ (800186c <HAL_ADC_Init+0x1a8>)
 80017cc:	4013      	ands	r3, r2
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	430b      	orrs	r3, r1
 80017d6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017e0:	d003      	beq.n	80017ea <HAL_ADC_Init+0x126>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d104      	bne.n	80017f4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	051b      	lsls	r3, r3, #20
 80017f2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fa:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	4b18      	ldr	r3, [pc, #96]	@ (8001870 <HAL_ADC_Init+0x1ac>)
 8001810:	4013      	ands	r3, r2
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d10b      	bne.n	8001830 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	f043 0201 	orr.w	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800182e:	e018      	b.n	8001862 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001834:	f023 0312 	bic.w	r3, r3, #18
 8001838:	f043 0210 	orr.w	r2, r3, #16
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001850:	e007      	b.n	8001862 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001862:	7dfb      	ldrb	r3, [r7, #23]
}
 8001864:	4618      	mov	r0, r3
 8001866:	3718      	adds	r7, #24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	ffe1f7fd 	.word	0xffe1f7fd
 8001870:	ff1f0efe 	.word	0xff1f0efe

08001874 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x20>
 8001890:	2302      	movs	r3, #2
 8001892:	e0dc      	b.n	8001a4e <HAL_ADC_ConfigChannel+0x1da>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d81c      	bhi.n	80018de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	4613      	mov	r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	3b05      	subs	r3, #5
 80018b6:	221f      	movs	r2, #31
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	4019      	ands	r1, r3
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	6818      	ldr	r0, [r3, #0]
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4613      	mov	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	4413      	add	r3, r2
 80018ce:	3b05      	subs	r3, #5
 80018d0:	fa00 f203 	lsl.w	r2, r0, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	430a      	orrs	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34
 80018dc:	e03c      	b.n	8001958 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	d81c      	bhi.n	8001920 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	4613      	mov	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	4413      	add	r3, r2
 80018f6:	3b23      	subs	r3, #35	@ 0x23
 80018f8:	221f      	movs	r2, #31
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	4019      	ands	r1, r3
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6818      	ldr	r0, [r3, #0]
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3b23      	subs	r3, #35	@ 0x23
 8001912:	fa00 f203 	lsl.w	r2, r0, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	430a      	orrs	r2, r1
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
 800191e:	e01b      	b.n	8001958 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b41      	subs	r3, #65	@ 0x41
 8001932:	221f      	movs	r2, #31
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43db      	mvns	r3, r3
 800193a:	4019      	ands	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b41      	subs	r3, #65	@ 0x41
 800194c:	fa00 f203 	lsl.w	r2, r0, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b09      	cmp	r3, #9
 800195e:	d91c      	bls.n	800199a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68d9      	ldr	r1, [r3, #12]
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	4613      	mov	r3, r2
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	3b1e      	subs	r3, #30
 8001972:	2207      	movs	r2, #7
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	4019      	ands	r1, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	6898      	ldr	r0, [r3, #8]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	3b1e      	subs	r3, #30
 800198c:	fa00 f203 	lsl.w	r2, r0, r3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	60da      	str	r2, [r3, #12]
 8001998:	e019      	b.n	80019ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6919      	ldr	r1, [r3, #16]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4613      	mov	r3, r2
 80019a6:	005b      	lsls	r3, r3, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	2207      	movs	r2, #7
 80019ac:	fa02 f303 	lsl.w	r3, r2, r3
 80019b0:	43db      	mvns	r3, r3
 80019b2:	4019      	ands	r1, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6898      	ldr	r0, [r3, #8]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	fa00 f203 	lsl.w	r2, r0, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b10      	cmp	r3, #16
 80019d4:	d003      	beq.n	80019de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019da:	2b11      	cmp	r3, #17
 80019dc:	d132      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <HAL_ADC_ConfigChannel+0x1e4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d125      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d126      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a04:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b10      	cmp	r3, #16
 8001a0c:	d11a      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0e:	4b13      	ldr	r3, [pc, #76]	@ (8001a5c <HAL_ADC_ConfigChannel+0x1e8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	0c9a      	lsrs	r2, r3, #18
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	005b      	lsls	r3, r3, #1
 8001a22:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a24:	e002      	b.n	8001a2c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f9      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x1b2>
 8001a32:	e007      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	f043 0220 	orr.w	r2, r3, #32
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3714      	adds	r7, #20
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr
 8001a58:	40012400 	.word	0x40012400
 8001a5c:	20000050 	.word	0x20000050
 8001a60:	431bde83 	.word	0x431bde83

08001a64 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d12e      	bne.n	8001adc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	689a      	ldr	r2, [r3, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 0201 	bic.w	r2, r2, #1
 8001a8c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a8e:	f7ff fdeb 	bl	8001668 <HAL_GetTick>
 8001a92:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001a94:	e01b      	b.n	8001ace <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001a96:	f7ff fde7 	bl	8001668 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d914      	bls.n	8001ace <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d10d      	bne.n	8001ace <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e007      	b.n	8001ade <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d0dc      	beq.n	8001a96 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	@ (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bc80      	pop	{r7}
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	@ (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bc80      	pop	{r7}
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4906      	ldr	r1, [pc, #24]	@ (8001b80 <__NVIC_EnableIRQ+0x34>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bc80      	pop	{r7}
 8001b7e:	4770      	bx	lr
 8001b80:	e000e100 	.word	0xe000e100

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bc80      	pop	{r7}
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff90 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	@ (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff2d 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff42 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff90 	bl	8001bd8 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5f 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff35 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e043      	b.n	8001da2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b22      	ldr	r3, [pc, #136]	@ (8001dac <HAL_DMA_Init+0xa8>)
 8001d22:	4413      	add	r3, r2
 8001d24:	4a22      	ldr	r2, [pc, #136]	@ (8001db0 <HAL_DMA_Init+0xac>)
 8001d26:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	009a      	lsls	r2, r3, #2
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a1f      	ldr	r2, [pc, #124]	@ (8001db4 <HAL_DMA_Init+0xb0>)
 8001d36:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001d4e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001d52:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001d5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr
 8001dac:	bffdfff8 	.word	0xbffdfff8
 8001db0:	cccccccd 	.word	0xcccccccd
 8001db4:	40020000 	.word	0x40020000

08001db8 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d008      	beq.n	8001de2 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e020      	b.n	8001e24 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 020e 	bic.w	r2, r2, #14
 8001df0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0201 	bic.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2201      	movs	r2, #1
 8001e16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d005      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	73fb      	strb	r3, [r7, #15]
 8001e52:	e051      	b.n	8001ef8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f022 020e 	bic.w	r2, r2, #14
 8001e62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a22      	ldr	r2, [pc, #136]	@ (8001f04 <HAL_DMA_Abort_IT+0xd4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d029      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0xa2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a21      	ldr	r2, [pc, #132]	@ (8001f08 <HAL_DMA_Abort_IT+0xd8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d022      	beq.n	8001ece <HAL_DMA_Abort_IT+0x9e>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f0c <HAL_DMA_Abort_IT+0xdc>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d01a      	beq.n	8001ec8 <HAL_DMA_Abort_IT+0x98>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_DMA_Abort_IT+0xe0>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d012      	beq.n	8001ec2 <HAL_DMA_Abort_IT+0x92>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_DMA_Abort_IT+0xe4>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00a      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x8c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_DMA_Abort_IT+0xe8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d102      	bne.n	8001eb6 <HAL_DMA_Abort_IT+0x86>
 8001eb0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001eb4:	e00e      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xa4>
 8001eb6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eba:	e00b      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xa4>
 8001ebc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ec0:	e008      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xa4>
 8001ec2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ec6:	e005      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xa4>
 8001ec8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ecc:	e002      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xa4>
 8001ece:	2310      	movs	r3, #16
 8001ed0:	e000      	b.n	8001ed4 <HAL_DMA_Abort_IT+0xa4>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_DMA_Abort_IT+0xec>)
 8001ed6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
    } 
  }
  return status;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40020008 	.word	0x40020008
 8001f08:	4002001c 	.word	0x4002001c
 8001f0c:	40020030 	.word	0x40020030
 8001f10:	40020044 	.word	0x40020044
 8001f14:	40020058 	.word	0x40020058
 8001f18:	4002006c 	.word	0x4002006c
 8001f1c:	40020000 	.word	0x40020000

08001f20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d04f      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xc8>
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04a      	beq.n	8001fe8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d107      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0204 	bic.w	r2, r2, #4
 8001f6e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a66      	ldr	r2, [pc, #408]	@ (8002110 <HAL_DMA_IRQHandler+0x1f0>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d029      	beq.n	8001fce <HAL_DMA_IRQHandler+0xae>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a65      	ldr	r2, [pc, #404]	@ (8002114 <HAL_DMA_IRQHandler+0x1f4>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d022      	beq.n	8001fca <HAL_DMA_IRQHandler+0xaa>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a63      	ldr	r2, [pc, #396]	@ (8002118 <HAL_DMA_IRQHandler+0x1f8>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0xa4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a62      	ldr	r2, [pc, #392]	@ (800211c <HAL_DMA_IRQHandler+0x1fc>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d012      	beq.n	8001fbe <HAL_DMA_IRQHandler+0x9e>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a60      	ldr	r2, [pc, #384]	@ (8002120 <HAL_DMA_IRQHandler+0x200>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d00a      	beq.n	8001fb8 <HAL_DMA_IRQHandler+0x98>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8002124 <HAL_DMA_IRQHandler+0x204>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d102      	bne.n	8001fb2 <HAL_DMA_IRQHandler+0x92>
 8001fac:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001fb0:	e00e      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fb2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001fb6:	e00b      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fb8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fbc:	e008      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001fc2:	e005      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fc8:	e002      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fca:	2340      	movs	r3, #64	@ 0x40
 8001fcc:	e000      	b.n	8001fd0 <HAL_DMA_IRQHandler+0xb0>
 8001fce:	2304      	movs	r3, #4
 8001fd0:	4a55      	ldr	r2, [pc, #340]	@ (8002128 <HAL_DMA_IRQHandler+0x208>)
 8001fd2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8094 	beq.w	8002106 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe6:	e08e      	b.n	8002106 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	2202      	movs	r2, #2
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d056      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x186>
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d051      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10b      	bne.n	8002028 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 020a 	bic.w	r2, r2, #10
 800201e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a38      	ldr	r2, [pc, #224]	@ (8002110 <HAL_DMA_IRQHandler+0x1f0>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d029      	beq.n	8002086 <HAL_DMA_IRQHandler+0x166>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a37      	ldr	r2, [pc, #220]	@ (8002114 <HAL_DMA_IRQHandler+0x1f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <HAL_DMA_IRQHandler+0x162>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a35      	ldr	r2, [pc, #212]	@ (8002118 <HAL_DMA_IRQHandler+0x1f8>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01a      	beq.n	800207c <HAL_DMA_IRQHandler+0x15c>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a34      	ldr	r2, [pc, #208]	@ (800211c <HAL_DMA_IRQHandler+0x1fc>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d012      	beq.n	8002076 <HAL_DMA_IRQHandler+0x156>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a32      	ldr	r2, [pc, #200]	@ (8002120 <HAL_DMA_IRQHandler+0x200>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00a      	beq.n	8002070 <HAL_DMA_IRQHandler+0x150>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_DMA_IRQHandler+0x204>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d102      	bne.n	800206a <HAL_DMA_IRQHandler+0x14a>
 8002064:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002068:	e00e      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 800206a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800206e:	e00b      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002070:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002074:	e008      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800207a:	e005      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 800207c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002080:	e002      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002082:	2320      	movs	r3, #32
 8002084:	e000      	b.n	8002088 <HAL_DMA_IRQHandler+0x168>
 8002086:	2302      	movs	r3, #2
 8002088:	4a27      	ldr	r2, [pc, #156]	@ (8002128 <HAL_DMA_IRQHandler+0x208>)
 800208a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002098:	2b00      	cmp	r3, #0
 800209a:	d034      	beq.n	8002106 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80020a4:	e02f      	b.n	8002106 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2208      	movs	r2, #8
 80020ac:	409a      	lsls	r2, r3
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	4013      	ands	r3, r2
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d028      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1e8>
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d023      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 020e 	bic.w	r2, r2, #14
 80020ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
    }
  }
  return;
 8002106:	bf00      	nop
 8002108:	bf00      	nop
}
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40020008 	.word	0x40020008
 8002114:	4002001c 	.word	0x4002001c
 8002118:	40020030 	.word	0x40020030
 800211c:	40020044 	.word	0x40020044
 8002120:	40020058 	.word	0x40020058
 8002124:	4002006c 	.word	0x4002006c
 8002128:	40020000 	.word	0x40020000

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b08b      	sub	sp, #44	@ 0x2c
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213e:	e169      	b.n	8002414 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002140:	2201      	movs	r2, #1
 8002142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	429a      	cmp	r2, r3
 800215a:	f040 8158 	bne.w	800240e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	4a9a      	ldr	r2, [pc, #616]	@ (80023cc <HAL_GPIO_Init+0x2a0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d05e      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002168:	4a98      	ldr	r2, [pc, #608]	@ (80023cc <HAL_GPIO_Init+0x2a0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d875      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800216e:	4a98      	ldr	r2, [pc, #608]	@ (80023d0 <HAL_GPIO_Init+0x2a4>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d058      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002174:	4a96      	ldr	r2, [pc, #600]	@ (80023d0 <HAL_GPIO_Init+0x2a4>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d86f      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800217a:	4a96      	ldr	r2, [pc, #600]	@ (80023d4 <HAL_GPIO_Init+0x2a8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d052      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002180:	4a94      	ldr	r2, [pc, #592]	@ (80023d4 <HAL_GPIO_Init+0x2a8>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d869      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 8002186:	4a94      	ldr	r2, [pc, #592]	@ (80023d8 <HAL_GPIO_Init+0x2ac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d04c      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 800218c:	4a92      	ldr	r2, [pc, #584]	@ (80023d8 <HAL_GPIO_Init+0x2ac>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d863      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 8002192:	4a92      	ldr	r2, [pc, #584]	@ (80023dc <HAL_GPIO_Init+0x2b0>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d046      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
 8002198:	4a90      	ldr	r2, [pc, #576]	@ (80023dc <HAL_GPIO_Init+0x2b0>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d85d      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d82a      	bhi.n	80021f8 <HAL_GPIO_Init+0xcc>
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d859      	bhi.n	800225a <HAL_GPIO_Init+0x12e>
 80021a6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ac <HAL_GPIO_Init+0x80>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	08002227 	.word	0x08002227
 80021b0:	08002201 	.word	0x08002201
 80021b4:	08002213 	.word	0x08002213
 80021b8:	08002255 	.word	0x08002255
 80021bc:	0800225b 	.word	0x0800225b
 80021c0:	0800225b 	.word	0x0800225b
 80021c4:	0800225b 	.word	0x0800225b
 80021c8:	0800225b 	.word	0x0800225b
 80021cc:	0800225b 	.word	0x0800225b
 80021d0:	0800225b 	.word	0x0800225b
 80021d4:	0800225b 	.word	0x0800225b
 80021d8:	0800225b 	.word	0x0800225b
 80021dc:	0800225b 	.word	0x0800225b
 80021e0:	0800225b 	.word	0x0800225b
 80021e4:	0800225b 	.word	0x0800225b
 80021e8:	0800225b 	.word	0x0800225b
 80021ec:	0800225b 	.word	0x0800225b
 80021f0:	08002209 	.word	0x08002209
 80021f4:	0800221d 	.word	0x0800221d
 80021f8:	4a79      	ldr	r2, [pc, #484]	@ (80023e0 <HAL_GPIO_Init+0x2b4>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d013      	beq.n	8002226 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fe:	e02c      	b.n	800225a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	623b      	str	r3, [r7, #32]
          break;
 8002206:	e029      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	3304      	adds	r3, #4
 800220e:	623b      	str	r3, [r7, #32]
          break;
 8002210:	e024      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	3308      	adds	r3, #8
 8002218:	623b      	str	r3, [r7, #32]
          break;
 800221a:	e01f      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	330c      	adds	r3, #12
 8002222:	623b      	str	r3, [r7, #32]
          break;
 8002224:	e01a      	b.n	800225c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d102      	bne.n	8002234 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222e:	2304      	movs	r3, #4
 8002230:	623b      	str	r3, [r7, #32]
          break;
 8002232:	e013      	b.n	800225c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d105      	bne.n	8002248 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800223c:	2308      	movs	r3, #8
 800223e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69fa      	ldr	r2, [r7, #28]
 8002244:	611a      	str	r2, [r3, #16]
          break;
 8002246:	e009      	b.n	800225c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002248:	2308      	movs	r3, #8
 800224a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	615a      	str	r2, [r3, #20]
          break;
 8002252:	e003      	b.n	800225c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002254:	2300      	movs	r3, #0
 8002256:	623b      	str	r3, [r7, #32]
          break;
 8002258:	e000      	b.n	800225c <HAL_GPIO_Init+0x130>
          break;
 800225a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2bff      	cmp	r3, #255	@ 0xff
 8002260:	d801      	bhi.n	8002266 <HAL_GPIO_Init+0x13a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	e001      	b.n	800226a <HAL_GPIO_Init+0x13e>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3304      	adds	r3, #4
 800226a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2bff      	cmp	r3, #255	@ 0xff
 8002270:	d802      	bhi.n	8002278 <HAL_GPIO_Init+0x14c>
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	e002      	b.n	800227e <HAL_GPIO_Init+0x152>
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	3b08      	subs	r3, #8
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	210f      	movs	r1, #15
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	fa01 f303 	lsl.w	r3, r1, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	401a      	ands	r2, r3
 8002290:	6a39      	ldr	r1, [r7, #32]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	fa01 f303 	lsl.w	r3, r1, r3
 8002298:	431a      	orrs	r2, r3
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80b1 	beq.w	800240e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022ac:	4b4d      	ldr	r3, [pc, #308]	@ (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	4a4c      	ldr	r2, [pc, #304]	@ (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022b2:	f043 0301 	orr.w	r3, r3, #1
 80022b6:	6193      	str	r3, [r2, #24]
 80022b8:	4b4a      	ldr	r3, [pc, #296]	@ (80023e4 <HAL_GPIO_Init+0x2b8>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
 80022c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c4:	4a48      	ldr	r2, [pc, #288]	@ (80023e8 <HAL_GPIO_Init+0x2bc>)
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	089b      	lsrs	r3, r3, #2
 80022ca:	3302      	adds	r3, #2
 80022cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	220f      	movs	r2, #15
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	68fa      	ldr	r2, [r7, #12]
 80022e4:	4013      	ands	r3, r2
 80022e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a40      	ldr	r2, [pc, #256]	@ (80023ec <HAL_GPIO_Init+0x2c0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <HAL_GPIO_Init+0x1ec>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a3f      	ldr	r2, [pc, #252]	@ (80023f0 <HAL_GPIO_Init+0x2c4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00d      	beq.n	8002314 <HAL_GPIO_Init+0x1e8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a3e      	ldr	r2, [pc, #248]	@ (80023f4 <HAL_GPIO_Init+0x2c8>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <HAL_GPIO_Init+0x1e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a3d      	ldr	r2, [pc, #244]	@ (80023f8 <HAL_GPIO_Init+0x2cc>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_GPIO_Init+0x1e0>
 8002308:	2303      	movs	r3, #3
 800230a:	e006      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 800230c:	2304      	movs	r3, #4
 800230e:	e004      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002310:	2302      	movs	r3, #2
 8002312:	e002      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002314:	2301      	movs	r3, #1
 8002316:	e000      	b.n	800231a <HAL_GPIO_Init+0x1ee>
 8002318:	2300      	movs	r3, #0
 800231a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800231c:	f002 0203 	and.w	r2, r2, #3
 8002320:	0092      	lsls	r2, r2, #2
 8002322:	4093      	lsls	r3, r2
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232a:	492f      	ldr	r1, [pc, #188]	@ (80023e8 <HAL_GPIO_Init+0x2bc>)
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	089b      	lsrs	r3, r3, #2
 8002330:	3302      	adds	r3, #2
 8002332:	68fa      	ldr	r2, [r7, #12]
 8002334:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d006      	beq.n	8002352 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002344:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 8002346:	689a      	ldr	r2, [r3, #8]
 8002348:	492c      	ldr	r1, [pc, #176]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]
 8002350:	e006      	b.n	8002360 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002352:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	43db      	mvns	r3, r3
 800235a:	4928      	ldr	r1, [pc, #160]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 800235c:	4013      	ands	r3, r2
 800235e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d006      	beq.n	800237a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800236c:	4b23      	ldr	r3, [pc, #140]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	4922      	ldr	r1, [pc, #136]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	4313      	orrs	r3, r2
 8002376:	60cb      	str	r3, [r1, #12]
 8002378:	e006      	b.n	8002388 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237a:	4b20      	ldr	r3, [pc, #128]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 800237c:	68da      	ldr	r2, [r3, #12]
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	43db      	mvns	r3, r3
 8002382:	491e      	ldr	r1, [pc, #120]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 8002384:	4013      	ands	r3, r2
 8002386:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d006      	beq.n	80023a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002394:	4b19      	ldr	r3, [pc, #100]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	4918      	ldr	r1, [pc, #96]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	604b      	str	r3, [r1, #4]
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 80023a4:	685a      	ldr	r2, [r3, #4]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	4914      	ldr	r1, [pc, #80]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d021      	beq.n	8002400 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023bc:	4b0f      	ldr	r3, [pc, #60]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	490e      	ldr	r1, [pc, #56]	@ (80023fc <HAL_GPIO_Init+0x2d0>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e021      	b.n	800240e <HAL_GPIO_Init+0x2e2>
 80023ca:	bf00      	nop
 80023cc:	10320000 	.word	0x10320000
 80023d0:	10310000 	.word	0x10310000
 80023d4:	10220000 	.word	0x10220000
 80023d8:	10210000 	.word	0x10210000
 80023dc:	10120000 	.word	0x10120000
 80023e0:	10110000 	.word	0x10110000
 80023e4:	40021000 	.word	0x40021000
 80023e8:	40010000 	.word	0x40010000
 80023ec:	40010800 	.word	0x40010800
 80023f0:	40010c00 	.word	0x40010c00
 80023f4:	40011000 	.word	0x40011000
 80023f8:	40011400 	.word	0x40011400
 80023fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002400:	4b0b      	ldr	r3, [pc, #44]	@ (8002430 <HAL_GPIO_Init+0x304>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	43db      	mvns	r3, r3
 8002408:	4909      	ldr	r1, [pc, #36]	@ (8002430 <HAL_GPIO_Init+0x304>)
 800240a:	4013      	ands	r3, r2
 800240c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800240e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002410:	3301      	adds	r3, #1
 8002412:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241a:	fa22 f303 	lsr.w	r3, r2, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f ae8e 	bne.w	8002140 <HAL_GPIO_Init+0x14>
  }
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	372c      	adds	r7, #44	@ 0x2c
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40010400 	.word	0x40010400

08002434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
 8002440:	4613      	mov	r3, r2
 8002442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002450:	e003      	b.n	800245a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e272      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	f000 8087 	beq.w	8002592 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002484:	4b92      	ldr	r3, [pc, #584]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f003 030c 	and.w	r3, r3, #12
 800248c:	2b04      	cmp	r3, #4
 800248e:	d00c      	beq.n	80024aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002490:	4b8f      	ldr	r3, [pc, #572]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d112      	bne.n	80024c2 <HAL_RCC_OscConfig+0x5e>
 800249c:	4b8c      	ldr	r3, [pc, #560]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a8:	d10b      	bne.n	80024c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024aa:	4b89      	ldr	r3, [pc, #548]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d06c      	beq.n	8002590 <HAL_RCC_OscConfig+0x12c>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d168      	bne.n	8002590 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e24c      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x76>
 80024cc:	4b80      	ldr	r3, [pc, #512]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a7f      	ldr	r2, [pc, #508]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	e02e      	b.n	8002538 <HAL_RCC_OscConfig+0xd4>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x98>
 80024e2:	4b7b      	ldr	r3, [pc, #492]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a7a      	ldr	r2, [pc, #488]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b78      	ldr	r3, [pc, #480]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a77      	ldr	r2, [pc, #476]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e01d      	b.n	8002538 <HAL_RCC_OscConfig+0xd4>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002504:	d10c      	bne.n	8002520 <HAL_RCC_OscConfig+0xbc>
 8002506:	4b72      	ldr	r3, [pc, #456]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a71      	ldr	r2, [pc, #452]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800250c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	4b6f      	ldr	r3, [pc, #444]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6e      	ldr	r2, [pc, #440]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0xd4>
 8002520:	4b6b      	ldr	r3, [pc, #428]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a6a      	ldr	r2, [pc, #424]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002526:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	4b68      	ldr	r3, [pc, #416]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a67      	ldr	r2, [pc, #412]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002532:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002536:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d013      	beq.n	8002568 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002540:	f7ff f892 	bl	8001668 <HAL_GetTick>
 8002544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002548:	f7ff f88e 	bl	8001668 <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b64      	cmp	r3, #100	@ 0x64
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e200      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	4b5d      	ldr	r3, [pc, #372]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0f0      	beq.n	8002548 <HAL_RCC_OscConfig+0xe4>
 8002566:	e014      	b.n	8002592 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002568:	f7ff f87e 	bl	8001668 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002570:	f7ff f87a 	bl	8001668 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	@ 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e1ec      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002582:	4b53      	ldr	r3, [pc, #332]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x10c>
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002590:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d063      	beq.n	8002666 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259e:	4b4c      	ldr	r3, [pc, #304]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f003 030c 	and.w	r3, r3, #12
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00b      	beq.n	80025c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80025aa:	4b49      	ldr	r3, [pc, #292]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f003 030c 	and.w	r3, r3, #12
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d11c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x18c>
 80025b6:	4b46      	ldr	r3, [pc, #280]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d116      	bne.n	80025f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x176>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e1c0      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025da:	4b3d      	ldr	r3, [pc, #244]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	4939      	ldr	r1, [pc, #228]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ee:	e03a      	b.n	8002666 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d020      	beq.n	800263a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 80025fa:	2201      	movs	r2, #1
 80025fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fe:	f7ff f833 	bl	8001668 <HAL_GetTick>
 8002602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	e008      	b.n	8002618 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002606:	f7ff f82f 	bl	8001668 <HAL_GetTick>
 800260a:	4602      	mov	r2, r0
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e1a1      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002618:	4b2d      	ldr	r3, [pc, #180]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d0f0      	beq.n	8002606 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002624:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4927      	ldr	r1, [pc, #156]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]
 8002638:	e015      	b.n	8002666 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263a:	4b26      	ldr	r3, [pc, #152]	@ (80026d4 <HAL_RCC_OscConfig+0x270>)
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002640:	f7ff f812 	bl	8001668 <HAL_GetTick>
 8002644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002648:	f7ff f80e 	bl	8001668 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e180      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265a:	4b1d      	ldr	r3, [pc, #116]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0302 	and.w	r3, r3, #2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0308 	and.w	r3, r3, #8
 800266e:	2b00      	cmp	r3, #0
 8002670:	d03a      	beq.n	80026e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	699b      	ldr	r3, [r3, #24]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d019      	beq.n	80026ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267a:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 800267c:	2201      	movs	r2, #1
 800267e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fe fff2 	bl	8001668 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002688:	f7fe ffee 	bl	8001668 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e160      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269a:	4b0d      	ldr	r3, [pc, #52]	@ (80026d0 <HAL_RCC_OscConfig+0x26c>)
 800269c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80026a6:	2001      	movs	r0, #1
 80026a8:	f000 face 	bl	8002c48 <RCC_Delay>
 80026ac:	e01c      	b.n	80026e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ae:	4b0a      	ldr	r3, [pc, #40]	@ (80026d8 <HAL_RCC_OscConfig+0x274>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b4:	f7fe ffd8 	bl	8001668 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ba:	e00f      	b.n	80026dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026bc:	f7fe ffd4 	bl	8001668 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b02      	cmp	r3, #2
 80026c8:	d908      	bls.n	80026dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e146      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	42420000 	.word	0x42420000
 80026d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026dc:	4b92      	ldr	r3, [pc, #584]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1e9      	bne.n	80026bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a6 	beq.w	8002842 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f6:	2300      	movs	r3, #0
 80026f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026fa:	4b8b      	ldr	r3, [pc, #556]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	69db      	ldr	r3, [r3, #28]
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10d      	bne.n	8002722 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002706:	4b88      	ldr	r3, [pc, #544]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4a87      	ldr	r2, [pc, #540]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002710:	61d3      	str	r3, [r2, #28]
 8002712:	4b85      	ldr	r3, [pc, #532]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b82      	ldr	r3, [pc, #520]	@ (800292c <HAL_RCC_OscConfig+0x4c8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272e:	4b7f      	ldr	r3, [pc, #508]	@ (800292c <HAL_RCC_OscConfig+0x4c8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7e      	ldr	r2, [pc, #504]	@ (800292c <HAL_RCC_OscConfig+0x4c8>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273a:	f7fe ff95 	bl	8001668 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7fe ff91 	bl	8001668 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	@ 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e103      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b75      	ldr	r3, [pc, #468]	@ (800292c <HAL_RCC_OscConfig+0x4c8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x312>
 8002768:	4b6f      	ldr	r3, [pc, #444]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	4a6e      	ldr	r2, [pc, #440]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6213      	str	r3, [r2, #32]
 8002774:	e02d      	b.n	80027d2 <HAL_RCC_OscConfig+0x36e>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x334>
 800277e:	4b6a      	ldr	r3, [pc, #424]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	4a69      	ldr	r2, [pc, #420]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6213      	str	r3, [r2, #32]
 800278a:	4b67      	ldr	r3, [pc, #412]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	4a66      	ldr	r2, [pc, #408]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	6213      	str	r3, [r2, #32]
 8002796:	e01c      	b.n	80027d2 <HAL_RCC_OscConfig+0x36e>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b05      	cmp	r3, #5
 800279e:	d10c      	bne.n	80027ba <HAL_RCC_OscConfig+0x356>
 80027a0:	4b61      	ldr	r3, [pc, #388]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	4a60      	ldr	r2, [pc, #384]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6213      	str	r3, [r2, #32]
 80027ac:	4b5e      	ldr	r3, [pc, #376]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	f043 0301 	orr.w	r3, r3, #1
 80027b6:	6213      	str	r3, [r2, #32]
 80027b8:	e00b      	b.n	80027d2 <HAL_RCC_OscConfig+0x36e>
 80027ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	4a5a      	ldr	r2, [pc, #360]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	6213      	str	r3, [r2, #32]
 80027c6:	4b58      	ldr	r3, [pc, #352]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4a57      	ldr	r2, [pc, #348]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027cc:	f023 0304 	bic.w	r3, r3, #4
 80027d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d015      	beq.n	8002806 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027da:	f7fe ff45 	bl	8001668 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e0:	e00a      	b.n	80027f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027e2:	f7fe ff41 	bl	8001668 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e0b1      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027f8:	4b4b      	ldr	r3, [pc, #300]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ee      	beq.n	80027e2 <HAL_RCC_OscConfig+0x37e>
 8002804:	e014      	b.n	8002830 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002806:	f7fe ff2f 	bl	8001668 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280e:	f7fe ff2b 	bl	8001668 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281c:	4293      	cmp	r3, r2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e09b      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002824:	4b40      	ldr	r3, [pc, #256]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002830:	7dfb      	ldrb	r3, [r7, #23]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002836:	4b3c      	ldr	r3, [pc, #240]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	4a3b      	ldr	r2, [pc, #236]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002840:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8087 	beq.w	800295a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800284c:	4b36      	ldr	r3, [pc, #216]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b08      	cmp	r3, #8
 8002856:	d061      	beq.n	800291c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d146      	bne.n	80028ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	4b33      	ldr	r3, [pc, #204]	@ (8002930 <HAL_RCC_OscConfig+0x4cc>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe feff 	bl	8001668 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286e:	f7fe fefb 	bl	8001668 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e06d      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002880:	4b29      	ldr	r3, [pc, #164]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002894:	d108      	bne.n	80028a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002896:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4921      	ldr	r1, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a19      	ldr	r1, [r3, #32]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028b8:	430b      	orrs	r3, r1
 80028ba:	491b      	ldr	r1, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028c2:	2201      	movs	r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c6:	f7fe fecf 	bl	8001668 <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ce:	f7fe fecb 	bl	8001668 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e03d      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028e0:	4b11      	ldr	r3, [pc, #68]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCC_OscConfig+0x46a>
 80028ec:	e035      	b.n	800295a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ee:	4b10      	ldr	r3, [pc, #64]	@ (8002930 <HAL_RCC_OscConfig+0x4cc>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f4:	f7fe feb8 	bl	8001668 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe feb4 	bl	8001668 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e026      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x498>
 800291a:	e01e      	b.n	800295a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d107      	bne.n	8002934 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e019      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
 8002928:	40021000 	.word	0x40021000
 800292c:	40007000 	.word	0x40007000
 8002930:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <HAL_RCC_OscConfig+0x500>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6a1b      	ldr	r3, [r3, #32]
 8002944:	429a      	cmp	r2, r3
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000

08002968 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0d0      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b6a      	ldr	r3, [pc, #424]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d910      	bls.n	80029ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b67      	ldr	r3, [pc, #412]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f023 0207 	bic.w	r2, r3, #7
 8002992:	4965      	ldr	r1, [pc, #404]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299a:	4b63      	ldr	r3, [pc, #396]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	683a      	ldr	r2, [r7, #0]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d001      	beq.n	80029ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e0b8      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d020      	beq.n	80029fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d005      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029c4:	4b59      	ldr	r3, [pc, #356]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a58      	ldr	r2, [pc, #352]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d005      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029dc:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a52      	ldr	r2, [pc, #328]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e8:	4b50      	ldr	r3, [pc, #320]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	494d      	ldr	r1, [pc, #308]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d040      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0e:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d115      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e07f      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b41      	ldr	r3, [pc, #260]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e073      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b3d      	ldr	r3, [pc, #244]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e06b      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	4b39      	ldr	r3, [pc, #228]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4936      	ldr	r1, [pc, #216]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fe06 	bl	8001668 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a60:	f7fe fe02 	bl	8001668 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e053      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	4b2d      	ldr	r3, [pc, #180]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 020c 	and.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1eb      	bne.n	8002a60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d210      	bcs.n	8002ab8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b24      	ldr	r3, [pc, #144]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 0207 	bic.w	r2, r3, #7
 8002a9e:	4922      	ldr	r1, [pc, #136]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	4b20      	ldr	r3, [pc, #128]	@ (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d001      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e032      	b.n	8002b1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ac4:	4b19      	ldr	r3, [pc, #100]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4916      	ldr	r1, [pc, #88]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d009      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002ae2:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	490e      	ldr	r1, [pc, #56]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002af6:	f000 f821 	bl	8002b3c <HAL_RCC_GetSysClockFreq>
 8002afa:	4602      	mov	r2, r0
 8002afc:	4b0b      	ldr	r3, [pc, #44]	@ (8002b2c <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 030f 	and.w	r3, r3, #15
 8002b06:	490a      	ldr	r1, [pc, #40]	@ (8002b30 <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	5ccb      	ldrb	r3, [r1, r3]
 8002b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0e:	4a09      	ldr	r2, [pc, #36]	@ (8002b34 <HAL_RCC_ClockConfig+0x1cc>)
 8002b10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b12:	4b09      	ldr	r3, [pc, #36]	@ (8002b38 <HAL_RCC_ClockConfig+0x1d0>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe fd64 	bl	80015e4 <HAL_InitTick>

  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40022000 	.word	0x40022000
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	080051e8 	.word	0x080051e8
 8002b34:	20000050 	.word	0x20000050
 8002b38:	20000054 	.word	0x20000054

08002b3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	2300      	movs	r3, #0
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b56:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d002      	beq.n	8002b6c <HAL_RCC_GetSysClockFreq+0x30>
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d003      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x36>
 8002b6a:	e027      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b6e:	613b      	str	r3, [r7, #16]
      break;
 8002b70:	e027      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	0c9b      	lsrs	r3, r3, #18
 8002b76:	f003 030f 	and.w	r3, r3, #15
 8002b7a:	4a17      	ldr	r2, [pc, #92]	@ (8002bd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b7c:	5cd3      	ldrb	r3, [r2, r3]
 8002b7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d010      	beq.n	8002bac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b8a:	4b11      	ldr	r3, [pc, #68]	@ (8002bd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0c5b      	lsrs	r3, r3, #17
 8002b90:	f003 0301 	and.w	r3, r3, #1
 8002b94:	4a11      	ldr	r2, [pc, #68]	@ (8002bdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	e004      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4a0c      	ldr	r2, [pc, #48]	@ (8002be0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002bb0:	fb02 f303 	mul.w	r3, r2, r3
 8002bb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	613b      	str	r3, [r7, #16]
      break;
 8002bba:	e002      	b.n	8002bc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bbc:	4b05      	ldr	r3, [pc, #20]	@ (8002bd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002bbe:	613b      	str	r3, [r7, #16]
      break;
 8002bc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bc2:	693b      	ldr	r3, [r7, #16]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bc80      	pop	{r7}
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	007a1200 	.word	0x007a1200
 8002bd8:	08005200 	.word	0x08005200
 8002bdc:	08005210 	.word	0x08005210
 8002be0:	003d0900 	.word	0x003d0900

08002be4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002be8:	4b02      	ldr	r3, [pc, #8]	@ (8002bf4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000050 	.word	0x20000050

08002bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bfc:	f7ff fff2 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c00:	4602      	mov	r2, r0
 8002c02:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	4903      	ldr	r1, [pc, #12]	@ (8002c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c0e:	5ccb      	ldrb	r3, [r1, r3]
 8002c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	080051f8 	.word	0x080051f8

08002c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c24:	f7ff ffde 	bl	8002be4 <HAL_RCC_GetHCLKFreq>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	4b05      	ldr	r3, [pc, #20]	@ (8002c40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0adb      	lsrs	r3, r3, #11
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	4903      	ldr	r1, [pc, #12]	@ (8002c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c36:	5ccb      	ldrb	r3, [r1, r3]
 8002c38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	080051f8 	.word	0x080051f8

08002c48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002c50:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <RCC_Delay+0x34>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <RCC_Delay+0x38>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	0a5b      	lsrs	r3, r3, #9
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	fb02 f303 	mul.w	r3, r2, r3
 8002c62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002c64:	bf00      	nop
  }
  while (Delay --);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1e5a      	subs	r2, r3, #1
 8002c6a:	60fa      	str	r2, [r7, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f9      	bne.n	8002c64 <RCC_Delay+0x1c>
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bc80      	pop	{r7}
 8002c7a:	4770      	bx	lr
 8002c7c:	20000050 	.word	0x20000050
 8002c80:	10624dd3 	.word	0x10624dd3

08002c84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	2300      	movs	r3, #0
 8002c92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d07d      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca4:	4b4f      	ldr	r3, [pc, #316]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10d      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb0:	4b4c      	ldr	r3, [pc, #304]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	4a4b      	ldr	r2, [pc, #300]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cba:	61d3      	str	r3, [r2, #28]
 8002cbc:	4b49      	ldr	r3, [pc, #292]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc4:	60bb      	str	r3, [r7, #8]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b46      	ldr	r3, [pc, #280]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d118      	bne.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd8:	4b43      	ldr	r3, [pc, #268]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a42      	ldr	r2, [pc, #264]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce4:	f7fe fcc0 	bl	8001668 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cea:	e008      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cec:	f7fe fcbc 	bl	8001668 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	@ 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e06d      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b3a      	ldr	r3, [pc, #232]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d0a:	4b36      	ldr	r3, [pc, #216]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d0c:	6a1b      	ldr	r3, [r3, #32]
 8002d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02e      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d027      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d28:	4b2e      	ldr	r3, [pc, #184]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d32:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d38:	4b2c      	ldr	r3, [pc, #176]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d3e:	4a29      	ldr	r2, [pc, #164]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d014      	beq.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4e:	f7fe fc8b 	bl	8001668 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7fe fc87 	bl	8001668 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e036      	b.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d78:	4b1a      	ldr	r3, [pc, #104]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	4917      	ldr	r1, [pc, #92]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002d8a:	7dfb      	ldrb	r3, [r7, #23]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002da8:	4b0e      	ldr	r3, [pc, #56]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	490b      	ldr	r1, [pc, #44]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dc6:	4b07      	ldr	r3, [pc, #28]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	4904      	ldr	r1, [pc, #16]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	40007000 	.word	0x40007000
 8002dec:	42420440 	.word	0x42420440

08002df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e041      	b.n	8002e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d106      	bne.n	8002e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f7fe fa42 	bl	80012a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	4619      	mov	r1, r3
 8002e2e:	4610      	mov	r0, r2
 8002e30:	f000 ff04 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6a1a      	ldr	r2, [r3, #32]
 8002e9c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10f      	bne.n	8002ec6 <HAL_TIM_Base_Stop+0x38>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1a      	ldr	r2, [r3, #32]
 8002eac:	f240 4344 	movw	r3, #1092	@ 0x444
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d107      	bne.n	8002ec6 <HAL_TIM_Base_Stop+0x38>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr
	...

08002edc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d001      	beq.n	8002ef4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e03a      	b.n	8002f6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2202      	movs	r2, #2
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0201 	orr.w	r2, r2, #1
 8002f0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a18      	ldr	r2, [pc, #96]	@ (8002f74 <HAL_TIM_Base_Start_IT+0x98>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00e      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x58>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f1e:	d009      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x58>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a14      	ldr	r2, [pc, #80]	@ (8002f78 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d004      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x58>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a13      	ldr	r2, [pc, #76]	@ (8002f7c <HAL_TIM_Base_Start_IT+0xa0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d111      	bne.n	8002f58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b06      	cmp	r3, #6
 8002f44:	d010      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f56:	e007      	b.n	8002f68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0201 	orr.w	r2, r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	40012c00 	.word	0x40012c00
 8002f78:	40000400 	.word	0x40000400
 8002f7c:	40000800 	.word	0x40000800

08002f80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0201 	bic.w	r2, r2, #1
 8002f96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a1a      	ldr	r2, [r3, #32]
 8002f9e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10f      	bne.n	8002fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	f240 4344 	movw	r3, #1092	@ 0x444
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d107      	bne.n	8002fc8 <HAL_TIM_Base_Stop_IT+0x48>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bc80      	pop	{r7}
 8002fda:	4770      	bx	lr

08002fdc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e041      	b.n	8003072 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 f839 	bl	800307a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	4619      	mov	r1, r3
 800301a:	4610      	mov	r0, r2
 800301c:	f000 fe0e 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2201      	movs	r2, #1
 8003034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bc80      	pop	{r7}
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d109      	bne.n	80030b4 <HAL_TIM_OC_Start_IT+0x28>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	e022      	b.n	80030fa <HAL_TIM_OC_Start_IT+0x6e>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	2b04      	cmp	r3, #4
 80030b8:	d109      	bne.n	80030ce <HAL_TIM_OC_Start_IT+0x42>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e015      	b.n	80030fa <HAL_TIM_OC_Start_IT+0x6e>
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	2b08      	cmp	r3, #8
 80030d2:	d109      	bne.n	80030e8 <HAL_TIM_OC_Start_IT+0x5c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b01      	cmp	r3, #1
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e008      	b.n	80030fa <HAL_TIM_OC_Start_IT+0x6e>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	bf14      	ite	ne
 80030f4:	2301      	movne	r3, #1
 80030f6:	2300      	moveq	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0a9      	b.n	8003256 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d104      	bne.n	8003112 <HAL_TIM_OC_Start_IT+0x86>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003110:	e013      	b.n	800313a <HAL_TIM_OC_Start_IT+0xae>
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	2b04      	cmp	r3, #4
 8003116:	d104      	bne.n	8003122 <HAL_TIM_OC_Start_IT+0x96>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2202      	movs	r2, #2
 800311c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003120:	e00b      	b.n	800313a <HAL_TIM_OC_Start_IT+0xae>
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	2b08      	cmp	r3, #8
 8003126:	d104      	bne.n	8003132 <HAL_TIM_OC_Start_IT+0xa6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003130:	e003      	b.n	800313a <HAL_TIM_OC_Start_IT+0xae>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b0c      	cmp	r3, #12
 800313e:	d841      	bhi.n	80031c4 <HAL_TIM_OC_Start_IT+0x138>
 8003140:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <HAL_TIM_OC_Start_IT+0xbc>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800317d 	.word	0x0800317d
 800314c:	080031c5 	.word	0x080031c5
 8003150:	080031c5 	.word	0x080031c5
 8003154:	080031c5 	.word	0x080031c5
 8003158:	0800318f 	.word	0x0800318f
 800315c:	080031c5 	.word	0x080031c5
 8003160:	080031c5 	.word	0x080031c5
 8003164:	080031c5 	.word	0x080031c5
 8003168:	080031a1 	.word	0x080031a1
 800316c:	080031c5 	.word	0x080031c5
 8003170:	080031c5 	.word	0x080031c5
 8003174:	080031c5 	.word	0x080031c5
 8003178:	080031b3 	.word	0x080031b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0202 	orr.w	r2, r2, #2
 800318a:	60da      	str	r2, [r3, #12]
      break;
 800318c:	e01d      	b.n	80031ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0204 	orr.w	r2, r2, #4
 800319c:	60da      	str	r2, [r3, #12]
      break;
 800319e:	e014      	b.n	80031ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0208 	orr.w	r2, r2, #8
 80031ae:	60da      	str	r2, [r3, #12]
      break;
 80031b0:	e00b      	b.n	80031ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	68da      	ldr	r2, [r3, #12]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f042 0210 	orr.w	r2, r2, #16
 80031c0:	60da      	str	r2, [r3, #12]
      break;
 80031c2:	e002      	b.n	80031ca <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d141      	bne.n	8003254 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2201      	movs	r2, #1
 80031d6:	6839      	ldr	r1, [r7, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f001 f84c 	bl	8004276 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003260 <HAL_TIM_OC_Start_IT+0x1d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d107      	bne.n	80031f8 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a18      	ldr	r2, [pc, #96]	@ (8003260 <HAL_TIM_OC_Start_IT+0x1d4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00e      	beq.n	8003220 <HAL_TIM_OC_Start_IT+0x194>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800320a:	d009      	beq.n	8003220 <HAL_TIM_OC_Start_IT+0x194>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a14      	ldr	r2, [pc, #80]	@ (8003264 <HAL_TIM_OC_Start_IT+0x1d8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d004      	beq.n	8003220 <HAL_TIM_OC_Start_IT+0x194>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a13      	ldr	r2, [pc, #76]	@ (8003268 <HAL_TIM_OC_Start_IT+0x1dc>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d111      	bne.n	8003244 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b06      	cmp	r3, #6
 8003230:	d010      	beq.n	8003254 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003242:	e007      	b.n	8003254 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003254:	7bfb      	ldrb	r3, [r7, #15]
}
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40012c00 	.word	0x40012c00
 8003264:	40000400 	.word	0x40000400
 8003268:	40000800 	.word	0x40000800

0800326c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b0c      	cmp	r3, #12
 800327e:	d841      	bhi.n	8003304 <HAL_TIM_OC_Stop_IT+0x98>
 8003280:	a201      	add	r2, pc, #4	@ (adr r2, 8003288 <HAL_TIM_OC_Stop_IT+0x1c>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032bd 	.word	0x080032bd
 800328c:	08003305 	.word	0x08003305
 8003290:	08003305 	.word	0x08003305
 8003294:	08003305 	.word	0x08003305
 8003298:	080032cf 	.word	0x080032cf
 800329c:	08003305 	.word	0x08003305
 80032a0:	08003305 	.word	0x08003305
 80032a4:	08003305 	.word	0x08003305
 80032a8:	080032e1 	.word	0x080032e1
 80032ac:	08003305 	.word	0x08003305
 80032b0:	08003305 	.word	0x08003305
 80032b4:	08003305 	.word	0x08003305
 80032b8:	080032f3 	.word	0x080032f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0202 	bic.w	r2, r2, #2
 80032ca:	60da      	str	r2, [r3, #12]
      break;
 80032cc:	e01d      	b.n	800330a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0204 	bic.w	r2, r2, #4
 80032dc:	60da      	str	r2, [r3, #12]
      break;
 80032de:	e014      	b.n	800330a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0208 	bic.w	r2, r2, #8
 80032ee:	60da      	str	r2, [r3, #12]
      break;
 80032f0:	e00b      	b.n	800330a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0210 	bic.w	r2, r2, #16
 8003300:	60da      	str	r2, [r3, #12]
      break;
 8003302:	e002      	b.n	800330a <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	bf00      	nop
  }

  if (status == HAL_OK)
 800330a:	7bfb      	ldrb	r3, [r7, #15]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d157      	bne.n	80033c0 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2200      	movs	r2, #0
 8003316:	6839      	ldr	r1, [r7, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 ffac 	bl	8004276 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a2a      	ldr	r2, [pc, #168]	@ (80033cc <HAL_TIM_OC_Stop_IT+0x160>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d117      	bne.n	8003358 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6a1a      	ldr	r2, [r3, #32]
 800332e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10f      	bne.n	8003358 <HAL_TIM_OC_Stop_IT+0xec>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6a1a      	ldr	r2, [r3, #32]
 800333e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d107      	bne.n	8003358 <HAL_TIM_OC_Stop_IT+0xec>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6a1a      	ldr	r2, [r3, #32]
 800335e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10f      	bne.n	8003388 <HAL_TIM_OC_Stop_IT+0x11c>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6a1a      	ldr	r2, [r3, #32]
 800336e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003372:	4013      	ands	r3, r2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d107      	bne.n	8003388 <HAL_TIM_OC_Stop_IT+0x11c>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f022 0201 	bic.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <HAL_TIM_OC_Stop_IT+0x12c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003396:	e013      	b.n	80033c0 <HAL_TIM_OC_Stop_IT+0x154>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d104      	bne.n	80033a8 <HAL_TIM_OC_Stop_IT+0x13c>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033a6:	e00b      	b.n	80033c0 <HAL_TIM_OC_Stop_IT+0x154>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d104      	bne.n	80033b8 <HAL_TIM_OC_Stop_IT+0x14c>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033b6:	e003      	b.n	80033c0 <HAL_TIM_OC_Stop_IT+0x154>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80033c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40012c00 	.word	0x40012c00

080033d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e041      	b.n	8003466 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d106      	bne.n	80033fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f839 	bl	800346e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3304      	adds	r3, #4
 800340c:	4619      	mov	r1, r3
 800340e:	4610      	mov	r0, r2
 8003410:	f000 fc14 	bl	8003c3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <HAL_TIM_PWM_Start+0x24>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	e022      	b.n	80034ea <HAL_TIM_PWM_Start+0x6a>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	d109      	bne.n	80034be <HAL_TIM_PWM_Start+0x3e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	bf14      	ite	ne
 80034b6:	2301      	movne	r3, #1
 80034b8:	2300      	moveq	r3, #0
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	e015      	b.n	80034ea <HAL_TIM_PWM_Start+0x6a>
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b08      	cmp	r3, #8
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x58>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e008      	b.n	80034ea <HAL_TIM_PWM_Start+0x6a>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	bf14      	ite	ne
 80034e4:	2301      	movne	r3, #1
 80034e6:	2300      	moveq	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e05e      	b.n	80035b0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <HAL_TIM_PWM_Start+0x82>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003500:	e013      	b.n	800352a <HAL_TIM_PWM_Start+0xaa>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b04      	cmp	r3, #4
 8003506:	d104      	bne.n	8003512 <HAL_TIM_PWM_Start+0x92>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003510:	e00b      	b.n	800352a <HAL_TIM_PWM_Start+0xaa>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	2b08      	cmp	r3, #8
 8003516:	d104      	bne.n	8003522 <HAL_TIM_PWM_Start+0xa2>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003520:	e003      	b.n	800352a <HAL_TIM_PWM_Start+0xaa>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2201      	movs	r2, #1
 8003530:	6839      	ldr	r1, [r7, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fe9f 	bl	8004276 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a1e      	ldr	r2, [pc, #120]	@ (80035b8 <HAL_TIM_PWM_Start+0x138>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d107      	bne.n	8003552 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003550:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a18      	ldr	r2, [pc, #96]	@ (80035b8 <HAL_TIM_PWM_Start+0x138>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00e      	beq.n	800357a <HAL_TIM_PWM_Start+0xfa>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003564:	d009      	beq.n	800357a <HAL_TIM_PWM_Start+0xfa>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a14      	ldr	r2, [pc, #80]	@ (80035bc <HAL_TIM_PWM_Start+0x13c>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d004      	beq.n	800357a <HAL_TIM_PWM_Start+0xfa>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <HAL_TIM_PWM_Start+0x140>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d111      	bne.n	800359e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d010      	beq.n	80035ae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359c:	e007      	b.n	80035ae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d020      	beq.n	8003628 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0202 	mvn.w	r2, #2
 80035f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 faf8 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd f976 	bl	8000908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fafa 	bl	8003c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fad2 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fd f950 	bl	8000908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fad4 	bl	8003c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0208 	mvn.w	r2, #8
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2204      	movs	r2, #4
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f003 0303 	and.w	r3, r3, #3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 faac 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7fd f92a 	bl	8000908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 faae 	bl	8003c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d020      	beq.n	800370c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d01b      	beq.n	800370c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0210 	mvn.w	r2, #16
 80036dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2208      	movs	r2, #8
 80036e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa86 	bl	8003c04 <HAL_TIM_IC_CaptureCallback>
 80036f8:	e005      	b.n	8003706 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fd f904 	bl	8000908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa88 	bl	8003c16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00c      	beq.n	8003730 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b00      	cmp	r3, #0
 800371e:	d007      	beq.n	8003730 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f06f 0201 	mvn.w	r2, #1
 8003728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fa61 	bl	8003bf2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003736:	2b00      	cmp	r3, #0
 8003738:	d00c      	beq.n	8003754 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003740:	2b00      	cmp	r3, #0
 8003742:	d007      	beq.n	8003754 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fe6e 	bl	8004430 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00c      	beq.n	8003778 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa58 	bl	8003c28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00c      	beq.n	800379c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f003 0320 	and.w	r3, r3, #32
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f06f 0220 	mvn.w	r2, #32
 8003794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 fe41 	bl	800441e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_TIM_OC_ConfigChannel+0x1e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e048      	b.n	8003854 <HAL_TIM_OC_ConfigChannel+0xb0>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d839      	bhi.n	8003844 <HAL_TIM_OC_ConfigChannel+0xa0>
 80037d0:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <HAL_TIM_OC_ConfigChannel+0x34>)
 80037d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d6:	bf00      	nop
 80037d8:	0800380d 	.word	0x0800380d
 80037dc:	08003845 	.word	0x08003845
 80037e0:	08003845 	.word	0x08003845
 80037e4:	08003845 	.word	0x08003845
 80037e8:	0800381b 	.word	0x0800381b
 80037ec:	08003845 	.word	0x08003845
 80037f0:	08003845 	.word	0x08003845
 80037f4:	08003845 	.word	0x08003845
 80037f8:	08003829 	.word	0x08003829
 80037fc:	08003845 	.word	0x08003845
 8003800:	08003845 	.word	0x08003845
 8003804:	08003845 	.word	0x08003845
 8003808:	08003837 	.word	0x08003837
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fa80 	bl	8003d18 <TIM_OC1_SetConfig>
      break;
 8003818:	e017      	b.n	800384a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	4618      	mov	r0, r3
 8003822:	f000 fadf 	bl	8003de4 <TIM_OC2_SetConfig>
      break;
 8003826:	e010      	b.n	800384a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68b9      	ldr	r1, [r7, #8]
 800382e:	4618      	mov	r0, r3
 8003830:	f000 fb42 	bl	8003eb8 <TIM_OC3_SetConfig>
      break;
 8003834:	e009      	b.n	800384a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68b9      	ldr	r1, [r7, #8]
 800383c:	4618      	mov	r0, r3
 800383e:	f000 fba5 	bl	8003f8c <TIM_OC4_SetConfig>
      break;
 8003842:	e002      	b.n	800384a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	75fb      	strb	r3, [r7, #23]
      break;
 8003848:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003852:	7dfb      	ldrb	r3, [r7, #23]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003876:	2302      	movs	r3, #2
 8003878:	e0ae      	b.n	80039d8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	f200 809f 	bhi.w	80039c8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800388a:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800388c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003890:	080038c5 	.word	0x080038c5
 8003894:	080039c9 	.word	0x080039c9
 8003898:	080039c9 	.word	0x080039c9
 800389c:	080039c9 	.word	0x080039c9
 80038a0:	08003905 	.word	0x08003905
 80038a4:	080039c9 	.word	0x080039c9
 80038a8:	080039c9 	.word	0x080039c9
 80038ac:	080039c9 	.word	0x080039c9
 80038b0:	08003947 	.word	0x08003947
 80038b4:	080039c9 	.word	0x080039c9
 80038b8:	080039c9 	.word	0x080039c9
 80038bc:	080039c9 	.word	0x080039c9
 80038c0:	08003987 	.word	0x08003987
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fa24 	bl	8003d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0208 	orr.w	r2, r2, #8
 80038de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0204 	bic.w	r2, r2, #4
 80038ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6999      	ldr	r1, [r3, #24]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	619a      	str	r2, [r3, #24]
      break;
 8003902:	e064      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68b9      	ldr	r1, [r7, #8]
 800390a:	4618      	mov	r0, r3
 800390c:	f000 fa6a 	bl	8003de4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800391e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699a      	ldr	r2, [r3, #24]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800392e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6999      	ldr	r1, [r3, #24]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	021a      	lsls	r2, r3, #8
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	430a      	orrs	r2, r1
 8003942:	619a      	str	r2, [r3, #24]
      break;
 8003944:	e043      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	4618      	mov	r0, r3
 800394e:	f000 fab3 	bl	8003eb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0208 	orr.w	r2, r2, #8
 8003960:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69da      	ldr	r2, [r3, #28]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0204 	bic.w	r2, r2, #4
 8003970:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69d9      	ldr	r1, [r3, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	691a      	ldr	r2, [r3, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	61da      	str	r2, [r3, #28]
      break;
 8003984:	e023      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68b9      	ldr	r1, [r7, #8]
 800398c:	4618      	mov	r0, r3
 800398e:	f000 fafd 	bl	8003f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69da      	ldr	r2, [r3, #28]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69da      	ldr	r2, [r3, #28]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69d9      	ldr	r1, [r3, #28]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	021a      	lsls	r2, r3, #8
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	61da      	str	r2, [r3, #28]
      break;
 80039c6:	e002      	b.n	80039ce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
      break;
 80039cc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_TIM_ConfigClockSource+0x1c>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e0b4      	b.n	8003b66 <HAL_TIM_ConfigClockSource+0x186>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68ba      	ldr	r2, [r7, #8]
 8003a2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a34:	d03e      	beq.n	8003ab4 <HAL_TIM_ConfigClockSource+0xd4>
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a3a:	f200 8087 	bhi.w	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a42:	f000 8086 	beq.w	8003b52 <HAL_TIM_ConfigClockSource+0x172>
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a4a:	d87f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a4c:	2b70      	cmp	r3, #112	@ 0x70
 8003a4e:	d01a      	beq.n	8003a86 <HAL_TIM_ConfigClockSource+0xa6>
 8003a50:	2b70      	cmp	r3, #112	@ 0x70
 8003a52:	d87b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a54:	2b60      	cmp	r3, #96	@ 0x60
 8003a56:	d050      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0x11a>
 8003a58:	2b60      	cmp	r3, #96	@ 0x60
 8003a5a:	d877      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5c:	2b50      	cmp	r3, #80	@ 0x50
 8003a5e:	d03c      	beq.n	8003ada <HAL_TIM_ConfigClockSource+0xfa>
 8003a60:	2b50      	cmp	r3, #80	@ 0x50
 8003a62:	d873      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a64:	2b40      	cmp	r3, #64	@ 0x40
 8003a66:	d058      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x13a>
 8003a68:	2b40      	cmp	r3, #64	@ 0x40
 8003a6a:	d86f      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b30      	cmp	r3, #48	@ 0x30
 8003a6e:	d064      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a70:	2b30      	cmp	r3, #48	@ 0x30
 8003a72:	d86b      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b20      	cmp	r3, #32
 8003a76:	d060      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	d867      	bhi.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d05c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a80:	2b10      	cmp	r3, #16
 8003a82:	d05a      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x15a>
 8003a84:	e062      	b.n	8003b4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a96:	f000 fbcf 	bl	8004238 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003aa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	68ba      	ldr	r2, [r7, #8]
 8003ab0:	609a      	str	r2, [r3, #8]
      break;
 8003ab2:	e04f      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac4:	f000 fbb8 	bl	8004238 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689a      	ldr	r2, [r3, #8]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003ad6:	609a      	str	r2, [r3, #8]
      break;
 8003ad8:	e03c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	f000 fb2f 	bl	800414a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2150      	movs	r1, #80	@ 0x50
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 fb86 	bl	8004204 <TIM_ITRx_SetConfig>
      break;
 8003af8:	e02c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fb4d 	bl	80041a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2160      	movs	r1, #96	@ 0x60
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fb76 	bl	8004204 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e01c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 fb0f 	bl	800414a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2140      	movs	r1, #64	@ 0x40
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fb66 	bl	8004204 <TIM_ITRx_SetConfig>
      break;
 8003b38:	e00c      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4619      	mov	r1, r3
 8003b44:	4610      	mov	r0, r2
 8003b46:	f000 fb5d 	bl	8004204 <TIM_ITRx_SetConfig>
      break;
 8003b4a:	e003      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b50:	e000      	b.n	8003b54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003b52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b082      	sub	sp, #8
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
 8003b76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003b82:	2302      	movs	r3, #2
 8003b84:	e031      	b.n	8003bea <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2202      	movs	r2, #2
 8003b92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003b96:	6839      	ldr	r1, [r7, #0]
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fa45 	bl	8004028 <TIM_SlaveTimer_SetConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e018      	b.n	8003bea <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68da      	ldr	r2, [r3, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bc6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003bd6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3708      	adds	r7, #8
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bc80      	pop	{r7}
 8003c14:	4770      	bx	lr

08003c16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bc80      	pop	{r7}
 8003c26:	4770      	bx	lr

08003c28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
	...

08003c3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a2f      	ldr	r2, [pc, #188]	@ (8003d0c <TIM_Base_SetConfig+0xd0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00b      	beq.n	8003c6c <TIM_Base_SetConfig+0x30>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5a:	d007      	beq.n	8003c6c <TIM_Base_SetConfig+0x30>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003d10 <TIM_Base_SetConfig+0xd4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d003      	beq.n	8003c6c <TIM_Base_SetConfig+0x30>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a2b      	ldr	r2, [pc, #172]	@ (8003d14 <TIM_Base_SetConfig+0xd8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d108      	bne.n	8003c7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a22      	ldr	r2, [pc, #136]	@ (8003d0c <TIM_Base_SetConfig+0xd0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_Base_SetConfig+0x62>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8c:	d007      	beq.n	8003c9e <TIM_Base_SetConfig+0x62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1f      	ldr	r2, [pc, #124]	@ (8003d10 <TIM_Base_SetConfig+0xd4>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_Base_SetConfig+0x62>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a1e      	ldr	r2, [pc, #120]	@ (8003d14 <TIM_Base_SetConfig+0xd8>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d108      	bne.n	8003cb0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8003d0c <TIM_Base_SetConfig+0xd0>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d103      	bne.n	8003ce4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	f023 0201 	bic.w	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]
  }
}
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800

08003d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	f023 0201 	bic.w	r2, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 0302 	bic.w	r3, r3, #2
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003de0 <TIM_OC1_SetConfig+0xc8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10c      	bne.n	8003d8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0308 	bic.w	r3, r3, #8
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4313      	orrs	r3, r2
 8003d84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a13      	ldr	r2, [pc, #76]	@ (8003de0 <TIM_OC1_SetConfig+0xc8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d111      	bne.n	8003dba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	693a      	ldr	r2, [r7, #16]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	621a      	str	r2, [r3, #32]
}
 8003dd4:	bf00      	nop
 8003dd6:	371c      	adds	r7, #28
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bc80      	pop	{r7}
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40012c00 	.word	0x40012c00

08003de4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f023 0210 	bic.w	r2, r3, #16
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	021b      	lsls	r3, r3, #8
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	f023 0320 	bic.w	r3, r3, #32
 8003e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	011b      	lsls	r3, r3, #4
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003eb4 <TIM_OC2_SetConfig+0xd0>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10d      	bne.n	8003e60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4a14      	ldr	r2, [pc, #80]	@ (8003eb4 <TIM_OC2_SetConfig+0xd0>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d113      	bne.n	8003e90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	693a      	ldr	r2, [r7, #16]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	40012c00 	.word	0x40012c00

08003eb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a1d      	ldr	r2, [pc, #116]	@ (8003f88 <TIM_OC3_SetConfig+0xd0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10d      	bne.n	8003f32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
 8003f22:	021b      	lsls	r3, r3, #8
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a14      	ldr	r2, [pc, #80]	@ (8003f88 <TIM_OC3_SetConfig+0xd0>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d113      	bne.n	8003f62 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	011b      	lsls	r3, r3, #4
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	621a      	str	r2, [r3, #32]
}
 8003f7c:	bf00      	nop
 8003f7e:	371c      	adds	r7, #28
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bc80      	pop	{r7}
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40012c00 	.word	0x40012c00

08003f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	031b      	lsls	r3, r3, #12
 8003fde:	693a      	ldr	r2, [r7, #16]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a0f      	ldr	r2, [pc, #60]	@ (8004024 <TIM_OC4_SetConfig+0x98>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d109      	bne.n	8004000 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	695b      	ldr	r3, [r3, #20]
 8003ff8:	019b      	lsls	r3, r3, #6
 8003ffa:	697a      	ldr	r2, [r7, #20]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	40012c00 	.word	0x40012c00

08004028 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004032:	2300      	movs	r3, #0
 8004034:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004044:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	4313      	orrs	r3, r2
 800404e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f023 0307 	bic.w	r3, r3, #7
 8004056:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	4313      	orrs	r3, r2
 8004060:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	2b70      	cmp	r3, #112	@ 0x70
 8004070:	d01a      	beq.n	80040a8 <TIM_SlaveTimer_SetConfig+0x80>
 8004072:	2b70      	cmp	r3, #112	@ 0x70
 8004074:	d860      	bhi.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
 8004076:	2b60      	cmp	r3, #96	@ 0x60
 8004078:	d054      	beq.n	8004124 <TIM_SlaveTimer_SetConfig+0xfc>
 800407a:	2b60      	cmp	r3, #96	@ 0x60
 800407c:	d85c      	bhi.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
 800407e:	2b50      	cmp	r3, #80	@ 0x50
 8004080:	d046      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0xe8>
 8004082:	2b50      	cmp	r3, #80	@ 0x50
 8004084:	d858      	bhi.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
 8004086:	2b40      	cmp	r3, #64	@ 0x40
 8004088:	d019      	beq.n	80040be <TIM_SlaveTimer_SetConfig+0x96>
 800408a:	2b40      	cmp	r3, #64	@ 0x40
 800408c:	d854      	bhi.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
 800408e:	2b30      	cmp	r3, #48	@ 0x30
 8004090:	d055      	beq.n	800413e <TIM_SlaveTimer_SetConfig+0x116>
 8004092:	2b30      	cmp	r3, #48	@ 0x30
 8004094:	d850      	bhi.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
 8004096:	2b20      	cmp	r3, #32
 8004098:	d051      	beq.n	800413e <TIM_SlaveTimer_SetConfig+0x116>
 800409a:	2b20      	cmp	r3, #32
 800409c:	d84c      	bhi.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04d      	beq.n	800413e <TIM_SlaveTimer_SetConfig+0x116>
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d04b      	beq.n	800413e <TIM_SlaveTimer_SetConfig+0x116>
 80040a6:	e047      	b.n	8004138 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80040b8:	f000 f8be 	bl	8004238 <TIM_ETR_SetConfig>
      break;
 80040bc:	e040      	b.n	8004140 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b05      	cmp	r3, #5
 80040c4:	d101      	bne.n	80040ca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e03b      	b.n	8004142 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0201 	bic.w	r2, r2, #1
 80040e0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040f0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	621a      	str	r2, [r3, #32]
      break;
 800410e:	e017      	b.n	8004140 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800411c:	461a      	mov	r2, r3
 800411e:	f000 f814 	bl	800414a <TIM_TI1_ConfigInputStage>
      break;
 8004122:	e00d      	b.n	8004140 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004130:	461a      	mov	r2, r3
 8004132:	f000 f838 	bl	80041a6 <TIM_TI2_ConfigInputStage>
      break;
 8004136:	e003      	b.n	8004140 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	75fb      	strb	r3, [r7, #23]
      break;
 800413c:	e000      	b.n	8004140 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800413e:	bf00      	nop
  }

  return status;
 8004140:	7dfb      	ldrb	r3, [r7, #23]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800414a:	b480      	push	{r7}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f023 0201 	bic.w	r2, r3, #1
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f023 030a 	bic.w	r3, r3, #10
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr

080041a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b087      	sub	sp, #28
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	60f8      	str	r0, [r7, #12]
 80041ae:	60b9      	str	r1, [r7, #8]
 80041b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	6a1b      	ldr	r3, [r3, #32]
 80041b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	f023 0210 	bic.w	r2, r3, #16
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	031b      	lsls	r3, r3, #12
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	4313      	orrs	r3, r2
 80041da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	011b      	lsls	r3, r3, #4
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	bc80      	pop	{r7}
 8004202:	4770      	bx	lr

08004204 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	f043 0307 	orr.w	r3, r3, #7
 8004226:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	609a      	str	r2, [r3, #8]
}
 800422e:	bf00      	nop
 8004230:	3714      	adds	r7, #20
 8004232:	46bd      	mov	sp, r7
 8004234:	bc80      	pop	{r7}
 8004236:	4770      	bx	lr

08004238 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004252:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	431a      	orrs	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	4313      	orrs	r3, r2
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	609a      	str	r2, [r3, #8]
}
 800426c:	bf00      	nop
 800426e:	371c      	adds	r7, #28
 8004270:	46bd      	mov	sp, r7
 8004272:	bc80      	pop	{r7}
 8004274:	4770      	bx	lr

08004276 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004276:	b480      	push	{r7}
 8004278:	b087      	sub	sp, #28
 800427a:	af00      	add	r7, sp, #0
 800427c:	60f8      	str	r0, [r7, #12]
 800427e:	60b9      	str	r1, [r7, #8]
 8004280:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	f003 031f 	and.w	r3, r3, #31
 8004288:	2201      	movs	r2, #1
 800428a:	fa02 f303 	lsl.w	r3, r2, r3
 800428e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a1a      	ldr	r2, [r3, #32]
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	43db      	mvns	r3, r3
 8004298:	401a      	ands	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	f003 031f 	and.w	r3, r3, #31
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	431a      	orrs	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	621a      	str	r2, [r3, #32]
}
 80042b4:	bf00      	nop
 80042b6:	371c      	adds	r7, #28
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bc80      	pop	{r7}
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e046      	b.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	4313      	orrs	r3, r2
 8004308:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a16      	ldr	r2, [pc, #88]	@ (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d00e      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004324:	d009      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a12      	ldr	r2, [pc, #72]	@ (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a10      	ldr	r2, [pc, #64]	@ (8004378 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10c      	bne.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	4313      	orrs	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3714      	adds	r7, #20
 800436a:	46bd      	mov	sp, r7
 800436c:	bc80      	pop	{r7}
 800436e:	4770      	bx	lr
 8004370:	40012c00 	.word	0x40012c00
 8004374:	40000400 	.word	0x40000400
 8004378:	40000800 	.word	0x40000800

0800437c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004386:	2300      	movs	r3, #0
 8004388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004394:	2302      	movs	r3, #2
 8004396:	e03d      	b.n	8004414 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	695b      	ldr	r3, [r3, #20]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	bc80      	pop	{r7}
 800441c:	4770      	bx	lr

0800441e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr

08004430 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004438:	bf00      	nop
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr

08004442 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e042      	b.n	80044da <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d106      	bne.n	800446e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc ffb3 	bl	80013d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2224      	movs	r2, #36	@ 0x24
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004484:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 fdb8 	bl	8004ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	691a      	ldr	r2, [r3, #16]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800449a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044aa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68da      	ldr	r2, [r3, #12]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044ba:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b08a      	sub	sp, #40	@ 0x28
 80044e6:	af02      	add	r7, sp, #8
 80044e8:	60f8      	str	r0, [r7, #12]
 80044ea:	60b9      	str	r1, [r7, #8]
 80044ec:	603b      	str	r3, [r7, #0]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044f2:	2300      	movs	r3, #0
 80044f4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d175      	bne.n	80045ee <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <HAL_UART_Transmit+0x2c>
 8004508:	88fb      	ldrh	r3, [r7, #6]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06e      	b.n	80045f0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2221      	movs	r2, #33	@ 0x21
 800451c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004520:	f7fd f8a2 	bl	8001668 <HAL_GetTick>
 8004524:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	88fa      	ldrh	r2, [r7, #6]
 800452a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	88fa      	ldrh	r2, [r7, #6]
 8004530:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800453a:	d108      	bne.n	800454e <HAL_UART_Transmit+0x6c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d104      	bne.n	800454e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e003      	b.n	8004556 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004556:	e02e      	b.n	80045b6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2200      	movs	r2, #0
 8004560:	2180      	movs	r1, #128	@ 0x80
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fb1d 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2220      	movs	r2, #32
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e03a      	b.n	80045f0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10b      	bne.n	8004598 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	881b      	ldrh	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800458e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	3302      	adds	r3, #2
 8004594:	61bb      	str	r3, [r7, #24]
 8004596:	e007      	b.n	80045a8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	781a      	ldrb	r2, [r3, #0]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3301      	adds	r3, #1
 80045a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1cb      	bne.n	8004558 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2200      	movs	r2, #0
 80045c8:	2140      	movs	r1, #64	@ 0x40
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f000 fae9 	bl	8004ba2 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e006      	b.n	80045f0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2220      	movs	r2, #32
 80045e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	e000      	b.n	80045f0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045ee:	2302      	movs	r3, #2
  }
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	4613      	mov	r3, r2
 8004604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b20      	cmp	r3, #32
 8004610:	d112      	bne.n	8004638 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_UART_Receive_IT+0x26>
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e00b      	b.n	800463a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004628:	88fb      	ldrh	r3, [r7, #6]
 800462a:	461a      	mov	r2, r3
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fb10 	bl	8004c54 <UART_Start_Receive_IT>
 8004634:	4603      	mov	r3, r0
 8004636:	e000      	b.n	800463a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004638:	2302      	movs	r3, #2
  }
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b0ba      	sub	sp, #232	@ 0xe8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800466a:	2300      	movs	r3, #0
 800466c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004670:	2300      	movs	r3, #0
 8004672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004682:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800468a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800468e:	f003 0320 	and.w	r3, r3, #32
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_UART_IRQHandler+0x66>
 8004696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469a:	f003 0320 	and.w	r3, r3, #32
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fbec 	bl	8004e80 <UART_Receive_IT>
      return;
 80046a8:	e25b      	b.n	8004b62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80046aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80de 	beq.w	8004870 <HAL_UART_IRQHandler+0x22c>
 80046b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f000 80d1 	beq.w	8004870 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_UART_IRQHandler+0xae>
 80046da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d005      	beq.n	80046f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ea:	f043 0201 	orr.w	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f6:	f003 0304 	and.w	r3, r3, #4
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_UART_IRQHandler+0xd2>
 80046fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004702:	f003 0301 	and.w	r3, r3, #1
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f043 0202 	orr.w	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_UART_IRQHandler+0xf6>
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800473a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800473e:	f003 0308 	and.w	r3, r3, #8
 8004742:	2b00      	cmp	r3, #0
 8004744:	d011      	beq.n	800476a <HAL_UART_IRQHandler+0x126>
 8004746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800474a:	f003 0320 	and.w	r3, r3, #32
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	d005      	beq.n	800476a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	f043 0208 	orr.w	r2, r3, #8
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	2b00      	cmp	r3, #0
 8004770:	f000 81f2 	beq.w	8004b58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_UART_IRQHandler+0x14e>
 8004780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fb77 	bl	8004e80 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479c:	2b00      	cmp	r3, #0
 800479e:	bf14      	ite	ne
 80047a0:	2301      	movne	r3, #1
 80047a2:	2300      	moveq	r3, #0
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <HAL_UART_IRQHandler+0x17a>
 80047b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04f      	beq.n	800485e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 fa81 	bl	8004cc6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d041      	beq.n	8004856 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3314      	adds	r3, #20
 80047d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	3314      	adds	r3, #20
 80047fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004802:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800480a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004816:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1d9      	bne.n	80047d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004822:	2b00      	cmp	r3, #0
 8004824:	d013      	beq.n	800484e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482a:	4a7e      	ldr	r2, [pc, #504]	@ (8004a24 <HAL_UART_IRQHandler+0x3e0>)
 800482c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004832:	4618      	mov	r0, r3
 8004834:	f7fd fafc 	bl	8001e30 <HAL_DMA_Abort_IT>
 8004838:	4603      	mov	r3, r0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d016      	beq.n	800486c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004848:	4610      	mov	r0, r2
 800484a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800484c:	e00e      	b.n	800486c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f993 	bl	8004b7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004854:	e00a      	b.n	800486c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f98f 	bl	8004b7a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800485c:	e006      	b.n	800486c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f000 f98b 	bl	8004b7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800486a:	e175      	b.n	8004b58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800486c:	bf00      	nop
    return;
 800486e:	e173      	b.n	8004b58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004874:	2b01      	cmp	r3, #1
 8004876:	f040 814f 	bne.w	8004b18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800487a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 8148 	beq.w	8004b18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	f000 8141 	beq.w	8004b18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004896:	2300      	movs	r3, #0
 8004898:	60bb      	str	r3, [r7, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	60bb      	str	r3, [r7, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695b      	ldr	r3, [r3, #20]
 80048b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 80b6 	beq.w	8004a28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f000 8145 	beq.w	8004b5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048da:	429a      	cmp	r2, r3
 80048dc:	f080 813e 	bcs.w	8004b5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	f000 8088 	beq.w	8004a04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800490a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800490e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004912:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004920:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004928:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800492c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004930:	e841 2300 	strex	r3, r2, [r1]
 8004934:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004938:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1d9      	bne.n	80048f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3314      	adds	r3, #20
 8004946:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800494a:	e853 3f00 	ldrex	r3, [r3]
 800494e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004950:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3314      	adds	r3, #20
 8004960:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004964:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004968:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800496c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004976:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e1      	bne.n	8004940 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3314      	adds	r3, #20
 8004982:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800498c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800498e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3314      	adds	r3, #20
 800499c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80049a0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80049a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80049a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80049a8:	e841 2300 	strex	r3, r2, [r1]
 80049ac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80049ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e3      	bne.n	800497c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049d4:	f023 0310 	bic.w	r3, r3, #16
 80049d8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049e6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049e8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049ec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049ee:	e841 2300 	strex	r3, r2, [r1]
 80049f2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1e3      	bne.n	80049c2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7fd f9da 	bl	8001db8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	4619      	mov	r1, r3
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8b6 	bl	8004b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a20:	e09c      	b.n	8004b5c <HAL_UART_IRQHandler+0x518>
 8004a22:	bf00      	nop
 8004a24:	08004d8b 	.word	0x08004d8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f000 808e 	beq.w	8004b60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8089 	beq.w	8004b60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	330c      	adds	r3, #12
 8004a54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	e853 3f00 	ldrex	r3, [r3]
 8004a5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	330c      	adds	r3, #12
 8004a6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a72:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a7a:	e841 2300 	strex	r3, r2, [r1]
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1e3      	bne.n	8004a4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a90:	e853 3f00 	ldrex	r3, [r3]
 8004a94:	623b      	str	r3, [r7, #32]
   return(result);
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	f023 0301 	bic.w	r3, r3, #1
 8004a9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3314      	adds	r3, #20
 8004aa6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004aaa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ab0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d1e3      	bne.n	8004a86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 0310 	bic.w	r3, r3, #16
 8004ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	330c      	adds	r3, #12
 8004aec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004af0:	61fa      	str	r2, [r7, #28]
 8004af2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	e841 2300 	strex	r3, r2, [r1]
 8004afc:	617b      	str	r3, [r7, #20]
   return(result);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1e3      	bne.n	8004acc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f83b 	bl	8004b8c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b16:	e023      	b.n	8004b60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d009      	beq.n	8004b38 <HAL_UART_IRQHandler+0x4f4>
 8004b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f93e 	bl	8004db2 <UART_Transmit_IT>
    return;
 8004b36:	e014      	b.n	8004b62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00e      	beq.n	8004b62 <HAL_UART_IRQHandler+0x51e>
 8004b44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f97d 	bl	8004e50 <UART_EndTransmit_IT>
    return;
 8004b56:	e004      	b.n	8004b62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b58:	bf00      	nop
 8004b5a:	e002      	b.n	8004b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b5c:	bf00      	nop
 8004b5e:	e000      	b.n	8004b62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b60:	bf00      	nop
  }
}
 8004b62:	37e8      	adds	r7, #232	@ 0xe8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b70:	bf00      	nop
 8004b72:	370c      	adds	r7, #12
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr

08004b7a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bc80      	pop	{r7}
 8004b8a:	4770      	bx	lr

08004b8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	460b      	mov	r3, r1
 8004b96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b98:	bf00      	nop
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr

08004ba2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ba2:	b580      	push	{r7, lr}
 8004ba4:	b086      	sub	sp, #24
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	60f8      	str	r0, [r7, #12]
 8004baa:	60b9      	str	r1, [r7, #8]
 8004bac:	603b      	str	r3, [r7, #0]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb2:	e03b      	b.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb4:	6a3b      	ldr	r3, [r7, #32]
 8004bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bba:	d037      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bbc:	f7fc fd54 	bl	8001668 <HAL_GetTick>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d302      	bcc.n	8004bd2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e03a      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d023      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	2b80      	cmp	r3, #128	@ 0x80
 8004be8:	d020      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d01d      	beq.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d116      	bne.n	8004c2c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	617b      	str	r3, [r7, #20]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f856 	bl	8004cc6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2208      	movs	r2, #8
 8004c1e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e00f      	b.n	8004c4c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4013      	ands	r3, r2
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	bf0c      	ite	eq
 8004c3c:	2301      	moveq	r3, #1
 8004c3e:	2300      	movne	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	461a      	mov	r2, r3
 8004c44:	79fb      	ldrb	r3, [r7, #7]
 8004c46:	429a      	cmp	r2, r3
 8004c48:	d0b4      	beq.n	8004bb4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	88fa      	ldrh	r2, [r7, #6]
 8004c72:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2222      	movs	r2, #34	@ 0x22
 8004c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68da      	ldr	r2, [r3, #12]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c98:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f042 0201 	orr.w	r2, r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0220 	orr.w	r2, r2, #32
 8004cb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3714      	adds	r7, #20
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bc80      	pop	{r7}
 8004cc4:	4770      	bx	lr

08004cc6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cc6:	b480      	push	{r7}
 8004cc8:	b095      	sub	sp, #84	@ 0x54
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	330c      	adds	r3, #12
 8004cec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cee:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cf4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3314      	adds	r3, #20
 8004d08:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f023 0301 	bic.w	r3, r3, #1
 8004d18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3314      	adds	r3, #20
 8004d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d24:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d26:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d2a:	e841 2300 	strex	r3, r2, [r1]
 8004d2e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1e5      	bne.n	8004d02 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d119      	bne.n	8004d72 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	330c      	adds	r3, #12
 8004d44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f023 0310 	bic.w	r3, r3, #16
 8004d54:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	330c      	adds	r3, #12
 8004d5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d5e:	61ba      	str	r2, [r7, #24]
 8004d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6979      	ldr	r1, [r7, #20]
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d80:	bf00      	nop
 8004d82:	3754      	adds	r7, #84	@ 0x54
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bc80      	pop	{r7}
 8004d88:	4770      	bx	lr

08004d8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b084      	sub	sp, #16
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2200      	movs	r2, #0
 8004da2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f7ff fee8 	bl	8004b7a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b085      	sub	sp, #20
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	2b21      	cmp	r3, #33	@ 0x21
 8004dc4:	d13e      	bne.n	8004e44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dce:	d114      	bne.n	8004dfa <UART_Transmit_IT+0x48>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d110      	bne.n	8004dfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a1b      	ldr	r3, [r3, #32]
 8004ddc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	881b      	ldrh	r3, [r3, #0]
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	621a      	str	r2, [r3, #32]
 8004df8:	e008      	b.n	8004e0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	1c59      	adds	r1, r3, #1
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6211      	str	r1, [r2, #32]
 8004e04:	781a      	ldrb	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	4619      	mov	r1, r3
 8004e1a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10f      	bne.n	8004e40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68da      	ldr	r2, [r3, #12]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bc80      	pop	{r7}
 8004e4e:	4770      	bx	lr

08004e50 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e66:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2220      	movs	r2, #32
 8004e6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fe79 	bl	8004b68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3708      	adds	r7, #8
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08c      	sub	sp, #48	@ 0x30
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b22      	cmp	r3, #34	@ 0x22
 8004e92:	f040 80ae 	bne.w	8004ff2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e9e:	d117      	bne.n	8004ed0 <UART_Receive_IT+0x50>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d113      	bne.n	8004ed0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec8:	1c9a      	adds	r2, r3, #2
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ece:	e026      	b.n	8004f1e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ee2:	d007      	beq.n	8004ef4 <UART_Receive_IT+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <UART_Receive_IT+0x82>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	691b      	ldr	r3, [r3, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	b2da      	uxtb	r2, r3
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004efe:	701a      	strb	r2, [r3, #0]
 8004f00:	e008      	b.n	8004f14 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f12:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	1c5a      	adds	r2, r3, #1
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	3b01      	subs	r3, #1
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4619      	mov	r1, r3
 8004f2c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d15d      	bne.n	8004fee <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68da      	ldr	r2, [r3, #12]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0220 	bic.w	r2, r2, #32
 8004f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f50:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695a      	ldr	r2, [r3, #20]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0201 	bic.w	r2, r2, #1
 8004f60:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d135      	bne.n	8004fe4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	330c      	adds	r3, #12
 8004f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 0310 	bic.w	r3, r3, #16
 8004f94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	330c      	adds	r3, #12
 8004f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9e:	623a      	str	r2, [r7, #32]
 8004fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69f9      	ldr	r1, [r7, #28]
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0310 	and.w	r3, r3, #16
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d10a      	bne.n	8004fd6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	60fb      	str	r3, [r7, #12]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fda:	4619      	mov	r1, r3
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7ff fdd5 	bl	8004b8c <HAL_UARTEx_RxEventCallback>
 8004fe2:	e002      	b.n	8004fea <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f7fb fa87 	bl	80004f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fea:	2300      	movs	r3, #0
 8004fec:	e002      	b.n	8004ff4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	e000      	b.n	8004ff4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004ff2:	2302      	movs	r3, #2
  }
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3730      	adds	r7, #48	@ 0x30
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689a      	ldr	r2, [r3, #8]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	431a      	orrs	r2, r3
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	4313      	orrs	r3, r2
 800502a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005036:	f023 030c 	bic.w	r3, r3, #12
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	68b9      	ldr	r1, [r7, #8]
 8005040:	430b      	orrs	r3, r1
 8005042:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	699a      	ldr	r2, [r3, #24]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a2c      	ldr	r2, [pc, #176]	@ (8005110 <UART_SetConfig+0x114>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d103      	bne.n	800506c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005064:	f7fd fddc 	bl	8002c20 <HAL_RCC_GetPCLK2Freq>
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	e002      	b.n	8005072 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800506c:	f7fd fdc4 	bl	8002bf8 <HAL_RCC_GetPCLK1Freq>
 8005070:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005072:	68fa      	ldr	r2, [r7, #12]
 8005074:	4613      	mov	r3, r2
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	009a      	lsls	r2, r3, #2
 800507c:	441a      	add	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	4a22      	ldr	r2, [pc, #136]	@ (8005114 <UART_SetConfig+0x118>)
 800508a:	fba2 2303 	umull	r2, r3, r2, r3
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	0119      	lsls	r1, r3, #4
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4613      	mov	r3, r2
 8005096:	009b      	lsls	r3, r3, #2
 8005098:	4413      	add	r3, r2
 800509a:	009a      	lsls	r2, r3, #2
 800509c:	441a      	add	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80050a8:	4b1a      	ldr	r3, [pc, #104]	@ (8005114 <UART_SetConfig+0x118>)
 80050aa:	fba3 0302 	umull	r0, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2064      	movs	r0, #100	@ 0x64
 80050b2:	fb00 f303 	mul.w	r3, r0, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	3332      	adds	r3, #50	@ 0x32
 80050bc:	4a15      	ldr	r2, [pc, #84]	@ (8005114 <UART_SetConfig+0x118>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80050c8:	4419      	add	r1, r3
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009a      	lsls	r2, r3, #2
 80050d4:	441a      	add	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005114 <UART_SetConfig+0x118>)
 80050e2:	fba3 0302 	umull	r0, r3, r3, r2
 80050e6:	095b      	lsrs	r3, r3, #5
 80050e8:	2064      	movs	r0, #100	@ 0x64
 80050ea:	fb00 f303 	mul.w	r3, r0, r3
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	011b      	lsls	r3, r3, #4
 80050f2:	3332      	adds	r3, #50	@ 0x32
 80050f4:	4a07      	ldr	r2, [pc, #28]	@ (8005114 <UART_SetConfig+0x118>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	f003 020f 	and.w	r2, r3, #15
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	440a      	add	r2, r1
 8005106:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005108:	bf00      	nop
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	40013800 	.word	0x40013800
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <memset>:
 8005118:	4603      	mov	r3, r0
 800511a:	4402      	add	r2, r0
 800511c:	4293      	cmp	r3, r2
 800511e:	d100      	bne.n	8005122 <memset+0xa>
 8005120:	4770      	bx	lr
 8005122:	f803 1b01 	strb.w	r1, [r3], #1
 8005126:	e7f9      	b.n	800511c <memset+0x4>

08005128 <__libc_init_array>:
 8005128:	b570      	push	{r4, r5, r6, lr}
 800512a:	2600      	movs	r6, #0
 800512c:	4d0c      	ldr	r5, [pc, #48]	@ (8005160 <__libc_init_array+0x38>)
 800512e:	4c0d      	ldr	r4, [pc, #52]	@ (8005164 <__libc_init_array+0x3c>)
 8005130:	1b64      	subs	r4, r4, r5
 8005132:	10a4      	asrs	r4, r4, #2
 8005134:	42a6      	cmp	r6, r4
 8005136:	d109      	bne.n	800514c <__libc_init_array+0x24>
 8005138:	f000 f81a 	bl	8005170 <_init>
 800513c:	2600      	movs	r6, #0
 800513e:	4d0a      	ldr	r5, [pc, #40]	@ (8005168 <__libc_init_array+0x40>)
 8005140:	4c0a      	ldr	r4, [pc, #40]	@ (800516c <__libc_init_array+0x44>)
 8005142:	1b64      	subs	r4, r4, r5
 8005144:	10a4      	asrs	r4, r4, #2
 8005146:	42a6      	cmp	r6, r4
 8005148:	d105      	bne.n	8005156 <__libc_init_array+0x2e>
 800514a:	bd70      	pop	{r4, r5, r6, pc}
 800514c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005150:	4798      	blx	r3
 8005152:	3601      	adds	r6, #1
 8005154:	e7ee      	b.n	8005134 <__libc_init_array+0xc>
 8005156:	f855 3b04 	ldr.w	r3, [r5], #4
 800515a:	4798      	blx	r3
 800515c:	3601      	adds	r6, #1
 800515e:	e7f2      	b.n	8005146 <__libc_init_array+0x1e>
 8005160:	0800521c 	.word	0x0800521c
 8005164:	0800521c 	.word	0x0800521c
 8005168:	0800521c 	.word	0x0800521c
 800516c:	08005220 	.word	0x08005220

08005170 <_init>:
 8005170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005172:	bf00      	nop
 8005174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005176:	bc08      	pop	{r3}
 8005178:	469e      	mov	lr, r3
 800517a:	4770      	bx	lr

0800517c <_fini>:
 800517c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800517e:	bf00      	nop
 8005180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005182:	bc08      	pop	{r3}
 8005184:	469e      	mov	lr, r3
 8005186:	4770      	bx	lr
