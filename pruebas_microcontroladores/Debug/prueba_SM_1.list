
prueba_SM_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004108  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004214  08004214  00005214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004298  08004298  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004298  08004298  00005298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042a0  080042a0  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042a4  080042a4  000052a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080042a8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  20000060  08004308  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004308  00006188  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1c3  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be7  00000000  00000000  0001224c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  00013e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b8  00000000  00000000  00014a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a29  00000000  00000000  00015448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d193  00000000  00000000  0002ce71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a4ce  00000000  00000000  0003a004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c44d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000c4518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008d  00000000  00000000  000c78e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080041fc 	.word	0x080041fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080041fc 	.word	0x080041fc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <pwm_stop>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void pwm_stop(void) {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, IN_U);
 8000174:	2100      	movs	r1, #0
 8000176:	4806      	ldr	r0, [pc, #24]	@ (8000190 <pwm_stop+0x20>)
 8000178:	f002 fb36 	bl	80027e8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, IN_V);
 800017c:	2104      	movs	r1, #4
 800017e:	4804      	ldr	r0, [pc, #16]	@ (8000190 <pwm_stop+0x20>)
 8000180:	f002 fb32 	bl	80027e8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, IN_W);
 8000184:	2108      	movs	r1, #8
 8000186:	4802      	ldr	r0, [pc, #8]	@ (8000190 <pwm_stop+0x20>)
 8000188:	f002 fb2e 	bl	80027e8 <HAL_TIM_PWM_Stop>
}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	200000c4 	.word	0x200000c4

08000194 <pwm_init>:

void pwm_init(void){
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000198:	4b0c      	ldr	r3, [pc, #48]	@ (80001cc <pwm_init+0x38>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2200      	movs	r2, #0
 800019e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80001a0:	4b0a      	ldr	r3, [pc, #40]	@ (80001cc <pwm_init+0x38>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	2200      	movs	r2, #0
 80001a6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80001a8:	4b08      	ldr	r3, [pc, #32]	@ (80001cc <pwm_init+0x38>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2200      	movs	r2, #0
 80001ae:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3, IN_U);
 80001b0:	2100      	movs	r1, #0
 80001b2:	4806      	ldr	r0, [pc, #24]	@ (80001cc <pwm_init+0x38>)
 80001b4:	f002 fa76 	bl	80026a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,IN_V);
 80001b8:	2104      	movs	r1, #4
 80001ba:	4804      	ldr	r0, [pc, #16]	@ (80001cc <pwm_init+0x38>)
 80001bc:	f002 fa72 	bl	80026a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, IN_W);
 80001c0:	2108      	movs	r1, #8
 80001c2:	4802      	ldr	r0, [pc, #8]	@ (80001cc <pwm_init+0x38>)
 80001c4:	f002 fa6e 	bl	80026a4 <HAL_TIM_PWM_Start>
	return;
 80001c8:	bf00      	nop
}
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	200000c4 	.word	0x200000c4

080001d0 <alignment>:

void alignment(void){
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
	aligned_flag = false;
 80001d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000240 <alignment+0x70>)
 80001d6:	2200      	movs	r2, #0
 80001d8:	701a      	strb	r2, [r3, #0]
	state_machine = ALIGNING;
 80001da:	4b1a      	ldr	r3, [pc, #104]	@ (8000244 <alignment+0x74>)
 80001dc:	2204      	movs	r2, #4
 80001de:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 80001e0:	4819      	ldr	r0, [pc, #100]	@ (8000248 <alignment+0x78>)
 80001e2:	f001 ffe7 	bl	80021b4 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80001e6:	2100      	movs	r1, #0
 80001e8:	4817      	ldr	r0, [pc, #92]	@ (8000248 <alignment+0x78>)
 80001ea:	f002 f959 	bl	80024a0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim4);
 80001ee:	4816      	ldr	r0, [pc, #88]	@ (8000248 <alignment+0x78>)
 80001f0:	f001 ff67 	bl	80020c2 <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 80001f4:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <alignment+0x78>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2200      	movs	r2, #0
 80001fa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ALIGN_TIME);
 80001fc:	4b12      	ldr	r3, [pc, #72]	@ (8000248 <alignment+0x78>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000204:	635a      	str	r2, [r3, #52]	@ 0x34
	pwm_init();
 8000206:	f7ff ffc5 	bl	8000194 <pwm_init>

	commutation(POS_UV, DC_ALIGN);
 800020a:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 800020e:	2000      	movs	r0, #0
 8000210:	f000 fa16 	bl	8000640 <commutation>
	HAL_TIM_Base_Start_IT(&htim4);
 8000214:	480c      	ldr	r0, [pc, #48]	@ (8000248 <alignment+0x78>)
 8000216:	f001 ff7b 	bl	8002110 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800021a:	2100      	movs	r1, #0
 800021c:	480a      	ldr	r0, [pc, #40]	@ (8000248 <alignment+0x78>)
 800021e:	f002 f84f 	bl	80022c0 <HAL_TIM_OC_Start_IT>
	while(!aligned_flag);
 8000222:	bf00      	nop
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <alignment+0x70>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	f083 0301 	eor.w	r3, r3, #1
 800022c:	b2db      	uxtb	r3, r3
 800022e:	2b00      	cmp	r3, #0
 8000230:	d1f8      	bne.n	8000224 <alignment+0x54>
	state_machine = READY;
 8000232:	4b04      	ldr	r3, [pc, #16]	@ (8000244 <alignment+0x74>)
 8000234:	2205      	movs	r2, #5
 8000236:	701a      	strb	r2, [r3, #0]
	pwm_stop();
 8000238:	f7ff ff9a 	bl	8000170 <pwm_stop>
}
 800023c:	bf00      	nop
 800023e:	bd80      	pop	{r7, pc}
 8000240:	20000181 	.word	0x20000181
 8000244:	20000179 	.word	0x20000179
 8000248:	2000007c 	.word	0x2000007c

0800024c <startup>:
void startup(void){
 800024c:	b580      	push	{r7, lr}
 800024e:	b084      	sub	sp, #16
 8000250:	af00      	add	r7, sp, #0
	alignment();
 8000252:	f7ff ffbd 	bl	80001d0 <alignment>
	state_machine =  STARTUP;
 8000256:	4b28      	ldr	r3, [pc, #160]	@ (80002f8 <startup+0xac>)
 8000258:	2202      	movs	r2, #2
 800025a:	701a      	strb	r2, [r3, #0]
	bool  localFlag = false;
 800025c:	2300      	movs	r3, #0
 800025e:	73fb      	strb	r3, [r7, #15]
	uint16_t pwm = DC_STARTUP_INIT;
 8000260:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8000264:	81bb      	strh	r3, [r7, #12]
	uint8_t step = POS_UV;
 8000266:	2300      	movs	r3, #0
 8000268:	72fb      	strb	r3, [r7, #11]
	uint16_t time = TIME_STARTUP_COMMUTATION_INIT;
 800026a:	2378      	movs	r3, #120	@ 0x78
 800026c:	813b      	strh	r3, [r7, #8]
	uint16_t duration = 0;
 800026e:	2300      	movs	r3, #0
 8000270:	80fb      	strh	r3, [r7, #6]
	pwm_init();
 8000272:	f7ff ff8f 	bl	8000194 <pwm_init>
	while(!localFlag){
 8000276:	e030      	b.n	80002da <startup+0x8e>
		//__HAL_TIM_SET_COUNTER(&htim4, 0);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, time);
		HAL_Delay(time);
 8000278:	893b      	ldrh	r3, [r7, #8]
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ff28 	bl	80010d0 <HAL_Delay>
		commutation(step, pwm);
 8000280:	89ba      	ldrh	r2, [r7, #12]
 8000282:	7afb      	ldrb	r3, [r7, #11]
 8000284:	4611      	mov	r1, r2
 8000286:	4618      	mov	r0, r3
 8000288:	f000 f9da 	bl	8000640 <commutation>
		//HAL_TIM_Base_Start_IT(&htim4);
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		//while(!startup_flag);

		step = (step + 1) % NUM_POS;
 800028c:	7afb      	ldrb	r3, [r7, #11]
 800028e:	1c5a      	adds	r2, r3, #1
 8000290:	4b1a      	ldr	r3, [pc, #104]	@ (80002fc <startup+0xb0>)
 8000292:	fb83 3102 	smull	r3, r1, r3, r2
 8000296:	17d3      	asrs	r3, r2, #31
 8000298:	1ac9      	subs	r1, r1, r3
 800029a:	460b      	mov	r3, r1
 800029c:	005b      	lsls	r3, r3, #1
 800029e:	440b      	add	r3, r1
 80002a0:	005b      	lsls	r3, r3, #1
 80002a2:	1ad1      	subs	r1, r2, r3
 80002a4:	460b      	mov	r3, r1
 80002a6:	72fb      	strb	r3, [r7, #11]
		(pwm < DC_STARTUP_END) ? pwm += DC_STARTUP_STEP : pwm;
 80002a8:	89bb      	ldrh	r3, [r7, #12]
 80002aa:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d802      	bhi.n	80002b8 <startup+0x6c>
 80002b2:	89bb      	ldrh	r3, [r7, #12]
 80002b4:	330a      	adds	r3, #10
 80002b6:	81bb      	strh	r3, [r7, #12]
	    if (time > TIME_STARTUP_COMMUTATION_FINAL) {
 80002b8:	893b      	ldrh	r3, [r7, #8]
 80002ba:	2b08      	cmp	r3, #8
 80002bc:	d903      	bls.n	80002c6 <startup+0x7a>
	        time -= TIME_STARTUP_STEP;
 80002be:	893b      	ldrh	r3, [r7, #8]
 80002c0:	3b02      	subs	r3, #2
 80002c2:	813b      	strh	r3, [r7, #8]
 80002c4:	e009      	b.n	80002da <startup+0x8e>
	    } else if (duration < 1000){
 80002c6:	88fb      	ldrh	r3, [r7, #6]
 80002c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002cc:	d203      	bcs.n	80002d6 <startup+0x8a>
	        duration++;
 80002ce:	88fb      	ldrh	r3, [r7, #6]
 80002d0:	3301      	adds	r3, #1
 80002d2:	80fb      	strh	r3, [r7, #6]
 80002d4:	e001      	b.n	80002da <startup+0x8e>
	    }
	    else {
			localFlag = true;
 80002d6:	2301      	movs	r3, #1
 80002d8:	73fb      	strb	r3, [r7, #15]
	while(!localFlag){
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	f083 0301 	eor.w	r3, r3, #1
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d1c8      	bne.n	8000278 <startup+0x2c>
	    }
//		startup_flag = false;


	}
	pwm_stop();
 80002e6:	f7ff ff43 	bl	8000170 <pwm_stop>
	state_machine = READY;
 80002ea:	4b03      	ldr	r3, [pc, #12]	@ (80002f8 <startup+0xac>)
 80002ec:	2205      	movs	r2, #5
 80002ee:	701a      	strb	r2, [r3, #0]

}
 80002f0:	bf00      	nop
 80002f2:	3710      	adds	r7, #16
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	20000179 	.word	0x20000179
 80002fc:	2aaaaaab 	.word	0x2aaaaaab

08000300 <ledON>:
void blink(void){
	eventDuration = 10;
	HAL_TIM_Base_Start_IT(&htim4);
}

void ledON(){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0

	eventFlag = true;
 8000304:	4b06      	ldr	r3, [pc, #24]	@ (8000320 <ledON+0x20>)
 8000306:	2201      	movs	r2, #1
 8000308:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 19999);
 800030a:	4b06      	ldr	r3, [pc, #24]	@ (8000324 <ledON+0x24>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000312:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000314:	2100      	movs	r1, #0
 8000316:	4803      	ldr	r0, [pc, #12]	@ (8000324 <ledON+0x24>)
 8000318:	f001 ffd2 	bl	80022c0 <HAL_TIM_OC_Start_IT>


}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000180 	.word	0x20000180
 8000324:	2000007c 	.word	0x2000007c

08000328 <processCommand>:
void processCommand(char *input) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
    for (int i = 0; commandTable[i].command != NULL; i++) {
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	e019      	b.n	800036a <processCommand+0x42>
        if (strcmp(input, commandTable[i].command) == 0) {  // Compara el comando recibido
 8000336:	4a17      	ldr	r2, [pc, #92]	@ (8000394 <processCommand+0x6c>)
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800033e:	4619      	mov	r1, r3
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f7ff ff03 	bl	800014c <strcmp>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d10b      	bne.n	8000364 <processCommand+0x3c>
            eventFlag = true;
 800034c:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <processCommand+0x70>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
        	commandTable[i].execute();  // Ejecuta la función asociada
 8000352:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <processCommand+0x6c>)
 8000354:	68fb      	ldr	r3, [r7, #12]
 8000356:	00db      	lsls	r3, r3, #3
 8000358:	4413      	add	r3, r2
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	4798      	blx	r3
            clearRxBuffer();  // Limpia el buffer acumulador
 800035e:	f000 f823 	bl	80003a8 <clearRxBuffer>

            return;
 8000362:	e014      	b.n	800038e <processCommand+0x66>
    for (int i = 0; commandTable[i].command != NULL; i++) {
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	3301      	adds	r3, #1
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <processCommand+0x6c>)
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1df      	bne.n	8000336 <processCommand+0xe>
        }
    }
    // Si no se encuentra el comando
    HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Command\r\n", 17, 3);
 8000376:	2303      	movs	r3, #3
 8000378:	2211      	movs	r2, #17
 800037a:	4908      	ldr	r1, [pc, #32]	@ (800039c <processCommand+0x74>)
 800037c:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <processCommand+0x78>)
 800037e:	f003 f8f7 	bl	8003570 <HAL_UART_Transmit>
    clearRxBuffer();
 8000382:	f000 f811 	bl	80003a8 <clearRxBuffer>
    state_machine = IDLE;
 8000386:	4b07      	ldr	r3, [pc, #28]	@ (80003a4 <processCommand+0x7c>)
 8000388:	2200      	movs	r2, #0
 800038a:	701a      	strb	r2, [r3, #0]
    return;// Limpia el buffer acumulador
 800038c:	bf00      	nop

}
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000004 	.word	0x20000004
 8000398:	20000180 	.word	0x20000180
 800039c:	0800422c 	.word	0x0800422c
 80003a0:	2000010c 	.word	0x2000010c
 80003a4:	20000179 	.word	0x20000179

080003a8 <clearRxBuffer>:


void clearRxBuffer(void) {
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, BUFFER_SIZE);  // Establece todos los elementos a 0
 80003ac:	2220      	movs	r2, #32
 80003ae:	2100      	movs	r1, #0
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <clearRxBuffer+0x18>)
 80003b2:	f003 fef7 	bl	80041a4 <memset>
    rx_index = 0;                          // Reinicia el índice del buffer
 80003b6:	4b03      	ldr	r3, [pc, #12]	@ (80003c4 <clearRxBuffer+0x1c>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	701a      	strb	r2, [r3, #0]
}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	20000158 	.word	0x20000158
 80003c4:	20000178 	.word	0x20000178

080003c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verifica el UART correcto
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a35      	ldr	r2, [pc, #212]	@ (80004ac <HAL_UART_RxCpltCallback+0xe4>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d164      	bne.n	80004a4 <HAL_UART_RxCpltCallback+0xdc>
        if (rx_data[0] == '\r') {  // Detecta el carácter de fin de línea
 80003da:	4b35      	ldr	r3, [pc, #212]	@ (80004b0 <HAL_UART_RxCpltCallback+0xe8>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	2b0d      	cmp	r3, #13
 80003e0:	d123      	bne.n	800042a <HAL_UART_RxCpltCallback+0x62>
            rx_buffer[rx_index] = '\0';  // Finaliza la cadena con terminador nulo
 80003e2:	4b34      	ldr	r3, [pc, #208]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	461a      	mov	r2, r3
 80003e8:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <HAL_UART_RxCpltCallback+0xf0>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	5499      	strb	r1, [r3, r2]
            rx_index = 0;  // Reinicia el índice para el próximo mensaje
 80003ee:	4b31      	ldr	r3, [pc, #196]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	701a      	strb	r2, [r3, #0]

            // Procesa el mensaje completo
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nReceived: ", 12, 3);
 80003f4:	2303      	movs	r3, #3
 80003f6:	220c      	movs	r2, #12
 80003f8:	4930      	ldr	r1, [pc, #192]	@ (80004bc <HAL_UART_RxCpltCallback+0xf4>)
 80003fa:	4831      	ldr	r0, [pc, #196]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 80003fc:	f003 f8b8 	bl	8003570 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, rx_buffer	, strlen((char *)rx_buffer), 3);
 8000400:	482d      	ldr	r0, [pc, #180]	@ (80004b8 <HAL_UART_RxCpltCallback+0xf0>)
 8000402:	f7ff fead 	bl	8000160 <strlen>
 8000406:	4603      	mov	r3, r0
 8000408:	b29a      	uxth	r2, r3
 800040a:	2303      	movs	r3, #3
 800040c:	492a      	ldr	r1, [pc, #168]	@ (80004b8 <HAL_UART_RxCpltCallback+0xf0>)
 800040e:	482c      	ldr	r0, [pc, #176]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 8000410:	f003 f8ae 	bl	8003570 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000418:	2202      	movs	r2, #2
 800041a:	492a      	ldr	r1, [pc, #168]	@ (80004c4 <HAL_UART_RxCpltCallback+0xfc>)
 800041c:	4828      	ldr	r0, [pc, #160]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 800041e:	f003 f8a7 	bl	8003570 <HAL_UART_Transmit>
            state_machine = PROCESS_COMMAND;
 8000422:	4b29      	ldr	r3, [pc, #164]	@ (80004c8 <HAL_UART_RxCpltCallback+0x100>)
 8000424:	2201      	movs	r2, #1
 8000426:	701a      	strb	r2, [r3, #0]
 8000428:	e037      	b.n	800049a <HAL_UART_RxCpltCallback+0xd2>
        } else if (rx_data[0] == '\b' || rx_data[0] == '\177') {  // Detecta Backspace
 800042a:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <HAL_UART_RxCpltCallback+0xe8>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b08      	cmp	r3, #8
 8000430:	d003      	beq.n	800043a <HAL_UART_RxCpltCallback+0x72>
 8000432:	4b1f      	ldr	r3, [pc, #124]	@ (80004b0 <HAL_UART_RxCpltCallback+0xe8>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b7f      	cmp	r3, #127	@ 0x7f
 8000438:	d110      	bne.n	800045c <HAL_UART_RxCpltCallback+0x94>
            if (rx_index > 0) {  // Si hay algo en el buffer
 800043a:	4b1e      	ldr	r3, [pc, #120]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b00      	cmp	r3, #0
 8000440:	d02b      	beq.n	800049a <HAL_UART_RxCpltCallback+0xd2>
                rx_index--;  // Retrocede el índice
 8000442:	4b1c      	ldr	r3, [pc, #112]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	3b01      	subs	r3, #1
 8000448:	b2da      	uxtb	r2, r3
 800044a:	4b1a      	ldr	r3, [pc, #104]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 800044c:	701a      	strb	r2, [r3, #0]
                // Simula el borrado en el terminal
                HAL_UART_Transmit(&huart2, (uint8_t *)"\b \b", 3, 3);
 800044e:	2303      	movs	r3, #3
 8000450:	2203      	movs	r2, #3
 8000452:	491e      	ldr	r1, [pc, #120]	@ (80004cc <HAL_UART_RxCpltCallback+0x104>)
 8000454:	481a      	ldr	r0, [pc, #104]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 8000456:	f003 f88b 	bl	8003570 <HAL_UART_Transmit>
            if (rx_index > 0) {  // Si hay algo en el buffer
 800045a:	e01e      	b.n	800049a <HAL_UART_RxCpltCallback+0xd2>
            }
        } else {  // Cualquier otro carácter
            rx_buffer[rx_index++] = rx_data[0];  // Almacena el carácter en el buffer
 800045c:	4b15      	ldr	r3, [pc, #84]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	1c5a      	adds	r2, r3, #1
 8000462:	b2d1      	uxtb	r1, r2
 8000464:	4a13      	ldr	r2, [pc, #76]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 8000466:	7011      	strb	r1, [r2, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	4b11      	ldr	r3, [pc, #68]	@ (80004b0 <HAL_UART_RxCpltCallback+0xe8>)
 800046c:	7819      	ldrb	r1, [r3, #0]
 800046e:	4b12      	ldr	r3, [pc, #72]	@ (80004b8 <HAL_UART_RxCpltCallback+0xf0>)
 8000470:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);  // Eco del carácter recibido
 8000472:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000476:	2201      	movs	r2, #1
 8000478:	490d      	ldr	r1, [pc, #52]	@ (80004b0 <HAL_UART_RxCpltCallback+0xe8>)
 800047a:	4811      	ldr	r0, [pc, #68]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 800047c:	f003 f878 	bl	8003570 <HAL_UART_Transmit>

            // Evita desbordamientos
            if (rx_index >= BUFFER_SIZE) {
 8000480:	4b0c      	ldr	r3, [pc, #48]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b1f      	cmp	r3, #31
 8000486:	d908      	bls.n	800049a <HAL_UART_RxCpltCallback+0xd2>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nBuffer Overflow\r\n", 19, 3);
 8000488:	2303      	movs	r3, #3
 800048a:	2213      	movs	r2, #19
 800048c:	4910      	ldr	r1, [pc, #64]	@ (80004d0 <HAL_UART_RxCpltCallback+0x108>)
 800048e:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 8000490:	f003 f86e 	bl	8003570 <HAL_UART_Transmit>
                rx_index = 0;  // Reinicia el índice en caso de desbordamiento
 8000494:	4b07      	ldr	r3, [pc, #28]	@ (80004b4 <HAL_UART_RxCpltCallback+0xec>)
 8000496:	2200      	movs	r2, #0
 8000498:	701a      	strb	r2, [r3, #0]
            }
        }

        // Reinicia la recepción para el siguiente byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800049a:	2201      	movs	r2, #1
 800049c:	4904      	ldr	r1, [pc, #16]	@ (80004b0 <HAL_UART_RxCpltCallback+0xe8>)
 800049e:	4808      	ldr	r0, [pc, #32]	@ (80004c0 <HAL_UART_RxCpltCallback+0xf8>)
 80004a0:	f003 f8f1 	bl	8003686 <HAL_UART_Receive_IT>
    }
}
 80004a4:	bf00      	nop
 80004a6:	3708      	adds	r7, #8
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	40004400 	.word	0x40004400
 80004b0:	20000154 	.word	0x20000154
 80004b4:	20000178 	.word	0x20000178
 80004b8:	20000158 	.word	0x20000158
 80004bc:	08004240 	.word	0x08004240
 80004c0:	2000010c 	.word	0x2000010c
 80004c4:	08004250 	.word	0x08004250
 80004c8:	20000179 	.word	0x20000179
 80004cc:	08004254 	.word	0x08004254
 80004d0:	08004258 	.word	0x08004258

080004d4 <handleState>:
state handleState(void){
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
	switch(state_machine){
 80004d8:	4b3a      	ldr	r3, [pc, #232]	@ (80005c4 <handleState+0xf0>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	2b06      	cmp	r3, #6
 80004e0:	d86b      	bhi.n	80005ba <handleState+0xe6>
 80004e2:	a201      	add	r2, pc, #4	@ (adr r2, 80004e8 <handleState+0x14>)
 80004e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e8:	08000505 	.word	0x08000505
 80004ec:	08000525 	.word	0x08000525
 80004f0:	0800053d 	.word	0x0800053d
 80004f4:	08000565 	.word	0x08000565
 80004f8:	0800054f 	.word	0x0800054f
 80004fc:	08000577 	.word	0x08000577
 8000500:	08000597 	.word	0x08000597
	case IDLE:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000504:	4b30      	ldr	r3, [pc, #192]	@ (80005c8 <handleState+0xf4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	68db      	ldr	r3, [r3, #12]
 800050a:	f003 0320 	and.w	r3, r3, #32
 800050e:	2b00      	cmp	r3, #0
 8000510:	d150      	bne.n	80005b4 <handleState+0xe0>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000512:	4b2d      	ldr	r3, [pc, #180]	@ (80005c8 <handleState+0xf4>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	68da      	ldr	r2, [r3, #12]
 8000518:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <handleState+0xf4>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f042 0220 	orr.w	r2, r2, #32
 8000520:	60da      	str	r2, [r3, #12]
		}
		break;
 8000522:	e047      	b.n	80005b4 <handleState+0xe0>

	case PROCESS_COMMAND:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000524:	4b28      	ldr	r3, [pc, #160]	@ (80005c8 <handleState+0xf4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68da      	ldr	r2, [r3, #12]
 800052a:	4b27      	ldr	r3, [pc, #156]	@ (80005c8 <handleState+0xf4>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f022 0220 	bic.w	r2, r2, #32
 8000532:	60da      	str	r2, [r3, #12]
		processCommand((char*) rx_buffer);
 8000534:	4825      	ldr	r0, [pc, #148]	@ (80005cc <handleState+0xf8>)
 8000536:	f7ff fef7 	bl	8000328 <processCommand>
		break;
 800053a:	e03e      	b.n	80005ba <handleState+0xe6>

	case STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <handleState+0xf4>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	68da      	ldr	r2, [r3, #12]
 8000542:	4b21      	ldr	r3, [pc, #132]	@ (80005c8 <handleState+0xf4>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f022 0220 	bic.w	r2, r2, #32
 800054a:	60da      	str	r2, [r3, #12]
		//startup();
		break;
 800054c:	e035      	b.n	80005ba <handleState+0xe6>
	case ALIGNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 800054e:	4b1e      	ldr	r3, [pc, #120]	@ (80005c8 <handleState+0xf4>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68da      	ldr	r2, [r3, #12]
 8000554:	4b1c      	ldr	r3, [pc, #112]	@ (80005c8 <handleState+0xf4>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f022 0220 	bic.w	r2, r2, #32
 800055c:	60da      	str	r2, [r3, #12]
		alignment();
 800055e:	f7ff fe37 	bl	80001d0 <alignment>
		break;
 8000562:	e02a      	b.n	80005ba <handleState+0xe6>
	case RUNNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000564:	4b18      	ldr	r3, [pc, #96]	@ (80005c8 <handleState+0xf4>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	68da      	ldr	r2, [r3, #12]
 800056a:	4b17      	ldr	r3, [pc, #92]	@ (80005c8 <handleState+0xf4>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	f022 0220 	bic.w	r2, r2, #32
 8000572:	60da      	str	r2, [r3, #12]
		break;
 8000574:	e021      	b.n	80005ba <handleState+0xe6>

	case READY:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000576:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <handleState+0xf4>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	f003 0320 	and.w	r3, r3, #32
 8000580:	2b00      	cmp	r3, #0
 8000582:	d119      	bne.n	80005b8 <handleState+0xe4>
					__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000584:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <handleState+0xf4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	68da      	ldr	r2, [r3, #12]
 800058a:	4b0f      	ldr	r3, [pc, #60]	@ (80005c8 <handleState+0xf4>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f042 0220 	orr.w	r2, r2, #32
 8000592:	60da      	str	r2, [r3, #12]
				}
		break;
 8000594:	e010      	b.n	80005b8 <handleState+0xe4>
	case FINISH:
		// Asegúrate de que las interrupciones de UART estén habilitadas al finalizar
		timerCounter = 0; // Reinicia el contador
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <handleState+0xfc>)
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800059c:	4b0a      	ldr	r3, [pc, #40]	@ (80005c8 <handleState+0xf4>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68da      	ldr	r2, [r3, #12]
 80005a2:	4b09      	ldr	r3, [pc, #36]	@ (80005c8 <handleState+0xf4>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	f042 0220 	orr.w	r2, r2, #32
 80005aa:	60da      	str	r2, [r3, #12]
		state_machine = IDLE; // Vuelve al estado IDLE
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <handleState+0xf0>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]

		break;
 80005b2:	e002      	b.n	80005ba <handleState+0xe6>
		break;
 80005b4:	bf00      	nop
 80005b6:	e000      	b.n	80005ba <handleState+0xe6>
		break;
 80005b8:	bf00      	nop


}
	return (state_machine);
 80005ba:	4b02      	ldr	r3, [pc, #8]	@ (80005c4 <handleState+0xf0>)
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	b2db      	uxtb	r3, r3
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000179 	.word	0x20000179
 80005c8:	2000010c 	.word	0x2000010c
 80005cc:	20000158 	.word	0x20000158
 80005d0:	2000017c 	.word	0x2000017c

080005d4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4) {
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a12      	ldr	r2, [pc, #72]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d11d      	bne.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x4e>
		eventFlag = true;
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
		if (eventDuration > 0) {
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00a      	beq.n	800060a <HAL_TIM_PeriodElapsedCallback+0x36>
			eventDuration--;
 80005f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005fc:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80005fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000602:	480d      	ldr	r0, [pc, #52]	@ (8000638 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000604:	f001 f8e4 	bl	80017d0 <HAL_GPIO_TogglePin>

			HAL_TIM_Base_Stop_IT(&htim4);
			eventFlag = false;
	}
}
}
 8000608:	e00b      	b.n	8000622 <HAL_TIM_PeriodElapsedCallback+0x4e>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000610:	4809      	ldr	r0, [pc, #36]	@ (8000638 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000612:	f001 f8c5 	bl	80017a0 <HAL_GPIO_WritePin>
			HAL_TIM_Base_Stop_IT(&htim4);
 8000616:	4809      	ldr	r0, [pc, #36]	@ (800063c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000618:	f001 fdcc 	bl	80021b4 <HAL_TIM_Base_Stop_IT>
			eventFlag = false;
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40000800 	.word	0x40000800
 8000630:	20000180 	.word	0x20000180
 8000634:	20000000 	.word	0x20000000
 8000638:	40011000 	.word	0x40011000
 800063c:	2000007c 	.word	0x2000007c

08000640 <commutation>:
void commutation(uint8_t step, uint16_t pwm) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	460a      	mov	r2, r1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	4613      	mov	r3, r2
 800064e:	80bb      	strh	r3, [r7, #4]
    GPIOB->ODR &= ~(EN_U | EN_V | EN_W);
 8000650:	4b6c      	ldr	r3, [pc, #432]	@ (8000804 <commutation+0x1c4>)
 8000652:	68db      	ldr	r3, [r3, #12]
 8000654:	4a6b      	ldr	r2, [pc, #428]	@ (8000804 <commutation+0x1c4>)
 8000656:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800065a:	f023 0302 	bic.w	r3, r3, #2
 800065e:	60d3      	str	r3, [r2, #12]

    switch(step) {
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b05      	cmp	r3, #5
 8000664:	f200 80c8 	bhi.w	80007f8 <commutation+0x1b8>
 8000668:	a201      	add	r2, pc, #4	@ (adr r2, 8000670 <commutation+0x30>)
 800066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800066e:	bf00      	nop
 8000670:	08000689 	.word	0x08000689
 8000674:	080006c7 	.word	0x080006c7
 8000678:	08000701 	.word	0x08000701
 800067c:	0800073f 	.word	0x0800073f
 8000680:	0800077d 	.word	0x0800077d
 8000684:	080007b7 	.word	0x080007b7
        case POS_UV:
            GPIOB->ODR |= (EN_U | EN_V);  // Activar EN_U y EN_V
 8000688:	4b5e      	ldr	r3, [pc, #376]	@ (8000804 <commutation+0x1c4>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	4a5d      	ldr	r2, [pc, #372]	@ (8000804 <commutation+0x1c4>)
 800068e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000692:	f043 0302 	orr.w	r3, r3, #2
 8000696:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_W;         // Desactivar EN_W
 8000698:	4b5a      	ldr	r3, [pc, #360]	@ (8000804 <commutation+0x1c4>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a59      	ldr	r2, [pc, #356]	@ (8000804 <commutation+0x1c4>)
 800069e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80006a2:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 80006a4:	4b58      	ldr	r3, [pc, #352]	@ (8000808 <commutation+0x1c8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	88ba      	ldrh	r2, [r7, #4]
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80006ac:	4b56      	ldr	r3, [pc, #344]	@ (8000808 <commutation+0x1c8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2200      	movs	r2, #0
 80006b2:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_TIM_PWM_Start(&htim3, IN_U);
 80006b4:	2100      	movs	r1, #0
 80006b6:	4854      	ldr	r0, [pc, #336]	@ (8000808 <commutation+0x1c8>)
 80006b8:	f001 fff4 	bl	80026a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_V);
 80006bc:	2104      	movs	r1, #4
 80006be:	4852      	ldr	r0, [pc, #328]	@ (8000808 <commutation+0x1c8>)
 80006c0:	f001 fff0 	bl	80026a4 <HAL_TIM_PWM_Start>

            break;
 80006c4:	e099      	b.n	80007fa <commutation+0x1ba>
        case POS_UW:
            GPIOB->ODR |= (EN_U | EN_W); // Activar EN_U y EN_W
 80006c6:	4b4f      	ldr	r3, [pc, #316]	@ (8000804 <commutation+0x1c4>)
 80006c8:	68db      	ldr	r3, [r3, #12]
 80006ca:	4a4e      	ldr	r2, [pc, #312]	@ (8000804 <commutation+0x1c4>)
 80006cc:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80006d0:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 80006d2:	4b4c      	ldr	r3, [pc, #304]	@ (8000804 <commutation+0x1c4>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	4a4b      	ldr	r2, [pc, #300]	@ (8000804 <commutation+0x1c4>)
 80006d8:	f023 0302 	bic.w	r3, r3, #2
 80006dc:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 80006de:	4b4a      	ldr	r3, [pc, #296]	@ (8000808 <commutation+0x1c8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	88ba      	ldrh	r2, [r7, #4]
 80006e4:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80006e6:	4b48      	ldr	r3, [pc, #288]	@ (8000808 <commutation+0x1c8>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_Start(&htim3, IN_U);
 80006ee:	2100      	movs	r1, #0
 80006f0:	4845      	ldr	r0, [pc, #276]	@ (8000808 <commutation+0x1c8>)
 80006f2:	f001 ffd7 	bl	80026a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_W);
 80006f6:	2108      	movs	r1, #8
 80006f8:	4843      	ldr	r0, [pc, #268]	@ (8000808 <commutation+0x1c8>)
 80006fa:	f001 ffd3 	bl	80026a4 <HAL_TIM_PWM_Start>
            break;
 80006fe:	e07c      	b.n	80007fa <commutation+0x1ba>
        case POS_VW:
            GPIOB->ODR |= (EN_V | EN_W); // Activar EN_V y EN_W
 8000700:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <commutation+0x1c4>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	4a3f      	ldr	r2, [pc, #252]	@ (8000804 <commutation+0x1c4>)
 8000706:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800070a:	f043 0302 	orr.w	r3, r3, #2
 800070e:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 8000710:	4b3c      	ldr	r3, [pc, #240]	@ (8000804 <commutation+0x1c4>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	4a3b      	ldr	r2, [pc, #236]	@ (8000804 <commutation+0x1c4>)
 8000716:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800071a:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 800071c:	4b3a      	ldr	r3, [pc, #232]	@ (8000808 <commutation+0x1c8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	88ba      	ldrh	r2, [r7, #4]
 8000722:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000724:	4b38      	ldr	r3, [pc, #224]	@ (8000808 <commutation+0x1c8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_Start(&htim3, IN_V);
 800072c:	2104      	movs	r1, #4
 800072e:	4836      	ldr	r0, [pc, #216]	@ (8000808 <commutation+0x1c8>)
 8000730:	f001 ffb8 	bl	80026a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8000734:	2108      	movs	r1, #8
 8000736:	4834      	ldr	r0, [pc, #208]	@ (8000808 <commutation+0x1c8>)
 8000738:	f001 ffb4 	bl	80026a4 <HAL_TIM_PWM_Start>
            break;
 800073c:	e05d      	b.n	80007fa <commutation+0x1ba>
        case POS_VU:
            GPIOB->ODR |= (EN_U | EN_V); // Activar EN_U y EN_V
 800073e:	4b31      	ldr	r3, [pc, #196]	@ (8000804 <commutation+0x1c4>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4a30      	ldr	r2, [pc, #192]	@ (8000804 <commutation+0x1c4>)
 8000744:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000748:	f043 0302 	orr.w	r3, r3, #2
 800074c:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_W;         // Desactivar EN_W
 800074e:	4b2d      	ldr	r3, [pc, #180]	@ (8000804 <commutation+0x1c4>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a2c      	ldr	r2, [pc, #176]	@ (8000804 <commutation+0x1c4>)
 8000754:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000758:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 800075a:	4b2b      	ldr	r3, [pc, #172]	@ (8000808 <commutation+0x1c8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	88ba      	ldrh	r2, [r7, #4]
 8000760:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000762:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <commutation+0x1c8>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2200      	movs	r2, #0
 8000768:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_TIM_PWM_Start(&htim3, IN_V);
 800076a:	2104      	movs	r1, #4
 800076c:	4826      	ldr	r0, [pc, #152]	@ (8000808 <commutation+0x1c8>)
 800076e:	f001 ff99 	bl	80026a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8000772:	2100      	movs	r1, #0
 8000774:	4824      	ldr	r0, [pc, #144]	@ (8000808 <commutation+0x1c8>)
 8000776:	f001 ff95 	bl	80026a4 <HAL_TIM_PWM_Start>

            break;
 800077a:	e03e      	b.n	80007fa <commutation+0x1ba>
        case POS_WU:
            GPIOB->ODR |= (EN_U | EN_W); // Activar EN_U y EN_W
 800077c:	4b21      	ldr	r3, [pc, #132]	@ (8000804 <commutation+0x1c4>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	4a20      	ldr	r2, [pc, #128]	@ (8000804 <commutation+0x1c4>)
 8000782:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000786:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 8000788:	4b1e      	ldr	r3, [pc, #120]	@ (8000804 <commutation+0x1c4>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a1d      	ldr	r2, [pc, #116]	@ (8000804 <commutation+0x1c4>)
 800078e:	f023 0302 	bic.w	r3, r3, #2
 8000792:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <commutation+0x1c8>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	88ba      	ldrh	r2, [r7, #4]
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 800079c:	4b1a      	ldr	r3, [pc, #104]	@ (8000808 <commutation+0x1c8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2200      	movs	r2, #0
 80007a2:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_TIM_PWM_Start(&htim3, IN_W);
 80007a4:	2108      	movs	r1, #8
 80007a6:	4818      	ldr	r0, [pc, #96]	@ (8000808 <commutation+0x1c8>)
 80007a8:	f001 ff7c 	bl	80026a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_U);
 80007ac:	2100      	movs	r1, #0
 80007ae:	4816      	ldr	r0, [pc, #88]	@ (8000808 <commutation+0x1c8>)
 80007b0:	f001 ff78 	bl	80026a4 <HAL_TIM_PWM_Start>
            break;
 80007b4:	e021      	b.n	80007fa <commutation+0x1ba>
        case POS_WV:
            GPIOB->ODR |= (EN_V | EN_W); // Activar EN_V y EN_W
 80007b6:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <commutation+0x1c4>)
 80007b8:	68db      	ldr	r3, [r3, #12]
 80007ba:	4a12      	ldr	r2, [pc, #72]	@ (8000804 <commutation+0x1c4>)
 80007bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80007c0:	f043 0302 	orr.w	r3, r3, #2
 80007c4:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~(EN_U | EN_V | EN_W);         // Desactivar EN_U
 80007c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000804 <commutation+0x1c4>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000804 <commutation+0x1c4>)
 80007cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80007d0:	f023 0302 	bic.w	r3, r3, #2
 80007d4:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <commutation+0x1c8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	88ba      	ldrh	r2, [r7, #4]
 80007dc:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80007de:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <commutation+0x1c8>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_TIM_PWM_Start(&htim3, IN_W);
 80007e6:	2108      	movs	r1, #8
 80007e8:	4807      	ldr	r0, [pc, #28]	@ (8000808 <commutation+0x1c8>)
 80007ea:	f001 ff5b 	bl	80026a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_V);
 80007ee:	2104      	movs	r1, #4
 80007f0:	4805      	ldr	r0, [pc, #20]	@ (8000808 <commutation+0x1c8>)
 80007f2:	f001 ff57 	bl	80026a4 <HAL_TIM_PWM_Start>

            break;
 80007f6:	e000      	b.n	80007fa <commutation+0x1ba>
        default:
            break;
 80007f8:	bf00      	nop
    }
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40010c00 	.word	0x40010c00
 8000808:	200000c4 	.word	0x200000c4

0800080c <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a3c      	ldr	r2, [pc, #240]	@ (800090c <HAL_TIM_OC_DelayElapsedCallback+0x100>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d172      	bne.n	8000904 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	7f1b      	ldrb	r3, [r3, #28]
 8000822:	2b01      	cmp	r3, #1
 8000824:	d16e      	bne.n	8000904 <HAL_TIM_OC_DelayElapsedCallback+0xf8>
	    //TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
		__HAL_TIM_DISABLE(&htim4);
 8000826:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000830:	4013      	ands	r3, r2
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10f      	bne.n	8000856 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 8000836:	4b36      	ldr	r3, [pc, #216]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	6a1a      	ldr	r2, [r3, #32]
 800083c:	f240 4344 	movw	r3, #1092	@ 0x444
 8000840:	4013      	ands	r3, r2
 8000842:	2b00      	cmp	r3, #0
 8000844:	d107      	bne.n	8000856 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 8000846:	4b32      	ldr	r3, [pc, #200]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681a      	ldr	r2, [r3, #0]
 800084c:	4b30      	ldr	r3, [pc, #192]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	f022 0201 	bic.w	r2, r2, #1
 8000854:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000856:	4b2e      	ldr	r3, [pc, #184]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Stop_IT(&htim4);
 800085e:	482c      	ldr	r0, [pc, #176]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000860:	f001 fca8 	bl	80021b4 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim4);
 8000864:	482a      	ldr	r0, [pc, #168]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 8000866:	f001 fc2c 	bl	80020c2 <HAL_TIM_Base_Stop>

		HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800086a:	2100      	movs	r1, #0
 800086c:	4828      	ldr	r0, [pc, #160]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 800086e:	f001 fe17 	bl	80024a0 <HAL_TIM_OC_Stop_IT>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	e02d      	b.n	80008d4 <HAL_TIM_OC_DelayElapsedCallback+0xc8>
			// Detener el temporizador y deshabilitar el contador
			if (eventTable[i].currentState == state_machine) {
 8000878:	4926      	ldr	r1, [pc, #152]	@ (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 800087a:	68fa      	ldr	r2, [r7, #12]
 800087c:	4613      	mov	r3, r2
 800087e:	005b      	lsls	r3, r3, #1
 8000880:	4413      	add	r3, r2
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	781a      	ldrb	r2, [r3, #0]
 8000888:	4b23      	ldr	r3, [pc, #140]	@ (8000918 <HAL_TIM_OC_DelayElapsedCallback+0x10c>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	429a      	cmp	r2, r3
 8000890:	d11d      	bne.n	80008ce <HAL_TIM_OC_DelayElapsedCallback+0xc2>
				if (eventTable[i].eventFlag != NULL) {
 8000892:	4920      	ldr	r1, [pc, #128]	@ (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4613      	mov	r3, r2
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	4413      	add	r3, r2
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	440b      	add	r3, r1
 80008a0:	3304      	adds	r3, #4
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d019      	beq.n	80008dc <HAL_TIM_OC_DelayElapsedCallback+0xd0>
					*(eventTable[i].eventFlag) = true;
 80008a8:	491a      	ldr	r1, [pc, #104]	@ (8000914 <HAL_TIM_OC_DelayElapsedCallback+0x108>)
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4613      	mov	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	4413      	add	r3, r2
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	440b      	add	r3, r1
 80008b6:	3304      	adds	r3, #4
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	2201      	movs	r2, #1
 80008bc:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Stop_IT(&htim4);
 80008be:	4814      	ldr	r0, [pc, #80]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008c0:	f001 fc78 	bl	80021b4 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80008c4:	2100      	movs	r1, #0
 80008c6:	4812      	ldr	r0, [pc, #72]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008c8:	f001 fdea 	bl	80024a0 <HAL_TIM_OC_Stop_IT>

				}
				break;
 80008cc:	e006      	b.n	80008dc <HAL_TIM_OC_DelayElapsedCallback+0xd0>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3301      	adds	r3, #1
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b03      	cmp	r3, #3
 80008d8:	d9ce      	bls.n	8000878 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 80008da:	e000      	b.n	80008de <HAL_TIM_OC_DelayElapsedCallback+0xd2>
				break;
 80008dc:	bf00      	nop

			}


		}
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80008de:	4b0c      	ldr	r3, [pc, #48]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 80008e6:	480a      	ldr	r0, [pc, #40]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008e8:	f001 fc12 	bl	8002110 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80008ec:	2100      	movs	r1, #0
 80008ee:	4808      	ldr	r0, [pc, #32]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008f0:	f001 fce6 	bl	80022c0 <HAL_TIM_OC_Start_IT>
		__HAL_TIM_ENABLE(&htim4);
 80008f4:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b05      	ldr	r3, [pc, #20]	@ (8000910 <HAL_TIM_OC_DelayElapsedCallback+0x104>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0201 	orr.w	r2, r2, #1
 8000902:	601a      	str	r2, [r3, #0]


	}
}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40000800 	.word	0x40000800
 8000910:	2000007c 	.word	0x2000007c
 8000914:	20000024 	.word	0x20000024
 8000918:	20000179 	.word	0x20000179

0800091c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000922:	f000 fb73 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000926:	f000 f81f 	bl	8000968 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800092a:	f000 f97b 	bl	8000c24 <MX_GPIO_Init>
  MX_TIM4_Init();
 800092e:	f000 f8d1 	bl	8000ad4 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000932:	f000 f94d 	bl	8000bd0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000936:	f000 f85d 	bl	80009f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <main+0x40>)
 8000942:	f000 ff2d 	bl	80017a0 <HAL_GPIO_WritePin>
state statetete;
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	4905      	ldr	r1, [pc, #20]	@ (8000960 <main+0x44>)
 800094a:	4806      	ldr	r0, [pc, #24]	@ (8000964 <main+0x48>)
 800094c:	f002 fe9b 	bl	8003686 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  statetete = handleState();
 8000950:	f7ff fdc0 	bl	80004d4 <handleState>
 8000954:	4603      	mov	r3, r0
 8000956:	71fb      	strb	r3, [r7, #7]
 8000958:	bf00      	nop
 800095a:	e7f9      	b.n	8000950 <main+0x34>
 800095c:	40011000 	.word	0x40011000
 8000960:	20000154 	.word	0x20000154
 8000964:	2000010c 	.word	0x2000010c

08000968 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b090      	sub	sp, #64	@ 0x40
 800096c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	2228      	movs	r2, #40	@ 0x28
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f003 fc14 	bl	80041a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
 8000988:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800098a:	2301      	movs	r3, #1
 800098c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800098e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000992:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000998:	2301      	movs	r3, #1
 800099a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80009a6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80009aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 0318 	add.w	r3, r7, #24
 80009b0:	4618      	mov	r0, r3
 80009b2:	f000 ff27 	bl	8001804 <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80009bc:	f000 f9a0 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009d6:	1d3b      	adds	r3, r7, #4
 80009d8:	2102      	movs	r1, #2
 80009da:	4618      	mov	r0, r3
 80009dc:	f001 f994 	bl	8001d08 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0x82>
  {
    Error_Handler();
 80009e6:	f000 f98b 	bl	8000d00 <Error_Handler>
  }
}
 80009ea:	bf00      	nop
 80009ec:	3740      	adds	r7, #64	@ 0x40
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08a      	sub	sp, #40	@ 0x28
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fa:	f107 0320 	add.w	r3, r7, #32
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a18:	4a2d      	ldr	r2, [pc, #180]	@ (8000ad0 <MX_TIM3_Init+0xdc>)
 8000a1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8000a1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a1e:	2201      	movs	r2, #1
 8000a20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8000a28:	4b28      	ldr	r3, [pc, #160]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a2a:	f240 7207 	movw	r2, #1799	@ 0x707
 8000a2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a30:	4b26      	ldr	r3, [pc, #152]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a36:	4b25      	ldr	r3, [pc, #148]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a3c:	4823      	ldr	r0, [pc, #140]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a3e:	f001 fde1 	bl	8002604 <HAL_TIM_PWM_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a48:	f000 f95a 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a54:	f107 0320 	add.w	r3, r7, #32
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481c      	ldr	r0, [pc, #112]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a5c:	f002 fcc8 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a66:	f000 f94b 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a6a:	2360      	movs	r3, #96	@ 0x60
 8000a6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4812      	ldr	r0, [pc, #72]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a82:	f002 f861 	bl	8002b48 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a8c:	f000 f938 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	2204      	movs	r2, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	480d      	ldr	r0, [pc, #52]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000a98:	f002 f856 	bl	8002b48 <HAL_TIM_PWM_ConfigChannel>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000aa2:	f000 f92d 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2208      	movs	r2, #8
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4807      	ldr	r0, [pc, #28]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000aae:	f002 f84b 	bl	8002b48 <HAL_TIM_PWM_ConfigChannel>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8000ab8:	f000 f922 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000abc:	4803      	ldr	r0, [pc, #12]	@ (8000acc <MX_TIM3_Init+0xd8>)
 8000abe:	f000 f99b 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	@ 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	200000c4 	.word	0x200000c4
 8000ad0:	40000400 	.word	0x40000400

08000ad4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b096      	sub	sp, #88	@ 0x58
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ada:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
 8000ae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000af2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
 8000b02:	615a      	str	r2, [r3, #20]
 8000b04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  TIM_OnePulse_InitTypeDef sConfig;
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000b06:	4b30      	ldr	r3, [pc, #192]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b08:	4a30      	ldr	r2, [pc, #192]	@ (8000bcc <MX_TIM4_Init+0xf8>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b0e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000b12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b2c      	ldr	r3, [pc, #176]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000b1a:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b1c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b22:	4b29      	ldr	r3, [pc, #164]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b28:	4b27      	ldr	r3, [pc, #156]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b2e:	4826      	ldr	r0, [pc, #152]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b30:	f001 fa78 	bl	8002024 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 f8e1 	bl	8000d00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b42:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b44:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b48:	4619      	mov	r1, r3
 8000b4a:	481f      	ldr	r0, [pc, #124]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b4c:	f002 f8be 	bl	8002ccc <HAL_TIM_ConfigClockSource>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000b56:	f000 f8d3 	bl	8000d00 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000b5a:	481b      	ldr	r0, [pc, #108]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b5c:	f001 fb58 	bl	8002210 <HAL_TIM_OC_Init>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000b66:	f000 f8cb 	bl	8000d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b76:	4619      	mov	r1, r3
 8000b78:	4813      	ldr	r0, [pc, #76]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000b7a:	f002 fc39 	bl	80033f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000b84:	f000 f8bc 	bl	8000d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4809      	ldr	r0, [pc, #36]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000ba2:	f001 ff75 	bl	8002a90 <HAL_TIM_OC_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000bac:	f000 f8a8 	bl	8000d00 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	699a      	ldr	r2, [r3, #24]
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <MX_TIM4_Init+0xf4>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f042 0208 	orr.w	r2, r2, #8
 8000bbe:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	3758      	adds	r7, #88	@ 0x58
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	2000007c 	.word	0x2000007c
 8000bcc:	40000800 	.word	0x40000800

08000bd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bd4:	4b11      	ldr	r3, [pc, #68]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bd6:	4a12      	ldr	r2, [pc, #72]	@ (8000c20 <MX_USART2_UART_Init+0x50>)
 8000bd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bdc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bee:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_USART2_UART_Init+0x4c>)
 8000c08:	f002 fc62 	bl	80034d0 <HAL_UART_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c12:	f000 f875 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000010c 	.word	0x2000010c
 8000c20:	40004400 	.word	0x40004400

08000c24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2a:	f107 0310 	add.w	r3, r7, #16
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c38:	4b2e      	ldr	r3, [pc, #184]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c3a:	699b      	ldr	r3, [r3, #24]
 8000c3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c3e:	f043 0310 	orr.w	r3, r3, #16
 8000c42:	6193      	str	r3, [r2, #24]
 8000c44:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	f003 0310 	and.w	r3, r3, #16
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b28      	ldr	r3, [pc, #160]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c52:	699b      	ldr	r3, [r3, #24]
 8000c54:	4a27      	ldr	r2, [pc, #156]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c56:	f043 0320 	orr.w	r3, r3, #32
 8000c5a:	6193      	str	r3, [r2, #24]
 8000c5c:	4b25      	ldr	r3, [pc, #148]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c5e:	699b      	ldr	r3, [r3, #24]
 8000c60:	f003 0320 	and.w	r3, r3, #32
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c68:	4b22      	ldr	r3, [pc, #136]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	4a21      	ldr	r2, [pc, #132]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c6e:	f043 0304 	orr.w	r3, r3, #4
 8000c72:	6193      	str	r3, [r2, #24]
 8000c74:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c76:	699b      	ldr	r3, [r3, #24]
 8000c78:	f003 0304 	and.w	r3, r3, #4
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c80:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c82:	699b      	ldr	r3, [r3, #24]
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c86:	f043 0308 	orr.w	r3, r3, #8
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b19      	ldr	r3, [pc, #100]	@ (8000cf4 <MX_GPIO_Init+0xd0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f003 0308 	and.w	r3, r3, #8
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c9e:	4816      	ldr	r0, [pc, #88]	@ (8000cf8 <MX_GPIO_Init+0xd4>)
 8000ca0:	f000 fd7e 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_U_Pin|IN_WB11_Pin, GPIO_PIN_RESET);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	f640 4102 	movw	r1, #3074	@ 0xc02
 8000caa:	4814      	ldr	r0, [pc, #80]	@ (8000cfc <MX_GPIO_Init+0xd8>)
 8000cac:	f000 fd78 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cb6:	2311      	movs	r3, #17
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0310 	add.w	r3, r7, #16
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <MX_GPIO_Init+0xd4>)
 8000cca:	f000 fbe5 	bl	8001498 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_V_Pin EN_U_Pin IN_WB11_Pin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_U_Pin|IN_WB11_Pin;
 8000cce:	f640 4302 	movw	r3, #3074	@ 0xc02
 8000cd2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_GPIO_Init+0xd8>)
 8000ce8:	f000 fbd6 	bl	8001498 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40011000 	.word	0x40011000
 8000cfc:	40010c00 	.word	0x40010c00

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	bf00      	nop
 8000d0a:	e7fd      	b.n	8000d08 <Error_Handler+0x8>

08000d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	4a14      	ldr	r2, [pc, #80]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6193      	str	r3, [r2, #24]
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	60bb      	str	r3, [r7, #8]
 8000d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d34:	61d3      	str	r3, [r2, #28]
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <HAL_MspInit+0x5c>)
 8000d38:	69db      	ldr	r3, [r3, #28]
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_MspInit+0x60>)
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	4a04      	ldr	r2, [pc, #16]	@ (8000d6c <HAL_MspInit+0x60>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	3714      	adds	r7, #20
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40010000 	.word	0x40010000

08000d70 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <HAL_TIM_PWM_MspInit+0x34>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10b      	bne.n	8000d9a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a08      	ldr	r2, [pc, #32]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x38>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr
 8000da4:	40000400 	.word	0x40000400
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <HAL_TIM_Base_MspInit+0x44>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d113      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b0a      	ldr	r3, [pc, #40]	@ (8000df4 <HAL_TIM_Base_MspInit+0x48>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	2100      	movs	r1, #0
 8000dda:	201e      	movs	r0, #30
 8000ddc:	f000 fa73 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000de0:	201e      	movs	r0, #30
 8000de2:	f000 fa8c 	bl	80012fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8000de6:	bf00      	nop
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40000800 	.word	0x40000800
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <HAL_TIM_MspPostInit+0x88>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d12f      	bne.n	8000e78 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e18:	4b1a      	ldr	r3, [pc, #104]	@ (8000e84 <HAL_TIM_MspPostInit+0x8c>)
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	4a19      	ldr	r2, [pc, #100]	@ (8000e84 <HAL_TIM_MspPostInit+0x8c>)
 8000e1e:	f043 0304 	orr.w	r3, r3, #4
 8000e22:	6193      	str	r3, [r2, #24]
 8000e24:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <HAL_TIM_MspPostInit+0x8c>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	f003 0304 	and.w	r3, r3, #4
 8000e2c:	60fb      	str	r3, [r7, #12]
 8000e2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e30:	4b14      	ldr	r3, [pc, #80]	@ (8000e84 <HAL_TIM_MspPostInit+0x8c>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a13      	ldr	r2, [pc, #76]	@ (8000e84 <HAL_TIM_MspPostInit+0x8c>)
 8000e36:	f043 0308 	orr.w	r3, r3, #8
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <HAL_TIM_MspPostInit+0x8c>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0308 	and.w	r3, r3, #8
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = IN_U_Pin|IN_V_Pin;
 8000e48:	23c0      	movs	r3, #192	@ 0xc0
 8000e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480b      	ldr	r0, [pc, #44]	@ (8000e88 <HAL_TIM_MspPostInit+0x90>)
 8000e5c:	f000 fb1c 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_W_Pin;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IN_W_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4806      	ldr	r0, [pc, #24]	@ (8000e8c <HAL_TIM_MspPostInit+0x94>)
 8000e74:	f000 fb10 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800
 8000e8c:	40010c00 	.word	0x40010c00

08000e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_UART_MspInit+0x98>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d137      	bne.n	8000f20 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f2c <HAL_UART_MspInit+0x9c>)
 8000eb2:	69db      	ldr	r3, [r3, #28]
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <HAL_UART_MspInit+0x9c>)
 8000eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eba:	61d3      	str	r3, [r2, #28]
 8000ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f2c <HAL_UART_MspInit+0x9c>)
 8000ebe:	69db      	ldr	r3, [r3, #28]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec8:	4b18      	ldr	r3, [pc, #96]	@ (8000f2c <HAL_UART_MspInit+0x9c>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	@ (8000f2c <HAL_UART_MspInit+0x9c>)
 8000ece:	f043 0304 	orr.w	r3, r3, #4
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <HAL_UART_MspInit+0x9c>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0304 	and.w	r3, r3, #4
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee8:	2303      	movs	r3, #3
 8000eea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0310 	add.w	r3, r7, #16
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	480f      	ldr	r0, [pc, #60]	@ (8000f30 <HAL_UART_MspInit+0xa0>)
 8000ef4:	f000 fad0 	bl	8001498 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef8:	2308      	movs	r3, #8
 8000efa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4809      	ldr	r0, [pc, #36]	@ (8000f30 <HAL_UART_MspInit+0xa0>)
 8000f0c:	f000 fac4 	bl	8001498 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2100      	movs	r1, #0
 8000f14:	2026      	movs	r0, #38	@ 0x26
 8000f16:	f000 f9d6 	bl	80012c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f1a:	2026      	movs	r0, #38	@ 0x26
 8000f1c:	f000 f9ef 	bl	80012fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f20:	bf00      	nop
 8000f22:	3720      	adds	r7, #32
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40004400 	.word	0x40004400
 8000f2c:	40021000 	.word	0x40021000
 8000f30:	40010800 	.word	0x40010800

08000f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <NMI_Handler+0x4>

08000f3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f40:	bf00      	nop
 8000f42:	e7fd      	b.n	8000f40 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <BusFault_Handler+0x4>

08000f54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <UsageFault_Handler+0x4>

08000f5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f888 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f90:	4802      	ldr	r0, [pc, #8]	@ (8000f9c <TIM4_IRQHandler+0x10>)
 8000f92:	f001 fc8d 	bl	80028b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000007c 	.word	0x2000007c

08000fa0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <USART2_IRQHandler+0x10>)
 8000fa6:	f002 fb93 	bl	80036d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000010c 	.word	0x2000010c

08000fb4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fc0:	f7ff fff8 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc4:	480b      	ldr	r0, [pc, #44]	@ (8000ff4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000fc6:	490c      	ldr	r1, [pc, #48]	@ (8000ff8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000fc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000ffc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000fca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fcc:	e002      	b.n	8000fd4 <LoopCopyDataInit>

08000fce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd2:	3304      	adds	r3, #4

08000fd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd8:	d3f9      	bcc.n	8000fce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fda:	4a09      	ldr	r2, [pc, #36]	@ (8001000 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000fdc:	4c09      	ldr	r4, [pc, #36]	@ (8001004 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe0:	e001      	b.n	8000fe6 <LoopFillZerobss>

08000fe2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe4:	3204      	adds	r2, #4

08000fe6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe8:	d3fb      	bcc.n	8000fe2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fea:	f003 f8e3 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fee:	f7ff fc95 	bl	800091c <main>
  bx lr
 8000ff2:	4770      	bx	lr
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000ffc:	080042a8 	.word	0x080042a8
  ldr r2, =_sbss
 8001000:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001004:	20000188 	.word	0x20000188

08001008 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_2_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <HAL_Init+0x28>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	@ (8001034 <HAL_Init+0x28>)
 8001016:	f043 0310 	orr.w	r3, r3, #16
 800101a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 f947 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	200f      	movs	r0, #15
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe70 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40022000 	.word	0x40022000

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	@ (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 f95f 	bl	800131a <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001074:	f000 f927 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	@ (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000054 	.word	0x20000054
 8001090:	2000005c 	.word	0x2000005c
 8001094:	20000058 	.word	0x20000058

08001098 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <HAL_IncTick+0x1c>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <HAL_IncTick+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a03      	ldr	r2, [pc, #12]	@ (80010b8 <HAL_IncTick+0x20>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bc80      	pop	{r7}
 80010b2:	4770      	bx	lr
 80010b4:	2000005c 	.word	0x2000005c
 80010b8:	20000184 	.word	0x20000184

080010bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return uwTick;
 80010c0:	4b02      	ldr	r3, [pc, #8]	@ (80010cc <HAL_GetTick+0x10>)
 80010c2:	681b      	ldr	r3, [r3, #0]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	20000184 	.word	0x20000184

080010d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010d8:	f7ff fff0 	bl	80010bc <HAL_GetTick>
 80010dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010e8:	d005      	beq.n	80010f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_Delay+0x44>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	461a      	mov	r2, r3
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010f6:	bf00      	nop
 80010f8:	f7ff ffe0 	bl	80010bc <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	429a      	cmp	r2, r3
 8001106:	d8f7      	bhi.n	80010f8 <HAL_Delay+0x28>
  {
  }
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	2000005c 	.word	0x2000005c

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	@ (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	@ (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	bc80      	pop	{r7}
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4906      	ldr	r1, [pc, #24]	@ (80011b0 <__NVIC_EnableIRQ+0x34>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	e000e100 	.word	0xe000e100

080011b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	6039      	str	r1, [r7, #0]
 80011be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	db0a      	blt.n	80011de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	b2da      	uxtb	r2, r3
 80011cc:	490c      	ldr	r1, [pc, #48]	@ (8001200 <__NVIC_SetPriority+0x4c>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	0112      	lsls	r2, r2, #4
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	440b      	add	r3, r1
 80011d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011dc:	e00a      	b.n	80011f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	b2da      	uxtb	r2, r3
 80011e2:	4908      	ldr	r1, [pc, #32]	@ (8001204 <__NVIC_SetPriority+0x50>)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	3b04      	subs	r3, #4
 80011ec:	0112      	lsls	r2, r2, #4
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	440b      	add	r3, r1
 80011f2:	761a      	strb	r2, [r3, #24]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bc80      	pop	{r7}
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000e100 	.word	0xe000e100
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001208:	b480      	push	{r7}
 800120a:	b089      	sub	sp, #36	@ 0x24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f003 0307 	and.w	r3, r3, #7
 800121a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f1c3 0307 	rsb	r3, r3, #7
 8001222:	2b04      	cmp	r3, #4
 8001224:	bf28      	it	cs
 8001226:	2304      	movcs	r3, #4
 8001228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	3304      	adds	r3, #4
 800122e:	2b06      	cmp	r3, #6
 8001230:	d902      	bls.n	8001238 <NVIC_EncodePriority+0x30>
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	3b03      	subs	r3, #3
 8001236:	e000      	b.n	800123a <NVIC_EncodePriority+0x32>
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800123c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	401a      	ands	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001250:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	fa01 f303 	lsl.w	r3, r1, r3
 800125a:	43d9      	mvns	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	4313      	orrs	r3, r2
         );
}
 8001262:	4618      	mov	r0, r3
 8001264:	3724      	adds	r7, #36	@ 0x24
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001290:	f7ff ff90 	bl	80011b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff2d 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012d8:	f7ff ff42 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	6978      	ldr	r0, [r7, #20]
 80012e4:	f7ff ff90 	bl	8001208 <NVIC_EncodePriority>
 80012e8:	4602      	mov	r2, r0
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff5f 	bl	80011b4 <__NVIC_SetPriority>
}
 80012f6:	bf00      	nop
 80012f8:	3718      	adds	r7, #24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff ff35 	bl	800117c <__NVIC_EnableIRQ>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b082      	sub	sp, #8
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff ffa2 	bl	800126c <SysTick_Config>
 8001328:	4603      	mov	r3, r0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001332:	b480      	push	{r7}
 8001334:	b085      	sub	sp, #20
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d008      	beq.n	800135c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2204      	movs	r2, #4
 800134e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e020      	b.n	800139e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 020e 	bic.w	r2, r2, #14
 800136a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f022 0201 	bic.w	r2, r2, #1
 800137a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001384:	2101      	movs	r1, #1
 8001386:	fa01 f202 	lsl.w	r2, r1, r2
 800138a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2201      	movs	r2, #1
 8001390:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800139c:	7bfb      	ldrb	r3, [r7, #15]
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013b0:	2300      	movs	r3, #0
 80013b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d005      	beq.n	80013cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2204      	movs	r2, #4
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	73fb      	strb	r3, [r7, #15]
 80013ca:	e051      	b.n	8001470 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 020e 	bic.w	r2, r2, #14
 80013da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f022 0201 	bic.w	r2, r2, #1
 80013ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a22      	ldr	r2, [pc, #136]	@ (800147c <HAL_DMA_Abort_IT+0xd4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d029      	beq.n	800144a <HAL_DMA_Abort_IT+0xa2>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a21      	ldr	r2, [pc, #132]	@ (8001480 <HAL_DMA_Abort_IT+0xd8>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d022      	beq.n	8001446 <HAL_DMA_Abort_IT+0x9e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a1f      	ldr	r2, [pc, #124]	@ (8001484 <HAL_DMA_Abort_IT+0xdc>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d01a      	beq.n	8001440 <HAL_DMA_Abort_IT+0x98>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <HAL_DMA_Abort_IT+0xe0>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d012      	beq.n	800143a <HAL_DMA_Abort_IT+0x92>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a1c      	ldr	r2, [pc, #112]	@ (800148c <HAL_DMA_Abort_IT+0xe4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d00a      	beq.n	8001434 <HAL_DMA_Abort_IT+0x8c>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1b      	ldr	r2, [pc, #108]	@ (8001490 <HAL_DMA_Abort_IT+0xe8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d102      	bne.n	800142e <HAL_DMA_Abort_IT+0x86>
 8001428:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800142c:	e00e      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800142e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001432:	e00b      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001434:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001438:	e008      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800143a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800143e:	e005      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001440:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001444:	e002      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 8001446:	2310      	movs	r3, #16
 8001448:	e000      	b.n	800144c <HAL_DMA_Abort_IT+0xa4>
 800144a:	2301      	movs	r3, #1
 800144c:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <HAL_DMA_Abort_IT+0xec>)
 800144e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2201      	movs	r2, #1
 8001454:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2200      	movs	r2, #0
 800145c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
    } 
  }
  return status;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40020008 	.word	0x40020008
 8001480:	4002001c 	.word	0x4002001c
 8001484:	40020030 	.word	0x40020030
 8001488:	40020044 	.word	0x40020044
 800148c:	40020058 	.word	0x40020058
 8001490:	4002006c 	.word	0x4002006c
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	@ 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a2:	2300      	movs	r3, #0
 80014a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014aa:	e169      	b.n	8001780 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ac:	2201      	movs	r2, #1
 80014ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	4013      	ands	r3, r2
 80014be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	f040 8158 	bne.w	800177a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	4a9a      	ldr	r2, [pc, #616]	@ (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d05e      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014d4:	4a98      	ldr	r2, [pc, #608]	@ (8001738 <HAL_GPIO_Init+0x2a0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d875      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014da:	4a98      	ldr	r2, [pc, #608]	@ (800173c <HAL_GPIO_Init+0x2a4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d058      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014e0:	4a96      	ldr	r2, [pc, #600]	@ (800173c <HAL_GPIO_Init+0x2a4>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d86f      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014e6:	4a96      	ldr	r2, [pc, #600]	@ (8001740 <HAL_GPIO_Init+0x2a8>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d052      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014ec:	4a94      	ldr	r2, [pc, #592]	@ (8001740 <HAL_GPIO_Init+0x2a8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d869      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014f2:	4a94      	ldr	r2, [pc, #592]	@ (8001744 <HAL_GPIO_Init+0x2ac>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d04c      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 80014f8:	4a92      	ldr	r2, [pc, #584]	@ (8001744 <HAL_GPIO_Init+0x2ac>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d863      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 80014fe:	4a92      	ldr	r2, [pc, #584]	@ (8001748 <HAL_GPIO_Init+0x2b0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d046      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
 8001504:	4a90      	ldr	r2, [pc, #576]	@ (8001748 <HAL_GPIO_Init+0x2b0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d85d      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 800150a:	2b12      	cmp	r3, #18
 800150c:	d82a      	bhi.n	8001564 <HAL_GPIO_Init+0xcc>
 800150e:	2b12      	cmp	r3, #18
 8001510:	d859      	bhi.n	80015c6 <HAL_GPIO_Init+0x12e>
 8001512:	a201      	add	r2, pc, #4	@ (adr r2, 8001518 <HAL_GPIO_Init+0x80>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001593 	.word	0x08001593
 800151c:	0800156d 	.word	0x0800156d
 8001520:	0800157f 	.word	0x0800157f
 8001524:	080015c1 	.word	0x080015c1
 8001528:	080015c7 	.word	0x080015c7
 800152c:	080015c7 	.word	0x080015c7
 8001530:	080015c7 	.word	0x080015c7
 8001534:	080015c7 	.word	0x080015c7
 8001538:	080015c7 	.word	0x080015c7
 800153c:	080015c7 	.word	0x080015c7
 8001540:	080015c7 	.word	0x080015c7
 8001544:	080015c7 	.word	0x080015c7
 8001548:	080015c7 	.word	0x080015c7
 800154c:	080015c7 	.word	0x080015c7
 8001550:	080015c7 	.word	0x080015c7
 8001554:	080015c7 	.word	0x080015c7
 8001558:	080015c7 	.word	0x080015c7
 800155c:	08001575 	.word	0x08001575
 8001560:	08001589 	.word	0x08001589
 8001564:	4a79      	ldr	r2, [pc, #484]	@ (800174c <HAL_GPIO_Init+0x2b4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800156a:	e02c      	b.n	80015c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	623b      	str	r3, [r7, #32]
          break;
 8001572:	e029      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	3304      	adds	r3, #4
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	e024      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	3308      	adds	r3, #8
 8001584:	623b      	str	r3, [r7, #32]
          break;
 8001586:	e01f      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	330c      	adds	r3, #12
 800158e:	623b      	str	r3, [r7, #32]
          break;
 8001590:	e01a      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d102      	bne.n	80015a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800159a:	2304      	movs	r3, #4
 800159c:	623b      	str	r3, [r7, #32]
          break;
 800159e:	e013      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d105      	bne.n	80015b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015a8:	2308      	movs	r3, #8
 80015aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69fa      	ldr	r2, [r7, #28]
 80015b0:	611a      	str	r2, [r3, #16]
          break;
 80015b2:	e009      	b.n	80015c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015b4:	2308      	movs	r3, #8
 80015b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69fa      	ldr	r2, [r7, #28]
 80015bc:	615a      	str	r2, [r3, #20]
          break;
 80015be:	e003      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015c0:	2300      	movs	r3, #0
 80015c2:	623b      	str	r3, [r7, #32]
          break;
 80015c4:	e000      	b.n	80015c8 <HAL_GPIO_Init+0x130>
          break;
 80015c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	2bff      	cmp	r3, #255	@ 0xff
 80015cc:	d801      	bhi.n	80015d2 <HAL_GPIO_Init+0x13a>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	e001      	b.n	80015d6 <HAL_GPIO_Init+0x13e>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	3304      	adds	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	2bff      	cmp	r3, #255	@ 0xff
 80015dc:	d802      	bhi.n	80015e4 <HAL_GPIO_Init+0x14c>
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	e002      	b.n	80015ea <HAL_GPIO_Init+0x152>
 80015e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e6:	3b08      	subs	r3, #8
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	210f      	movs	r1, #15
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	fa01 f303 	lsl.w	r3, r1, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	401a      	ands	r2, r3
 80015fc:	6a39      	ldr	r1, [r7, #32]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	fa01 f303 	lsl.w	r3, r1, r3
 8001604:	431a      	orrs	r2, r3
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80b1 	beq.w	800177a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001618:	4b4d      	ldr	r3, [pc, #308]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 800161a:	699b      	ldr	r3, [r3, #24]
 800161c:	4a4c      	ldr	r2, [pc, #304]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6193      	str	r3, [r2, #24]
 8001624:	4b4a      	ldr	r3, [pc, #296]	@ (8001750 <HAL_GPIO_Init+0x2b8>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	60bb      	str	r3, [r7, #8]
 800162e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001630:	4a48      	ldr	r2, [pc, #288]	@ (8001754 <HAL_GPIO_Init+0x2bc>)
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	089b      	lsrs	r3, r3, #2
 8001636:	3302      	adds	r3, #2
 8001638:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800163c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	220f      	movs	r2, #15
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	43db      	mvns	r3, r3
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4013      	ands	r3, r2
 8001652:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a40      	ldr	r2, [pc, #256]	@ (8001758 <HAL_GPIO_Init+0x2c0>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d013      	beq.n	8001684 <HAL_GPIO_Init+0x1ec>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a3f      	ldr	r2, [pc, #252]	@ (800175c <HAL_GPIO_Init+0x2c4>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d00d      	beq.n	8001680 <HAL_GPIO_Init+0x1e8>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a3e      	ldr	r2, [pc, #248]	@ (8001760 <HAL_GPIO_Init+0x2c8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d007      	beq.n	800167c <HAL_GPIO_Init+0x1e4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4a3d      	ldr	r2, [pc, #244]	@ (8001764 <HAL_GPIO_Init+0x2cc>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d101      	bne.n	8001678 <HAL_GPIO_Init+0x1e0>
 8001674:	2303      	movs	r3, #3
 8001676:	e006      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001678:	2304      	movs	r3, #4
 800167a:	e004      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 800167c:	2302      	movs	r3, #2
 800167e:	e002      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001680:	2301      	movs	r3, #1
 8001682:	e000      	b.n	8001686 <HAL_GPIO_Init+0x1ee>
 8001684:	2300      	movs	r3, #0
 8001686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001688:	f002 0203 	and.w	r2, r2, #3
 800168c:	0092      	lsls	r2, r2, #2
 800168e:	4093      	lsls	r3, r2
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	4313      	orrs	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001696:	492f      	ldr	r1, [pc, #188]	@ (8001754 <HAL_GPIO_Init+0x2bc>)
 8001698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d006      	beq.n	80016be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b0:	4b2d      	ldr	r3, [pc, #180]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	492c      	ldr	r1, [pc, #176]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016b6:	69bb      	ldr	r3, [r7, #24]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	608b      	str	r3, [r1, #8]
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016be:	4b2a      	ldr	r3, [pc, #168]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c0:	689a      	ldr	r2, [r3, #8]
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	4928      	ldr	r1, [pc, #160]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016c8:	4013      	ands	r3, r2
 80016ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016d8:	4b23      	ldr	r3, [pc, #140]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016da:	68da      	ldr	r2, [r3, #12]
 80016dc:	4922      	ldr	r1, [pc, #136]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60cb      	str	r3, [r1, #12]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016e6:	4b20      	ldr	r3, [pc, #128]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	491e      	ldr	r1, [pc, #120]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001700:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4918      	ldr	r1, [pc, #96]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	604b      	str	r3, [r1, #4]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800170e:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	4914      	ldr	r1, [pc, #80]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d021      	beq.n	800176c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	490e      	ldr	r1, [pc, #56]	@ (8001768 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e021      	b.n	800177a <HAL_GPIO_Init+0x2e2>
 8001736:	bf00      	nop
 8001738:	10320000 	.word	0x10320000
 800173c:	10310000 	.word	0x10310000
 8001740:	10220000 	.word	0x10220000
 8001744:	10210000 	.word	0x10210000
 8001748:	10120000 	.word	0x10120000
 800174c:	10110000 	.word	0x10110000
 8001750:	40021000 	.word	0x40021000
 8001754:	40010000 	.word	0x40010000
 8001758:	40010800 	.word	0x40010800
 800175c:	40010c00 	.word	0x40010c00
 8001760:	40011000 	.word	0x40011000
 8001764:	40011400 	.word	0x40011400
 8001768:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800176c:	4b0b      	ldr	r3, [pc, #44]	@ (800179c <HAL_GPIO_Init+0x304>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	43db      	mvns	r3, r3
 8001774:	4909      	ldr	r1, [pc, #36]	@ (800179c <HAL_GPIO_Init+0x304>)
 8001776:	4013      	ands	r3, r2
 8001778:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	3301      	adds	r3, #1
 800177e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f ae8e 	bne.w	80014ac <HAL_GPIO_Init+0x14>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	372c      	adds	r7, #44	@ 0x2c
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40010400 	.word	0x40010400

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017bc:	e003      	b.n	80017c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	041a      	lsls	r2, r3, #16
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	611a      	str	r2, [r3, #16]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	4013      	ands	r3, r2
 80017e8:	041a      	lsls	r2, r3, #16
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	43d9      	mvns	r1, r3
 80017ee:	887b      	ldrh	r3, [r7, #2]
 80017f0:	400b      	ands	r3, r1
 80017f2:	431a      	orrs	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	611a      	str	r2, [r3, #16]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
	...

08001804 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d101      	bne.n	8001816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e272      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001824:	4b92      	ldr	r3, [pc, #584]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b04      	cmp	r3, #4
 800182e:	d00c      	beq.n	800184a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001830:	4b8f      	ldr	r3, [pc, #572]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 030c 	and.w	r3, r3, #12
 8001838:	2b08      	cmp	r3, #8
 800183a:	d112      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
 800183c:	4b8c      	ldr	r3, [pc, #560]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001848:	d10b      	bne.n	8001862 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800184a:	4b89      	ldr	r3, [pc, #548]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d06c      	beq.n	8001930 <HAL_RCC_OscConfig+0x12c>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d168      	bne.n	8001930 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e24c      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x76>
 800186c:	4b80      	ldr	r3, [pc, #512]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a7f      	ldr	r2, [pc, #508]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001872:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e02e      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x98>
 8001882:	4b7b      	ldr	r3, [pc, #492]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a7a      	ldr	r2, [pc, #488]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001888:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	4b78      	ldr	r3, [pc, #480]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a77      	ldr	r2, [pc, #476]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001894:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	e01d      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018a4:	d10c      	bne.n	80018c0 <HAL_RCC_OscConfig+0xbc>
 80018a6:	4b72      	ldr	r3, [pc, #456]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a71      	ldr	r2, [pc, #452]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	4b6f      	ldr	r3, [pc, #444]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e00b      	b.n	80018d8 <HAL_RCC_OscConfig+0xd4>
 80018c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b68      	ldr	r3, [pc, #416]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a67      	ldr	r2, [pc, #412]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e0:	f7ff fbec 	bl	80010bc <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff fbe8 	bl	80010bc <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	@ 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e200      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0xe4>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff fbd8 	bl	80010bc <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff fbd4 	bl	80010bc <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e1ec      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001922:	4b53      	ldr	r3, [pc, #332]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x10c>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d063      	beq.n	8001a06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800193e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d00b      	beq.n	8001962 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800194a:	4b49      	ldr	r3, [pc, #292]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 030c 	and.w	r3, r3, #12
 8001952:	2b08      	cmp	r3, #8
 8001954:	d11c      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
 8001956:	4b46      	ldr	r3, [pc, #280]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d116      	bne.n	8001990 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001962:	4b43      	ldr	r3, [pc, #268]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d005      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	691b      	ldr	r3, [r3, #16]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d001      	beq.n	800197a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e1c0      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	4939      	ldr	r1, [pc, #228]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 800198a:	4313      	orrs	r3, r2
 800198c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800198e:	e03a      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d020      	beq.n	80019da <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001998:	4b36      	ldr	r3, [pc, #216]	@ (8001a74 <HAL_RCC_OscConfig+0x270>)
 800199a:	2201      	movs	r2, #1
 800199c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199e:	f7ff fb8d 	bl	80010bc <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a6:	f7ff fb89 	bl	80010bc <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1a1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0f0      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	00db      	lsls	r3, r3, #3
 80019d2:	4927      	ldr	r1, [pc, #156]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	600b      	str	r3, [r1, #0]
 80019d8:	e015      	b.n	8001a06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019da:	4b26      	ldr	r3, [pc, #152]	@ (8001a74 <HAL_RCC_OscConfig+0x270>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb6c 	bl	80010bc <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e8:	f7ff fb68 	bl	80010bc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e180      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d03a      	beq.n	8001a88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d019      	beq.n	8001a4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fb4c 	bl	80010bc <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fb48 	bl	80010bc <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e160      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001a70 <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a46:	2001      	movs	r0, #1
 8001a48:	f000 face 	bl	8001fe8 <RCC_Delay>
 8001a4c:	e01c      	b.n	8001a88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <HAL_RCC_OscConfig+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a54:	f7ff fb32 	bl	80010bc <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5a:	e00f      	b.n	8001a7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a5c:	f7ff fb2e 	bl	80010bc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	d908      	bls.n	8001a7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e146      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	42420000 	.word	0x42420000
 8001a78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a7c:	4b92      	ldr	r3, [pc, #584]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1e9      	bne.n	8001a5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80a6 	beq.w	8001be2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10d      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b88      	ldr	r3, [pc, #544]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aa8:	69db      	ldr	r3, [r3, #28]
 8001aaa:	4a87      	ldr	r2, [pc, #540]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab0:	61d3      	str	r3, [r2, #28]
 8001ab2:	4b85      	ldr	r3, [pc, #532]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aba:	60bb      	str	r3, [r7, #8]
 8001abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac2:	4b82      	ldr	r3, [pc, #520]	@ (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d118      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ace:	4b7f      	ldr	r3, [pc, #508]	@ (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a7e      	ldr	r2, [pc, #504]	@ (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001ad4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ada:	f7ff faef 	bl	80010bc <HAL_GetTick>
 8001ade:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae2:	f7ff faeb 	bl	80010bc <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b64      	cmp	r3, #100	@ 0x64
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e103      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001af4:	4b75      	ldr	r3, [pc, #468]	@ (8001ccc <HAL_RCC_OscConfig+0x4c8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d106      	bne.n	8001b16 <HAL_RCC_OscConfig+0x312>
 8001b08:	4b6f      	ldr	r3, [pc, #444]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	6213      	str	r3, [r2, #32]
 8001b14:	e02d      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10c      	bne.n	8001b38 <HAL_RCC_OscConfig+0x334>
 8001b1e:	4b6a      	ldr	r3, [pc, #424]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b20:	6a1b      	ldr	r3, [r3, #32]
 8001b22:	4a69      	ldr	r2, [pc, #420]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6213      	str	r3, [r2, #32]
 8001b2a:	4b67      	ldr	r3, [pc, #412]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b2c:	6a1b      	ldr	r3, [r3, #32]
 8001b2e:	4a66      	ldr	r2, [pc, #408]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	f023 0304 	bic.w	r3, r3, #4
 8001b34:	6213      	str	r3, [r2, #32]
 8001b36:	e01c      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b05      	cmp	r3, #5
 8001b3e:	d10c      	bne.n	8001b5a <HAL_RCC_OscConfig+0x356>
 8001b40:	4b61      	ldr	r3, [pc, #388]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4a60      	ldr	r2, [pc, #384]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b46:	f043 0304 	orr.w	r3, r3, #4
 8001b4a:	6213      	str	r3, [r2, #32]
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6213      	str	r3, [r2, #32]
 8001b58:	e00b      	b.n	8001b72 <HAL_RCC_OscConfig+0x36e>
 8001b5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a5a      	ldr	r2, [pc, #360]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b58      	ldr	r3, [pc, #352]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a57      	ldr	r2, [pc, #348]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d015      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff fa9f 	bl	80010bc <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b82:	f7ff fa9b 	bl	80010bc <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e0b1      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b98:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d0ee      	beq.n	8001b82 <HAL_RCC_OscConfig+0x37e>
 8001ba4:	e014      	b.n	8001bd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fa89 	bl	80010bc <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bae:	f7ff fa85 	bl	80010bc <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e09b      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bc4:	4b40      	ldr	r3, [pc, #256]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d105      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd6:	4b3c      	ldr	r3, [pc, #240]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bdc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001be0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8087 	beq.w	8001cfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bec:	4b36      	ldr	r3, [pc, #216]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b08      	cmp	r3, #8
 8001bf6:	d061      	beq.n	8001cbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d146      	bne.n	8001c8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c00:	4b33      	ldr	r3, [pc, #204]	@ (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fa59 	bl	80010bc <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c0e:	f7ff fa55 	bl	80010bc <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e06d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c20:	4b29      	ldr	r3, [pc, #164]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1f0      	bne.n	8001c0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c34:	d108      	bne.n	8001c48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c36:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4921      	ldr	r1, [pc, #132]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c48:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a19      	ldr	r1, [r3, #32]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c58:	430b      	orrs	r3, r1
 8001c5a:	491b      	ldr	r1, [pc, #108]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c60:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c66:	f7ff fa29 	bl	80010bc <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6e:	f7ff fa25 	bl	80010bc <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e03d      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c80:	4b11      	ldr	r3, [pc, #68]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x46a>
 8001c8c:	e035      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8e:	4b10      	ldr	r3, [pc, #64]	@ (8001cd0 <HAL_RCC_OscConfig+0x4cc>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c94:	f7ff fa12 	bl	80010bc <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff fa0e 	bl	80010bc <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e026      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cae:	4b06      	ldr	r3, [pc, #24]	@ (8001cc8 <HAL_RCC_OscConfig+0x4c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x498>
 8001cba:	e01e      	b.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	e019      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	40007000 	.word	0x40007000
 8001cd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_OscConfig+0x500>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d106      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d001      	beq.n	8001cfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e0d0      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d1c:	4b6a      	ldr	r3, [pc, #424]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d910      	bls.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2a:	4b67      	ldr	r3, [pc, #412]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f023 0207 	bic.w	r2, r3, #7
 8001d32:	4965      	ldr	r1, [pc, #404]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b63      	ldr	r3, [pc, #396]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0b8      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d020      	beq.n	8001d9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d64:	4b59      	ldr	r3, [pc, #356]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4a58      	ldr	r2, [pc, #352]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d6a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001d6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0308 	and.w	r3, r3, #8
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d7c:	4b53      	ldr	r3, [pc, #332]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d82:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001d86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d88:	4b50      	ldr	r3, [pc, #320]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	494d      	ldr	r1, [pc, #308]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001d96:	4313      	orrs	r3, r2
 8001d98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d040      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	4b47      	ldr	r3, [pc, #284]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d115      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07f      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d107      	bne.n	8001dd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc6:	4b41      	ldr	r3, [pc, #260]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e073      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e06b      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001de6:	4b39      	ldr	r3, [pc, #228]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f023 0203 	bic.w	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4936      	ldr	r1, [pc, #216]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df8:	f7ff f960 	bl	80010bc <HAL_GetTick>
 8001dfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e00:	f7ff f95c 	bl	80010bc <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e053      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 020c 	and.w	r2, r3, #12
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d1eb      	bne.n	8001e00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e28:	4b27      	ldr	r3, [pc, #156]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d210      	bcs.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e36:	4b24      	ldr	r3, [pc, #144]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f023 0207 	bic.w	r2, r3, #7
 8001e3e:	4922      	ldr	r1, [pc, #136]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e46:	4b20      	ldr	r3, [pc, #128]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0307 	and.w	r3, r3, #7
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e032      	b.n	8001ebe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4916      	ldr	r1, [pc, #88]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e82:	4b12      	ldr	r3, [pc, #72]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	490e      	ldr	r1, [pc, #56]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e96:	f000 f821 	bl	8001edc <HAL_RCC_GetSysClockFreq>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ecc <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	091b      	lsrs	r3, r3, #4
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	490a      	ldr	r1, [pc, #40]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea8:	5ccb      	ldrb	r3, [r1, r3]
 8001eaa:	fa22 f303 	lsr.w	r3, r2, r3
 8001eae:	4a09      	ldr	r2, [pc, #36]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1cc>)
 8001eb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_RCC_ClockConfig+0x1d0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff f8be 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	40022000 	.word	0x40022000
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	0800426c 	.word	0x0800426c
 8001ed4:	20000054 	.word	0x20000054
 8001ed8:	20000058 	.word	0x20000058

08001edc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b087      	sub	sp, #28
 8001ee0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b04      	cmp	r3, #4
 8001f04:	d002      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x30>
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d003      	beq.n	8001f12 <HAL_RCC_GetSysClockFreq+0x36>
 8001f0a:	e027      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f0e:	613b      	str	r3, [r7, #16]
      break;
 8001f10:	e027      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	0c9b      	lsrs	r3, r3, #18
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f1c:	5cd3      	ldrb	r3, [r2, r3]
 8001f1e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d010      	beq.n	8001f4c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f2a:	4b11      	ldr	r3, [pc, #68]	@ (8001f70 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	0c5b      	lsrs	r3, r3, #17
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	4a11      	ldr	r2, [pc, #68]	@ (8001f7c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e004      	b.n	8001f56 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001f80 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f50:	fb02 f303 	mul.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	613b      	str	r3, [r7, #16]
      break;
 8001f5a:	e002      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_RCC_GetSysClockFreq+0x98>)
 8001f5e:	613b      	str	r3, [r7, #16]
      break;
 8001f60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f62:	693b      	ldr	r3, [r7, #16]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	371c      	adds	r7, #28
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	08004284 	.word	0x08004284
 8001f7c:	08004294 	.word	0x08004294
 8001f80:	003d0900 	.word	0x003d0900

08001f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f88:	4b02      	ldr	r3, [pc, #8]	@ (8001f94 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bc80      	pop	{r7}
 8001f92:	4770      	bx	lr
 8001f94:	20000054 	.word	0x20000054

08001f98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f9c:	f7ff fff2 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	4b05      	ldr	r3, [pc, #20]	@ (8001fb8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	4903      	ldr	r1, [pc, #12]	@ (8001fbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fae:	5ccb      	ldrb	r3, [r1, r3]
 8001fb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	0800427c 	.word	0x0800427c

08001fc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_RCC_GetHCLKFreq>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	0adb      	lsrs	r3, r3, #11
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	4903      	ldr	r1, [pc, #12]	@ (8001fe4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fd6:	5ccb      	ldrb	r3, [r1, r3]
 8001fd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	0800427c 	.word	0x0800427c

08001fe8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <RCC_Delay+0x34>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a0a      	ldr	r2, [pc, #40]	@ (8002020 <RCC_Delay+0x38>)
 8001ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffa:	0a5b      	lsrs	r3, r3, #9
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	fb02 f303 	mul.w	r3, r2, r3
 8002002:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002004:	bf00      	nop
  }
  while (Delay --);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1e5a      	subs	r2, r3, #1
 800200a:	60fa      	str	r2, [r7, #12]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f9      	bne.n	8002004 <RCC_Delay+0x1c>
}
 8002010:	bf00      	nop
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000054 	.word	0x20000054
 8002020:	10624dd3 	.word	0x10624dd3

08002024 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e041      	b.n	80020ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d106      	bne.n	8002050 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7fe feae 	bl	8000dac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2202      	movs	r2, #2
 8002054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3304      	adds	r3, #4
 8002060:	4619      	mov	r1, r3
 8002062:	4610      	mov	r0, r2
 8002064:	f000 ff14 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2201      	movs	r2, #1
 800206c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6a1a      	ldr	r2, [r3, #32]
 80020d0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <HAL_TIM_Base_Stop+0x38>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6a1a      	ldr	r2, [r3, #32]
 80020e0:	f240 4344 	movw	r3, #1092	@ 0x444
 80020e4:	4013      	ands	r3, r2
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d107      	bne.n	80020fa <HAL_TIM_Base_Stop+0x38>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0201 	bic.w	r2, r2, #1
 80020f8:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
	...

08002110 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800211e:	b2db      	uxtb	r3, r3
 8002120:	2b01      	cmp	r3, #1
 8002122:	d001      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e03a      	b.n	800219e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2202      	movs	r2, #2
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f042 0201 	orr.w	r2, r2, #1
 800213e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a18      	ldr	r2, [pc, #96]	@ (80021a8 <HAL_TIM_Base_Start_IT+0x98>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00e      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002152:	d009      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a14      	ldr	r2, [pc, #80]	@ (80021ac <HAL_TIM_Base_Start_IT+0x9c>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d004      	beq.n	8002168 <HAL_TIM_Base_Start_IT+0x58>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a13      	ldr	r2, [pc, #76]	@ (80021b0 <HAL_TIM_Base_Start_IT+0xa0>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d111      	bne.n	800218c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2b06      	cmp	r3, #6
 8002178:	d010      	beq.n	800219c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f042 0201 	orr.w	r2, r2, #1
 8002188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800218a:	e007      	b.n	800219c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 0201 	orr.w	r2, r2, #1
 800219a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3714      	adds	r7, #20
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bc80      	pop	{r7}
 80021a6:	4770      	bx	lr
 80021a8:	40012c00 	.word	0x40012c00
 80021ac:	40000400 	.word	0x40000400
 80021b0:	40000800 	.word	0x40000800

080021b4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	68da      	ldr	r2, [r3, #12]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0201 	bic.w	r2, r2, #1
 80021ca:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6a1a      	ldr	r2, [r3, #32]
 80021d2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10f      	bne.n	80021fc <HAL_TIM_Base_Stop_IT+0x48>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6a1a      	ldr	r2, [r3, #32]
 80021e2:	f240 4344 	movw	r3, #1092	@ 0x444
 80021e6:	4013      	ands	r3, r2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d107      	bne.n	80021fc <HAL_TIM_Base_Stop_IT+0x48>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e041      	b.n	80022a6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f839 	bl	80022ae <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2202      	movs	r2, #2
 8002240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3304      	adds	r3, #4
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f000 fe1e 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ca:	2300      	movs	r3, #0
 80022cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d109      	bne.n	80022e8 <HAL_TIM_OC_Start_IT+0x28>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b01      	cmp	r3, #1
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	e022      	b.n	800232e <HAL_TIM_OC_Start_IT+0x6e>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d109      	bne.n	8002302 <HAL_TIM_OC_Start_IT+0x42>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	bf14      	ite	ne
 80022fa:	2301      	movne	r3, #1
 80022fc:	2300      	moveq	r3, #0
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	e015      	b.n	800232e <HAL_TIM_OC_Start_IT+0x6e>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	2b08      	cmp	r3, #8
 8002306:	d109      	bne.n	800231c <HAL_TIM_OC_Start_IT+0x5c>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	bf14      	ite	ne
 8002314:	2301      	movne	r3, #1
 8002316:	2300      	moveq	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	e008      	b.n	800232e <HAL_TIM_OC_Start_IT+0x6e>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2b01      	cmp	r3, #1
 8002326:	bf14      	ite	ne
 8002328:	2301      	movne	r3, #1
 800232a:	2300      	moveq	r3, #0
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e0a9      	b.n	800248a <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d104      	bne.n	8002346 <HAL_TIM_OC_Start_IT+0x86>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002344:	e013      	b.n	800236e <HAL_TIM_OC_Start_IT+0xae>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b04      	cmp	r3, #4
 800234a:	d104      	bne.n	8002356 <HAL_TIM_OC_Start_IT+0x96>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2202      	movs	r2, #2
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002354:	e00b      	b.n	800236e <HAL_TIM_OC_Start_IT+0xae>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d104      	bne.n	8002366 <HAL_TIM_OC_Start_IT+0xa6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2202      	movs	r2, #2
 8002360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002364:	e003      	b.n	800236e <HAL_TIM_OC_Start_IT+0xae>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d841      	bhi.n	80023f8 <HAL_TIM_OC_Start_IT+0x138>
 8002374:	a201      	add	r2, pc, #4	@ (adr r2, 800237c <HAL_TIM_OC_Start_IT+0xbc>)
 8002376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237a:	bf00      	nop
 800237c:	080023b1 	.word	0x080023b1
 8002380:	080023f9 	.word	0x080023f9
 8002384:	080023f9 	.word	0x080023f9
 8002388:	080023f9 	.word	0x080023f9
 800238c:	080023c3 	.word	0x080023c3
 8002390:	080023f9 	.word	0x080023f9
 8002394:	080023f9 	.word	0x080023f9
 8002398:	080023f9 	.word	0x080023f9
 800239c:	080023d5 	.word	0x080023d5
 80023a0:	080023f9 	.word	0x080023f9
 80023a4:	080023f9 	.word	0x080023f9
 80023a8:	080023f9 	.word	0x080023f9
 80023ac:	080023e7 	.word	0x080023e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f042 0202 	orr.w	r2, r2, #2
 80023be:	60da      	str	r2, [r3, #12]
      break;
 80023c0:	e01d      	b.n	80023fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f042 0204 	orr.w	r2, r2, #4
 80023d0:	60da      	str	r2, [r3, #12]
      break;
 80023d2:	e014      	b.n	80023fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0208 	orr.w	r2, r2, #8
 80023e2:	60da      	str	r2, [r3, #12]
      break;
 80023e4:	e00b      	b.n	80023fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	68da      	ldr	r2, [r3, #12]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f042 0210 	orr.w	r2, r2, #16
 80023f4:	60da      	str	r2, [r3, #12]
      break;
 80023f6:	e002      	b.n	80023fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
      break;
 80023fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d141      	bne.n	8002488 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2201      	movs	r2, #1
 800240a:	6839      	ldr	r1, [r7, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 ffcb 	bl	80033a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1f      	ldr	r2, [pc, #124]	@ (8002494 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d107      	bne.n	800242c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800242a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a18      	ldr	r2, [pc, #96]	@ (8002494 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d00e      	beq.n	8002454 <HAL_TIM_OC_Start_IT+0x194>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800243e:	d009      	beq.n	8002454 <HAL_TIM_OC_Start_IT+0x194>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <HAL_TIM_OC_Start_IT+0x1d8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d004      	beq.n	8002454 <HAL_TIM_OC_Start_IT+0x194>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a13      	ldr	r2, [pc, #76]	@ (800249c <HAL_TIM_OC_Start_IT+0x1dc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d111      	bne.n	8002478 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d010      	beq.n	8002488 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f042 0201 	orr.w	r2, r2, #1
 8002474:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002476:	e007      	b.n	8002488 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f042 0201 	orr.w	r2, r2, #1
 8002486:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002488:	7bfb      	ldrb	r3, [r7, #15]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	40012c00 	.word	0x40012c00
 8002498:	40000400 	.word	0x40000400
 800249c:	40000800 	.word	0x40000800

080024a0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d841      	bhi.n	8002538 <HAL_TIM_OC_Stop_IT+0x98>
 80024b4:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <HAL_TIM_OC_Stop_IT+0x1c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	080024f1 	.word	0x080024f1
 80024c0:	08002539 	.word	0x08002539
 80024c4:	08002539 	.word	0x08002539
 80024c8:	08002539 	.word	0x08002539
 80024cc:	08002503 	.word	0x08002503
 80024d0:	08002539 	.word	0x08002539
 80024d4:	08002539 	.word	0x08002539
 80024d8:	08002539 	.word	0x08002539
 80024dc:	08002515 	.word	0x08002515
 80024e0:	08002539 	.word	0x08002539
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002539 	.word	0x08002539
 80024ec:	08002527 	.word	0x08002527
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0202 	bic.w	r2, r2, #2
 80024fe:	60da      	str	r2, [r3, #12]
      break;
 8002500:	e01d      	b.n	800253e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f022 0204 	bic.w	r2, r2, #4
 8002510:	60da      	str	r2, [r3, #12]
      break;
 8002512:	e014      	b.n	800253e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68da      	ldr	r2, [r3, #12]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f022 0208 	bic.w	r2, r2, #8
 8002522:	60da      	str	r2, [r3, #12]
      break;
 8002524:	e00b      	b.n	800253e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f022 0210 	bic.w	r2, r2, #16
 8002534:	60da      	str	r2, [r3, #12]
      break;
 8002536:	e002      	b.n	800253e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	73fb      	strb	r3, [r7, #15]
      break;
 800253c:	bf00      	nop
  }

  if (status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d157      	bne.n	80025f4 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f000 ff2b 	bl	80033a8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a2a      	ldr	r2, [pc, #168]	@ (8002600 <HAL_TIM_OC_Stop_IT+0x160>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d117      	bne.n	800258c <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d10f      	bne.n	800258c <HAL_TIM_OC_Stop_IT+0xec>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6a1a      	ldr	r2, [r3, #32]
 8002572:	f240 4344 	movw	r3, #1092	@ 0x444
 8002576:	4013      	ands	r3, r2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_TIM_OC_Stop_IT+0xec>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800258a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6a1a      	ldr	r2, [r3, #32]
 8002592:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10f      	bne.n	80025bc <HAL_TIM_OC_Stop_IT+0x11c>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80025a6:	4013      	ands	r3, r2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d107      	bne.n	80025bc <HAL_TIM_OC_Stop_IT+0x11c>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d104      	bne.n	80025cc <HAL_TIM_OC_Stop_IT+0x12c>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80025ca:	e013      	b.n	80025f4 <HAL_TIM_OC_Stop_IT+0x154>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	2b04      	cmp	r3, #4
 80025d0:	d104      	bne.n	80025dc <HAL_TIM_OC_Stop_IT+0x13c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80025da:	e00b      	b.n	80025f4 <HAL_TIM_OC_Stop_IT+0x154>
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d104      	bne.n	80025ec <HAL_TIM_OC_Stop_IT+0x14c>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2201      	movs	r2, #1
 80025e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80025ea:	e003      	b.n	80025f4 <HAL_TIM_OC_Stop_IT+0x154>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40012c00 	.word	0x40012c00

08002604 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e041      	b.n	800269a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d106      	bne.n	8002630 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7fe fba0 	bl	8000d70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2202      	movs	r2, #2
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3304      	adds	r3, #4
 8002640:	4619      	mov	r1, r3
 8002642:	4610      	mov	r0, r2
 8002644:	f000 fc24 	bl	8002e90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d109      	bne.n	80026c8 <HAL_TIM_PWM_Start+0x24>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b01      	cmp	r3, #1
 80026be:	bf14      	ite	ne
 80026c0:	2301      	movne	r3, #1
 80026c2:	2300      	moveq	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e022      	b.n	800270e <HAL_TIM_PWM_Start+0x6a>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d109      	bne.n	80026e2 <HAL_TIM_PWM_Start+0x3e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	bf14      	ite	ne
 80026da:	2301      	movne	r3, #1
 80026dc:	2300      	moveq	r3, #0
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	e015      	b.n	800270e <HAL_TIM_PWM_Start+0x6a>
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d109      	bne.n	80026fc <HAL_TIM_PWM_Start+0x58>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	bf14      	ite	ne
 80026f4:	2301      	movne	r3, #1
 80026f6:	2300      	moveq	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	e008      	b.n	800270e <HAL_TIM_PWM_Start+0x6a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b01      	cmp	r3, #1
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e05e      	b.n	80027d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d104      	bne.n	8002726 <HAL_TIM_PWM_Start+0x82>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2202      	movs	r2, #2
 8002720:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002724:	e013      	b.n	800274e <HAL_TIM_PWM_Start+0xaa>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b04      	cmp	r3, #4
 800272a:	d104      	bne.n	8002736 <HAL_TIM_PWM_Start+0x92>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002734:	e00b      	b.n	800274e <HAL_TIM_PWM_Start+0xaa>
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b08      	cmp	r3, #8
 800273a:	d104      	bne.n	8002746 <HAL_TIM_PWM_Start+0xa2>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002744:	e003      	b.n	800274e <HAL_TIM_PWM_Start+0xaa>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	6839      	ldr	r1, [r7, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 fe26 	bl	80033a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a1e      	ldr	r2, [pc, #120]	@ (80027dc <HAL_TIM_PWM_Start+0x138>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d107      	bne.n	8002776 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002774:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a18      	ldr	r2, [pc, #96]	@ (80027dc <HAL_TIM_PWM_Start+0x138>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d00e      	beq.n	800279e <HAL_TIM_PWM_Start+0xfa>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002788:	d009      	beq.n	800279e <HAL_TIM_PWM_Start+0xfa>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <HAL_TIM_PWM_Start+0x13c>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_TIM_PWM_Start+0xfa>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a12      	ldr	r2, [pc, #72]	@ (80027e4 <HAL_TIM_PWM_Start+0x140>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d111      	bne.n	80027c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2b06      	cmp	r3, #6
 80027ae:	d010      	beq.n	80027d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f042 0201 	orr.w	r2, r2, #1
 80027be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027c0:	e007      	b.n	80027d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3710      	adds	r7, #16
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40000400 	.word	0x40000400
 80027e4:	40000800 	.word	0x40000800

080027e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2200      	movs	r2, #0
 80027f8:	6839      	ldr	r1, [r7, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fdd4 	bl	80033a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a29      	ldr	r2, [pc, #164]	@ (80028ac <HAL_TIM_PWM_Stop+0xc4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d117      	bne.n	800283a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6a1a      	ldr	r2, [r3, #32]
 8002810:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002814:	4013      	ands	r3, r2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10f      	bne.n	800283a <HAL_TIM_PWM_Stop+0x52>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6a1a      	ldr	r2, [r3, #32]
 8002820:	f240 4344 	movw	r3, #1092	@ 0x444
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d107      	bne.n	800283a <HAL_TIM_PWM_Stop+0x52>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002838:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002844:	4013      	ands	r3, r2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <HAL_TIM_PWM_Stop+0x82>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6a1a      	ldr	r2, [r3, #32]
 8002850:	f240 4344 	movw	r3, #1092	@ 0x444
 8002854:	4013      	ands	r3, r2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d107      	bne.n	800286a <HAL_TIM_PWM_Stop+0x82>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f022 0201 	bic.w	r2, r2, #1
 8002868:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d104      	bne.n	800287a <HAL_TIM_PWM_Stop+0x92>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002878:	e013      	b.n	80028a2 <HAL_TIM_PWM_Stop+0xba>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b04      	cmp	r3, #4
 800287e:	d104      	bne.n	800288a <HAL_TIM_PWM_Stop+0xa2>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002888:	e00b      	b.n	80028a2 <HAL_TIM_PWM_Stop+0xba>
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b08      	cmp	r3, #8
 800288e:	d104      	bne.n	800289a <HAL_TIM_PWM_Stop+0xb2>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002898:	e003      	b.n	80028a2 <HAL_TIM_PWM_Stop+0xba>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40012c00 	.word	0x40012c00

080028b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d020      	beq.n	8002914 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d01b      	beq.n	8002914 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f06f 0202 	mvn.w	r2, #2
 80028e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 faad 	bl	8002e5a <HAL_TIM_IC_CaptureCallback>
 8002900:	e005      	b.n	800290e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fd ff82 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 faaf 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01b      	beq.n	8002960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0204 	mvn.w	r2, #4
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa87 	bl	8002e5a <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fd ff5c 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fa89 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d020      	beq.n	80029ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d01b      	beq.n	80029ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 0208 	mvn.w	r2, #8
 800297c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2204      	movs	r2, #4
 8002982:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d003      	beq.n	800299a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fa61 	bl	8002e5a <HAL_TIM_IC_CaptureCallback>
 8002998:	e005      	b.n	80029a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fd ff36 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fa63 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d020      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f06f 0210 	mvn.w	r2, #16
 80029c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2208      	movs	r2, #8
 80029ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa3b 	bl	8002e5a <HAL_TIM_IC_CaptureCallback>
 80029e4:	e005      	b.n	80029f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7fd ff10 	bl	800080c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fa3d 	bl	8002e6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00c      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d007      	beq.n	8002a1c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f06f 0201 	mvn.w	r2, #1
 8002a14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fd fddc 	bl	80005d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00c      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d007      	beq.n	8002a40 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 fd3f 	bl	80034be <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00c      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d007      	beq.n	8002a64 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa0d 	bl	8002e7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	f003 0320 	and.w	r3, r3, #32
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f003 0320 	and.w	r3, r3, #32
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0220 	mvn.w	r2, #32
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fd12 	bl	80034ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a88:	bf00      	nop
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_TIM_OC_ConfigChannel+0x1e>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e048      	b.n	8002b40 <HAL_TIM_OC_ConfigChannel+0xb0>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d839      	bhi.n	8002b30 <HAL_TIM_OC_ConfigChannel+0xa0>
 8002abc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ac4 <HAL_TIM_OC_ConfigChannel+0x34>)
 8002abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac2:	bf00      	nop
 8002ac4:	08002af9 	.word	0x08002af9
 8002ac8:	08002b31 	.word	0x08002b31
 8002acc:	08002b31 	.word	0x08002b31
 8002ad0:	08002b31 	.word	0x08002b31
 8002ad4:	08002b07 	.word	0x08002b07
 8002ad8:	08002b31 	.word	0x08002b31
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002b31 	.word	0x08002b31
 8002ae4:	08002b15 	.word	0x08002b15
 8002ae8:	08002b31 	.word	0x08002b31
 8002aec:	08002b31 	.word	0x08002b31
 8002af0:	08002b31 	.word	0x08002b31
 8002af4:	08002b23 	.word	0x08002b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68b9      	ldr	r1, [r7, #8]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 fa34 	bl	8002f6c <TIM_OC1_SetConfig>
      break;
 8002b04:	e017      	b.n	8002b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fa93 	bl	8003038 <TIM_OC2_SetConfig>
      break;
 8002b12:	e010      	b.n	8002b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 faf6 	bl	800310c <TIM_OC3_SetConfig>
      break;
 8002b20:	e009      	b.n	8002b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68b9      	ldr	r1, [r7, #8]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f000 fb59 	bl	80031e0 <TIM_OC4_SetConfig>
      break;
 8002b2e:	e002      	b.n	8002b36 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	75fb      	strb	r3, [r7, #23]
      break;
 8002b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3718      	adds	r7, #24
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b54:	2300      	movs	r3, #0
 8002b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e0ae      	b.n	8002cc4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	f200 809f 	bhi.w	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002b76:	a201      	add	r2, pc, #4	@ (adr r2, 8002b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7c:	08002bb1 	.word	0x08002bb1
 8002b80:	08002cb5 	.word	0x08002cb5
 8002b84:	08002cb5 	.word	0x08002cb5
 8002b88:	08002cb5 	.word	0x08002cb5
 8002b8c:	08002bf1 	.word	0x08002bf1
 8002b90:	08002cb5 	.word	0x08002cb5
 8002b94:	08002cb5 	.word	0x08002cb5
 8002b98:	08002cb5 	.word	0x08002cb5
 8002b9c:	08002c33 	.word	0x08002c33
 8002ba0:	08002cb5 	.word	0x08002cb5
 8002ba4:	08002cb5 	.word	0x08002cb5
 8002ba8:	08002cb5 	.word	0x08002cb5
 8002bac:	08002c73 	.word	0x08002c73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68b9      	ldr	r1, [r7, #8]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 f9d8 	bl	8002f6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f042 0208 	orr.w	r2, r2, #8
 8002bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699a      	ldr	r2, [r3, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0204 	bic.w	r2, r2, #4
 8002bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6999      	ldr	r1, [r3, #24]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	619a      	str	r2, [r3, #24]
      break;
 8002bee:	e064      	b.n	8002cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68b9      	ldr	r1, [r7, #8]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fa1e 	bl	8003038 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	699a      	ldr	r2, [r3, #24]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699a      	ldr	r2, [r3, #24]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6999      	ldr	r1, [r3, #24]
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	021a      	lsls	r2, r3, #8
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	619a      	str	r2, [r3, #24]
      break;
 8002c30:	e043      	b.n	8002cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f000 fa67 	bl	800310c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0208 	orr.w	r2, r2, #8
 8002c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69da      	ldr	r2, [r3, #28]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0204 	bic.w	r2, r2, #4
 8002c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	69d9      	ldr	r1, [r3, #28]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	61da      	str	r2, [r3, #28]
      break;
 8002c70:	e023      	b.n	8002cba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68b9      	ldr	r1, [r7, #8]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fab1 	bl	80031e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	69da      	ldr	r2, [r3, #28]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	69da      	ldr	r2, [r3, #28]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69d9      	ldr	r1, [r3, #28]
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	021a      	lsls	r2, r3, #8
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	61da      	str	r2, [r3, #28]
      break;
 8002cb2:	e002      	b.n	8002cba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8002cb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	e0b4      	b.n	8002e52 <HAL_TIM_ConfigClockSource+0x186>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68ba      	ldr	r2, [r7, #8]
 8002d16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d20:	d03e      	beq.n	8002da0 <HAL_TIM_ConfigClockSource+0xd4>
 8002d22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d26:	f200 8087 	bhi.w	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d2e:	f000 8086 	beq.w	8002e3e <HAL_TIM_ConfigClockSource+0x172>
 8002d32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d36:	d87f      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d38:	2b70      	cmp	r3, #112	@ 0x70
 8002d3a:	d01a      	beq.n	8002d72 <HAL_TIM_ConfigClockSource+0xa6>
 8002d3c:	2b70      	cmp	r3, #112	@ 0x70
 8002d3e:	d87b      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d40:	2b60      	cmp	r3, #96	@ 0x60
 8002d42:	d050      	beq.n	8002de6 <HAL_TIM_ConfigClockSource+0x11a>
 8002d44:	2b60      	cmp	r3, #96	@ 0x60
 8002d46:	d877      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d48:	2b50      	cmp	r3, #80	@ 0x50
 8002d4a:	d03c      	beq.n	8002dc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002d4c:	2b50      	cmp	r3, #80	@ 0x50
 8002d4e:	d873      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d058      	beq.n	8002e06 <HAL_TIM_ConfigClockSource+0x13a>
 8002d54:	2b40      	cmp	r3, #64	@ 0x40
 8002d56:	d86f      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d58:	2b30      	cmp	r3, #48	@ 0x30
 8002d5a:	d064      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x15a>
 8002d5c:	2b30      	cmp	r3, #48	@ 0x30
 8002d5e:	d86b      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d060      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x15a>
 8002d64:	2b20      	cmp	r3, #32
 8002d66:	d867      	bhi.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d05c      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x15a>
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d05a      	beq.n	8002e26 <HAL_TIM_ConfigClockSource+0x15a>
 8002d70:	e062      	b.n	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002d82:	f000 faf2 	bl	800336a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002d94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	609a      	str	r2, [r3, #8]
      break;
 8002d9e:	e04f      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002db0:	f000 fadb 	bl	800336a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689a      	ldr	r2, [r3, #8]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002dc2:	609a      	str	r2, [r3, #8]
      break;
 8002dc4:	e03c      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	f000 fa52 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2150      	movs	r1, #80	@ 0x50
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 faa9 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002de4:	e02c      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df2:	461a      	mov	r2, r3
 8002df4:	f000 fa70 	bl	80032d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2160      	movs	r1, #96	@ 0x60
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fa99 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002e04:	e01c      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	461a      	mov	r2, r3
 8002e14:	f000 fa32 	bl	800327c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2140      	movs	r1, #64	@ 0x40
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 fa89 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002e24:	e00c      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	4610      	mov	r0, r2
 8002e32:	f000 fa80 	bl	8003336 <TIM_ITRx_SetConfig>
      break;
 8002e36:	e003      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3c:	e000      	b.n	8002e40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002e3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bc80      	pop	{r7}
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e86:	bf00      	nop
 8002e88:	370c      	adds	r7, #12
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bc80      	pop	{r7}
 8002e8e:	4770      	bx	lr

08002e90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a2f      	ldr	r2, [pc, #188]	@ (8002f60 <TIM_Base_SetConfig+0xd0>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <TIM_Base_SetConfig+0x30>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eae:	d007      	beq.n	8002ec0 <TIM_Base_SetConfig+0x30>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a2c      	ldr	r2, [pc, #176]	@ (8002f64 <TIM_Base_SetConfig+0xd4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d003      	beq.n	8002ec0 <TIM_Base_SetConfig+0x30>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	4a2b      	ldr	r2, [pc, #172]	@ (8002f68 <TIM_Base_SetConfig+0xd8>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d108      	bne.n	8002ed2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a22      	ldr	r2, [pc, #136]	@ (8002f60 <TIM_Base_SetConfig+0xd0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00b      	beq.n	8002ef2 <TIM_Base_SetConfig+0x62>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee0:	d007      	beq.n	8002ef2 <TIM_Base_SetConfig+0x62>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8002f64 <TIM_Base_SetConfig+0xd4>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d003      	beq.n	8002ef2 <TIM_Base_SetConfig+0x62>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a1e      	ldr	r2, [pc, #120]	@ (8002f68 <TIM_Base_SetConfig+0xd8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d108      	bne.n	8002f04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f60 <TIM_Base_SetConfig+0xd0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d103      	bne.n	8002f38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0301 	and.w	r3, r3, #1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d005      	beq.n	8002f56 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f023 0201 	bic.w	r2, r3, #1
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	611a      	str	r2, [r3, #16]
  }
}
 8002f56:	bf00      	nop
 8002f58:	3714      	adds	r7, #20
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bc80      	pop	{r7}
 8002f5e:	4770      	bx	lr
 8002f60:	40012c00 	.word	0x40012c00
 8002f64:	40000400 	.word	0x40000400
 8002f68:	40000800 	.word	0x40000800

08002f6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a1b      	ldr	r3, [r3, #32]
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	f023 0201 	bic.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0303 	bic.w	r3, r3, #3
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f023 0302 	bic.w	r3, r3, #2
 8002fb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	697a      	ldr	r2, [r7, #20]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8003034 <TIM_OC1_SetConfig+0xc8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10c      	bne.n	8002fe2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f023 0308 	bic.w	r3, r3, #8
 8002fce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a13      	ldr	r2, [pc, #76]	@ (8003034 <TIM_OC1_SetConfig+0xc8>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d111      	bne.n	800300e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	699b      	ldr	r3, [r3, #24]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68fa      	ldr	r2, [r7, #12]
 8003018:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	697a      	ldr	r2, [r7, #20]
 8003026:	621a      	str	r2, [r3, #32]
}
 8003028:	bf00      	nop
 800302a:	371c      	adds	r7, #28
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00

08003038 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003038:	b480      	push	{r7}
 800303a:	b087      	sub	sp, #28
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	f023 0210 	bic.w	r2, r3, #16
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003066:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800306e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	021b      	lsls	r3, r3, #8
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4313      	orrs	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f023 0320 	bic.w	r3, r3, #32
 8003082:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	011b      	lsls	r3, r3, #4
 800308a:	697a      	ldr	r2, [r7, #20]
 800308c:	4313      	orrs	r3, r2
 800308e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <TIM_OC2_SetConfig+0xd0>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d10d      	bne.n	80030b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800309e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a14      	ldr	r2, [pc, #80]	@ (8003108 <TIM_OC2_SetConfig+0xd0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d113      	bne.n	80030e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	bc80      	pop	{r7}
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00

0800310c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800310c:	b480      	push	{r7}
 800310e:	b087      	sub	sp, #28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800313a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003154:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	021b      	lsls	r3, r3, #8
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	4313      	orrs	r3, r2
 8003160:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a1d      	ldr	r2, [pc, #116]	@ (80031dc <TIM_OC3_SetConfig+0xd0>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d10d      	bne.n	8003186 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	021b      	lsls	r3, r3, #8
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a14      	ldr	r2, [pc, #80]	@ (80031dc <TIM_OC3_SetConfig+0xd0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d113      	bne.n	80031b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	bf00      	nop
 80031d2:	371c      	adds	r7, #28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bc80      	pop	{r7}
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40012c00 	.word	0x40012c00

080031e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b087      	sub	sp, #28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800320e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	021b      	lsls	r3, r3, #8
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800322a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	031b      	lsls	r3, r3, #12
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4a0f      	ldr	r2, [pc, #60]	@ (8003278 <TIM_OC4_SetConfig+0x98>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d109      	bne.n	8003254 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003246:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	019b      	lsls	r3, r3, #6
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	621a      	str	r2, [r3, #32]
}
 800326e:	bf00      	nop
 8003270:	371c      	adds	r7, #28
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr
 8003278:	40012c00 	.word	0x40012c00

0800327c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b087      	sub	sp, #28
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	f023 0201 	bic.w	r2, r3, #1
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80032a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f023 030a 	bic.w	r3, r3, #10
 80032b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80032ba:	697a      	ldr	r2, [r7, #20]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4313      	orrs	r3, r2
 80032c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	621a      	str	r2, [r3, #32]
}
 80032ce:	bf00      	nop
 80032d0:	371c      	adds	r7, #28
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bc80      	pop	{r7}
 80032d6:	4770      	bx	lr

080032d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1b      	ldr	r3, [r3, #32]
 80032e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	f023 0210 	bic.w	r2, r3, #16
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	699b      	ldr	r3, [r3, #24]
 80032fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003302:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	031b      	lsls	r3, r3, #12
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	4313      	orrs	r3, r2
 800330c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003314:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	621a      	str	r2, [r3, #32]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003336:	b480      	push	{r7}
 8003338:	b085      	sub	sp, #20
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
 800333e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	f043 0307 	orr.w	r3, r3, #7
 8003358:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	609a      	str	r2, [r3, #8]
}
 8003360:	bf00      	nop
 8003362:	3714      	adds	r7, #20
 8003364:	46bd      	mov	sp, r7
 8003366:	bc80      	pop	{r7}
 8003368:	4770      	bx	lr

0800336a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800336a:	b480      	push	{r7}
 800336c:	b087      	sub	sp, #28
 800336e:	af00      	add	r7, sp, #0
 8003370:	60f8      	str	r0, [r7, #12]
 8003372:	60b9      	str	r1, [r7, #8]
 8003374:	607a      	str	r2, [r7, #4]
 8003376:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003384:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	021a      	lsls	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	431a      	orrs	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4313      	orrs	r3, r2
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	697a      	ldr	r2, [r7, #20]
 800339c:	609a      	str	r2, [r3, #8]
}
 800339e:	bf00      	nop
 80033a0:	371c      	adds	r7, #28
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bc80      	pop	{r7}
 80033a6:	4770      	bx	lr

080033a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b087      	sub	sp, #28
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2201      	movs	r2, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a1a      	ldr	r2, [r3, #32]
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	401a      	ands	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1a      	ldr	r2, [r3, #32]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	621a      	str	r2, [r3, #32]
}
 80033e6:	bf00      	nop
 80033e8:	371c      	adds	r7, #28
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr

080033f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003400:	2b01      	cmp	r3, #1
 8003402:	d101      	bne.n	8003408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003404:	2302      	movs	r3, #2
 8003406:	e046      	b.n	8003496 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a16      	ldr	r2, [pc, #88]	@ (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00e      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003454:	d009      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a12      	ldr	r2, [pc, #72]	@ (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d004      	beq.n	800346a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a10      	ldr	r2, [pc, #64]	@ (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d10c      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003470:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	4313      	orrs	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3714      	adds	r7, #20
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40000400 	.word	0x40000400
 80034a8:	40000800 	.word	0x40000800

080034ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b083      	sub	sp, #12
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bc80      	pop	{r7}
 80034bc:	4770      	bx	lr

080034be <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034be:	b480      	push	{r7}
 80034c0:	b083      	sub	sp, #12
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034c6:	bf00      	nop
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bc80      	pop	{r7}
 80034ce:	4770      	bx	lr

080034d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e042      	b.n	8003568 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d106      	bne.n	80034fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f7fd fcca 	bl	8000e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2224      	movs	r2, #36	@ 0x24
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003512:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f000 fdb7 	bl	8004088 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003528:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	695a      	ldr	r2, [r3, #20]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003538:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	68da      	ldr	r2, [r3, #12]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003548:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2220      	movs	r2, #32
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b08a      	sub	sp, #40	@ 0x28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	4613      	mov	r3, r2
 800357e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358a:	b2db      	uxtb	r3, r3
 800358c:	2b20      	cmp	r3, #32
 800358e:	d175      	bne.n	800367c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <HAL_UART_Transmit+0x2c>
 8003596:	88fb      	ldrh	r3, [r7, #6]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e06e      	b.n	800367e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2221      	movs	r2, #33	@ 0x21
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035ae:	f7fd fd85 	bl	80010bc <HAL_GetTick>
 80035b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	88fa      	ldrh	r2, [r7, #6]
 80035b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	88fa      	ldrh	r2, [r7, #6]
 80035be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035c8:	d108      	bne.n	80035dc <HAL_UART_Transmit+0x6c>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	691b      	ldr	r3, [r3, #16]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d104      	bne.n	80035dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035d2:	2300      	movs	r3, #0
 80035d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e003      	b.n	80035e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035e4:	e02e      	b.n	8003644 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2200      	movs	r2, #0
 80035ee:	2180      	movs	r1, #128	@ 0x80
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fb1c 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d005      	beq.n	8003608 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e03a      	b.n	800367e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10b      	bne.n	8003626 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800361c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	3302      	adds	r3, #2
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	e007      	b.n	8003636 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	3301      	adds	r3, #1
 8003634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1cb      	bne.n	80035e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	2200      	movs	r2, #0
 8003656:	2140      	movs	r1, #64	@ 0x40
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 fae8 	bl	8003c2e <UART_WaitOnFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d005      	beq.n	8003670 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e006      	b.n	800367e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2220      	movs	r2, #32
 8003674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3720      	adds	r7, #32
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	60f8      	str	r0, [r7, #12]
 800368e:	60b9      	str	r1, [r7, #8]
 8003690:	4613      	mov	r3, r2
 8003692:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b20      	cmp	r3, #32
 800369e:	d112      	bne.n	80036c6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <HAL_UART_Receive_IT+0x26>
 80036a6:	88fb      	ldrh	r3, [r7, #6]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e00b      	b.n	80036c8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	461a      	mov	r2, r3
 80036ba:	68b9      	ldr	r1, [r7, #8]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fb0f 	bl	8003ce0 <UART_Start_Receive_IT>
 80036c2:	4603      	mov	r3, r0
 80036c4:	e000      	b.n	80036c8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b0ba      	sub	sp, #232	@ 0xe8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003702:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800370e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10f      	bne.n	8003736 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800371a:	f003 0320 	and.w	r3, r3, #32
 800371e:	2b00      	cmp	r3, #0
 8003720:	d009      	beq.n	8003736 <HAL_UART_IRQHandler+0x66>
 8003722:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003726:	f003 0320 	and.w	r3, r3, #32
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fbec 	bl	8003f0c <UART_Receive_IT>
      return;
 8003734:	e25b      	b.n	8003bee <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 80de 	beq.w	80038fc <HAL_UART_IRQHandler+0x22c>
 8003740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d106      	bne.n	800375a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003750:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80d1 	beq.w	80038fc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800375a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <HAL_UART_IRQHandler+0xae>
 8003766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800376a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800376e:	2b00      	cmp	r3, #0
 8003770:	d005      	beq.n	800377e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003776:	f043 0201 	orr.w	r2, r3, #1
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800377e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_UART_IRQHandler+0xd2>
 800378a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d005      	beq.n	80037a2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379a:	f043 0202 	orr.w	r2, r3, #2
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_UART_IRQHandler+0xf6>
 80037ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037be:	f043 0204 	orr.w	r2, r3, #4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d011      	beq.n	80037f6 <HAL_UART_IRQHandler+0x126>
 80037d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037d6:	f003 0320 	and.w	r3, r3, #32
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d105      	bne.n	80037ea <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ee:	f043 0208 	orr.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 81f2 	beq.w	8003be4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003804:	f003 0320 	and.w	r3, r3, #32
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_UART_IRQHandler+0x14e>
 800380c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003810:	f003 0320 	and.w	r3, r3, #32
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 fb77 	bl	8003f0c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003828:	2b00      	cmp	r3, #0
 800382a:	bf14      	ite	ne
 800382c:	2301      	movne	r3, #1
 800382e:	2300      	moveq	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_UART_IRQHandler+0x17a>
 8003842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003846:	2b00      	cmp	r3, #0
 8003848:	d04f      	beq.n	80038ea <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 fa81 	bl	8003d52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d041      	beq.n	80038e2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3314      	adds	r3, #20
 8003864:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003868:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003878:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800387c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3314      	adds	r3, #20
 8003886:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800388a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003892:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003896:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800389a:	e841 2300 	strex	r3, r2, [r1]
 800389e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80038a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1d9      	bne.n	800385e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d013      	beq.n	80038da <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b6:	4a7e      	ldr	r2, [pc, #504]	@ (8003ab0 <HAL_UART_IRQHandler+0x3e0>)
 80038b8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038be:	4618      	mov	r0, r3
 80038c0:	f7fd fd72 	bl	80013a8 <HAL_DMA_Abort_IT>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d016      	beq.n	80038f8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038d4:	4610      	mov	r0, r2
 80038d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	e00e      	b.n	80038f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f993 	bl	8003c06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e0:	e00a      	b.n	80038f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f98f 	bl	8003c06 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038e8:	e006      	b.n	80038f8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f98b 	bl	8003c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038f6:	e175      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038f8:	bf00      	nop
    return;
 80038fa:	e173      	b.n	8003be4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003900:	2b01      	cmp	r3, #1
 8003902:	f040 814f 	bne.w	8003ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8148 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 8141 	beq.w	8003ba4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003922:	2300      	movs	r3, #0
 8003924:	60bb      	str	r3, [r7, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60bb      	str	r3, [r7, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	f000 80b6 	beq.w	8003ab4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003954:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 8145 	beq.w	8003be8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003966:	429a      	cmp	r2, r3
 8003968:	f080 813e 	bcs.w	8003be8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003972:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b20      	cmp	r3, #32
 800397c:	f000 8088 	beq.w	8003a90 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800398e:	e853 3f00 	ldrex	r3, [r3]
 8003992:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003996:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800399a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800399e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	330c      	adds	r3, #12
 80039a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80039ac:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80039b0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80039b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1d9      	bne.n	8003980 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039d6:	e853 3f00 	ldrex	r3, [r3]
 80039da:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039de:	f023 0301 	bic.w	r3, r3, #1
 80039e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	3314      	adds	r3, #20
 80039ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039f0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039fc:	e841 2300 	strex	r3, r2, [r1]
 8003a00:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a02:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e1      	bne.n	80039cc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	3314      	adds	r3, #20
 8003a0e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a10:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a12:	e853 3f00 	ldrex	r3, [r3]
 8003a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	3314      	adds	r3, #20
 8003a28:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a2c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a32:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e3      	bne.n	8003a08 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2220      	movs	r2, #32
 8003a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	330c      	adds	r3, #12
 8003a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a60:	f023 0310 	bic.w	r3, r3, #16
 8003a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	330c      	adds	r3, #12
 8003a6e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a72:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a74:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e3      	bne.n	8003a4e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fd fc51 	bl	8001332 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2202      	movs	r2, #2
 8003a94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f8b6 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003aac:	e09c      	b.n	8003be8 <HAL_UART_IRQHandler+0x518>
 8003aae:	bf00      	nop
 8003ab0:	08003e17 	.word	0x08003e17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f000 808e 	beq.w	8003bec <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ad0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 8089 	beq.w	8003bec <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	e853 3f00 	ldrex	r3, [r3]
 8003ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003af0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	330c      	adds	r3, #12
 8003afa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003afe:	647a      	str	r2, [r7, #68]	@ 0x44
 8003b00:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b06:	e841 2300 	strex	r3, r2, [r1]
 8003b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1e3      	bne.n	8003ada <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3314      	adds	r3, #20
 8003b18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1c:	e853 3f00 	ldrex	r3, [r3]
 8003b20:	623b      	str	r3, [r7, #32]
   return(result);
 8003b22:	6a3b      	ldr	r3, [r7, #32]
 8003b24:	f023 0301 	bic.w	r3, r3, #1
 8003b28:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3314      	adds	r3, #20
 8003b32:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b36:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b3e:	e841 2300 	strex	r3, r2, [r1]
 8003b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1e3      	bne.n	8003b12 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0310 	bic.w	r3, r3, #16
 8003b6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	330c      	adds	r3, #12
 8003b78:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b7c:	61fa      	str	r2, [r7, #28]
 8003b7e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b80:	69b9      	ldr	r1, [r7, #24]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	e841 2300 	strex	r3, r2, [r1]
 8003b88:	617b      	str	r3, [r7, #20]
   return(result);
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e3      	bne.n	8003b58 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2202      	movs	r2, #2
 8003b94:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b96:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f83b 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ba2:	e023      	b.n	8003bec <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x4f4>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f93e 	bl	8003e3e <UART_Transmit_IT>
    return;
 8003bc2:	e014      	b.n	8003bee <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00e      	beq.n	8003bee <HAL_UART_IRQHandler+0x51e>
 8003bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f000 f97d 	bl	8003edc <UART_EndTransmit_IT>
    return;
 8003be2:	e004      	b.n	8003bee <HAL_UART_IRQHandler+0x51e>
    return;
 8003be4:	bf00      	nop
 8003be6:	e002      	b.n	8003bee <HAL_UART_IRQHandler+0x51e>
      return;
 8003be8:	bf00      	nop
 8003bea:	e000      	b.n	8003bee <HAL_UART_IRQHandler+0x51e>
      return;
 8003bec:	bf00      	nop
  }
}
 8003bee:	37e8      	adds	r7, #232	@ 0xe8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b083      	sub	sp, #12
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c24:	bf00      	nop
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bc80      	pop	{r7}
 8003c2c:	4770      	bx	lr

08003c2e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b086      	sub	sp, #24
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c3e:	e03b      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c46:	d037      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c48:	f7fd fa38 	bl	80010bc <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	6a3a      	ldr	r2, [r7, #32]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d302      	bcc.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e03a      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d023      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	2b80      	cmp	r3, #128	@ 0x80
 8003c74:	d020      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d01d      	beq.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d116      	bne.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	617b      	str	r3, [r7, #20]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	617b      	str	r3, [r7, #20]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	617b      	str	r3, [r7, #20]
 8003c9e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca0:	68f8      	ldr	r0, [r7, #12]
 8003ca2:	f000 f856 	bl	8003d52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2208      	movs	r2, #8
 8003caa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e00f      	b.n	8003cd8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d0b4      	beq.n	8003c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cd6:	2300      	movs	r3, #0
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	3718      	adds	r7, #24
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	4613      	mov	r3, r2
 8003cec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	68ba      	ldr	r2, [r7, #8]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	88fa      	ldrh	r2, [r7, #6]
 8003cf8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	88fa      	ldrh	r2, [r7, #6]
 8003cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2222      	movs	r2, #34	@ 0x22
 8003d0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f042 0201 	orr.w	r2, r2, #1
 8003d34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	4770      	bx	lr

08003d52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b095      	sub	sp, #84	@ 0x54
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	330c      	adds	r3, #12
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	330c      	adds	r3, #12
 8003d78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e5      	bne.n	8003d5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3314      	adds	r3, #20
 8003d94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3314      	adds	r3, #20
 8003dac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d119      	bne.n	8003dfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	f023 0310 	bic.w	r3, r3, #16
 8003de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dea:	61ba      	str	r2, [r7, #24]
 8003dec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	6979      	ldr	r1, [r7, #20]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	613b      	str	r3, [r7, #16]
   return(result);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2220      	movs	r2, #32
 8003e02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003e0c:	bf00      	nop
 8003e0e:	3754      	adds	r7, #84	@ 0x54
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bc80      	pop	{r7}
 8003e14:	4770      	bx	lr

08003e16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	f7ff fee8 	bl	8003c06 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e36:	bf00      	nop
 8003e38:	3710      	adds	r7, #16
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b085      	sub	sp, #20
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b21      	cmp	r3, #33	@ 0x21
 8003e50:	d13e      	bne.n	8003ed0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e5a:	d114      	bne.n	8003e86 <UART_Transmit_IT+0x48>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d110      	bne.n	8003e86 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a1b      	ldr	r3, [r3, #32]
 8003e68:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	461a      	mov	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e78:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	621a      	str	r2, [r3, #32]
 8003e84:	e008      	b.n	8003e98 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	1c59      	adds	r1, r3, #1
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6211      	str	r1, [r2, #32]
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10f      	bne.n	8003ecc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003eba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e000      	b.n	8003ed2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
  }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f7ff fe79 	bl	8003bf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08c      	sub	sp, #48	@ 0x30
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b22      	cmp	r3, #34	@ 0x22
 8003f1e:	f040 80ae 	bne.w	800407e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f2a:	d117      	bne.n	8003f5c <UART_Receive_IT+0x50>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d113      	bne.n	8003f5c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f54:	1c9a      	adds	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f5a:	e026      	b.n	8003faa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6e:	d007      	beq.n	8003f80 <UART_Receive_IT+0x74>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <UART_Receive_IT+0x82>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8a:	701a      	strb	r2, [r3, #0]
 8003f8c:	e008      	b.n	8003fa0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f9a:	b2da      	uxtb	r2, r3
 8003f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f9e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d15d      	bne.n	800407a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0220 	bic.w	r2, r2, #32
 8003fcc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68da      	ldr	r2, [r3, #12]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fdc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	695a      	ldr	r2, [r3, #20]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004000:	2b01      	cmp	r3, #1
 8004002:	d135      	bne.n	8004070 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	330c      	adds	r3, #12
 8004010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	613b      	str	r3, [r7, #16]
   return(result);
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f023 0310 	bic.w	r3, r3, #16
 8004020:	627b      	str	r3, [r7, #36]	@ 0x24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	330c      	adds	r3, #12
 8004028:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800402a:	623a      	str	r2, [r7, #32]
 800402c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402e:	69f9      	ldr	r1, [r7, #28]
 8004030:	6a3a      	ldr	r2, [r7, #32]
 8004032:	e841 2300 	strex	r3, r2, [r1]
 8004036:	61bb      	str	r3, [r7, #24]
   return(result);
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d1e5      	bne.n	800400a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d10a      	bne.n	8004062 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60fb      	str	r3, [r7, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff fdd5 	bl	8003c18 <HAL_UARTEx_RxEventCallback>
 800406e:	e002      	b.n	8004076 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fc f9a9 	bl	80003c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004076:	2300      	movs	r3, #0
 8004078:	e002      	b.n	8004080 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800407a:	2300      	movs	r3, #0
 800407c:	e000      	b.n	8004080 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800407e:	2302      	movs	r3, #2
  }
}
 8004080:	4618      	mov	r0, r3
 8004082:	3730      	adds	r7, #48	@ 0x30
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	430a      	orrs	r2, r1
 80040a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040c2:	f023 030c 	bic.w	r3, r3, #12
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6812      	ldr	r2, [r2, #0]
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a2c      	ldr	r2, [pc, #176]	@ (800419c <UART_SetConfig+0x114>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d103      	bne.n	80040f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040f0:	f7fd ff66 	bl	8001fc0 <HAL_RCC_GetPCLK2Freq>
 80040f4:	60f8      	str	r0, [r7, #12]
 80040f6:	e002      	b.n	80040fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040f8:	f7fd ff4e 	bl	8001f98 <HAL_RCC_GetPCLK1Freq>
 80040fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f3f3 	udiv	r3, r2, r3
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <UART_SetConfig+0x118>)
 8004116:	fba2 2303 	umull	r2, r3, r2, r3
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	0119      	lsls	r1, r3, #4
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	009a      	lsls	r2, r3, #2
 8004128:	441a      	add	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4b1a      	ldr	r3, [pc, #104]	@ (80041a0 <UART_SetConfig+0x118>)
 8004136:	fba3 0302 	umull	r0, r3, r3, r2
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	2064      	movs	r0, #100	@ 0x64
 800413e:	fb00 f303 	mul.w	r3, r0, r3
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	011b      	lsls	r3, r3, #4
 8004146:	3332      	adds	r3, #50	@ 0x32
 8004148:	4a15      	ldr	r2, [pc, #84]	@ (80041a0 <UART_SetConfig+0x118>)
 800414a:	fba2 2303 	umull	r2, r3, r2, r3
 800414e:	095b      	lsrs	r3, r3, #5
 8004150:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004154:	4419      	add	r1, r3
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	009a      	lsls	r2, r3, #2
 8004160:	441a      	add	r2, r3
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	fbb2 f2f3 	udiv	r2, r2, r3
 800416c:	4b0c      	ldr	r3, [pc, #48]	@ (80041a0 <UART_SetConfig+0x118>)
 800416e:	fba3 0302 	umull	r0, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	2064      	movs	r0, #100	@ 0x64
 8004176:	fb00 f303 	mul.w	r3, r0, r3
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	011b      	lsls	r3, r3, #4
 800417e:	3332      	adds	r3, #50	@ 0x32
 8004180:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <UART_SetConfig+0x118>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	f003 020f 	and.w	r2, r3, #15
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	440a      	add	r2, r1
 8004192:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40013800 	.word	0x40013800
 80041a0:	51eb851f 	.word	0x51eb851f

080041a4 <memset>:
 80041a4:	4603      	mov	r3, r0
 80041a6:	4402      	add	r2, r0
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d100      	bne.n	80041ae <memset+0xa>
 80041ac:	4770      	bx	lr
 80041ae:	f803 1b01 	strb.w	r1, [r3], #1
 80041b2:	e7f9      	b.n	80041a8 <memset+0x4>

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	2600      	movs	r6, #0
 80041b8:	4d0c      	ldr	r5, [pc, #48]	@ (80041ec <__libc_init_array+0x38>)
 80041ba:	4c0d      	ldr	r4, [pc, #52]	@ (80041f0 <__libc_init_array+0x3c>)
 80041bc:	1b64      	subs	r4, r4, r5
 80041be:	10a4      	asrs	r4, r4, #2
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	f000 f81a 	bl	80041fc <_init>
 80041c8:	2600      	movs	r6, #0
 80041ca:	4d0a      	ldr	r5, [pc, #40]	@ (80041f4 <__libc_init_array+0x40>)
 80041cc:	4c0a      	ldr	r4, [pc, #40]	@ (80041f8 <__libc_init_array+0x44>)
 80041ce:	1b64      	subs	r4, r4, r5
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	080042a0 	.word	0x080042a0
 80041f0:	080042a0 	.word	0x080042a0
 80041f4:	080042a0 	.word	0x080042a0
 80041f8:	080042a4 	.word	0x080042a4

080041fc <_init>:
 80041fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fe:	bf00      	nop
 8004200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004202:	bc08      	pop	{r3}
 8004204:	469e      	mov	lr, r3
 8004206:	4770      	bx	lr

08004208 <_fini>:
 8004208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800420a:	bf00      	nop
 800420c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800420e:	bc08      	pop	{r3}
 8004210:	469e      	mov	lr, r3
 8004212:	4770      	bx	lr
