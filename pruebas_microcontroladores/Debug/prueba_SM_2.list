
prueba_SM_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067fc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08006908  08006908  00007908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006994  08006994  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  08006994  08006994  00007994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800699c  0800699c  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800699c  0800699c  0000799c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069a0  080069a0  000079a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080069a4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000240  20000060  08006a04  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08006a04  000082a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ebb8  00000000  00000000  00008089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c0  00000000  00000000  00016c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00018f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b49  00000000  00000000  00019d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000186dd  00000000  00000000  0001a8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcea  00000000  00000000  00032f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f97b  00000000  00000000  00042c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d25eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf8  00000000  00000000  000d2630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d6328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080068f0 	.word	0x080068f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080068f0 	.word	0x080068f0

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	@ 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <map>:
 void alignment(void);
 void startup(void);
 void pwm_stop(void);
 void pwm_init(void);
void enableZCP(uint8_t step);
 long map(long x, long in_min, long in_max, long out_min, long out_max) {
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	603b      	str	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800078a:	68fa      	ldr	r2, [r7, #12]
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	69b9      	ldr	r1, [r7, #24]
 8000792:	683a      	ldr	r2, [r7, #0]
 8000794:	1a8a      	subs	r2, r1, r2
 8000796:	fb03 f202 	mul.w	r2, r3, r2
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1acb      	subs	r3, r1, r3
 80007a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	4413      	add	r3, r2
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3714      	adds	r7, #20
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bc80      	pop	{r7}
 80007b0:	4770      	bx	lr
	...

080007b4 <pwm_stop>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void pwm_stop(void) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, IN_U);
 80007b8:	2100      	movs	r1, #0
 80007ba:	4806      	ldr	r0, [pc, #24]	@ (80007d4 <pwm_stop+0x20>)
 80007bc:	f003 ff14 	bl	80045e8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, IN_V);
 80007c0:	2104      	movs	r1, #4
 80007c2:	4804      	ldr	r0, [pc, #16]	@ (80007d4 <pwm_stop+0x20>)
 80007c4:	f003 ff10 	bl	80045e8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, IN_W);
 80007c8:	2108      	movs	r1, #8
 80007ca:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <pwm_stop+0x20>)
 80007cc:	f003 ff0c 	bl	80045e8 <HAL_TIM_PWM_Stop>
}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000c4 	.word	0x200000c4

080007d8 <pwm_init>:

void pwm_init(void){
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 80007dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <pwm_init+0x38>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	2200      	movs	r2, #0
 80007e2:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <pwm_init+0x38>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2200      	movs	r2, #0
 80007ea:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80007ec:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <pwm_init+0x38>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2200      	movs	r2, #0
 80007f2:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3, IN_U);
 80007f4:	2100      	movs	r1, #0
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <pwm_init+0x38>)
 80007f8:	f003 fe54 	bl	80044a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,IN_V);
 80007fc:	2104      	movs	r1, #4
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <pwm_init+0x38>)
 8000800:	f003 fe50 	bl	80044a4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, IN_W);
 8000804:	2108      	movs	r1, #8
 8000806:	4802      	ldr	r0, [pc, #8]	@ (8000810 <pwm_init+0x38>)
 8000808:	f003 fe4c 	bl	80044a4 <HAL_TIM_PWM_Start>
	return;
 800080c:	bf00      	nop
}
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000c4 	.word	0x200000c4

08000814 <alignment>:

void alignment(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
	aligned_flag = false;
 8000818:	4b1a      	ldr	r3, [pc, #104]	@ (8000884 <alignment+0x70>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
	state_machine = ALIGNING;
 800081e:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <alignment+0x74>)
 8000820:	2204      	movs	r2, #4
 8000822:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 8000824:	4819      	ldr	r0, [pc, #100]	@ (800088c <alignment+0x78>)
 8000826:	f003 fb23 	bl	8003e70 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800082a:	2100      	movs	r1, #0
 800082c:	4817      	ldr	r0, [pc, #92]	@ (800088c <alignment+0x78>)
 800082e:	f003 fd37 	bl	80042a0 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim4);
 8000832:	4816      	ldr	r0, [pc, #88]	@ (800088c <alignment+0x78>)
 8000834:	f003 faa3 	bl	8003d7e <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000838:	4b14      	ldr	r3, [pc, #80]	@ (800088c <alignment+0x78>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ALIGN_TIME);
 8000840:	4b12      	ldr	r3, [pc, #72]	@ (800088c <alignment+0x78>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000848:	635a      	str	r2, [r3, #52]	@ 0x34
	pwm_init();
 800084a:	f7ff ffc5 	bl	80007d8 <pwm_init>

	commutation(POS_UV, DC_ALIGN);
 800084e:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 8000852:	2000      	movs	r0, #0
 8000854:	f000 fbba 	bl	8000fcc <commutation>
	HAL_TIM_Base_Start_IT(&htim4);
 8000858:	480c      	ldr	r0, [pc, #48]	@ (800088c <alignment+0x78>)
 800085a:	f003 fab7 	bl	8003dcc <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800085e:	2100      	movs	r1, #0
 8000860:	480a      	ldr	r0, [pc, #40]	@ (800088c <alignment+0x78>)
 8000862:	f003 fc2d 	bl	80040c0 <HAL_TIM_OC_Start_IT>
	while(!aligned_flag);
 8000866:	bf00      	nop
 8000868:	4b06      	ldr	r3, [pc, #24]	@ (8000884 <alignment+0x70>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d1f8      	bne.n	8000868 <alignment+0x54>
	state_machine = READY;
 8000876:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <alignment+0x74>)
 8000878:	2205      	movs	r2, #5
 800087a:	701a      	strb	r2, [r3, #0]
	pwm_stop();
 800087c:	f7ff ff9a 	bl	80007b4 <pwm_stop>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	20000298 	.word	0x20000298
 8000888:	2000027d 	.word	0x2000027d
 800088c:	2000007c 	.word	0x2000007c

08000890 <enableZCP>:
void enableZCP(uint8_t step){
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <enableZCP+0x80>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	68da      	ldr	r2, [r3, #12]
 80008a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000910 <enableZCP+0x80>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f022 0202 	bic.w	r2, r2, #2
 80008a8:	60da      	str	r2, [r3, #12]
__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 80008aa:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <enableZCP+0x80>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	4b17      	ldr	r3, [pc, #92]	@ (8000910 <enableZCP+0x80>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	f022 0204 	bic.w	r2, r2, #4
 80008b8:	60da      	str	r2, [r3, #12]
__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <enableZCP+0x80>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68da      	ldr	r2, [r3, #12]
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <enableZCP+0x80>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f022 0208 	bic.w	r2, r2, #8
 80008c8:	60da      	str	r2, [r3, #12]

	if(startup_ok){
 80008ca:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <enableZCP+0x84>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d01a      	beq.n	8000908 <enableZCP+0x78>
	switch(float_phase_lookuptable[step]){
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	4a10      	ldr	r2, [pc, #64]	@ (8000918 <enableZCP+0x88>)
 80008d6:	5cd3      	ldrb	r3, [r2, r3]
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d010      	beq.n	80008fe <enableZCP+0x6e>
 80008dc:	2b02      	cmp	r3, #2
 80008de:	dc13      	bgt.n	8000908 <enableZCP+0x78>
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <enableZCP+0x5a>
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d005      	beq.n	80008f4 <enableZCP+0x64>
	case PHASE_W:
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
		break;
	}
	}
}
 80008e8:	e00e      	b.n	8000908 <enableZCP+0x78>
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 80008ea:	2100      	movs	r1, #0
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <enableZCP+0x80>)
 80008ee:	f003 ff37 	bl	8004760 <HAL_TIM_IC_Start_IT>
		break;
 80008f2:	e009      	b.n	8000908 <enableZCP+0x78>
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 80008f4:	2104      	movs	r1, #4
 80008f6:	4806      	ldr	r0, [pc, #24]	@ (8000910 <enableZCP+0x80>)
 80008f8:	f003 ff32 	bl	8004760 <HAL_TIM_IC_Start_IT>
		break;
 80008fc:	e004      	b.n	8000908 <enableZCP+0x78>
		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 80008fe:	2108      	movs	r1, #8
 8000900:	4803      	ldr	r0, [pc, #12]	@ (8000910 <enableZCP+0x80>)
 8000902:	f003 ff2d 	bl	8004760 <HAL_TIM_IC_Start_IT>
		break;
 8000906:	bf00      	nop
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}
 8000910:	200001cc 	.word	0x200001cc
 8000914:	2000029a 	.word	0x2000029a
 8000918:	08006960 	.word	0x08006960

0800091c <startup>:
void startup(void){
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
	alignment();
 8000922:	f7ff ff77 	bl	8000814 <alignment>
	state_machine =  STARTUP;
 8000926:	4b46      	ldr	r3, [pc, #280]	@ (8000a40 <startup+0x124>)
 8000928:	2202      	movs	r2, #2
 800092a:	701a      	strb	r2, [r3, #0]
	bool  localFlag = false;
 800092c:	2300      	movs	r3, #0
 800092e:	71fb      	strb	r3, [r7, #7]
	pwmVal = DC_STARTUP_INIT;
 8000930:	4b44      	ldr	r3, [pc, #272]	@ (8000a44 <startup+0x128>)
 8000932:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000936:	801a      	strh	r2, [r3, #0]
	commutationStep = POS_UV;
 8000938:	4b43      	ldr	r3, [pc, #268]	@ (8000a48 <startup+0x12c>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
	commutationTime = TIME_STARTUP_COMMUTATION_INIT;
 800093e:	4b43      	ldr	r3, [pc, #268]	@ (8000a4c <startup+0x130>)
 8000940:	2278      	movs	r2, #120	@ 0x78
 8000942:	801a      	strh	r2, [r3, #0]
	uint16_t duration = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	80bb      	strh	r3, [r7, #4]
	pwm_init();
 8000948:	f7ff ff46 	bl	80007d8 <pwm_init>
	while(!localFlag){
 800094c:	e04c      	b.n	80009e8 <startup+0xcc>
		//__HAL_TIM_SET_COUNTER(&htim4, 0);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, time);
		HAL_Delay(commutationTime);
 800094e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a4c <startup+0x130>)
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fc03 	bl	8002160 <HAL_Delay>
		commutation(commutationStep, pwmVal);
 800095a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <startup+0x12c>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	4a38      	ldr	r2, [pc, #224]	@ (8000a44 <startup+0x128>)
 8000962:	8812      	ldrh	r2, [r2, #0]
 8000964:	b292      	uxth	r2, r2
 8000966:	4611      	mov	r1, r2
 8000968:	4618      	mov	r0, r3
 800096a:	f000 fb2f 	bl	8000fcc <commutation>
		//HAL_TIM_Base_Start_IT(&htim4);
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		//while(!startup_flag);

		commutationStep = (commutationStep + 1) % NUM_POS;
 800096e:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <startup+0x12c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b2db      	uxtb	r3, r3
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	4b36      	ldr	r3, [pc, #216]	@ (8000a50 <startup+0x134>)
 8000978:	fb83 3102 	smull	r3, r1, r3, r2
 800097c:	17d3      	asrs	r3, r2, #31
 800097e:	1ac9      	subs	r1, r1, r3
 8000980:	460b      	mov	r3, r1
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	440b      	add	r3, r1
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	1ad1      	subs	r1, r2, r3
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a48 <startup+0x12c>)
 800098e:	701a      	strb	r2, [r3, #0]
		(pwmVal < DC_STARTUP_END) ? pwmVal += DC_STARTUP_STEP : pwmVal;
 8000990:	4b2c      	ldr	r3, [pc, #176]	@ (8000a44 <startup+0x128>)
 8000992:	881b      	ldrh	r3, [r3, #0]
 8000994:	b29b      	uxth	r3, r3
 8000996:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800099a:	4293      	cmp	r3, r2
 800099c:	d807      	bhi.n	80009ae <startup+0x92>
 800099e:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <startup+0x128>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	330a      	adds	r3, #10
 80009a6:	b29a      	uxth	r2, r3
 80009a8:	4b26      	ldr	r3, [pc, #152]	@ (8000a44 <startup+0x128>)
 80009aa:	801a      	strh	r2, [r3, #0]
 80009ac:	e001      	b.n	80009b2 <startup+0x96>
 80009ae:	4b25      	ldr	r3, [pc, #148]	@ (8000a44 <startup+0x128>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
	    if (commutationTime > TIME_STARTUP_COMMUTATION_FINAL) {
 80009b2:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <startup+0x130>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	2b08      	cmp	r3, #8
 80009ba:	d907      	bls.n	80009cc <startup+0xb0>
	    	commutationTime -= TIME_STARTUP_STEP;
 80009bc:	4b23      	ldr	r3, [pc, #140]	@ (8000a4c <startup+0x130>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b02      	subs	r3, #2
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	4b21      	ldr	r3, [pc, #132]	@ (8000a4c <startup+0x130>)
 80009c8:	801a      	strh	r2, [r3, #0]
 80009ca:	e00d      	b.n	80009e8 <startup+0xcc>
	    } else if (duration < 500){
 80009cc:	88bb      	ldrh	r3, [r7, #4]
 80009ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80009d2:	d203      	bcs.n	80009dc <startup+0xc0>
	        duration++;
 80009d4:	88bb      	ldrh	r3, [r7, #4]
 80009d6:	3301      	adds	r3, #1
 80009d8:	80bb      	strh	r3, [r7, #4]
 80009da:	e005      	b.n	80009e8 <startup+0xcc>

	    }
	    else {

			localFlag = true;
 80009dc:	2301      	movs	r3, #1
 80009de:	71fb      	strb	r3, [r7, #7]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 80009e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <startup+0x138>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2200      	movs	r2, #0
 80009e6:	625a      	str	r2, [r3, #36]	@ 0x24
	while(!localFlag){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	f083 0301 	eor.w	r3, r3, #1
 80009ee:	b2db      	uxtb	r3, r3
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d1ac      	bne.n	800094e <startup+0x32>
//		startup_flag = false;


	}
	//commutationTime*=10;
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1); // Detiene canal 1
 80009f4:	2100      	movs	r1, #0
 80009f6:	4817      	ldr	r0, [pc, #92]	@ (8000a54 <startup+0x138>)
 80009f8:	f003 fc52 	bl	80042a0 <HAL_TIM_OC_Stop_IT>

	__HAL_TIM_CLEAR_FLAG(&htim4, TIM_FLAG_CC1); // Limpia interrupción del canal 1
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <startup+0x138>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	f06f 0202 	mvn.w	r2, #2
 8000a04:	611a      	str	r2, [r3, #16]
	TIM4->PSC = 719;
 8000a06:	4b14      	ldr	r3, [pc, #80]	@ (8000a58 <startup+0x13c>)
 8000a08:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000a0c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = 999;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <startup+0x13c>)
 8000a10:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a14:	62da      	str	r2, [r3, #44]	@ 0x2c
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, commutationTime); // Configura canal 2

	reference_zcp = 0;
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <startup+0x140>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Start_IT(&hadc1);
 8000a1c:	4810      	ldr	r0, [pc, #64]	@ (8000a60 <startup+0x144>)
 8000a1e:	f001 fc9b 	bl	8002358 <HAL_ADC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000a22:	2104      	movs	r1, #4
 8000a24:	480b      	ldr	r0, [pc, #44]	@ (8000a54 <startup+0x138>)
 8000a26:	f003 fb4b 	bl	80040c0 <HAL_TIM_OC_Start_IT>
	startup_ok = true;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a64 <startup+0x148>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000a30:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <startup+0x138>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2200      	movs	r2, #0
 8000a36:	625a      	str	r2, [r3, #36]	@ 0x24


	// Inicia el canal 2 en modo Output Compare


}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000027d 	.word	0x2000027d
 8000a44:	20000280 	.word	0x20000280
 8000a48:	20000282 	.word	0x20000282
 8000a4c:	20000284 	.word	0x20000284
 8000a50:	2aaaaaab 	.word	0x2aaaaaab
 8000a54:	2000007c 	.word	0x2000007c
 8000a58:	40000800 	.word	0x40000800
 8000a5c:	20000288 	.word	0x20000288
 8000a60:	20000154 	.word	0x20000154
 8000a64:	2000029a 	.word	0x2000029a

08000a68 <ledON>:


void ledON(){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

	eventFlag = true;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <ledON+0x20>)
 8000a6e:	2201      	movs	r2, #1
 8000a70:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 19999);
 8000a72:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <ledON+0x24>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a7a:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <ledON+0x24>)
 8000a80:	f003 fb1e 	bl	80040c0 <HAL_TIM_OC_Start_IT>


}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	2000027e 	.word	0x2000027e
 8000a8c:	2000007c 	.word	0x2000007c

08000a90 <processCommand>:
void processCommand(char *input) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
    for (int i = 0; commandTable[i].command != NULL; i++) {
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e019      	b.n	8000ad2 <processCommand+0x42>
        if (strcmp(input, commandTable[i].command) == 0) {  // Compara el comando recibido
 8000a9e:	4a17      	ldr	r2, [pc, #92]	@ (8000afc <processCommand+0x6c>)
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff fb4f 	bl	800014c <strcmp>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d10b      	bne.n	8000acc <processCommand+0x3c>
            eventFlag = true;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <processCommand+0x70>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
        	commandTable[i].execute();  // Ejecuta la función asociada
 8000aba:	4a10      	ldr	r2, [pc, #64]	@ (8000afc <processCommand+0x6c>)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	4413      	add	r3, r2
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	4798      	blx	r3
            clearRxBuffer();  // Limpia el buffer acumulador
 8000ac6:	f000 f823 	bl	8000b10 <clearRxBuffer>

            return;
 8000aca:	e014      	b.n	8000af6 <processCommand+0x66>
    for (int i = 0; commandTable[i].command != NULL; i++) {
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <processCommand+0x6c>)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1df      	bne.n	8000a9e <processCommand+0xe>
        }
    }
    // Si no se encuentra el comando
    HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Command\r\n", 17, 3);
 8000ade:	2303      	movs	r3, #3
 8000ae0:	2211      	movs	r2, #17
 8000ae2:	4908      	ldr	r1, [pc, #32]	@ (8000b04 <processCommand+0x74>)
 8000ae4:	4808      	ldr	r0, [pc, #32]	@ (8000b08 <processCommand+0x78>)
 8000ae6:	f005 f8bc 	bl	8005c62 <HAL_UART_Transmit>
    clearRxBuffer();
 8000aea:	f000 f811 	bl	8000b10 <clearRxBuffer>
    state_machine = IDLE;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <processCommand+0x7c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
    return;// Limpia el buffer acumulador
 8000af4:	bf00      	nop

}
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20000004 	.word	0x20000004
 8000b00:	2000027e 	.word	0x2000027e
 8000b04:	08006920 	.word	0x08006920
 8000b08:	2000010c 	.word	0x2000010c
 8000b0c:	2000027d 	.word	0x2000027d

08000b10 <clearRxBuffer>:


void clearRxBuffer(void) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, BUFFER_SIZE);  // Establece todos los elementos a 0
 8000b14:	2220      	movs	r2, #32
 8000b16:	2100      	movs	r1, #0
 8000b18:	4803      	ldr	r0, [pc, #12]	@ (8000b28 <clearRxBuffer+0x18>)
 8000b1a:	f005 febd 	bl	8006898 <memset>
    rx_index = 0;                          // Reinicia el índice del buffer
 8000b1e:	4b03      	ldr	r3, [pc, #12]	@ (8000b2c <clearRxBuffer+0x1c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000025c 	.word	0x2000025c
 8000b2c:	2000027c 	.word	0x2000027c

08000b30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verifica el UART correcto
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a35      	ldr	r2, [pc, #212]	@ (8000c14 <HAL_UART_RxCpltCallback+0xe4>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d164      	bne.n	8000c0c <HAL_UART_RxCpltCallback+0xdc>
        if (rx_data[0] == '\r') {  // Detecta el carácter de fin de línea
 8000b42:	4b35      	ldr	r3, [pc, #212]	@ (8000c18 <HAL_UART_RxCpltCallback+0xe8>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	2b0d      	cmp	r3, #13
 8000b48:	d123      	bne.n	8000b92 <HAL_UART_RxCpltCallback+0x62>
            rx_buffer[rx_index] = '\0';  // Finaliza la cadena con terminador nulo
 8000b4a:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <HAL_UART_RxCpltCallback+0xf0>)
 8000b52:	2100      	movs	r1, #0
 8000b54:	5499      	strb	r1, [r3, r2]
            rx_index = 0;  // Reinicia el índice para el próximo mensaje
 8000b56:	4b31      	ldr	r3, [pc, #196]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	701a      	strb	r2, [r3, #0]

            // Procesa el mensaje completo
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nReceived: ", 12, 3);
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	220c      	movs	r2, #12
 8000b60:	4930      	ldr	r1, [pc, #192]	@ (8000c24 <HAL_UART_RxCpltCallback+0xf4>)
 8000b62:	4831      	ldr	r0, [pc, #196]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000b64:	f005 f87d 	bl	8005c62 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, rx_buffer	, strlen((char *)rx_buffer), 3);
 8000b68:	482d      	ldr	r0, [pc, #180]	@ (8000c20 <HAL_UART_RxCpltCallback+0xf0>)
 8000b6a:	f7ff faf9 	bl	8000160 <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	2303      	movs	r3, #3
 8000b74:	492a      	ldr	r1, [pc, #168]	@ (8000c20 <HAL_UART_RxCpltCallback+0xf0>)
 8000b76:	482c      	ldr	r0, [pc, #176]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000b78:	f005 f873 	bl	8005c62 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b80:	2202      	movs	r2, #2
 8000b82:	492a      	ldr	r1, [pc, #168]	@ (8000c2c <HAL_UART_RxCpltCallback+0xfc>)
 8000b84:	4828      	ldr	r0, [pc, #160]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000b86:	f005 f86c 	bl	8005c62 <HAL_UART_Transmit>
            state_machine = PROCESS_COMMAND;
 8000b8a:	4b29      	ldr	r3, [pc, #164]	@ (8000c30 <HAL_UART_RxCpltCallback+0x100>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	701a      	strb	r2, [r3, #0]
 8000b90:	e037      	b.n	8000c02 <HAL_UART_RxCpltCallback+0xd2>
        } else if (rx_data[0] == '\b' || rx_data[0] == '\177') {  // Detecta Backspace
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_UART_RxCpltCallback+0xe8>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	2b08      	cmp	r3, #8
 8000b98:	d003      	beq.n	8000ba2 <HAL_UART_RxCpltCallback+0x72>
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_UART_RxCpltCallback+0xe8>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba0:	d110      	bne.n	8000bc4 <HAL_UART_RxCpltCallback+0x94>
            if (rx_index > 0) {  // Si hay algo en el buffer
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d02b      	beq.n	8000c02 <HAL_UART_RxCpltCallback+0xd2>
                rx_index--;  // Retrocede el índice
 8000baa:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000bb4:	701a      	strb	r2, [r3, #0]
                // Simula el borrado en el terminal
                HAL_UART_Transmit(&huart2, (uint8_t *)"\b \b", 3, 3);
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	2203      	movs	r2, #3
 8000bba:	491e      	ldr	r1, [pc, #120]	@ (8000c34 <HAL_UART_RxCpltCallback+0x104>)
 8000bbc:	481a      	ldr	r0, [pc, #104]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000bbe:	f005 f850 	bl	8005c62 <HAL_UART_Transmit>
            if (rx_index > 0) {  // Si hay algo en el buffer
 8000bc2:	e01e      	b.n	8000c02 <HAL_UART_RxCpltCallback+0xd2>
            }
        } else {  // Cualquier otro carácter
            rx_buffer[rx_index++] = rx_data[0];  // Almacena el carácter en el buffer
 8000bc4:	4b15      	ldr	r3, [pc, #84]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	1c5a      	adds	r2, r3, #1
 8000bca:	b2d1      	uxtb	r1, r2
 8000bcc:	4a13      	ldr	r2, [pc, #76]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000bce:	7011      	strb	r1, [r2, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_RxCpltCallback+0xe8>)
 8000bd4:	7819      	ldrb	r1, [r3, #0]
 8000bd6:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_UART_RxCpltCallback+0xf0>)
 8000bd8:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);  // Eco del carácter recibido
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bde:	2201      	movs	r2, #1
 8000be0:	490d      	ldr	r1, [pc, #52]	@ (8000c18 <HAL_UART_RxCpltCallback+0xe8>)
 8000be2:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000be4:	f005 f83d 	bl	8005c62 <HAL_UART_Transmit>

            // Evita desbordamientos
            if (rx_index >= BUFFER_SIZE) {
 8000be8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b1f      	cmp	r3, #31
 8000bee:	d908      	bls.n	8000c02 <HAL_UART_RxCpltCallback+0xd2>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nBuffer Overflow\r\n", 19, 3);
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	2213      	movs	r2, #19
 8000bf4:	4910      	ldr	r1, [pc, #64]	@ (8000c38 <HAL_UART_RxCpltCallback+0x108>)
 8000bf6:	480c      	ldr	r0, [pc, #48]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000bf8:	f005 f833 	bl	8005c62 <HAL_UART_Transmit>
                rx_index = 0;  // Reinicia el índice en caso de desbordamiento
 8000bfc:	4b07      	ldr	r3, [pc, #28]	@ (8000c1c <HAL_UART_RxCpltCallback+0xec>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	701a      	strb	r2, [r3, #0]
            }
        }

        // Reinicia la recepción para el siguiente byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000c02:	2201      	movs	r2, #1
 8000c04:	4904      	ldr	r1, [pc, #16]	@ (8000c18 <HAL_UART_RxCpltCallback+0xe8>)
 8000c06:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <HAL_UART_RxCpltCallback+0xf8>)
 8000c08:	f005 f8b6 	bl	8005d78 <HAL_UART_Receive_IT>
    }
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	20000258 	.word	0x20000258
 8000c1c:	2000027c 	.word	0x2000027c
 8000c20:	2000025c 	.word	0x2000025c
 8000c24:	08006934 	.word	0x08006934
 8000c28:	2000010c 	.word	0x2000010c
 8000c2c:	08006944 	.word	0x08006944
 8000c30:	2000027d 	.word	0x2000027d
 8000c34:	08006948 	.word	0x08006948
 8000c38:	0800694c 	.word	0x0800694c

08000c3c <handleState>:
state handleState(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	switch(state_machine){
 8000c40:	4b39      	ldr	r3, [pc, #228]	@ (8000d28 <handleState+0xec>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d868      	bhi.n	8000d1c <handleState+0xe0>
 8000c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000c50 <handleState+0x14>)
 8000c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c50:	08000c6d 	.word	0x08000c6d
 8000c54:	08000c8d 	.word	0x08000c8d
 8000c58:	08000ca5 	.word	0x08000ca5
 8000c5c:	08000ccd 	.word	0x08000ccd
 8000c60:	08000cb7 	.word	0x08000cb7
 8000c64:	08000cdf 	.word	0x08000cdf
 8000c68:	08000cff 	.word	0x08000cff
	case IDLE:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <handleState+0xf0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	f003 0320 	and.w	r3, r3, #32
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d14d      	bne.n	8000d16 <handleState+0xda>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <handleState+0xf0>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68da      	ldr	r2, [r3, #12]
 8000c80:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <handleState+0xf0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f042 0220 	orr.w	r2, r2, #32
 8000c88:	60da      	str	r2, [r3, #12]
		}
		break;
 8000c8a:	e044      	b.n	8000d16 <handleState+0xda>

	case PROCESS_COMMAND:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000c8c:	4b27      	ldr	r3, [pc, #156]	@ (8000d2c <handleState+0xf0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <handleState+0xf0>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f022 0220 	bic.w	r2, r2, #32
 8000c9a:	60da      	str	r2, [r3, #12]
		processCommand((char*) rx_buffer);
 8000c9c:	4824      	ldr	r0, [pc, #144]	@ (8000d30 <handleState+0xf4>)
 8000c9e:	f7ff fef7 	bl	8000a90 <processCommand>
		break;
 8000ca2:	e03b      	b.n	8000d1c <handleState+0xe0>

	case STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <handleState+0xf0>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	4b20      	ldr	r3, [pc, #128]	@ (8000d2c <handleState+0xf0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f022 0220 	bic.w	r2, r2, #32
 8000cb2:	60da      	str	r2, [r3, #12]
		//startup();
		break;
 8000cb4:	e032      	b.n	8000d1c <handleState+0xe0>
	case ALIGNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000cb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d2c <handleState+0xf0>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <handleState+0xf0>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f022 0220 	bic.w	r2, r2, #32
 8000cc4:	60da      	str	r2, [r3, #12]
		alignment();
 8000cc6:	f7ff fda5 	bl	8000814 <alignment>
		break;
 8000cca:	e027      	b.n	8000d1c <handleState+0xe0>
	case RUNNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000ccc:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <handleState+0xf0>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	68da      	ldr	r2, [r3, #12]
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <handleState+0xf0>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f022 0220 	bic.w	r2, r2, #32
 8000cda:	60da      	str	r2, [r3, #12]
		break;
 8000cdc:	e01e      	b.n	8000d1c <handleState+0xe0>

	case READY:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <handleState+0xf0>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	f003 0320 	and.w	r3, r3, #32
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d116      	bne.n	8000d1a <handleState+0xde>
					__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <handleState+0xf0>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	68da      	ldr	r2, [r3, #12]
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <handleState+0xf0>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f042 0220 	orr.w	r2, r2, #32
 8000cfa:	60da      	str	r2, [r3, #12]
				}
		break;
 8000cfc:	e00d      	b.n	8000d1a <handleState+0xde>
	case FINISH:
		// Asegúrate de que las interrupciones de UART estén habilitadas al finalizar
		//timerCounter = 0; // Reinicia el contador
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <handleState+0xf0>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68da      	ldr	r2, [r3, #12]
 8000d04:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <handleState+0xf0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f042 0220 	orr.w	r2, r2, #32
 8000d0c:	60da      	str	r2, [r3, #12]
		state_machine = IDLE; // Vuelve al estado IDLE
 8000d0e:	4b06      	ldr	r3, [pc, #24]	@ (8000d28 <handleState+0xec>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

		break;
 8000d14:	e002      	b.n	8000d1c <handleState+0xe0>
		break;
 8000d16:	bf00      	nop
 8000d18:	e000      	b.n	8000d1c <handleState+0xe0>
		break;
 8000d1a:	bf00      	nop


}
	return (state_machine);
 8000d1c:	4b02      	ldr	r3, [pc, #8]	@ (8000d28 <handleState+0xec>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000027d 	.word	0x2000027d
 8000d2c:	2000010c 	.word	0x2000010c
 8000d30:	2000025c 	.word	0x2000025c

08000d34 <HAL_TIM_IC_CaptureCallback>:
//HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
realCommutTime = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
TIM4->CCR2 = realCommutTime;
__enable_irq();
*/
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM2){
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d44:	f040 812b 	bne.w	8000f9e <HAL_TIM_IC_CaptureCallback+0x26a>
		if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC1)) {
 8000d48:	4b97      	ldr	r3, [pc, #604]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	68db      	ldr	r3, [r3, #12]
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d156      	bne.n	8000e04 <HAL_TIM_IC_CaptureCallback+0xd0>
            // Manejo de cruce por cero para fase U
			zcp_period_next = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1 );
 8000d56:	2100      	movs	r1, #0
 8000d58:	4893      	ldr	r0, [pc, #588]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000d5a:	f004 f9c1 	bl	80050e0 <HAL_TIM_ReadCapturedValue>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b92      	ldr	r3, [pc, #584]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000d64:	801a      	strh	r2, [r3, #0]
			zcp_period_flt = 0.5 * zcp_period_next + 0.5 * zcp_period;
 8000d66:	4b91      	ldr	r3, [pc, #580]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fc7b 	bl	8000668 <__aeabi_i2d>
 8000d72:	f04f 0200 	mov.w	r2, #0
 8000d76:	4b8e      	ldr	r3, [pc, #568]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000d78:	f7ff f9fa 	bl	8000170 <__aeabi_dmul>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4614      	mov	r4, r2
 8000d82:	461d      	mov	r5, r3
 8000d84:	4b8b      	ldr	r3, [pc, #556]	@ (8000fb4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fc6c 	bl	8000668 <__aeabi_i2d>
 8000d90:	f04f 0200 	mov.w	r2, #0
 8000d94:	4b86      	ldr	r3, [pc, #536]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000d96:	f7ff f9eb 	bl	8000170 <__aeabi_dmul>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	4620      	mov	r0, r4
 8000da0:	4629      	mov	r1, r5
 8000da2:	f7ff fb15 	bl	80003d0 <__adddf3>
 8000da6:	4602      	mov	r2, r0
 8000da8:	460b      	mov	r3, r1
 8000daa:	4610      	mov	r0, r2
 8000dac:	4619      	mov	r1, r3
 8000dae:	f7ff fcc5 	bl	800073c <__aeabi_d2uiz>
 8000db2:	4603      	mov	r3, r0
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b80      	ldr	r3, [pc, #512]	@ (8000fb8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000db8:	801a      	strh	r2, [r3, #0]
			halfCommutTime = COEF_ADVC_ANGLE*zcp_period_flt;
 8000dba:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000dbc:	881b      	ldrh	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff fc51 	bl	8000668 <__aeabi_i2d>
 8000dc6:	f04f 0200 	mov.w	r2, #0
 8000dca:	4b7c      	ldr	r3, [pc, #496]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x288>)
 8000dcc:	f7ff f9d0 	bl	8000170 <__aeabi_dmul>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f7ff fcb0 	bl	800073c <__aeabi_d2uiz>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	4b77      	ldr	r3, [pc, #476]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000de2:	801a      	strh	r2, [r3, #0]
			zcp_period = zcp_period_next;
 8000de4:	4b71      	ldr	r3, [pc, #452]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	b29a      	uxth	r2, r3
 8000dea:	4b72      	ldr	r3, [pc, #456]	@ (8000fb4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000dec:	801a      	strh	r2, [r3, #0]
			nextCommutTime = zcp_period_next+halfCommutTime;
 8000dee:	4b6f      	ldr	r3, [pc, #444]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	4b72      	ldr	r3, [pc, #456]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	4b71      	ldr	r3, [pc, #452]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000e00:	801a      	strh	r2, [r3, #0]
 8000e02:	e0ba      	b.n	8000f7a <HAL_TIM_IC_CaptureCallback+0x246>


        } else if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC2)) {
 8000e04:	4b68      	ldr	r3, [pc, #416]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	2b04      	cmp	r3, #4
 8000e10:	d156      	bne.n	8000ec0 <HAL_TIM_IC_CaptureCallback+0x18c>
            // Manejo de cruce por cero para fase V
        	zcp_period_next = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2 );
 8000e12:	2104      	movs	r1, #4
 8000e14:	4864      	ldr	r0, [pc, #400]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000e16:	f004 f963 	bl	80050e0 <HAL_TIM_ReadCapturedValue>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	4b63      	ldr	r3, [pc, #396]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000e20:	801a      	strh	r2, [r3, #0]
			zcp_period_flt = 0.5 * zcp_period_next + 0.5 * zcp_period;
 8000e22:	4b62      	ldr	r3, [pc, #392]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc1d 	bl	8000668 <__aeabi_i2d>
 8000e2e:	f04f 0200 	mov.w	r2, #0
 8000e32:	4b5f      	ldr	r3, [pc, #380]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000e34:	f7ff f99c 	bl	8000170 <__aeabi_dmul>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	4614      	mov	r4, r2
 8000e3e:	461d      	mov	r5, r3
 8000e40:	4b5c      	ldr	r3, [pc, #368]	@ (8000fb4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fc0e 	bl	8000668 <__aeabi_i2d>
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	4b57      	ldr	r3, [pc, #348]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000e52:	f7ff f98d 	bl	8000170 <__aeabi_dmul>
 8000e56:	4602      	mov	r2, r0
 8000e58:	460b      	mov	r3, r1
 8000e5a:	4620      	mov	r0, r4
 8000e5c:	4629      	mov	r1, r5
 8000e5e:	f7ff fab7 	bl	80003d0 <__adddf3>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f7ff fc67 	bl	800073c <__aeabi_d2uiz>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b51      	ldr	r3, [pc, #324]	@ (8000fb8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000e74:	801a      	strh	r2, [r3, #0]
			halfCommutTime = COEF_ADVC_ANGLE*zcp_period_flt;
 8000e76:	4b50      	ldr	r3, [pc, #320]	@ (8000fb8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fbf3 	bl	8000668 <__aeabi_i2d>
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	4b4d      	ldr	r3, [pc, #308]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x288>)
 8000e88:	f7ff f972 	bl	8000170 <__aeabi_dmul>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	460b      	mov	r3, r1
 8000e90:	4610      	mov	r0, r2
 8000e92:	4619      	mov	r1, r3
 8000e94:	f7ff fc52 	bl	800073c <__aeabi_d2uiz>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	4b48      	ldr	r3, [pc, #288]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000e9e:	801a      	strh	r2, [r3, #0]
			zcp_period = zcp_period_next;
 8000ea0:	4b42      	ldr	r3, [pc, #264]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b43      	ldr	r3, [pc, #268]	@ (8000fb4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000ea8:	801a      	strh	r2, [r3, #0]
			nextCommutTime = zcp_period_next+halfCommutTime;
 8000eaa:	4b40      	ldr	r3, [pc, #256]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	4b43      	ldr	r3, [pc, #268]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000eb2:	881b      	ldrh	r3, [r3, #0]
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4413      	add	r3, r2
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	4b42      	ldr	r3, [pc, #264]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000ebc:	801a      	strh	r2, [r3, #0]
 8000ebe:	e05c      	b.n	8000f7a <HAL_TIM_IC_CaptureCallback+0x246>
        } else if (__HAL_TIM_GET_IT_SOURCE(&htim2, TIM_IT_CC3)) {
 8000ec0:	4b39      	ldr	r3, [pc, #228]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	f003 0308 	and.w	r3, r3, #8
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d155      	bne.n	8000f7a <HAL_TIM_IC_CaptureCallback+0x246>
            // Manejo de cruce por cero para fase W
			zcp_period_next = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_3 );
 8000ece:	2108      	movs	r1, #8
 8000ed0:	4835      	ldr	r0, [pc, #212]	@ (8000fa8 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ed2:	f004 f905 	bl	80050e0 <HAL_TIM_ReadCapturedValue>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	4b34      	ldr	r3, [pc, #208]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000edc:	801a      	strh	r2, [r3, #0]
			zcp_period_flt = 0.5 * zcp_period_next + 0.5 * zcp_period;
 8000ede:	4b33      	ldr	r3, [pc, #204]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000ee0:	881b      	ldrh	r3, [r3, #0]
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fbbf 	bl	8000668 <__aeabi_i2d>
 8000eea:	f04f 0200 	mov.w	r2, #0
 8000eee:	4b30      	ldr	r3, [pc, #192]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000ef0:	f7ff f93e 	bl	8000170 <__aeabi_dmul>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	4614      	mov	r4, r2
 8000efa:	461d      	mov	r5, r3
 8000efc:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fbb0 	bl	8000668 <__aeabi_i2d>
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	4b28      	ldr	r3, [pc, #160]	@ (8000fb0 <HAL_TIM_IC_CaptureCallback+0x27c>)
 8000f0e:	f7ff f92f 	bl	8000170 <__aeabi_dmul>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4620      	mov	r0, r4
 8000f18:	4629      	mov	r1, r5
 8000f1a:	f7ff fa59 	bl	80003d0 <__adddf3>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	460b      	mov	r3, r1
 8000f22:	4610      	mov	r0, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fc09 	bl	800073c <__aeabi_d2uiz>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000f30:	801a      	strh	r2, [r3, #0]
			halfCommutTime = COEF_ADVC_ANGLE*zcp_period_flt;
 8000f32:	4b21      	ldr	r3, [pc, #132]	@ (8000fb8 <HAL_TIM_IC_CaptureCallback+0x284>)
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff fb95 	bl	8000668 <__aeabi_i2d>
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b1e      	ldr	r3, [pc, #120]	@ (8000fbc <HAL_TIM_IC_CaptureCallback+0x288>)
 8000f44:	f7ff f914 	bl	8000170 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f7ff fbf4 	bl	800073c <__aeabi_d2uiz>
 8000f54:	4603      	mov	r3, r0
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000f5a:	801a      	strh	r2, [r3, #0]
			zcp_period = zcp_period_next;
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000f5e:	881b      	ldrh	r3, [r3, #0]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_TIM_IC_CaptureCallback+0x280>)
 8000f64:	801a      	strh	r2, [r3, #0]
			nextCommutTime = zcp_period_next+halfCommutTime;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <HAL_TIM_IC_CaptureCallback+0x278>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	b29a      	uxth	r2, r3
 8000f6c:	4b14      	ldr	r3, [pc, #80]	@ (8000fc0 <HAL_TIM_IC_CaptureCallback+0x28c>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4413      	add	r3, r2
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000f78:	801a      	strh	r2, [r3, #0]
        }
		(nextCommutTime > 999)? nextCommutTime = 999: nextCommutTime;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000f7c:	881b      	ldrh	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000f84:	d304      	bcc.n	8000f90 <HAL_TIM_IC_CaptureCallback+0x25c>
 8000f86:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000f88:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f8c:	801a      	strh	r2, [r3, #0]
 8000f8e:	e001      	b.n	8000f94 <HAL_TIM_IC_CaptureCallback+0x260>
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000f92:	881b      	ldrh	r3, [r3, #0]

		TIM4->CCR2 = nextCommutTime;
 8000f94:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc4 <HAL_TIM_IC_CaptureCallback+0x290>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fc8 <HAL_TIM_IC_CaptureCallback+0x294>)
 8000f9c:	639a      	str	r2, [r3, #56]	@ 0x38
	}

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bdb0      	pop	{r4, r5, r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001cc 	.word	0x200001cc
 8000fac:	20000290 	.word	0x20000290
 8000fb0:	3fe00000 	.word	0x3fe00000
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000292 	.word	0x20000292
 8000fbc:	3fd80000 	.word	0x3fd80000
 8000fc0:	20000296 	.word	0x20000296
 8000fc4:	20000294 	.word	0x20000294
 8000fc8:	40000800 	.word	0x40000800

08000fcc <commutation>:

void commutation(uint8_t step, uint16_t pwm) {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	460a      	mov	r2, r1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	80bb      	strh	r3, [r7, #4]

    switch(step) {
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b05      	cmp	r3, #5
 8000fe0:	f200 80e2 	bhi.w	80011a8 <commutation+0x1dc>
 8000fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8000fec <commutation+0x20>)
 8000fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fea:	bf00      	nop
 8000fec:	08001005 	.word	0x08001005
 8000ff0:	0800104b 	.word	0x0800104b
 8000ff4:	08001091 	.word	0x08001091
 8000ff8:	080010d7 	.word	0x080010d7
 8000ffc:	0800111d 	.word	0x0800111d
 8001000:	08001163 	.word	0x08001163

        case POS_UV:

            GPIOB->ODR |= EN_U;
 8001004:	4b6b      	ldr	r3, [pc, #428]	@ (80011b4 <commutation+0x1e8>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	4a6a      	ldr	r2, [pc, #424]	@ (80011b4 <commutation+0x1e8>)
 800100a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800100e:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR |= EN_V;  // Activar EN_U y EN_V
 8001010:	4b68      	ldr	r3, [pc, #416]	@ (80011b4 <commutation+0x1e8>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	4a67      	ldr	r2, [pc, #412]	@ (80011b4 <commutation+0x1e8>)
 8001016:	f043 0302 	orr.w	r3, r3, #2
 800101a:	60d3      	str	r3, [r2, #12]

            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 800101c:	4b66      	ldr	r3, [pc, #408]	@ (80011b8 <commutation+0x1ec>)
 800101e:	68db      	ldr	r3, [r3, #12]
 8001020:	4a65      	ldr	r2, [pc, #404]	@ (80011b8 <commutation+0x1ec>)
 8001022:	f023 0320 	bic.w	r3, r3, #32
 8001026:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 8001028:	4b64      	ldr	r3, [pc, #400]	@ (80011bc <commutation+0x1f0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	88ba      	ldrh	r2, [r7, #4]
 800102e:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8001030:	4b62      	ldr	r3, [pc, #392]	@ (80011bc <commutation+0x1f0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2200      	movs	r2, #0
 8001036:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8001038:	2100      	movs	r1, #0
 800103a:	4860      	ldr	r0, [pc, #384]	@ (80011bc <commutation+0x1f0>)
 800103c:	f003 fa32 	bl	80044a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_V);
 8001040:	2104      	movs	r1, #4
 8001042:	485e      	ldr	r0, [pc, #376]	@ (80011bc <commutation+0x1f0>)
 8001044:	f003 fa2e 	bl	80044a4 <HAL_TIM_PWM_Start>

            break;
 8001048:	e0af      	b.n	80011aa <commutation+0x1de>
        case POS_UW:

            GPIOB->ODR |= EN_U ; // Activar EN_U y EN_W
 800104a:	4b5a      	ldr	r3, [pc, #360]	@ (80011b4 <commutation+0x1e8>)
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	4a59      	ldr	r2, [pc, #356]	@ (80011b4 <commutation+0x1e8>)
 8001050:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001054:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8001056:	4b58      	ldr	r3, [pc, #352]	@ (80011b8 <commutation+0x1ec>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	4a57      	ldr	r2, [pc, #348]	@ (80011b8 <commutation+0x1ec>)
 800105c:	f043 0320 	orr.w	r3, r3, #32
 8001060:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 8001062:	4b54      	ldr	r3, [pc, #336]	@ (80011b4 <commutation+0x1e8>)
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	4a53      	ldr	r2, [pc, #332]	@ (80011b4 <commutation+0x1e8>)
 8001068:	f023 0302 	bic.w	r3, r3, #2
 800106c:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 800106e:	4b53      	ldr	r3, [pc, #332]	@ (80011bc <commutation+0x1f0>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	88ba      	ldrh	r2, [r7, #4]
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8001076:	4b51      	ldr	r3, [pc, #324]	@ (80011bc <commutation+0x1f0>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2200      	movs	r2, #0
 800107c:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_Start(&htim3, IN_U);
 800107e:	2100      	movs	r1, #0
 8001080:	484e      	ldr	r0, [pc, #312]	@ (80011bc <commutation+0x1f0>)
 8001082:	f003 fa0f 	bl	80044a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8001086:	2108      	movs	r1, #8
 8001088:	484c      	ldr	r0, [pc, #304]	@ (80011bc <commutation+0x1f0>)
 800108a:	f003 fa0b 	bl	80044a4 <HAL_TIM_PWM_Start>
            break;
 800108e:	e08c      	b.n	80011aa <commutation+0x1de>
        case POS_VW:

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 8001090:	4b48      	ldr	r3, [pc, #288]	@ (80011b4 <commutation+0x1e8>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	4a47      	ldr	r2, [pc, #284]	@ (80011b4 <commutation+0x1e8>)
 8001096:	f043 0302 	orr.w	r3, r3, #2
 800109a:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 800109c:	4b46      	ldr	r3, [pc, #280]	@ (80011b8 <commutation+0x1ec>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	4a45      	ldr	r2, [pc, #276]	@ (80011b8 <commutation+0x1ec>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 80010a8:	4b42      	ldr	r3, [pc, #264]	@ (80011b4 <commutation+0x1e8>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	4a41      	ldr	r2, [pc, #260]	@ (80011b4 <commutation+0x1e8>)
 80010ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80010b2:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 80010b4:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <commutation+0x1f0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	88ba      	ldrh	r2, [r7, #4]
 80010ba:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80010bc:	4b3f      	ldr	r3, [pc, #252]	@ (80011bc <commutation+0x1f0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2200      	movs	r2, #0
 80010c2:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_Start(&htim3, IN_V);
 80010c4:	2104      	movs	r1, #4
 80010c6:	483d      	ldr	r0, [pc, #244]	@ (80011bc <commutation+0x1f0>)
 80010c8:	f003 f9ec 	bl	80044a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_W);
 80010cc:	2108      	movs	r1, #8
 80010ce:	483b      	ldr	r0, [pc, #236]	@ (80011bc <commutation+0x1f0>)
 80010d0:	f003 f9e8 	bl	80044a4 <HAL_TIM_PWM_Start>
            break;
 80010d4:	e069      	b.n	80011aa <commutation+0x1de>
        case POS_VU:

            GPIOB->ODR |= EN_U; // Activar EN_U y EN_V
 80010d6:	4b37      	ldr	r3, [pc, #220]	@ (80011b4 <commutation+0x1e8>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	4a36      	ldr	r2, [pc, #216]	@ (80011b4 <commutation+0x1e8>)
 80010dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010e0:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR |=  EN_V;
 80010e2:	4b34      	ldr	r3, [pc, #208]	@ (80011b4 <commutation+0x1e8>)
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	4a33      	ldr	r2, [pc, #204]	@ (80011b4 <commutation+0x1e8>)
 80010e8:	f043 0302 	orr.w	r3, r3, #2
 80010ec:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 80010ee:	4b32      	ldr	r3, [pc, #200]	@ (80011b8 <commutation+0x1ec>)
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	4a31      	ldr	r2, [pc, #196]	@ (80011b8 <commutation+0x1ec>)
 80010f4:	f023 0320 	bic.w	r3, r3, #32
 80010f8:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 80010fa:	4b30      	ldr	r3, [pc, #192]	@ (80011bc <commutation+0x1f0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	88ba      	ldrh	r2, [r7, #4]
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8001102:	4b2e      	ldr	r3, [pc, #184]	@ (80011bc <commutation+0x1f0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2200      	movs	r2, #0
 8001108:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_TIM_PWM_Start(&htim3, IN_V);
 800110a:	2104      	movs	r1, #4
 800110c:	482b      	ldr	r0, [pc, #172]	@ (80011bc <commutation+0x1f0>)
 800110e:	f003 f9c9 	bl	80044a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8001112:	2100      	movs	r1, #0
 8001114:	4829      	ldr	r0, [pc, #164]	@ (80011bc <commutation+0x1f0>)
 8001116:	f003 f9c5 	bl	80044a4 <HAL_TIM_PWM_Start>

            break;
 800111a:	e046      	b.n	80011aa <commutation+0x1de>
        case POS_WU:

            GPIOB->ODR |= EN_U; // Activar EN_U y EN_W
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <commutation+0x1e8>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	4a24      	ldr	r2, [pc, #144]	@ (80011b4 <commutation+0x1e8>)
 8001122:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001126:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8001128:	4b23      	ldr	r3, [pc, #140]	@ (80011b8 <commutation+0x1ec>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	4a22      	ldr	r2, [pc, #136]	@ (80011b8 <commutation+0x1ec>)
 800112e:	f043 0320 	orr.w	r3, r3, #32
 8001132:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <commutation+0x1e8>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	4a1e      	ldr	r2, [pc, #120]	@ (80011b4 <commutation+0x1e8>)
 800113a:	f023 0302 	bic.w	r3, r3, #2
 800113e:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8001140:	4b1e      	ldr	r3, [pc, #120]	@ (80011bc <commutation+0x1f0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	88ba      	ldrh	r2, [r7, #4]
 8001146:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8001148:	4b1c      	ldr	r3, [pc, #112]	@ (80011bc <commutation+0x1f0>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8001150:	2108      	movs	r1, #8
 8001152:	481a      	ldr	r0, [pc, #104]	@ (80011bc <commutation+0x1f0>)
 8001154:	f003 f9a6 	bl	80044a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8001158:	2100      	movs	r1, #0
 800115a:	4818      	ldr	r0, [pc, #96]	@ (80011bc <commutation+0x1f0>)
 800115c:	f003 f9a2 	bl	80044a4 <HAL_TIM_PWM_Start>
            break;
 8001160:	e023      	b.n	80011aa <commutation+0x1de>
        case POS_WV:

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 8001162:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <commutation+0x1e8>)
 8001164:	68db      	ldr	r3, [r3, #12]
 8001166:	4a13      	ldr	r2, [pc, #76]	@ (80011b4 <commutation+0x1e8>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <commutation+0x1ec>)
 8001170:	68db      	ldr	r3, [r3, #12]
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <commutation+0x1ec>)
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <commutation+0x1e8>)
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	4a0d      	ldr	r2, [pc, #52]	@ (80011b4 <commutation+0x1e8>)
 8001180:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001184:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <commutation+0x1f0>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	88ba      	ldrh	r2, [r7, #4]
 800118c:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <commutation+0x1f0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	2200      	movs	r2, #0
 8001194:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8001196:	2108      	movs	r1, #8
 8001198:	4808      	ldr	r0, [pc, #32]	@ (80011bc <commutation+0x1f0>)
 800119a:	f003 f983 	bl	80044a4 <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_V);
 800119e:	2104      	movs	r1, #4
 80011a0:	4806      	ldr	r0, [pc, #24]	@ (80011bc <commutation+0x1f0>)
 80011a2:	f003 f97f 	bl	80044a4 <HAL_TIM_PWM_Start>

            break;
 80011a6:	e000      	b.n	80011aa <commutation+0x1de>
        default:
            break;
 80011a8:	bf00      	nop
    }
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40010c00 	.word	0x40010c00
 80011b8:	40010800 	.word	0x40010800
 80011bc:	200000c4 	.word	0x200000c4

080011c0 <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a5b      	ldr	r2, [pc, #364]	@ (800133c <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d17b      	bne.n	80012ca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f1b      	ldrb	r3, [r3, #28]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d177      	bne.n	80012ca <HAL_TIM_OC_DelayElapsedCallback+0x10a>
	    //TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
		__HAL_TIM_DISABLE(&htim4);
 80011da:	4b59      	ldr	r3, [pc, #356]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	f241 1311 	movw	r3, #4369	@ 0x1111
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 80011ea:	4b55      	ldr	r3, [pc, #340]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6a1a      	ldr	r2, [r3, #32]
 80011f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d107      	bne.n	800120a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 80011fa:	4b51      	ldr	r3, [pc, #324]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4b4f      	ldr	r3, [pc, #316]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 800120a:	4b4d      	ldr	r3, [pc, #308]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Stop_IT(&htim4);
 8001212:	484b      	ldr	r0, [pc, #300]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8001214:	f002 fe2c 	bl	8003e70 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim4);
 8001218:	4849      	ldr	r0, [pc, #292]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800121a:	f002 fdb0 	bl	8003d7e <HAL_TIM_Base_Stop>

		HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	4847      	ldr	r0, [pc, #284]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8001222:	f003 f83d 	bl	80042a0 <HAL_TIM_OC_Stop_IT>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 8001226:	2300      	movs	r3, #0
 8001228:	60fb      	str	r3, [r7, #12]
 800122a:	e036      	b.n	800129a <HAL_TIM_OC_DelayElapsedCallback+0xda>
			// Detener el temporizador y deshabilitar el contador
			if (eventTable[i].currentState == state_machine) {
 800122c:	4945      	ldr	r1, [pc, #276]	@ (8001344 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	4613      	mov	r3, r2
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	4413      	add	r3, r2
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	440b      	add	r3, r1
 800123a:	781a      	ldrb	r2, [r3, #0]
 800123c:	4b42      	ldr	r3, [pc, #264]	@ (8001348 <HAL_TIM_OC_DelayElapsedCallback+0x188>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	429a      	cmp	r2, r3
 8001244:	d126      	bne.n	8001294 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
				if (eventTable[i].eventFlag != NULL) {
 8001246:	493f      	ldr	r1, [pc, #252]	@ (8001344 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	3304      	adds	r3, #4
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d022      	beq.n	80012a2 <HAL_TIM_OC_DelayElapsedCallback+0xe2>
					*(eventTable[i].eventFlag) = true;
 800125c:	4939      	ldr	r1, [pc, #228]	@ (8001344 <HAL_TIM_OC_DelayElapsedCallback+0x184>)
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	4613      	mov	r3, r2
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	3304      	adds	r3, #4
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_ENABLE(&htim4);
 8001272:	4b33      	ldr	r3, [pc, #204]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	4b31      	ldr	r3, [pc, #196]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	@ 0x24

					HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 800128a:	2100      	movs	r1, #0
 800128c:	482c      	ldr	r0, [pc, #176]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800128e:	f003 f807 	bl	80042a0 <HAL_TIM_OC_Stop_IT>

					return;
 8001292:	e04f      	b.n	8001334 <HAL_TIM_OC_DelayElapsedCallback+0x174>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	3301      	adds	r3, #1
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2b03      	cmp	r3, #3
 800129e:	d9c5      	bls.n	800122c <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 80012a0:	e000      	b.n	80012a4 <HAL_TIM_OC_DelayElapsedCallback+0xe4>

				}
				break;
 80012a2:	bf00      	nop

			}


		}
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80012a4:	4b26      	ldr	r3, [pc, #152]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 80012ac:	4824      	ldr	r0, [pc, #144]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80012ae:	f002 fd8d 	bl	8003dcc <HAL_TIM_Base_Start_IT>
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80012b2:	2100      	movs	r1, #0
 80012b4:	4822      	ldr	r0, [pc, #136]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80012b6:	f002 ff03 	bl	80040c0 <HAL_TIM_OC_Start_IT>
		__HAL_TIM_ENABLE(&htim4);
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]


	}
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a1b      	ldr	r2, [pc, #108]	@ (800133c <HAL_TIM_OC_DelayElapsedCallback+0x17c>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d12f      	bne.n	8001334 <HAL_TIM_OC_DelayElapsedCallback+0x174>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	7f1b      	ldrb	r3, [r3, #28]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d12b      	bne.n	8001334 <HAL_TIM_OC_DelayElapsedCallback+0x174>
        //TIM4->CCR2 = commutationTime;
		enableZCP(commutationStep);
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f7ff fad4 	bl	8000890 <enableZCP>

		commutation(commutationStep, pwmVal);
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	4a18      	ldr	r2, [pc, #96]	@ (8001350 <HAL_TIM_OC_DelayElapsedCallback+0x190>)
 80012f0:	8812      	ldrh	r2, [r2, #0]
 80012f2:	b292      	uxth	r2, r2
 80012f4:	4611      	mov	r1, r2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe68 	bl	8000fcc <commutation>

		commutationStep = (commutationStep + 1) % NUM_POS;
 80012fc:	4b13      	ldr	r3, [pc, #76]	@ (800134c <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_TIM_OC_DelayElapsedCallback+0x194>)
 8001306:	fb83 3102 	smull	r3, r1, r3, r2
 800130a:	17d3      	asrs	r3, r2, #31
 800130c:	1ac9      	subs	r1, r1, r3
 800130e:	460b      	mov	r3, r1
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	440b      	add	r3, r1
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	1ad1      	subs	r1, r2, r3
 8001318:	b2ca      	uxtb	r2, r1
 800131a:	4b0c      	ldr	r3, [pc, #48]	@ (800134c <HAL_TIM_OC_DelayElapsedCallback+0x18c>)
 800131c:	701a      	strb	r2, [r3, #0]
		reference_comm++;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29b      	uxth	r3, r3
 8001324:	3301      	adds	r3, #1
 8001326:	b29a      	uxth	r2, r3
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 800132a:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 800132c:	4b04      	ldr	r3, [pc, #16]	@ (8001340 <HAL_TIM_OC_DelayElapsedCallback+0x180>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2200      	movs	r2, #0
 8001332:	625a      	str	r2, [r3, #36]	@ 0x24
	}
}
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40000800 	.word	0x40000800
 8001340:	2000007c 	.word	0x2000007c
 8001344:	20000024 	.word	0x20000024
 8001348:	2000027d 	.word	0x2000027d
 800134c:	20000282 	.word	0x20000282
 8001350:	20000280 	.word	0x20000280
 8001354:	2aaaaaab 	.word	0x2aaaaaab
 8001358:	20000286 	.word	0x20000286

0800135c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af02      	add	r7, sp, #8
 8001362:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001364:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001368:	480e      	ldr	r0, [pc, #56]	@ (80013a4 <HAL_ADC_ConvCpltCallback+0x48>)
 800136a:	f001 ffd9 	bl	8003320 <HAL_GPIO_TogglePin>
	adc_val = HAL_ADC_GetValue(hadc);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f001 f8a8 	bl	80024c4 <HAL_ADC_GetValue>
 8001374:	4603      	mov	r3, r0
 8001376:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x4c>)
 8001378:	6013      	str	r3, [r2, #0]
	pwmVal = map(adc_val, 0, 4095, 1250, 1799);
 800137a:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <HAL_ADC_ConvCpltCallback+0x4c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f240 7307 	movw	r3, #1799	@ 0x707
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	f240 43e2 	movw	r3, #1250	@ 0x4e2
 800138a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800138e:	2100      	movs	r1, #0
 8001390:	f7ff f9f4 	bl	800077c <map>
 8001394:	4603      	mov	r3, r0
 8001396:	b29a      	uxth	r2, r3
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <HAL_ADC_ConvCpltCallback+0x50>)
 800139a:	801a      	strh	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40011000 	.word	0x40011000
 80013a8:	2000028c 	.word	0x2000028c
 80013ac:	20000280 	.word	0x20000280

080013b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013b6:	f000 fe71 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ba:	f000 f82d 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013be:	f000 fb47 	bl	8001a50 <MX_GPIO_Init>
  MX_DMA_Init();
 80013c2:	f000 fb27 	bl	8001a14 <MX_DMA_Init>
  MX_TIM4_Init();
 80013c6:	f000 fa71 	bl	80018ac <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80013ca:	f000 faf9 	bl	80019c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80013ce:	f000 f9fd 	bl	80017cc <MX_TIM3_Init>
  MX_TIM2_Init();
 80013d2:	f000 f959 	bl	8001688 <MX_TIM2_Init>
  MX_ADC1_Init();
 80013d6:	f000 f87b 	bl	80014d0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80013da:	f000 f8b7 	bl	800154c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013e4:	4808      	ldr	r0, [pc, #32]	@ (8001408 <main+0x58>)
 80013e6:	f001 ff83 	bl	80032f0 <HAL_GPIO_WritePin>
  state statetete;
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80013ea:	2201      	movs	r2, #1
 80013ec:	4907      	ldr	r1, [pc, #28]	@ (800140c <main+0x5c>)
 80013ee:	4808      	ldr	r0, [pc, #32]	@ (8001410 <main+0x60>)
 80013f0:	f004 fcc2 	bl	8005d78 <HAL_UART_Receive_IT>
  /*
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
*/
  HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_1);
 80013f4:	2100      	movs	r1, #0
 80013f6:	4807      	ldr	r0, [pc, #28]	@ (8001414 <main+0x64>)
 80013f8:	f002 fdc0 	bl	8003f7c <HAL_TIM_OC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  statetete = handleState();
 80013fc:	f7ff fc1e 	bl	8000c3c <handleState>
 8001400:	4603      	mov	r3, r0
 8001402:	71fb      	strb	r3, [r7, #7]
 8001404:	bf00      	nop
 8001406:	e7f9      	b.n	80013fc <main+0x4c>
 8001408:	40011000 	.word	0x40011000
 800140c:	20000258 	.word	0x20000258
 8001410:	2000010c 	.word	0x2000010c
 8001414:	20000184 	.word	0x20000184

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	@ 0x50
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001422:	2228      	movs	r2, #40	@ 0x28
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f005 fa36 	bl	8006898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001448:	2301      	movs	r3, #1
 800144a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800144c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001456:	2301      	movs	r3, #1
 8001458:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800145a:	2302      	movs	r3, #2
 800145c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001462:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001464:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800146a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800146e:	4618      	mov	r0, r3
 8001470:	f001 ff70 	bl	8003354 <HAL_RCC_OscConfig>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800147a:	f000 fb6d 	bl	8001b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147e:	230f      	movs	r3, #15
 8001480:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800148a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2102      	movs	r1, #2
 800149a:	4618      	mov	r0, r3
 800149c:	f002 f9dc 	bl	8003858 <HAL_RCC_ClockConfig>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014a6:	f000 fb57 	bl	8001b58 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014aa:	2302      	movs	r3, #2
 80014ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 80014ae:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80014b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b4:	1d3b      	adds	r3, r7, #4
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 fb5c 	bl	8003b74 <HAL_RCCEx_PeriphCLKConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80014c2:	f000 fb49 	bl	8001b58 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	@ 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_ADC1_Init+0x74>)
 80014e2:	4a19      	ldr	r2, [pc, #100]	@ (8001548 <MX_ADC1_Init+0x78>)
 80014e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_ADC1_Init+0x74>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014ec:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <MX_ADC1_Init+0x74>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_ADC1_Init+0x74>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 80014f8:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <MX_ADC1_Init+0x74>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_ADC1_Init+0x74>)
 8001500:	2200      	movs	r2, #0
 8001502:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <MX_ADC1_Init+0x74>)
 8001506:	2201      	movs	r2, #1
 8001508:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800150a:	480e      	ldr	r0, [pc, #56]	@ (8001544 <MX_ADC1_Init+0x74>)
 800150c:	f000 fe4c 	bl	80021a8 <HAL_ADC_Init>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001516:	f000 fb1f 	bl	8001b58 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800151a:	2304      	movs	r3, #4
 800151c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800151e:	2301      	movs	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4806      	ldr	r0, [pc, #24]	@ (8001544 <MX_ADC1_Init+0x74>)
 800152c:	f001 f89e 	bl	800266c <HAL_ADC_ConfigChannel>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8001536:	f000 fb0f 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000154 	.word	0x20000154
 8001548:	40012400 	.word	0x40012400

0800154c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b096      	sub	sp, #88	@ 0x58
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001552:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800156a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	615a      	str	r2, [r3, #20]
 800157c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800157e:	1d3b      	adds	r3, r7, #4
 8001580:	2220      	movs	r2, #32
 8001582:	2100      	movs	r1, #0
 8001584:	4618      	mov	r0, r3
 8001586:	f005 f987 	bl	8006898 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800158a:	4b3d      	ldr	r3, [pc, #244]	@ (8001680 <MX_TIM1_Init+0x134>)
 800158c:	4a3d      	ldr	r2, [pc, #244]	@ (8001684 <MX_TIM1_Init+0x138>)
 800158e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 8001590:	4b3b      	ldr	r3, [pc, #236]	@ (8001680 <MX_TIM1_Init+0x134>)
 8001592:	2202      	movs	r2, #2
 8001594:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b3a      	ldr	r3, [pc, #232]	@ (8001680 <MX_TIM1_Init+0x134>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 800159c:	4b38      	ldr	r3, [pc, #224]	@ (8001680 <MX_TIM1_Init+0x134>)
 800159e:	f240 7207 	movw	r2, #1799	@ 0x707
 80015a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <MX_TIM1_Init+0x134>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015aa:	4b35      	ldr	r3, [pc, #212]	@ (8001680 <MX_TIM1_Init+0x134>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b33      	ldr	r3, [pc, #204]	@ (8001680 <MX_TIM1_Init+0x134>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015b6:	4832      	ldr	r0, [pc, #200]	@ (8001680 <MX_TIM1_Init+0x134>)
 80015b8:	f002 fb92 	bl	8003ce0 <HAL_TIM_Base_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80015c2:	f000 fac9 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80015d0:	4619      	mov	r1, r3
 80015d2:	482b      	ldr	r0, [pc, #172]	@ (8001680 <MX_TIM1_Init+0x134>)
 80015d4:	f003 fc7a 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80015de:	f000 fabb 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80015e2:	4827      	ldr	r0, [pc, #156]	@ (8001680 <MX_TIM1_Init+0x134>)
 80015e4:	f002 fc72 	bl	8003ecc <HAL_TIM_OC_Init>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80015ee:	f000 fab3 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 80015f2:	2340      	movs	r3, #64	@ 0x40
 80015f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015fe:	4619      	mov	r1, r3
 8001600:	481f      	ldr	r0, [pc, #124]	@ (8001680 <MX_TIM1_Init+0x134>)
 8001602:	f004 fa1d 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800160c:	f000 faa4 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001610:	2300      	movs	r3, #0
 8001612:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 1770;
 8001614:	f240 63ea 	movw	r3, #1770	@ 0x6ea
 8001618:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800161e:	2300      	movs	r3, #0
 8001620:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800162e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001632:	2200      	movs	r2, #0
 8001634:	4619      	mov	r1, r3
 8001636:	4812      	ldr	r0, [pc, #72]	@ (8001680 <MX_TIM1_Init+0x134>)
 8001638:	f003 fa8e 	bl	8004b58 <HAL_TIM_OC_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001642:	f000 fa89 	bl	8001b58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800165a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	4619      	mov	r1, r3
 8001668:	4805      	ldr	r0, [pc, #20]	@ (8001680 <MX_TIM1_Init+0x134>)
 800166a:	f004 fa47 	bl	8005afc <HAL_TIMEx_ConfigBreakDeadTime>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8001674:	f000 fa70 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	3758      	adds	r7, #88	@ 0x58
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000184 	.word	0x20000184
 8001684:	40012c00 	.word	0x40012c00

08001688 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b090      	sub	sp, #64	@ 0x40
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800169c:	f107 031c 	add.w	r3, r7, #28
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c2:	4b41      	ldr	r3, [pc, #260]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016c4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 719;
 80016ca:	4b3f      	ldr	r3, [pc, #252]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016cc:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80016d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d2:	4b3d      	ldr	r3, [pc, #244]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80016d8:	4b3b      	ldr	r3, [pc, #236]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b38      	ldr	r3, [pc, #224]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ec:	4836      	ldr	r0, [pc, #216]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80016ee:	f002 faf7 	bl	8003ce0 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80016f8:	f000 fa2e 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001700:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001706:	4619      	mov	r1, r3
 8001708:	482f      	ldr	r0, [pc, #188]	@ (80017c8 <MX_TIM2_Init+0x140>)
 800170a:	f003 fbdf 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001714:	f000 fa20 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001718:	482b      	ldr	r0, [pc, #172]	@ (80017c8 <MX_TIM2_Init+0x140>)
 800171a:	f002 ffc9 	bl	80046b0 <HAL_TIM_IC_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001724:	f000 fa18 	bl	8001b58 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001728:	2304      	movs	r3, #4
 800172a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800172c:	2340      	movs	r3, #64	@ 0x40
 800172e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	4619      	mov	r1, r3
 800173e:	4822      	ldr	r0, [pc, #136]	@ (80017c8 <MX_TIM2_Init+0x140>)
 8001740:	f003 fc8b 	bl	800505a <HAL_TIM_SlaveConfigSynchro>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800174a:	f000 fa05 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	481a      	ldr	r0, [pc, #104]	@ (80017c8 <MX_TIM2_Init+0x140>)
 800175e:	f004 f96f 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM2_Init+0xe4>
  {
    Error_Handler();
 8001768:	f000 f9f6 	bl	8001b58 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800176c:	2302      	movs	r3, #2
 800176e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001770:	2301      	movs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 11;
 8001778:	230b      	movs	r3, #11
 800177a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	4619      	mov	r1, r3
 8001782:	4811      	ldr	r0, [pc, #68]	@ (80017c8 <MX_TIM2_Init+0x140>)
 8001784:	f003 fa44 	bl	8004c10 <HAL_TIM_IC_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM2_Init+0x10a>
  {
    Error_Handler();
 800178e:	f000 f9e3 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2204      	movs	r2, #4
 8001796:	4619      	mov	r1, r3
 8001798:	480b      	ldr	r0, [pc, #44]	@ (80017c8 <MX_TIM2_Init+0x140>)
 800179a:	f003 fa39 	bl	8004c10 <HAL_TIM_IC_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM2_Init+0x120>
  {
    Error_Handler();
 80017a4:	f000 f9d8 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2208      	movs	r2, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	4806      	ldr	r0, [pc, #24]	@ (80017c8 <MX_TIM2_Init+0x140>)
 80017b0:	f003 fa2e 	bl	8004c10 <HAL_TIM_IC_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM2_Init+0x136>
  {
    Error_Handler();
 80017ba:	f000 f9cd 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	3740      	adds	r7, #64	@ 0x40
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	200001cc 	.word	0x200001cc

080017cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d2:	f107 0320 	add.w	r3, r7, #32
 80017d6:	2200      	movs	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
 80017ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017ee:	4b2d      	ldr	r3, [pc, #180]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 80017f0:	4a2d      	ldr	r2, [pc, #180]	@ (80018a8 <MX_TIM3_Init+0xdc>)
 80017f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80017f4:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fa:	4b2a      	ldr	r3, [pc, #168]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8001800:	4b28      	ldr	r3, [pc, #160]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001802:	f240 7207 	movw	r2, #1799	@ 0x707
 8001806:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001808:	4b26      	ldr	r3, [pc, #152]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 800180a:	2200      	movs	r2, #0
 800180c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800180e:	4b25      	ldr	r3, [pc, #148]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001814:	4823      	ldr	r0, [pc, #140]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001816:	f002 fdf5 	bl	8004404 <HAL_TIM_PWM_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001820:	f000 f99a 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001824:	2320      	movs	r3, #32
 8001826:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800182c:	f107 0320 	add.w	r3, r7, #32
 8001830:	4619      	mov	r1, r3
 8001832:	481c      	ldr	r0, [pc, #112]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001834:	f004 f904 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800183e:	f000 f98b 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001842:	2360      	movs	r3, #96	@ 0x60
 8001844:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800184a:	2300      	movs	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001852:	1d3b      	adds	r3, r7, #4
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	4812      	ldr	r0, [pc, #72]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 800185a:	f003 fa75 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001864:	f000 f978 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001868:	1d3b      	adds	r3, r7, #4
 800186a:	2204      	movs	r2, #4
 800186c:	4619      	mov	r1, r3
 800186e:	480d      	ldr	r0, [pc, #52]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001870:	f003 fa6a 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800187a:	f000 f96d 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2208      	movs	r2, #8
 8001882:	4619      	mov	r1, r3
 8001884:	4807      	ldr	r0, [pc, #28]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001886:	f003 fa5f 	bl	8004d48 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8001890:	f000 f962 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001894:	4803      	ldr	r0, [pc, #12]	@ (80018a4 <MX_TIM3_Init+0xd8>)
 8001896:	f000 faa5 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	@ 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200000c4 	.word	0x200000c4
 80018a8:	40000400 	.word	0x40000400

080018ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b096      	sub	sp, #88	@ 0x58
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]
 80018da:	615a      	str	r2, [r3, #20]
 80018dc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  TIM_OnePulse_InitTypeDef sConfig;
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018de:	4b36      	ldr	r3, [pc, #216]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 80018e0:	4a36      	ldr	r2, [pc, #216]	@ (80019bc <MX_TIM4_Init+0x110>)
 80018e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80018e4:	4b34      	ldr	r3, [pc, #208]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 80018e6:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80018ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ec:	4b32      	ldr	r3, [pc, #200]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80018f2:	4b31      	ldr	r3, [pc, #196]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 80018f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80018f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018fa:	4b2f      	ldr	r3, [pc, #188]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001900:	4b2d      	ldr	r3, [pc, #180]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 8001902:	2200      	movs	r2, #0
 8001904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001906:	482c      	ldr	r0, [pc, #176]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 8001908:	f002 f9ea 	bl	8003ce0 <HAL_TIM_Base_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001912:	f000 f921 	bl	8001b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800191a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800191c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001920:	4619      	mov	r1, r3
 8001922:	4825      	ldr	r0, [pc, #148]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 8001924:	f003 fad2 	bl	8004ecc <HAL_TIM_ConfigClockSource>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800192e:	f000 f913 	bl	8001b58 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001932:	4821      	ldr	r0, [pc, #132]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 8001934:	f002 faca 	bl	8003ecc <HAL_TIM_OC_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800193e:	f000 f90b 	bl	8001b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001942:	2300      	movs	r3, #0
 8001944:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800194a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800194e:	4619      	mov	r1, r3
 8001950:	4819      	ldr	r0, [pc, #100]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 8001952:	f004 f875 	bl	8005a40 <HAL_TIMEx_MasterConfigSynchronization>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800195c:	f000 f8fc 	bl	8001b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001960:	2300      	movs	r3, #0
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001970:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	480f      	ldr	r0, [pc, #60]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 800197a:	f003 f8ed 	bl	8004b58 <HAL_TIM_OC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001984:	f000 f8e8 	bl	8001b58 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	4b0a      	ldr	r3, [pc, #40]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f042 0208 	orr.w	r2, r2, #8
 8001996:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199c:	2204      	movs	r2, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4805      	ldr	r0, [pc, #20]	@ (80019b8 <MX_TIM4_Init+0x10c>)
 80019a2:	f003 f8d9 	bl	8004b58 <HAL_TIM_OC_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80019ac:	f000 f8d4 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	3758      	adds	r7, #88	@ 0x58
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000007c 	.word	0x2000007c
 80019bc:	40000800 	.word	0x40000800

080019c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019c6:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <MX_USART2_UART_Init+0x50>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ca:	4b10      	ldr	r3, [pc, #64]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b0c      	ldr	r3, [pc, #48]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019de:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b06      	ldr	r3, [pc, #24]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019f6:	4805      	ldr	r0, [pc, #20]	@ (8001a0c <MX_USART2_UART_Init+0x4c>)
 80019f8:	f004 f8e3 	bl	8005bc2 <HAL_UART_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a02:	f000 f8a9 	bl	8001b58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000010c 	.word	0x2000010c
 8001a10:	40004400 	.word	0x40004400

08001a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001a4c <MX_DMA_Init+0x38>)
 8001a1c:	695b      	ldr	r3, [r3, #20]
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	@ (8001a4c <MX_DMA_Init+0x38>)
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	6153      	str	r3, [r2, #20]
 8001a26:	4b09      	ldr	r3, [pc, #36]	@ (8001a4c <MX_DMA_Init+0x38>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	2011      	movs	r0, #17
 8001a38:	f001 f88b 	bl	8002b52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001a3c:	2011      	movs	r0, #17
 8001a3e:	f001 f8a4 	bl	8002b8a <HAL_NVIC_EnableIRQ>

}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40021000 	.word	0x40021000

08001a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a64:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	4a37      	ldr	r2, [pc, #220]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a6a:	f043 0310 	orr.w	r3, r3, #16
 8001a6e:	6193      	str	r3, [r2, #24]
 8001a70:	4b35      	ldr	r3, [pc, #212]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a72:	699b      	ldr	r3, [r3, #24]
 8001a74:	f003 0310 	and.w	r3, r3, #16
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7c:	4b32      	ldr	r3, [pc, #200]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a82:	f043 0320 	orr.w	r3, r3, #32
 8001a86:	6193      	str	r3, [r2, #24]
 8001a88:	4b2f      	ldr	r3, [pc, #188]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a94:	4b2c      	ldr	r3, [pc, #176]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	4a2b      	ldr	r2, [pc, #172]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001a9a:	f043 0304 	orr.w	r3, r3, #4
 8001a9e:	6193      	str	r3, [r2, #24]
 8001aa0:	4b29      	ldr	r3, [pc, #164]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f003 0304 	and.w	r3, r3, #4
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aac:	4b26      	ldr	r3, [pc, #152]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001aae:	699b      	ldr	r3, [r3, #24]
 8001ab0:	4a25      	ldr	r2, [pc, #148]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001ab2:	f043 0308 	orr.w	r3, r3, #8
 8001ab6:	6193      	str	r3, [r2, #24]
 8001ab8:	4b23      	ldr	r3, [pc, #140]	@ (8001b48 <MX_GPIO_Init+0xf8>)
 8001aba:	699b      	ldr	r3, [r3, #24]
 8001abc:	f003 0308 	and.w	r3, r3, #8
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001aca:	4820      	ldr	r0, [pc, #128]	@ (8001b4c <MX_GPIO_Init+0xfc>)
 8001acc:	f001 fc10 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_W_GPIO_Port, EN_W_Pin, GPIO_PIN_RESET);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2120      	movs	r1, #32
 8001ad4:	481e      	ldr	r0, [pc, #120]	@ (8001b50 <MX_GPIO_Init+0x100>)
 8001ad6:	f001 fc0b 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_U_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001ae0:	481c      	ldr	r0, [pc, #112]	@ (8001b54 <MX_GPIO_Init+0x104>)
 8001ae2:	f001 fc05 	bl	80032f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001ae6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001aec:	2311      	movs	r3, #17
 8001aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001af4:	2303      	movs	r3, #3
 8001af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001af8:	f107 0310 	add.w	r3, r7, #16
 8001afc:	4619      	mov	r1, r3
 8001afe:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <MX_GPIO_Init+0xfc>)
 8001b00:	f001 fa72 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_W_Pin */
  GPIO_InitStruct.Pin = EN_W_Pin;
 8001b04:	2320      	movs	r3, #32
 8001b06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_W_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	480d      	ldr	r0, [pc, #52]	@ (8001b50 <MX_GPIO_Init+0x100>)
 8001b1c:	f001 fa64 	bl	8002fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_V_Pin EN_U_Pin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_U_Pin;
 8001b20:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b26:	2301      	movs	r3, #1
 8001b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4619      	mov	r1, r3
 8001b38:	4806      	ldr	r0, [pc, #24]	@ (8001b54 <MX_GPIO_Init+0x104>)
 8001b3a:	f001 fa55 	bl	8002fe8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b3e:	bf00      	nop
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40011000 	.word	0x40011000
 8001b50:	40010800 	.word	0x40010800
 8001b54:	40010c00 	.word	0x40010c00

08001b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b5c:	b672      	cpsid	i
}
 8001b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <Error_Handler+0x8>

08001b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b6a:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6193      	str	r3, [r2, #24]
 8001b76:	4b12      	ldr	r3, [pc, #72]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	60bb      	str	r3, [r7, #8]
 8001b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b8c:	61d3      	str	r3, [r2, #28]
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_MspInit+0x5c>)
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <HAL_MspInit+0x60>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <HAL_MspInit+0x60>)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40010000 	.word	0x40010000

08001bc8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0310 	add.w	r3, r7, #16
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a18      	ldr	r2, [pc, #96]	@ (8001c44 <HAL_ADC_MspInit+0x7c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d129      	bne.n	8001c3c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001be8:	4b17      	ldr	r3, [pc, #92]	@ (8001c48 <HAL_ADC_MspInit+0x80>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	4a16      	ldr	r2, [pc, #88]	@ (8001c48 <HAL_ADC_MspInit+0x80>)
 8001bee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bf2:	6193      	str	r3, [r2, #24]
 8001bf4:	4b14      	ldr	r3, [pc, #80]	@ (8001c48 <HAL_ADC_MspInit+0x80>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_ADC_MspInit+0x80>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4a10      	ldr	r2, [pc, #64]	@ (8001c48 <HAL_ADC_MspInit+0x80>)
 8001c06:	f043 0304 	orr.w	r3, r3, #4
 8001c0a:	6193      	str	r3, [r2, #24]
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c48 <HAL_ADC_MspInit+0x80>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c18:	2310      	movs	r3, #16
 8001c1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4809      	ldr	r0, [pc, #36]	@ (8001c4c <HAL_ADC_MspInit+0x84>)
 8001c28:	f001 f9de 	bl	8002fe8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2012      	movs	r0, #18
 8001c32:	f000 ff8e 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001c36:	2012      	movs	r0, #18
 8001c38:	f000 ffa7 	bl	8002b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40012400 	.word	0x40012400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a49      	ldr	r2, [pc, #292]	@ (8001d90 <HAL_TIM_Base_MspInit+0x140>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d114      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c70:	4b48      	ldr	r3, [pc, #288]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	4a47      	ldr	r2, [pc, #284]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001c76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c7a:	6193      	str	r3, [r2, #24]
 8001c7c:	4b45      	ldr	r3, [pc, #276]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c84:	61bb      	str	r3, [r7, #24]
 8001c86:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	201b      	movs	r0, #27
 8001c8e:	f000 ff60 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001c92:	201b      	movs	r0, #27
 8001c94:	f000 ff79 	bl	8002b8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001c98:	e075      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca2:	d157      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001caa:	f043 0301 	orr.w	r3, r3, #1
 8001cae:	61d3      	str	r3, [r2, #28]
 8001cb0:	4b38      	ldr	r3, [pc, #224]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001cb2:	69db      	ldr	r3, [r3, #28]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cbc:	4b35      	ldr	r3, [pc, #212]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a34      	ldr	r2, [pc, #208]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b32      	ldr	r3, [pc, #200]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	613b      	str	r3, [r7, #16]
 8001cd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001cda:	f043 0308 	orr.w	r3, r3, #8
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ZCP_W_Pin|ZCP_U_Pin;
 8001cec:	2303      	movs	r3, #3
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4826      	ldr	r0, [pc, #152]	@ (8001d98 <HAL_TIM_Base_MspInit+0x148>)
 8001d00:	f001 f972 	bl	8002fe8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ZCP_V_Pin;
 8001d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ZCP_V_GPIO_Port, &GPIO_InitStruct);
 8001d12:	f107 031c 	add.w	r3, r7, #28
 8001d16:	4619      	mov	r1, r3
 8001d18:	4820      	ldr	r0, [pc, #128]	@ (8001d9c <HAL_TIM_Base_MspInit+0x14c>)
 8001d1a:	f001 f965 	bl	8002fe8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_TIM_Base_MspInit+0x150>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d2e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d3c:	4a18      	ldr	r2, [pc, #96]	@ (8001da0 <HAL_TIM_Base_MspInit+0x150>)
 8001d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d40:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201c      	movs	r0, #28
 8001d48:	f000 ff03 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4c:	201c      	movs	r0, #28
 8001d4e:	f000 ff1c 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 8001d52:	e018      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x136>
  else if(htim_base->Instance==TIM4)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <HAL_TIM_Base_MspInit+0x154>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d113      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4a0c      	ldr	r2, [pc, #48]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001d64:	f043 0304 	orr.w	r3, r3, #4
 8001d68:	61d3      	str	r3, [r2, #28]
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <HAL_TIM_Base_MspInit+0x144>)
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	f003 0304 	and.w	r3, r3, #4
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d76:	2200      	movs	r2, #0
 8001d78:	2100      	movs	r1, #0
 8001d7a:	201e      	movs	r0, #30
 8001d7c:	f000 fee9 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d80:	201e      	movs	r0, #30
 8001d82:	f000 ff02 	bl	8002b8a <HAL_NVIC_EnableIRQ>
}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	@ 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40021000 	.word	0x40021000
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40010000 	.word	0x40010000
 8001da4:	40000800 	.word	0x40000800

08001da8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <HAL_TIM_PWM_MspInit+0x34>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d10b      	bne.n	8001dd2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dba:	4b09      	ldr	r3, [pc, #36]	@ (8001de0 <HAL_TIM_PWM_MspInit+0x38>)
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4a08      	ldr	r2, [pc, #32]	@ (8001de0 <HAL_TIM_PWM_MspInit+0x38>)
 8001dc0:	f043 0302 	orr.w	r3, r3, #2
 8001dc4:	61d3      	str	r3, [r2, #28]
 8001dc6:	4b06      	ldr	r3, [pc, #24]	@ (8001de0 <HAL_TIM_PWM_MspInit+0x38>)
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 0310 	add.w	r3, r7, #16
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8001e6c <HAL_TIM_MspPostInit+0x88>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d12f      	bne.n	8001e64 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e04:	4b1a      	ldr	r3, [pc, #104]	@ (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6193      	str	r3, [r2, #24]
 8001e10:	4b17      	ldr	r3, [pc, #92]	@ (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e12:	699b      	ldr	r3, [r3, #24]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b14      	ldr	r3, [pc, #80]	@ (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a13      	ldr	r2, [pc, #76]	@ (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b11      	ldr	r3, [pc, #68]	@ (8001e70 <HAL_TIM_MspPostInit+0x8c>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = IN_U_Pin|IN_V_Pin;
 8001e34:	23c0      	movs	r3, #192	@ 0xc0
 8001e36:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	4619      	mov	r1, r3
 8001e46:	480b      	ldr	r0, [pc, #44]	@ (8001e74 <HAL_TIM_MspPostInit+0x90>)
 8001e48:	f001 f8ce 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_W_Pin;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e50:	2302      	movs	r3, #2
 8001e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e54:	2303      	movs	r3, #3
 8001e56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IN_W_GPIO_Port, &GPIO_InitStruct);
 8001e58:	f107 0310 	add.w	r3, r7, #16
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4806      	ldr	r0, [pc, #24]	@ (8001e78 <HAL_TIM_MspPostInit+0x94>)
 8001e60:	f001 f8c2 	bl	8002fe8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e64:	bf00      	nop
 8001e66:	3720      	adds	r7, #32
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40000400 	.word	0x40000400
 8001e70:	40021000 	.word	0x40021000
 8001e74:	40010800 	.word	0x40010800
 8001e78:	40010c00 	.word	0x40010c00

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0310 	add.w	r3, r7, #16
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a32      	ldr	r2, [pc, #200]	@ (8001f60 <HAL_UART_MspInit+0xe4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d15d      	bne.n	8001f58 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9c:	4b31      	ldr	r3, [pc, #196]	@ (8001f64 <HAL_UART_MspInit+0xe8>)
 8001e9e:	69db      	ldr	r3, [r3, #28]
 8001ea0:	4a30      	ldr	r2, [pc, #192]	@ (8001f64 <HAL_UART_MspInit+0xe8>)
 8001ea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ea6:	61d3      	str	r3, [r2, #28]
 8001ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f64 <HAL_UART_MspInit+0xe8>)
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb0:	60fb      	str	r3, [r7, #12]
 8001eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f64 <HAL_UART_MspInit+0xe8>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f64 <HAL_UART_MspInit+0xe8>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	6193      	str	r3, [r2, #24]
 8001ec0:	4b28      	ldr	r3, [pc, #160]	@ (8001f64 <HAL_UART_MspInit+0xe8>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ecc:	2304      	movs	r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0310 	add.w	r3, r7, #16
 8001edc:	4619      	mov	r1, r3
 8001ede:	4822      	ldr	r0, [pc, #136]	@ (8001f68 <HAL_UART_MspInit+0xec>)
 8001ee0:	f001 f882 	bl	8002fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481c      	ldr	r0, [pc, #112]	@ (8001f68 <HAL_UART_MspInit+0xec>)
 8001ef8:	f001 f876 	bl	8002fe8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001efc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001efe:	4a1c      	ldr	r2, [pc, #112]	@ (8001f70 <HAL_UART_MspInit+0xf4>)
 8001f00:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f02:	4b1a      	ldr	r3, [pc, #104]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f04:	2210      	movs	r2, #16
 8001f06:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f08:	4b18      	ldr	r3, [pc, #96]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f0e:	4b17      	ldr	r3, [pc, #92]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f14:	4b15      	ldr	r3, [pc, #84]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f1a:	4b14      	ldr	r3, [pc, #80]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001f20:	4b12      	ldr	r3, [pc, #72]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f22:	2220      	movs	r2, #32
 8001f24:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f26:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f2c:	480f      	ldr	r0, [pc, #60]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f2e:	f000 fe47 	bl	8002bc0 <HAL_DMA_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001f38:	f7ff fe0e 	bl	8001b58 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f40:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f42:	4a0a      	ldr	r2, [pc, #40]	@ (8001f6c <HAL_UART_MspInit+0xf0>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	2026      	movs	r0, #38	@ 0x26
 8001f4e:	f000 fe00 	bl	8002b52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f52:	2026      	movs	r0, #38	@ 0x26
 8001f54:	f000 fe19 	bl	8002b8a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001f58:	bf00      	nop
 8001f5a:	3720      	adds	r7, #32
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40004400 	.word	0x40004400
 8001f64:	40021000 	.word	0x40021000
 8001f68:	40010800 	.word	0x40010800
 8001f6c:	20000214 	.word	0x20000214
 8001f70:	40020080 	.word	0x40020080

08001f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f78:	bf00      	nop
 8001f7a:	e7fd      	b.n	8001f78 <NMI_Handler+0x4>

08001f7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <BusFault_Handler+0x4>

08001f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <UsageFault_Handler+0x4>

08001f9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr

08001fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bc80      	pop	{r7}
 8001fbe:	4770      	bx	lr

08001fc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fc4:	f000 f8b0 	bl	8002128 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <DMA1_Channel7_IRQHandler+0x10>)
 8001fd2:	f000 ff03 	bl	8002ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000214 	.word	0x20000214

08001fe0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <ADC1_2_IRQHandler+0x10>)
 8001fe6:	f000 fa79 	bl	80024dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000154 	.word	0x20000154

08001ff4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <TIM1_CC_IRQHandler+0x10>)
 8001ffa:	f002 fcbd 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000184 	.word	0x20000184

08002008 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <TIM2_IRQHandler+0x10>)
 800200e:	f002 fcb3 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200001cc 	.word	0x200001cc

0800201c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <TIM4_IRQHandler+0x10>)
 8002022:	f002 fca9 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	2000007c 	.word	0x2000007c

08002030 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <USART2_IRQHandler+0x10>)
 8002036:	f003 fec5 	bl	8005dc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000010c 	.word	0x2000010c

08002044 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr

08002050 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002050:	f7ff fff8 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002054:	480b      	ldr	r0, [pc, #44]	@ (8002084 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002056:	490c      	ldr	r1, [pc, #48]	@ (8002088 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002058:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <LoopFillZerobss+0x16>)
  movs r3, #0
 800205a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800205c:	e002      	b.n	8002064 <LoopCopyDataInit>

0800205e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800205e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002060:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002062:	3304      	adds	r3, #4

08002064 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002064:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002066:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002068:	d3f9      	bcc.n	800205e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206a:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800206c:	4c09      	ldr	r4, [pc, #36]	@ (8002094 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800206e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002070:	e001      	b.n	8002076 <LoopFillZerobss>

08002072 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002072:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002074:	3204      	adds	r2, #4

08002076 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002076:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002078:	d3fb      	bcc.n	8002072 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800207a:	f004 fc15 	bl	80068a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800207e:	f7ff f997 	bl	80013b0 <main>
  bx lr
 8002082:	4770      	bx	lr
  ldr r0, =_sdata
 8002084:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002088:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800208c:	080069a4 	.word	0x080069a4
  ldr r2, =_sbss
 8002090:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002094:	200002a0 	.word	0x200002a0

08002098 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <CAN1_RX1_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a0:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <HAL_Init+0x28>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a07      	ldr	r2, [pc, #28]	@ (80020c4 <HAL_Init+0x28>)
 80020a6:	f043 0310 	orr.w	r3, r3, #16
 80020aa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ac:	2003      	movs	r0, #3
 80020ae:	f000 fd45 	bl	8002b3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b2:	200f      	movs	r0, #15
 80020b4:	f000 f808 	bl	80020c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b8:	f7ff fd54 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020bc:	2300      	movs	r3, #0
}
 80020be:	4618      	mov	r0, r3
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40022000 	.word	0x40022000

080020c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d0:	4b12      	ldr	r3, [pc, #72]	@ (800211c <HAL_InitTick+0x54>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	4b12      	ldr	r3, [pc, #72]	@ (8002120 <HAL_InitTick+0x58>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020de:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fd5d 	bl	8002ba6 <HAL_SYSTICK_Config>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e00e      	b.n	8002114 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b0f      	cmp	r3, #15
 80020fa:	d80a      	bhi.n	8002112 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020fc:	2200      	movs	r2, #0
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002104:	f000 fd25 	bl	8002b52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002108:	4a06      	ldr	r2, [pc, #24]	@ (8002124 <HAL_InitTick+0x5c>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800210e:	2300      	movs	r3, #0
 8002110:	e000      	b.n	8002114 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	20000054 	.word	0x20000054
 8002120:	2000005c 	.word	0x2000005c
 8002124:	20000058 	.word	0x20000058

08002128 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <HAL_IncTick+0x1c>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	461a      	mov	r2, r3
 8002132:	4b05      	ldr	r3, [pc, #20]	@ (8002148 <HAL_IncTick+0x20>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4413      	add	r3, r2
 8002138:	4a03      	ldr	r2, [pc, #12]	@ (8002148 <HAL_IncTick+0x20>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	2000005c 	.word	0x2000005c
 8002148:	2000029c 	.word	0x2000029c

0800214c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b02      	ldr	r3, [pc, #8]	@ (800215c <HAL_GetTick+0x10>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr
 800215c:	2000029c 	.word	0x2000029c

08002160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002168:	f7ff fff0 	bl	800214c <HAL_GetTick>
 800216c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002178:	d005      	beq.n	8002186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800217a:	4b0a      	ldr	r3, [pc, #40]	@ (80021a4 <HAL_Delay+0x44>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	4413      	add	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002186:	bf00      	nop
 8002188:	f7ff ffe0 	bl	800214c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	429a      	cmp	r2, r3
 8002196:	d8f7      	bhi.n	8002188 <HAL_Delay+0x28>
  {
  }
}
 8002198:	bf00      	nop
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000005c 	.word	0x2000005c

080021a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e0be      	b.n	8002348 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d109      	bne.n	80021ec <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff fcee 	bl	8001bc8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f000 fb8f 	bl	8002910 <ADC_ConversionStop_Disable>
 80021f2:	4603      	mov	r3, r0
 80021f4:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fa:	f003 0310 	and.w	r3, r3, #16
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f040 8099 	bne.w	8002336 <HAL_ADC_Init+0x18e>
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b00      	cmp	r3, #0
 8002208:	f040 8095 	bne.w	8002336 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002214:	f023 0302 	bic.w	r3, r3, #2
 8002218:	f043 0202 	orr.w	r2, r3, #2
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002228:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	7b1b      	ldrb	r3, [r3, #12]
 800222e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002230:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4313      	orrs	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002240:	d003      	beq.n	800224a <HAL_ADC_Init+0xa2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	2b01      	cmp	r3, #1
 8002248:	d102      	bne.n	8002250 <HAL_ADC_Init+0xa8>
 800224a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800224e:	e000      	b.n	8002252 <HAL_ADC_Init+0xaa>
 8002250:	2300      	movs	r3, #0
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7d1b      	ldrb	r3, [r3, #20]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d119      	bne.n	8002294 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7b1b      	ldrb	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	3b01      	subs	r3, #1
 800226e:	035a      	lsls	r2, r3, #13
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002278:	613b      	str	r3, [r7, #16]
 800227a:	e00b      	b.n	8002294 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002280:	f043 0220 	orr.w	r2, r3, #32
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	689a      	ldr	r2, [r3, #8]
 80022ae:	4b28      	ldr	r3, [pc, #160]	@ (8002350 <HAL_ADC_Init+0x1a8>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022c4:	d003      	beq.n	80022ce <HAL_ADC_Init+0x126>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d104      	bne.n	80022d8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	051b      	lsls	r3, r3, #20
 80022d6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	430a      	orrs	r2, r1
 80022ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <HAL_ADC_Init+0x1ac>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10b      	bne.n	8002314 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002306:	f023 0303 	bic.w	r3, r3, #3
 800230a:	f043 0201 	orr.w	r2, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002312:	e018      	b.n	8002346 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	f023 0312 	bic.w	r3, r3, #18
 800231c:	f043 0210 	orr.w	r2, r3, #16
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002334:	e007      	b.n	8002346 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233a:	f043 0210 	orr.w	r2, r3, #16
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	ffe1f7fd 	.word	0xffe1f7fd
 8002354:	ff1f0efe 	.word	0xff1f0efe

08002358 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800236a:	2b01      	cmp	r3, #1
 800236c:	d101      	bne.n	8002372 <HAL_ADC_Start_IT+0x1a>
 800236e:	2302      	movs	r3, #2
 8002370:	e0a0      	b.n	80024b4 <HAL_ADC_Start_IT+0x15c>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f000 fa6e 	bl	800285c <ADC_Enable>
 8002380:	4603      	mov	r3, r0
 8002382:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 808f 	bne.w	80024aa <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002390:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002394:	f023 0301 	bic.w	r3, r3, #1
 8002398:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a45      	ldr	r2, [pc, #276]	@ (80024bc <HAL_ADC_Start_IT+0x164>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d105      	bne.n	80023b6 <HAL_ADC_Start_IT+0x5e>
 80023aa:	4b45      	ldr	r3, [pc, #276]	@ (80024c0 <HAL_ADC_Start_IT+0x168>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d115      	bne.n	80023e2 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d026      	beq.n	800241e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80023d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80023e0:	e01d      	b.n	800241e <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	@ (80024c0 <HAL_ADC_Start_IT+0x168>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d004      	beq.n	8002402 <HAL_ADC_Start_IT+0xaa>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2f      	ldr	r2, [pc, #188]	@ (80024bc <HAL_ADC_Start_IT+0x164>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10d      	bne.n	800241e <HAL_ADC_Start_IT+0xc6>
 8002402:	4b2f      	ldr	r3, [pc, #188]	@ (80024c0 <HAL_ADC_Start_IT+0x168>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002412:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002416:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242e:	f023 0206 	bic.w	r2, r3, #6
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002436:	e002      	b.n	800243e <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f06f 0202 	mvn.w	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f042 0220 	orr.w	r2, r2, #32
 800245e:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800246a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800246e:	d113      	bne.n	8002498 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002474:	4a11      	ldr	r2, [pc, #68]	@ (80024bc <HAL_ADC_Start_IT+0x164>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d105      	bne.n	8002486 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800247a:	4b11      	ldr	r3, [pc, #68]	@ (80024c0 <HAL_ADC_Start_IT+0x168>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002482:	2b00      	cmp	r3, #0
 8002484:	d108      	bne.n	8002498 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	e00c      	b.n	80024b2 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689a      	ldr	r2, [r3, #8]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	e003      	b.n	80024b2 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3710      	adds	r7, #16
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40012800 	.word	0x40012800
 80024c0:	40012400 	.word	0x40012400

080024c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b084      	sub	sp, #16
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 0320 	and.w	r3, r3, #32
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d03e      	beq.n	800257c <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d039      	beq.n	800257c <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f003 0310 	and.w	r3, r3, #16
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002518:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800252a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800252e:	d11d      	bne.n	800256c <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002534:	2b00      	cmp	r3, #0
 8002536:	d119      	bne.n	800256c <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f022 0220 	bic.w	r2, r2, #32
 8002546:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002558:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d105      	bne.n	800256c <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002564:	f043 0201 	orr.w	r2, r3, #1
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe fef5 	bl	800135c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f06f 0212 	mvn.w	r2, #18
 800257a:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002582:	2b00      	cmp	r3, #0
 8002584:	d04d      	beq.n	8002622 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d048      	beq.n	8002622 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	d105      	bne.n	80025a8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80025b2:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80025b6:	d012      	beq.n	80025de <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d125      	bne.n	8002612 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80025d0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80025d4:	d11d      	bne.n	8002612 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d119      	bne.n	8002612 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025ec:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d105      	bne.n	8002612 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f043 0201 	orr.w	r2, r3, #1
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f9bd 	bl	8002992 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 020c 	mvn.w	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d00d      	beq.n	8002652 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f809 	bl	800265a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f06f 0201 	mvn.w	r2, #1
 8002650:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002652:	bf00      	nop
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002662:	bf00      	nop
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	bc80      	pop	{r7}
 800266a:	4770      	bx	lr

0800266c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002684:	2b01      	cmp	r3, #1
 8002686:	d101      	bne.n	800268c <HAL_ADC_ConfigChannel+0x20>
 8002688:	2302      	movs	r3, #2
 800268a:	e0dc      	b.n	8002846 <HAL_ADC_ConfigChannel+0x1da>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b06      	cmp	r3, #6
 800269a:	d81c      	bhi.n	80026d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	3b05      	subs	r3, #5
 80026ae:	221f      	movs	r2, #31
 80026b0:	fa02 f303 	lsl.w	r3, r2, r3
 80026b4:	43db      	mvns	r3, r3
 80026b6:	4019      	ands	r1, r3
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	6818      	ldr	r0, [r3, #0]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685a      	ldr	r2, [r3, #4]
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	3b05      	subs	r3, #5
 80026c8:	fa00 f203 	lsl.w	r2, r0, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	430a      	orrs	r2, r1
 80026d2:	635a      	str	r2, [r3, #52]	@ 0x34
 80026d4:	e03c      	b.n	8002750 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d81c      	bhi.n	8002718 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	3b23      	subs	r3, #35	@ 0x23
 80026f0:	221f      	movs	r2, #31
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43db      	mvns	r3, r3
 80026f8:	4019      	ands	r1, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	3b23      	subs	r3, #35	@ 0x23
 800270a:	fa00 f203 	lsl.w	r2, r0, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30
 8002716:	e01b      	b.n	8002750 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685a      	ldr	r2, [r3, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	4413      	add	r3, r2
 8002728:	3b41      	subs	r3, #65	@ 0x41
 800272a:	221f      	movs	r2, #31
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	43db      	mvns	r3, r3
 8002732:	4019      	ands	r1, r3
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	6818      	ldr	r0, [r3, #0]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	3b41      	subs	r3, #65	@ 0x41
 8002744:	fa00 f203 	lsl.w	r2, r0, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b09      	cmp	r3, #9
 8002756:	d91c      	bls.n	8002792 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68d9      	ldr	r1, [r3, #12]
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	4413      	add	r3, r2
 8002768:	3b1e      	subs	r3, #30
 800276a:	2207      	movs	r2, #7
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	4019      	ands	r1, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	6898      	ldr	r0, [r3, #8]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4613      	mov	r3, r2
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	4413      	add	r3, r2
 8002782:	3b1e      	subs	r3, #30
 8002784:	fa00 f203 	lsl.w	r2, r0, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	60da      	str	r2, [r3, #12]
 8002790:	e019      	b.n	80027c6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6919      	ldr	r1, [r3, #16]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4613      	mov	r3, r2
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	4413      	add	r3, r2
 80027a2:	2207      	movs	r2, #7
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	4019      	ands	r1, r3
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	6898      	ldr	r0, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	fa00 f203 	lsl.w	r2, r0, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b10      	cmp	r3, #16
 80027cc:	d003      	beq.n	80027d6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80027d2:	2b11      	cmp	r3, #17
 80027d4:	d132      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1d      	ldr	r2, [pc, #116]	@ (8002850 <HAL_ADC_ConfigChannel+0x1e4>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d125      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d126      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80027fc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2b10      	cmp	r3, #16
 8002804:	d11a      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002806:	4b13      	ldr	r3, [pc, #76]	@ (8002854 <HAL_ADC_ConfigChannel+0x1e8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a13      	ldr	r2, [pc, #76]	@ (8002858 <HAL_ADC_ConfigChannel+0x1ec>)
 800280c:	fba2 2303 	umull	r2, r3, r2, r3
 8002810:	0c9a      	lsrs	r2, r3, #18
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800281c:	e002      	b.n	8002824 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	3b01      	subs	r3, #1
 8002822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1f9      	bne.n	800281e <HAL_ADC_ConfigChannel+0x1b2>
 800282a:	e007      	b.n	800283c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002830:	f043 0220 	orr.w	r2, r3, #32
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002844:	7bfb      	ldrb	r3, [r7, #15]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	40012400 	.word	0x40012400
 8002854:	20000054 	.word	0x20000054
 8002858:	431bde83 	.word	0x431bde83

0800285c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d040      	beq.n	80028fc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f042 0201 	orr.w	r2, r2, #1
 8002888:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800288a:	4b1f      	ldr	r3, [pc, #124]	@ (8002908 <ADC_Enable+0xac>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a1f      	ldr	r2, [pc, #124]	@ (800290c <ADC_Enable+0xb0>)
 8002890:	fba2 2303 	umull	r2, r3, r2, r3
 8002894:	0c9b      	lsrs	r3, r3, #18
 8002896:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002898:	e002      	b.n	80028a0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3b01      	subs	r3, #1
 800289e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f9      	bne.n	800289a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028a6:	f7ff fc51 	bl	800214c <HAL_GetTick>
 80028aa:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028ac:	e01f      	b.n	80028ee <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80028ae:	f7ff fc4d 	bl	800214c <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d918      	bls.n	80028ee <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d011      	beq.n	80028ee <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ce:	f043 0210 	orr.w	r2, r3, #16
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028da:	f043 0201 	orr.w	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e007      	b.n	80028fe <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d1d8      	bne.n	80028ae <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3710      	adds	r7, #16
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000054 	.word	0x20000054
 800290c:	431bde83 	.word	0x431bde83

08002910 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d12e      	bne.n	8002988 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689a      	ldr	r2, [r3, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800293a:	f7ff fc07 	bl	800214c <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002940:	e01b      	b.n	800297a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002942:	f7ff fc03 	bl	800214c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d914      	bls.n	800297a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b01      	cmp	r3, #1
 800295c:	d10d      	bne.n	800297a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	f043 0210 	orr.w	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f043 0201 	orr.w	r2, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e007      	b.n	800298a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	d0dc      	beq.n	8002942 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	bc80      	pop	{r7}
 80029a2:	4770      	bx	lr

080029a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029b4:	4b0c      	ldr	r3, [pc, #48]	@ (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029c0:	4013      	ands	r3, r2
 80029c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029cc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029d6:	4a04      	ldr	r2, [pc, #16]	@ (80029e8 <__NVIC_SetPriorityGrouping+0x44>)
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	60d3      	str	r3, [r2, #12]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f0:	4b04      	ldr	r3, [pc, #16]	@ (8002a04 <__NVIC_GetPriorityGrouping+0x18>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	0a1b      	lsrs	r3, r3, #8
 80029f6:	f003 0307 	and.w	r3, r3, #7
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	db0b      	blt.n	8002a32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	f003 021f 	and.w	r2, r3, #31
 8002a20:	4906      	ldr	r1, [pc, #24]	@ (8002a3c <__NVIC_EnableIRQ+0x34>)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	095b      	lsrs	r3, r3, #5
 8002a28:	2001      	movs	r0, #1
 8002a2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr
 8002a3c:	e000e100 	.word	0xe000e100

08002a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	4603      	mov	r3, r0
 8002a48:	6039      	str	r1, [r7, #0]
 8002a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	db0a      	blt.n	8002a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	490c      	ldr	r1, [pc, #48]	@ (8002a8c <__NVIC_SetPriority+0x4c>)
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	0112      	lsls	r2, r2, #4
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	440b      	add	r3, r1
 8002a64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a68:	e00a      	b.n	8002a80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	4908      	ldr	r1, [pc, #32]	@ (8002a90 <__NVIC_SetPriority+0x50>)
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	f003 030f 	and.w	r3, r3, #15
 8002a76:	3b04      	subs	r3, #4
 8002a78:	0112      	lsls	r2, r2, #4
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	761a      	strb	r2, [r3, #24]
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b089      	sub	sp, #36	@ 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f1c3 0307 	rsb	r3, r3, #7
 8002aae:	2b04      	cmp	r3, #4
 8002ab0:	bf28      	it	cs
 8002ab2:	2304      	movcs	r3, #4
 8002ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	2b06      	cmp	r3, #6
 8002abc:	d902      	bls.n	8002ac4 <NVIC_EncodePriority+0x30>
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	3b03      	subs	r3, #3
 8002ac2:	e000      	b.n	8002ac6 <NVIC_EncodePriority+0x32>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43da      	mvns	r2, r3
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	401a      	ands	r2, r3
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002adc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae6:	43d9      	mvns	r1, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aec:	4313      	orrs	r3, r2
         );
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3724      	adds	r7, #36	@ 0x24
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3b01      	subs	r3, #1
 8002b04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b08:	d301      	bcc.n	8002b0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00f      	b.n	8002b2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <SysTick_Config+0x40>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b16:	210f      	movs	r1, #15
 8002b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b1c:	f7ff ff90 	bl	8002a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b20:	4b05      	ldr	r3, [pc, #20]	@ (8002b38 <SysTick_Config+0x40>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b26:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <SysTick_Config+0x40>)
 8002b28:	2207      	movs	r2, #7
 8002b2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	e000e010 	.word	0xe000e010

08002b3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7ff ff2d 	bl	80029a4 <__NVIC_SetPriorityGrouping>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	4603      	mov	r3, r0
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b64:	f7ff ff42 	bl	80029ec <__NVIC_GetPriorityGrouping>
 8002b68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	6978      	ldr	r0, [r7, #20]
 8002b70:	f7ff ff90 	bl	8002a94 <NVIC_EncodePriority>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff5f 	bl	8002a40 <__NVIC_SetPriority>
}
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff ff35 	bl	8002a08 <__NVIC_EnableIRQ>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b082      	sub	sp, #8
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffa2 	bl	8002af8 <SysTick_Config>
 8002bb4:	4603      	mov	r3, r0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
	...

08002bc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e043      	b.n	8002c5e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b22      	ldr	r3, [pc, #136]	@ (8002c68 <HAL_DMA_Init+0xa8>)
 8002bde:	4413      	add	r3, r2
 8002be0:	4a22      	ldr	r2, [pc, #136]	@ (8002c6c <HAL_DMA_Init+0xac>)
 8002be2:	fba2 2303 	umull	r2, r3, r2, r3
 8002be6:	091b      	lsrs	r3, r3, #4
 8002be8:	009a      	lsls	r2, r3, #2
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c70 <HAL_DMA_Init+0xb0>)
 8002bf2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bc80      	pop	{r7}
 8002c66:	4770      	bx	lr
 8002c68:	bffdfff8 	.word	0xbffdfff8
 8002c6c:	cccccccd 	.word	0xcccccccd
 8002c70:	40020000 	.word	0x40020000

08002c74 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d008      	beq.n	8002c9e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2204      	movs	r2, #4
 8002c90:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e020      	b.n	8002ce0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 020e 	bic.w	r2, r2, #14
 8002cac:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0201 	bic.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr
	...

08002cec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d005      	beq.n	8002d10 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2204      	movs	r2, #4
 8002d08:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
 8002d0e:	e051      	b.n	8002db4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 020e 	bic.w	r2, r2, #14
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0201 	bic.w	r2, r2, #1
 8002d2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a22      	ldr	r2, [pc, #136]	@ (8002dc0 <HAL_DMA_Abort_IT+0xd4>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d029      	beq.n	8002d8e <HAL_DMA_Abort_IT+0xa2>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a21      	ldr	r2, [pc, #132]	@ (8002dc4 <HAL_DMA_Abort_IT+0xd8>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMA_Abort_IT+0x9e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a1f      	ldr	r2, [pc, #124]	@ (8002dc8 <HAL_DMA_Abort_IT+0xdc>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01a      	beq.n	8002d84 <HAL_DMA_Abort_IT+0x98>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a1e      	ldr	r2, [pc, #120]	@ (8002dcc <HAL_DMA_Abort_IT+0xe0>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d012      	beq.n	8002d7e <HAL_DMA_Abort_IT+0x92>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002dd0 <HAL_DMA_Abort_IT+0xe4>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00a      	beq.n	8002d78 <HAL_DMA_Abort_IT+0x8c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a1b      	ldr	r2, [pc, #108]	@ (8002dd4 <HAL_DMA_Abort_IT+0xe8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d102      	bne.n	8002d72 <HAL_DMA_Abort_IT+0x86>
 8002d6c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002d70:	e00e      	b.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
 8002d72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d76:	e00b      	b.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
 8002d78:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002d7c:	e008      	b.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
 8002d7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d82:	e005      	b.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
 8002d84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d88:	e002      	b.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
 8002d8a:	2310      	movs	r3, #16
 8002d8c:	e000      	b.n	8002d90 <HAL_DMA_Abort_IT+0xa4>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	4a11      	ldr	r2, [pc, #68]	@ (8002dd8 <HAL_DMA_Abort_IT+0xec>)
 8002d92:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d003      	beq.n	8002db4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
    } 
  }
  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40020008 	.word	0x40020008
 8002dc4:	4002001c 	.word	0x4002001c
 8002dc8:	40020030 	.word	0x40020030
 8002dcc:	40020044 	.word	0x40020044
 8002dd0:	40020058 	.word	0x40020058
 8002dd4:	4002006c 	.word	0x4002006c
 8002dd8:	40020000 	.word	0x40020000

08002ddc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	2204      	movs	r2, #4
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d04f      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xc8>
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04a      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d107      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 0204 	bic.w	r2, r2, #4
 8002e2a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a66      	ldr	r2, [pc, #408]	@ (8002fcc <HAL_DMA_IRQHandler+0x1f0>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d029      	beq.n	8002e8a <HAL_DMA_IRQHandler+0xae>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a65      	ldr	r2, [pc, #404]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d022      	beq.n	8002e86 <HAL_DMA_IRQHandler+0xaa>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a63      	ldr	r2, [pc, #396]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01a      	beq.n	8002e80 <HAL_DMA_IRQHandler+0xa4>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a62      	ldr	r2, [pc, #392]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d012      	beq.n	8002e7a <HAL_DMA_IRQHandler+0x9e>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a60      	ldr	r2, [pc, #384]	@ (8002fdc <HAL_DMA_IRQHandler+0x200>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x98>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe0 <HAL_DMA_IRQHandler+0x204>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d102      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x92>
 8002e68:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002e6c:	e00e      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e6e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002e72:	e00b      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e74:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002e78:	e008      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e7a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002e7e:	e005      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e84:	e002      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e86:	2340      	movs	r3, #64	@ 0x40
 8002e88:	e000      	b.n	8002e8c <HAL_DMA_IRQHandler+0xb0>
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	4a55      	ldr	r2, [pc, #340]	@ (8002fe4 <HAL_DMA_IRQHandler+0x208>)
 8002e8e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 8094 	beq.w	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002ea2:	e08e      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d056      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x186>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d051      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 020a 	bic.w	r2, r2, #10
 8002eda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a38      	ldr	r2, [pc, #224]	@ (8002fcc <HAL_DMA_IRQHandler+0x1f0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d029      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x166>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1f4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x162>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1f8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01a      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x15c>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a34      	ldr	r2, [pc, #208]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1fc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d012      	beq.n	8002f32 <HAL_DMA_IRQHandler+0x156>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a32      	ldr	r2, [pc, #200]	@ (8002fdc <HAL_DMA_IRQHandler+0x200>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00a      	beq.n	8002f2c <HAL_DMA_IRQHandler+0x150>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a31      	ldr	r2, [pc, #196]	@ (8002fe0 <HAL_DMA_IRQHandler+0x204>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d102      	bne.n	8002f26 <HAL_DMA_IRQHandler+0x14a>
 8002f20:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002f24:	e00e      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f2a:	e00b      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f30:	e008      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002f36:	e005      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f3c:	e002      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f3e:	2320      	movs	r3, #32
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_IRQHandler+0x168>
 8002f42:	2302      	movs	r3, #2
 8002f44:	4a27      	ldr	r2, [pc, #156]	@ (8002fe4 <HAL_DMA_IRQHandler+0x208>)
 8002f46:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d034      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f60:	e02f      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	2208      	movs	r2, #8
 8002f68:	409a      	lsls	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d028      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x1e8>
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d023      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 020e 	bic.w	r2, r2, #14
 8002f8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f94:	2101      	movs	r1, #1
 8002f96:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d004      	beq.n	8002fc4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	4798      	blx	r3
    }
  }
  return;
 8002fc2:	bf00      	nop
 8002fc4:	bf00      	nop
}
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	40020008 	.word	0x40020008
 8002fd0:	4002001c 	.word	0x4002001c
 8002fd4:	40020030 	.word	0x40020030
 8002fd8:	40020044 	.word	0x40020044
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	4002006c 	.word	0x4002006c
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b08b      	sub	sp, #44	@ 0x2c
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ffa:	e169      	b.n	80032d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003010:	69ba      	ldr	r2, [r7, #24]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	f040 8158 	bne.w	80032ca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a9a      	ldr	r2, [pc, #616]	@ (8003288 <HAL_GPIO_Init+0x2a0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d05e      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003024:	4a98      	ldr	r2, [pc, #608]	@ (8003288 <HAL_GPIO_Init+0x2a0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d875      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800302a:	4a98      	ldr	r2, [pc, #608]	@ (800328c <HAL_GPIO_Init+0x2a4>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d058      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003030:	4a96      	ldr	r2, [pc, #600]	@ (800328c <HAL_GPIO_Init+0x2a4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d86f      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003036:	4a96      	ldr	r2, [pc, #600]	@ (8003290 <HAL_GPIO_Init+0x2a8>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d052      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 800303c:	4a94      	ldr	r2, [pc, #592]	@ (8003290 <HAL_GPIO_Init+0x2a8>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d869      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003042:	4a94      	ldr	r2, [pc, #592]	@ (8003294 <HAL_GPIO_Init+0x2ac>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d04c      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003048:	4a92      	ldr	r2, [pc, #584]	@ (8003294 <HAL_GPIO_Init+0x2ac>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d863      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800304e:	4a92      	ldr	r2, [pc, #584]	@ (8003298 <HAL_GPIO_Init+0x2b0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d046      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
 8003054:	4a90      	ldr	r2, [pc, #576]	@ (8003298 <HAL_GPIO_Init+0x2b0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d85d      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 800305a:	2b12      	cmp	r3, #18
 800305c:	d82a      	bhi.n	80030b4 <HAL_GPIO_Init+0xcc>
 800305e:	2b12      	cmp	r3, #18
 8003060:	d859      	bhi.n	8003116 <HAL_GPIO_Init+0x12e>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <HAL_GPIO_Init+0x80>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	080030e3 	.word	0x080030e3
 800306c:	080030bd 	.word	0x080030bd
 8003070:	080030cf 	.word	0x080030cf
 8003074:	08003111 	.word	0x08003111
 8003078:	08003117 	.word	0x08003117
 800307c:	08003117 	.word	0x08003117
 8003080:	08003117 	.word	0x08003117
 8003084:	08003117 	.word	0x08003117
 8003088:	08003117 	.word	0x08003117
 800308c:	08003117 	.word	0x08003117
 8003090:	08003117 	.word	0x08003117
 8003094:	08003117 	.word	0x08003117
 8003098:	08003117 	.word	0x08003117
 800309c:	08003117 	.word	0x08003117
 80030a0:	08003117 	.word	0x08003117
 80030a4:	08003117 	.word	0x08003117
 80030a8:	08003117 	.word	0x08003117
 80030ac:	080030c5 	.word	0x080030c5
 80030b0:	080030d9 	.word	0x080030d9
 80030b4:	4a79      	ldr	r2, [pc, #484]	@ (800329c <HAL_GPIO_Init+0x2b4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80030ba:	e02c      	b.n	8003116 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	623b      	str	r3, [r7, #32]
          break;
 80030c2:	e029      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	3304      	adds	r3, #4
 80030ca:	623b      	str	r3, [r7, #32]
          break;
 80030cc:	e024      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	3308      	adds	r3, #8
 80030d4:	623b      	str	r3, [r7, #32]
          break;
 80030d6:	e01f      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	330c      	adds	r3, #12
 80030de:	623b      	str	r3, [r7, #32]
          break;
 80030e0:	e01a      	b.n	8003118 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d102      	bne.n	80030f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ea:	2304      	movs	r3, #4
 80030ec:	623b      	str	r3, [r7, #32]
          break;
 80030ee:	e013      	b.n	8003118 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030f8:	2308      	movs	r3, #8
 80030fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	611a      	str	r2, [r3, #16]
          break;
 8003102:	e009      	b.n	8003118 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003104:	2308      	movs	r3, #8
 8003106:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69fa      	ldr	r2, [r7, #28]
 800310c:	615a      	str	r2, [r3, #20]
          break;
 800310e:	e003      	b.n	8003118 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003110:	2300      	movs	r3, #0
 8003112:	623b      	str	r3, [r7, #32]
          break;
 8003114:	e000      	b.n	8003118 <HAL_GPIO_Init+0x130>
          break;
 8003116:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	2bff      	cmp	r3, #255	@ 0xff
 800311c:	d801      	bhi.n	8003122 <HAL_GPIO_Init+0x13a>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	e001      	b.n	8003126 <HAL_GPIO_Init+0x13e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	3304      	adds	r3, #4
 8003126:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2bff      	cmp	r3, #255	@ 0xff
 800312c:	d802      	bhi.n	8003134 <HAL_GPIO_Init+0x14c>
 800312e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	e002      	b.n	800313a <HAL_GPIO_Init+0x152>
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	3b08      	subs	r3, #8
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	210f      	movs	r1, #15
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	fa01 f303 	lsl.w	r3, r1, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	401a      	ands	r2, r3
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	fa01 f303 	lsl.w	r3, r1, r3
 8003154:	431a      	orrs	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80b1 	beq.w	80032ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003168:	4b4d      	ldr	r3, [pc, #308]	@ (80032a0 <HAL_GPIO_Init+0x2b8>)
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	4a4c      	ldr	r2, [pc, #304]	@ (80032a0 <HAL_GPIO_Init+0x2b8>)
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	6193      	str	r3, [r2, #24]
 8003174:	4b4a      	ldr	r3, [pc, #296]	@ (80032a0 <HAL_GPIO_Init+0x2b8>)
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	60bb      	str	r3, [r7, #8]
 800317e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003180:	4a48      	ldr	r2, [pc, #288]	@ (80032a4 <HAL_GPIO_Init+0x2bc>)
 8003182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	3302      	adds	r3, #2
 8003188:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800318e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003190:	f003 0303 	and.w	r3, r3, #3
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	220f      	movs	r2, #15
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	43db      	mvns	r3, r3
 800319e:	68fa      	ldr	r2, [r7, #12]
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a40      	ldr	r2, [pc, #256]	@ (80032a8 <HAL_GPIO_Init+0x2c0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d013      	beq.n	80031d4 <HAL_GPIO_Init+0x1ec>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a3f      	ldr	r2, [pc, #252]	@ (80032ac <HAL_GPIO_Init+0x2c4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00d      	beq.n	80031d0 <HAL_GPIO_Init+0x1e8>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a3e      	ldr	r2, [pc, #248]	@ (80032b0 <HAL_GPIO_Init+0x2c8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d007      	beq.n	80031cc <HAL_GPIO_Init+0x1e4>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a3d      	ldr	r2, [pc, #244]	@ (80032b4 <HAL_GPIO_Init+0x2cc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d101      	bne.n	80031c8 <HAL_GPIO_Init+0x1e0>
 80031c4:	2303      	movs	r3, #3
 80031c6:	e006      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031c8:	2304      	movs	r3, #4
 80031ca:	e004      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e002      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e000      	b.n	80031d6 <HAL_GPIO_Init+0x1ee>
 80031d4:	2300      	movs	r3, #0
 80031d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031d8:	f002 0203 	and.w	r2, r2, #3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	4093      	lsls	r3, r2
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031e6:	492f      	ldr	r1, [pc, #188]	@ (80032a4 <HAL_GPIO_Init+0x2bc>)
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	089b      	lsrs	r3, r3, #2
 80031ec:	3302      	adds	r3, #2
 80031ee:	68fa      	ldr	r2, [r7, #12]
 80031f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	492c      	ldr	r1, [pc, #176]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800320e:	4b2a      	ldr	r3, [pc, #168]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	4928      	ldr	r1, [pc, #160]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003218:	4013      	ands	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003228:	4b23      	ldr	r3, [pc, #140]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	4922      	ldr	r1, [pc, #136]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	60cb      	str	r3, [r1, #12]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003236:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	491e      	ldr	r1, [pc, #120]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003240:	4013      	ands	r3, r2
 8003242:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d006      	beq.n	800325e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	4918      	ldr	r1, [pc, #96]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
 800325c:	e006      	b.n	800326c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800325e:	4b16      	ldr	r3, [pc, #88]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	43db      	mvns	r3, r3
 8003266:	4914      	ldr	r1, [pc, #80]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 8003268:	4013      	ands	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003274:	2b00      	cmp	r3, #0
 8003276:	d021      	beq.n	80032bc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003278:	4b0f      	ldr	r3, [pc, #60]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	490e      	ldr	r1, [pc, #56]	@ (80032b8 <HAL_GPIO_Init+0x2d0>)
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	600b      	str	r3, [r1, #0]
 8003284:	e021      	b.n	80032ca <HAL_GPIO_Init+0x2e2>
 8003286:	bf00      	nop
 8003288:	10320000 	.word	0x10320000
 800328c:	10310000 	.word	0x10310000
 8003290:	10220000 	.word	0x10220000
 8003294:	10210000 	.word	0x10210000
 8003298:	10120000 	.word	0x10120000
 800329c:	10110000 	.word	0x10110000
 80032a0:	40021000 	.word	0x40021000
 80032a4:	40010000 	.word	0x40010000
 80032a8:	40010800 	.word	0x40010800
 80032ac:	40010c00 	.word	0x40010c00
 80032b0:	40011000 	.word	0x40011000
 80032b4:	40011400 	.word	0x40011400
 80032b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80032bc:	4b0b      	ldr	r3, [pc, #44]	@ (80032ec <HAL_GPIO_Init+0x304>)
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	43db      	mvns	r3, r3
 80032c4:	4909      	ldr	r1, [pc, #36]	@ (80032ec <HAL_GPIO_Init+0x304>)
 80032c6:	4013      	ands	r3, r2
 80032c8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	3301      	adds	r3, #1
 80032ce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d6:	fa22 f303 	lsr.w	r3, r2, r3
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f47f ae8e 	bne.w	8002ffc <HAL_GPIO_Init+0x14>
  }
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	372c      	adds	r7, #44	@ 0x2c
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40010400 	.word	0x40010400

080032f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	807b      	strh	r3, [r7, #2]
 80032fc:	4613      	mov	r3, r2
 80032fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003300:	787b      	ldrb	r3, [r7, #1]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d003      	beq.n	800330e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003306:	887a      	ldrh	r2, [r7, #2]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800330c:	e003      	b.n	8003316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800330e:	887b      	ldrh	r3, [r7, #2]
 8003310:	041a      	lsls	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	bc80      	pop	{r7}
 800331e:	4770      	bx	lr

08003320 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4013      	ands	r3, r2
 8003338:	041a      	lsls	r2, r3, #16
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	43d9      	mvns	r1, r3
 800333e:	887b      	ldrh	r3, [r7, #2]
 8003340:	400b      	ands	r3, r1
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	611a      	str	r2, [r3, #16]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr
	...

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e272      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8087 	beq.w	8003482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003374:	4b92      	ldr	r3, [pc, #584]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00c      	beq.n	800339a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003380:	4b8f      	ldr	r3, [pc, #572]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d112      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
 800338c:	4b8c      	ldr	r3, [pc, #560]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003398:	d10b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	4b89      	ldr	r3, [pc, #548]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06c      	beq.n	8003480 <HAL_RCC_OscConfig+0x12c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d168      	bne.n	8003480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e24c      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x76>
 80033bc:	4b80      	ldr	r3, [pc, #512]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7f      	ldr	r2, [pc, #508]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e02e      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4b7b      	ldr	r3, [pc, #492]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a7a      	ldr	r2, [pc, #488]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b78      	ldr	r3, [pc, #480]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a77      	ldr	r2, [pc, #476]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0xbc>
 80033f6:	4b72      	ldr	r3, [pc, #456]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a71      	ldr	r2, [pc, #452]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b6f      	ldr	r3, [pc, #444]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a6e      	ldr	r2, [pc, #440]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003408:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 8003410:	4b6b      	ldr	r3, [pc, #428]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a6a      	ldr	r2, [pc, #424]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4b68      	ldr	r3, [pc, #416]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a67      	ldr	r2, [pc, #412]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003422:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fe8c 	bl	800214c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fe88 	bl	800214c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	@ 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e200      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5d      	ldr	r3, [pc, #372]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xe4>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fe78 	bl	800214c <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fe74 	bl	800214c <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	@ 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1ec      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b53      	ldr	r3, [pc, #332]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x10c>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	4b4c      	ldr	r3, [pc, #304]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349a:	4b49      	ldr	r3, [pc, #292]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
 80034a6:	4b46      	ldr	r3, [pc, #280]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b43      	ldr	r3, [pc, #268]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c0      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	4b3d      	ldr	r3, [pc, #244]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	4939      	ldr	r1, [pc, #228]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b36      	ldr	r3, [pc, #216]	@ (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fe2d 	bl	800214c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe fe29 	bl	800214c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e1a1      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2d      	ldr	r3, [pc, #180]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	4b2a      	ldr	r3, [pc, #168]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	00db      	lsls	r3, r3, #3
 8003522:	4927      	ldr	r1, [pc, #156]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b26      	ldr	r3, [pc, #152]	@ (80035c4 <HAL_RCC_OscConfig+0x270>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fe0c 	bl	800214c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe fe08 	bl	800214c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e180      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03a      	beq.n	80035d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b17      	ldr	r3, [pc, #92]	@ (80035c8 <HAL_RCC_OscConfig+0x274>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fe fdec 	bl	800214c <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fde8 	bl	800214c <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e160      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003596:	2001      	movs	r0, #1
 8003598:	f000 face 	bl	8003b38 <RCC_Delay>
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <HAL_RCC_OscConfig+0x274>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fdd2 	bl	800214c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	e00f      	b.n	80035cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe fdce 	bl	800214c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d908      	bls.n	80035cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e146      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	42420000 	.word	0x42420000
 80035c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b92      	ldr	r3, [pc, #584]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e9      	bne.n	80035ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a6 	beq.w	8003732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4b88      	ldr	r3, [pc, #544]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a87      	ldr	r2, [pc, #540]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b85      	ldr	r3, [pc, #532]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b82      	ldr	r3, [pc, #520]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4b7f      	ldr	r3, [pc, #508]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7e      	ldr	r2, [pc, #504]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe fd8f 	bl	800214c <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fe fd8b 	bl	800214c <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	@ 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e103      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b75      	ldr	r3, [pc, #468]	@ (800381c <HAL_RCC_OscConfig+0x4c8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x312>
 8003658:	4b6f      	ldr	r3, [pc, #444]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4a6e      	ldr	r2, [pc, #440]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e02d      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x334>
 800366e:	4b6a      	ldr	r3, [pc, #424]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a69      	ldr	r2, [pc, #420]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b67      	ldr	r3, [pc, #412]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a66      	ldr	r2, [pc, #408]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
 8003686:	e01c      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x356>
 8003690:	4b61      	ldr	r3, [pc, #388]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a60      	ldr	r2, [pc, #384]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4b5e      	ldr	r3, [pc, #376]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 80036aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	4b58      	ldr	r3, [pc, #352]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	4a57      	ldr	r2, [pc, #348]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe fd3f 	bl	800214c <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe fd3b 	bl	800214c <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0b1      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x37e>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7fe fd29 	bl	800214c <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fe fd25 	bl	800214c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e09b      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	4b40      	ldr	r3, [pc, #256]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4b3c      	ldr	r3, [pc, #240]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	4a3b      	ldr	r2, [pc, #236]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8087 	beq.w	800384a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373c:	4b36      	ldr	r3, [pc, #216]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d061      	beq.n	800380c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d146      	bne.n	80037de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b33      	ldr	r3, [pc, #204]	@ (8003820 <HAL_RCC_OscConfig+0x4cc>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fcf9 	bl	800214c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe fcf5 	bl	800214c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e06d      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d108      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003786:	4b24      	ldr	r3, [pc, #144]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	4921      	ldr	r1, [pc, #132]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	4b1f      	ldr	r3, [pc, #124]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a19      	ldr	r1, [r3, #32]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a8:	430b      	orrs	r3, r1
 80037aa:	491b      	ldr	r1, [pc, #108]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003820 <HAL_RCC_OscConfig+0x4cc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fcc9 	bl	800214c <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe fcc5 	bl	800214c <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e03d      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	4b11      	ldr	r3, [pc, #68]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x46a>
 80037dc:	e035      	b.n	800384a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fcb2 	bl	800214c <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fcae 	bl	800214c <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e026      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x498>
 800380a:	e01e      	b.n	800384a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d107      	bne.n	8003824 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e019      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
 8003818:	40021000 	.word	0x40021000
 800381c:	40007000 	.word	0x40007000
 8003820:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_OscConfig+0x500>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	429a      	cmp	r2, r3
 8003836:	d106      	bne.n	8003846 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	429a      	cmp	r2, r3
 8003844:	d001      	beq.n	800384a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3718      	adds	r7, #24
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	40021000 	.word	0x40021000

08003858 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d101      	bne.n	800386c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e0d0      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800386c:	4b6a      	ldr	r3, [pc, #424]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0307 	and.w	r3, r3, #7
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d910      	bls.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b67      	ldr	r3, [pc, #412]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 0207 	bic.w	r2, r3, #7
 8003882:	4965      	ldr	r1, [pc, #404]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b63      	ldr	r3, [pc, #396]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0307 	and.w	r3, r3, #7
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d001      	beq.n	800389c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e0b8      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d020      	beq.n	80038ea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b4:	4b59      	ldr	r3, [pc, #356]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	4a58      	ldr	r2, [pc, #352]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038be:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d005      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038cc:	4b53      	ldr	r3, [pc, #332]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a52      	ldr	r2, [pc, #328]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038d6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d8:	4b50      	ldr	r3, [pc, #320]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	494d      	ldr	r1, [pc, #308]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d040      	beq.n	8003978 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d107      	bne.n	800390e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b47      	ldr	r3, [pc, #284]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d115      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e07f      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b02      	cmp	r3, #2
 8003914:	d107      	bne.n	8003926 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	4b41      	ldr	r3, [pc, #260]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e073      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003926:	4b3d      	ldr	r3, [pc, #244]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e06b      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003936:	4b39      	ldr	r3, [pc, #228]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 0203 	bic.w	r2, r3, #3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4936      	ldr	r1, [pc, #216]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	4313      	orrs	r3, r2
 8003946:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003948:	f7fe fc00 	bl	800214c <HAL_GetTick>
 800394c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394e:	e00a      	b.n	8003966 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003950:	f7fe fbfc 	bl	800214c <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800395e:	4293      	cmp	r3, r2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e053      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	4b2d      	ldr	r3, [pc, #180]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f003 020c 	and.w	r2, r3, #12
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	429a      	cmp	r2, r3
 8003976:	d1eb      	bne.n	8003950 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003978:	4b27      	ldr	r3, [pc, #156]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	683a      	ldr	r2, [r7, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d210      	bcs.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003986:	4b24      	ldr	r3, [pc, #144]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 0207 	bic.w	r2, r3, #7
 800398e:	4922      	ldr	r1, [pc, #136]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003996:	4b20      	ldr	r3, [pc, #128]	@ (8003a18 <HAL_RCC_ClockConfig+0x1c0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d001      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e032      	b.n	8003a0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0304 	and.w	r3, r3, #4
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b4:	4b19      	ldr	r3, [pc, #100]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4916      	ldr	r1, [pc, #88]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039c2:	4313      	orrs	r3, r2
 80039c4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0308 	and.w	r3, r3, #8
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d009      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	490e      	ldr	r1, [pc, #56]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e6:	f000 f821 	bl	8003a2c <HAL_RCC_GetSysClockFreq>
 80039ea:	4602      	mov	r2, r0
 80039ec:	4b0b      	ldr	r3, [pc, #44]	@ (8003a1c <HAL_RCC_ClockConfig+0x1c4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	091b      	lsrs	r3, r3, #4
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	490a      	ldr	r1, [pc, #40]	@ (8003a20 <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	5ccb      	ldrb	r3, [r1, r3]
 80039fa:	fa22 f303 	lsr.w	r3, r2, r3
 80039fe:	4a09      	ldr	r2, [pc, #36]	@ (8003a24 <HAL_RCC_ClockConfig+0x1cc>)
 8003a00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a02:	4b09      	ldr	r3, [pc, #36]	@ (8003a28 <HAL_RCC_ClockConfig+0x1d0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fe fb5e 	bl	80020c8 <HAL_InitTick>

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40022000 	.word	0x40022000
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	08006968 	.word	0x08006968
 8003a24:	20000054 	.word	0x20000054
 8003a28:	20000058 	.word	0x20000058

08003a2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b087      	sub	sp, #28
 8003a30:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	2300      	movs	r3, #0
 8003a38:	60bb      	str	r3, [r7, #8]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a46:	4b1e      	ldr	r3, [pc, #120]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 030c 	and.w	r3, r3, #12
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d002      	beq.n	8003a5c <HAL_RCC_GetSysClockFreq+0x30>
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d003      	beq.n	8003a62 <HAL_RCC_GetSysClockFreq+0x36>
 8003a5a:	e027      	b.n	8003aac <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a5c:	4b19      	ldr	r3, [pc, #100]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a5e:	613b      	str	r3, [r7, #16]
      break;
 8003a60:	e027      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	0c9b      	lsrs	r3, r3, #18
 8003a66:	f003 030f 	and.w	r3, r3, #15
 8003a6a:	4a17      	ldr	r2, [pc, #92]	@ (8003ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a6c:	5cd3      	ldrb	r3, [r2, r3]
 8003a6e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d010      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7a:	4b11      	ldr	r3, [pc, #68]	@ (8003ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0c5b      	lsrs	r3, r3, #17
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	4a11      	ldr	r2, [pc, #68]	@ (8003acc <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a86:	5cd3      	ldrb	r3, [r2, r3]
 8003a88:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8e:	fb03 f202 	mul.w	r2, r3, r2
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	e004      	b.n	8003aa6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ad0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003aa0:	fb02 f303 	mul.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	613b      	str	r3, [r7, #16]
      break;
 8003aaa:	e002      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003aac:	4b05      	ldr	r3, [pc, #20]	@ (8003ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8003aae:	613b      	str	r3, [r7, #16]
      break;
 8003ab0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab2:	693b      	ldr	r3, [r7, #16]
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40021000 	.word	0x40021000
 8003ac4:	007a1200 	.word	0x007a1200
 8003ac8:	08006980 	.word	0x08006980
 8003acc:	08006990 	.word	0x08006990
 8003ad0:	003d0900 	.word	0x003d0900

08003ad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad8:	4b02      	ldr	r3, [pc, #8]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ada:	681b      	ldr	r3, [r3, #0]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	20000054 	.word	0x20000054

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff2 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	0a1b      	lsrs	r3, r3, #8
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	08006978 	.word	0x08006978

08003b10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b14:	f7ff ffde 	bl	8003ad4 <HAL_RCC_GetHCLKFreq>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	4b05      	ldr	r3, [pc, #20]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	0adb      	lsrs	r3, r3, #11
 8003b20:	f003 0307 	and.w	r3, r3, #7
 8003b24:	4903      	ldr	r1, [pc, #12]	@ (8003b34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b26:	5ccb      	ldrb	r3, [r1, r3]
 8003b28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	08006978 	.word	0x08006978

08003b38 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b085      	sub	sp, #20
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <RCC_Delay+0x34>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a0a      	ldr	r2, [pc, #40]	@ (8003b70 <RCC_Delay+0x38>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	0a5b      	lsrs	r3, r3, #9
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b54:	bf00      	nop
  }
  while (Delay --);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1e5a      	subs	r2, r3, #1
 8003b5a:	60fa      	str	r2, [r7, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f9      	bne.n	8003b54 <RCC_Delay+0x1c>
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3714      	adds	r7, #20
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bc80      	pop	{r7}
 8003b6a:	4770      	bx	lr
 8003b6c:	20000054 	.word	0x20000054
 8003b70:	10624dd3 	.word	0x10624dd3

08003b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	613b      	str	r3, [r7, #16]
 8003b80:	2300      	movs	r3, #0
 8003b82:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d07d      	beq.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b90:	2300      	movs	r3, #0
 8003b92:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b94:	4b4f      	ldr	r3, [pc, #316]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ba0:	4b4c      	ldr	r3, [pc, #304]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	4a4b      	ldr	r2, [pc, #300]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003baa:	61d3      	str	r3, [r2, #28]
 8003bac:	4b49      	ldr	r3, [pc, #292]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bbc:	4b46      	ldr	r3, [pc, #280]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d118      	bne.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bc8:	4b43      	ldr	r3, [pc, #268]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a42      	ldr	r2, [pc, #264]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bd4:	f7fe faba 	bl	800214c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bda:	e008      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bdc:	f7fe fab6 	bl	800214c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e06d      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bee:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003bfa:	4b36      	ldr	r3, [pc, #216]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c02:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d02e      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d027      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c18:	4b2e      	ldr	r3, [pc, #184]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c20:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c22:	4b2e      	ldr	r3, [pc, #184]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c24:	2201      	movs	r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c28:	4b2c      	ldr	r3, [pc, #176]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003c2e:	4a29      	ldr	r2, [pc, #164]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d014      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fa85 	bl	800214c <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c44:	e00a      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fe fa81 	bl	800214c <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e036      	b.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f003 0302 	and.w	r3, r3, #2
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0ee      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c68:	4b1a      	ldr	r3, [pc, #104]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	4917      	ldr	r1, [pc, #92]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c7a:	7dfb      	ldrb	r3, [r7, #23]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d105      	bne.n	8003c8c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c80:	4b14      	ldr	r3, [pc, #80]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c8a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d008      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c98:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	490b      	ldr	r1, [pc, #44]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cb6:	4b07      	ldr	r3, [pc, #28]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	4904      	ldr	r1, [pc, #16]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3718      	adds	r7, #24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	42420440 	.word	0x42420440

08003ce0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e041      	b.n	8003d76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd ffa2 	bl	8001c50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	4610      	mov	r0, r2
 8003d20:	f001 fa3e 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d74:	2300      	movs	r3, #0
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8003d7e:	b480      	push	{r7}
 8003d80:	b083      	sub	sp, #12
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6a1a      	ldr	r2, [r3, #32]
 8003d8c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003d90:	4013      	ands	r3, r2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_TIM_Base_Stop+0x38>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6a1a      	ldr	r2, [r3, #32]
 8003d9c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003da0:	4013      	ands	r3, r2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d107      	bne.n	8003db6 <HAL_TIM_Base_Stop+0x38>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
	...

08003dcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d001      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e03a      	b.n	8003e5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 0201 	orr.w	r2, r2, #1
 8003dfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a18      	ldr	r2, [pc, #96]	@ (8003e64 <HAL_TIM_Base_Start_IT+0x98>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x58>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0e:	d009      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x58>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a14      	ldr	r2, [pc, #80]	@ (8003e68 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <HAL_TIM_Base_Start_IT+0x58>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a13      	ldr	r2, [pc, #76]	@ (8003e6c <HAL_TIM_Base_Start_IT+0xa0>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d111      	bne.n	8003e48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2b06      	cmp	r3, #6
 8003e34:	d010      	beq.n	8003e58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0201 	orr.w	r2, r2, #1
 8003e44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e46:	e007      	b.n	8003e58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0201 	orr.w	r2, r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr
 8003e64:	40012c00 	.word	0x40012c00
 8003e68:	40000400 	.word	0x40000400
 8003e6c:	40000800 	.word	0x40000800

08003e70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68da      	ldr	r2, [r3, #12]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0201 	bic.w	r2, r2, #1
 8003e86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6a1a      	ldr	r2, [r3, #32]
 8003e8e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e92:	4013      	ands	r3, r2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d10f      	bne.n	8003eb8 <HAL_TIM_Base_Stop_IT+0x48>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6a1a      	ldr	r2, [r3, #32]
 8003e9e:	f240 4344 	movw	r3, #1092	@ 0x444
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d107      	bne.n	8003eb8 <HAL_TIM_Base_Stop_IT+0x48>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e041      	b.n	8003f62 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f839 	bl	8003f6a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2202      	movs	r2, #2
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3304      	adds	r3, #4
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4610      	mov	r0, r2
 8003f0c:	f001 f948 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b083      	sub	sp, #12
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bc80      	pop	{r7}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d109      	bne.n	8003fa0 <HAL_TIM_OC_Start+0x24>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	bf14      	ite	ne
 8003f98:	2301      	movne	r3, #1
 8003f9a:	2300      	moveq	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	e022      	b.n	8003fe6 <HAL_TIM_OC_Start+0x6a>
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d109      	bne.n	8003fba <HAL_TIM_OC_Start+0x3e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	bf14      	ite	ne
 8003fb2:	2301      	movne	r3, #1
 8003fb4:	2300      	moveq	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	e015      	b.n	8003fe6 <HAL_TIM_OC_Start+0x6a>
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d109      	bne.n	8003fd4 <HAL_TIM_OC_Start+0x58>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	bf14      	ite	ne
 8003fcc:	2301      	movne	r3, #1
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e008      	b.n	8003fe6 <HAL_TIM_OC_Start+0x6a>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	bf14      	ite	ne
 8003fe0:	2301      	movne	r3, #1
 8003fe2:	2300      	moveq	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_TIM_OC_Start+0x72>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e05e      	b.n	80040ac <HAL_TIM_OC_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <HAL_TIM_OC_Start+0x82>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ffc:	e013      	b.n	8004026 <HAL_TIM_OC_Start+0xaa>
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2b04      	cmp	r3, #4
 8004002:	d104      	bne.n	800400e <HAL_TIM_OC_Start+0x92>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2202      	movs	r2, #2
 8004008:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800400c:	e00b      	b.n	8004026 <HAL_TIM_OC_Start+0xaa>
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b08      	cmp	r3, #8
 8004012:	d104      	bne.n	800401e <HAL_TIM_OC_Start+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800401c:	e003      	b.n	8004026 <HAL_TIM_OC_Start+0xaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2201      	movs	r2, #1
 800402c:	6839      	ldr	r1, [r7, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f001 fce1 	bl	80059f6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1e      	ldr	r2, [pc, #120]	@ (80040b4 <HAL_TIM_OC_Start+0x138>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d107      	bne.n	800404e <HAL_TIM_OC_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800404c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a18      	ldr	r2, [pc, #96]	@ (80040b4 <HAL_TIM_OC_Start+0x138>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_TIM_OC_Start+0xfa>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004060:	d009      	beq.n	8004076 <HAL_TIM_OC_Start+0xfa>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a14      	ldr	r2, [pc, #80]	@ (80040b8 <HAL_TIM_OC_Start+0x13c>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIM_OC_Start+0xfa>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a12      	ldr	r2, [pc, #72]	@ (80040bc <HAL_TIM_OC_Start+0x140>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d111      	bne.n	800409a <HAL_TIM_OC_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0307 	and.w	r3, r3, #7
 8004080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2b06      	cmp	r3, #6
 8004086:	d010      	beq.n	80040aa <HAL_TIM_OC_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	e007      	b.n	80040aa <HAL_TIM_OC_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40012c00 	.word	0x40012c00
 80040b8:	40000400 	.word	0x40000400
 80040bc:	40000800 	.word	0x40000800

080040c0 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_OC_Start_IT+0x28>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e022      	b.n	800412e <HAL_TIM_OC_Start_IT+0x6e>
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d109      	bne.n	8004102 <HAL_TIM_OC_Start_IT+0x42>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	bf14      	ite	ne
 80040fa:	2301      	movne	r3, #1
 80040fc:	2300      	moveq	r3, #0
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	e015      	b.n	800412e <HAL_TIM_OC_Start_IT+0x6e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b08      	cmp	r3, #8
 8004106:	d109      	bne.n	800411c <HAL_TIM_OC_Start_IT+0x5c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410e:	b2db      	uxtb	r3, r3
 8004110:	2b01      	cmp	r3, #1
 8004112:	bf14      	ite	ne
 8004114:	2301      	movne	r3, #1
 8004116:	2300      	moveq	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e008      	b.n	800412e <HAL_TIM_OC_Start_IT+0x6e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d001      	beq.n	8004136 <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e0a9      	b.n	800428a <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_TIM_OC_Start_IT+0x86>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004144:	e013      	b.n	800416e <HAL_TIM_OC_Start_IT+0xae>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b04      	cmp	r3, #4
 800414a:	d104      	bne.n	8004156 <HAL_TIM_OC_Start_IT+0x96>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2202      	movs	r2, #2
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004154:	e00b      	b.n	800416e <HAL_TIM_OC_Start_IT+0xae>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b08      	cmp	r3, #8
 800415a:	d104      	bne.n	8004166 <HAL_TIM_OC_Start_IT+0xa6>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2202      	movs	r2, #2
 8004160:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004164:	e003      	b.n	800416e <HAL_TIM_OC_Start_IT+0xae>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2202      	movs	r2, #2
 800416a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b0c      	cmp	r3, #12
 8004172:	d841      	bhi.n	80041f8 <HAL_TIM_OC_Start_IT+0x138>
 8004174:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <HAL_TIM_OC_Start_IT+0xbc>)
 8004176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417a:	bf00      	nop
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041f9 	.word	0x080041f9
 8004184:	080041f9 	.word	0x080041f9
 8004188:	080041f9 	.word	0x080041f9
 800418c:	080041c3 	.word	0x080041c3
 8004190:	080041f9 	.word	0x080041f9
 8004194:	080041f9 	.word	0x080041f9
 8004198:	080041f9 	.word	0x080041f9
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041f9 	.word	0x080041f9
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	080041e7 	.word	0x080041e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0202 	orr.w	r2, r2, #2
 80041be:	60da      	str	r2, [r3, #12]
      break;
 80041c0:	e01d      	b.n	80041fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68da      	ldr	r2, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f042 0204 	orr.w	r2, r2, #4
 80041d0:	60da      	str	r2, [r3, #12]
      break;
 80041d2:	e014      	b.n	80041fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f042 0208 	orr.w	r2, r2, #8
 80041e2:	60da      	str	r2, [r3, #12]
      break;
 80041e4:	e00b      	b.n	80041fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0210 	orr.w	r2, r2, #16
 80041f4:	60da      	str	r2, [r3, #12]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
      break;
 80041fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d141      	bne.n	8004288 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f001 fbf2 	bl	80059f6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <HAL_TIM_OC_Start_IT+0x1d4>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d107      	bne.n	800422c <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800422a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_TIM_OC_Start_IT+0x1d4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00e      	beq.n	8004254 <HAL_TIM_OC_Start_IT+0x194>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800423e:	d009      	beq.n	8004254 <HAL_TIM_OC_Start_IT+0x194>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a14      	ldr	r2, [pc, #80]	@ (8004298 <HAL_TIM_OC_Start_IT+0x1d8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d004      	beq.n	8004254 <HAL_TIM_OC_Start_IT+0x194>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a13      	ldr	r2, [pc, #76]	@ (800429c <HAL_TIM_OC_Start_IT+0x1dc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d111      	bne.n	8004278 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f003 0307 	and.w	r3, r3, #7
 800425e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b06      	cmp	r3, #6
 8004264:	d010      	beq.n	8004288 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004276:	e007      	b.n	8004288 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0201 	orr.w	r2, r2, #1
 8004286:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004288:	7bfb      	ldrb	r3, [r7, #15]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	40012c00 	.word	0x40012c00
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800

080042a0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b0c      	cmp	r3, #12
 80042b2:	d841      	bhi.n	8004338 <HAL_TIM_OC_Stop_IT+0x98>
 80042b4:	a201      	add	r2, pc, #4	@ (adr r2, 80042bc <HAL_TIM_OC_Stop_IT+0x1c>)
 80042b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ba:	bf00      	nop
 80042bc:	080042f1 	.word	0x080042f1
 80042c0:	08004339 	.word	0x08004339
 80042c4:	08004339 	.word	0x08004339
 80042c8:	08004339 	.word	0x08004339
 80042cc:	08004303 	.word	0x08004303
 80042d0:	08004339 	.word	0x08004339
 80042d4:	08004339 	.word	0x08004339
 80042d8:	08004339 	.word	0x08004339
 80042dc:	08004315 	.word	0x08004315
 80042e0:	08004339 	.word	0x08004339
 80042e4:	08004339 	.word	0x08004339
 80042e8:	08004339 	.word	0x08004339
 80042ec:	08004327 	.word	0x08004327
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0202 	bic.w	r2, r2, #2
 80042fe:	60da      	str	r2, [r3, #12]
      break;
 8004300:	e01d      	b.n	800433e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68da      	ldr	r2, [r3, #12]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0204 	bic.w	r2, r2, #4
 8004310:	60da      	str	r2, [r3, #12]
      break;
 8004312:	e014      	b.n	800433e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f022 0208 	bic.w	r2, r2, #8
 8004322:	60da      	str	r2, [r3, #12]
      break;
 8004324:	e00b      	b.n	800433e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0210 	bic.w	r2, r2, #16
 8004334:	60da      	str	r2, [r3, #12]
      break;
 8004336:	e002      	b.n	800433e <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	bf00      	nop
  }

  if (status == HAL_OK)
 800433e:	7bfb      	ldrb	r3, [r7, #15]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d157      	bne.n	80043f4 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2200      	movs	r2, #0
 800434a:	6839      	ldr	r1, [r7, #0]
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fb52 	bl	80059f6 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a2a      	ldr	r2, [pc, #168]	@ (8004400 <HAL_TIM_OC_Stop_IT+0x160>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d117      	bne.n	800438c <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6a1a      	ldr	r2, [r3, #32]
 8004362:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10f      	bne.n	800438c <HAL_TIM_OC_Stop_IT+0xec>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6a1a      	ldr	r2, [r3, #32]
 8004372:	f240 4344 	movw	r3, #1092	@ 0x444
 8004376:	4013      	ands	r3, r2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d107      	bne.n	800438c <HAL_TIM_OC_Stop_IT+0xec>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800438a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6a1a      	ldr	r2, [r3, #32]
 8004392:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004396:	4013      	ands	r3, r2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10f      	bne.n	80043bc <HAL_TIM_OC_Stop_IT+0x11c>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	f240 4344 	movw	r3, #1092	@ 0x444
 80043a6:	4013      	ands	r3, r2
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_OC_Stop_IT+0x11c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0201 	bic.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d104      	bne.n	80043cc <HAL_TIM_OC_Stop_IT+0x12c>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2201      	movs	r2, #1
 80043c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043ca:	e013      	b.n	80043f4 <HAL_TIM_OC_Stop_IT+0x154>
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	2b04      	cmp	r3, #4
 80043d0:	d104      	bne.n	80043dc <HAL_TIM_OC_Stop_IT+0x13c>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043da:	e00b      	b.n	80043f4 <HAL_TIM_OC_Stop_IT+0x154>
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	2b08      	cmp	r3, #8
 80043e0:	d104      	bne.n	80043ec <HAL_TIM_OC_Stop_IT+0x14c>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043ea:	e003      	b.n	80043f4 <HAL_TIM_OC_Stop_IT+0x154>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80043f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40012c00 	.word	0x40012c00

08004404 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d101      	bne.n	8004416 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e041      	b.n	800449a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d106      	bne.n	8004430 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fd fcbc 	bl	8001da8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3304      	adds	r3, #4
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f000 feac 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_TIM_PWM_Start+0x24>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	e022      	b.n	800450e <HAL_TIM_PWM_Start+0x6a>
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	d109      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x3e>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	e015      	b.n	800450e <HAL_TIM_PWM_Start+0x6a>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d109      	bne.n	80044fc <HAL_TIM_PWM_Start+0x58>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	bf14      	ite	ne
 80044f4:	2301      	movne	r3, #1
 80044f6:	2300      	moveq	r3, #0
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	e008      	b.n	800450e <HAL_TIM_PWM_Start+0x6a>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b01      	cmp	r3, #1
 8004506:	bf14      	ite	ne
 8004508:	2301      	movne	r3, #1
 800450a:	2300      	moveq	r3, #0
 800450c:	b2db      	uxtb	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e05e      	b.n	80045d4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_PWM_Start+0x82>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004524:	e013      	b.n	800454e <HAL_TIM_PWM_Start+0xaa>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_PWM_Start+0x92>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004534:	e00b      	b.n	800454e <HAL_TIM_PWM_Start+0xaa>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_PWM_Start+0xa2>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004544:	e003      	b.n	800454e <HAL_TIM_PWM_Start+0xaa>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2202      	movs	r2, #2
 800454a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2201      	movs	r2, #1
 8004554:	6839      	ldr	r1, [r7, #0]
 8004556:	4618      	mov	r0, r3
 8004558:	f001 fa4d 	bl	80059f6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <HAL_TIM_PWM_Start+0x138>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d107      	bne.n	8004576 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004574:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a18      	ldr	r2, [pc, #96]	@ (80045dc <HAL_TIM_PWM_Start+0x138>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d00e      	beq.n	800459e <HAL_TIM_PWM_Start+0xfa>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004588:	d009      	beq.n	800459e <HAL_TIM_PWM_Start+0xfa>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a14      	ldr	r2, [pc, #80]	@ (80045e0 <HAL_TIM_PWM_Start+0x13c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d004      	beq.n	800459e <HAL_TIM_PWM_Start+0xfa>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a12      	ldr	r2, [pc, #72]	@ (80045e4 <HAL_TIM_PWM_Start+0x140>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d111      	bne.n	80045c2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b06      	cmp	r3, #6
 80045ae:	d010      	beq.n	80045d2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c0:	e007      	b.n	80045d2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f042 0201 	orr.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3710      	adds	r7, #16
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40000800 	.word	0x40000800

080045e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	6839      	ldr	r1, [r7, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f001 f9fb 	bl	80059f6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a29      	ldr	r2, [pc, #164]	@ (80046ac <HAL_TIM_PWM_Stop+0xc4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d117      	bne.n	800463a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10f      	bne.n	800463a <HAL_TIM_PWM_Stop+0x52>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6a1a      	ldr	r2, [r3, #32]
 8004620:	f240 4344 	movw	r3, #1092	@ 0x444
 8004624:	4013      	ands	r3, r2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d107      	bne.n	800463a <HAL_TIM_PWM_Stop+0x52>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004638:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6a1a      	ldr	r2, [r3, #32]
 8004640:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004644:	4013      	ands	r3, r2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10f      	bne.n	800466a <HAL_TIM_PWM_Stop+0x82>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	f240 4344 	movw	r3, #1092	@ 0x444
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d107      	bne.n	800466a <HAL_TIM_PWM_Stop+0x82>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0201 	bic.w	r2, r2, #1
 8004668:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d104      	bne.n	800467a <HAL_TIM_PWM_Stop+0x92>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004678:	e013      	b.n	80046a2 <HAL_TIM_PWM_Stop+0xba>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b04      	cmp	r3, #4
 800467e:	d104      	bne.n	800468a <HAL_TIM_PWM_Stop+0xa2>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004688:	e00b      	b.n	80046a2 <HAL_TIM_PWM_Stop+0xba>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b08      	cmp	r3, #8
 800468e:	d104      	bne.n	800469a <HAL_TIM_PWM_Stop+0xb2>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004698:	e003      	b.n	80046a2 <HAL_TIM_PWM_Stop+0xba>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3708      	adds	r7, #8
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	40012c00 	.word	0x40012c00

080046b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e041      	b.n	8004746 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f839 	bl	800474e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 fd56 	bl	80051a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004756:	bf00      	nop
 8004758:	370c      	adds	r7, #12
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_TIM_IC_Start_IT+0x1e>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800477a:	b2db      	uxtb	r3, r3
 800477c:	e013      	b.n	80047a6 <HAL_TIM_IC_Start_IT+0x46>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d104      	bne.n	800478e <HAL_TIM_IC_Start_IT+0x2e>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800478a:	b2db      	uxtb	r3, r3
 800478c:	e00b      	b.n	80047a6 <HAL_TIM_IC_Start_IT+0x46>
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d104      	bne.n	800479e <HAL_TIM_IC_Start_IT+0x3e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800479a:	b2db      	uxtb	r3, r3
 800479c:	e003      	b.n	80047a6 <HAL_TIM_IC_Start_IT+0x46>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d104      	bne.n	80047b8 <HAL_TIM_IC_Start_IT+0x58>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	e013      	b.n	80047e0 <HAL_TIM_IC_Start_IT+0x80>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d104      	bne.n	80047c8 <HAL_TIM_IC_Start_IT+0x68>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e00b      	b.n	80047e0 <HAL_TIM_IC_Start_IT+0x80>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	2b08      	cmp	r3, #8
 80047cc:	d104      	bne.n	80047d8 <HAL_TIM_IC_Start_IT+0x78>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	e003      	b.n	80047e0 <HAL_TIM_IC_Start_IT+0x80>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d102      	bne.n	80047ee <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047e8:	7b7b      	ldrb	r3, [r7, #13]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d001      	beq.n	80047f2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e0b8      	b.n	8004964 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_IC_Start_IT+0xa2>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004800:	e013      	b.n	800482a <HAL_TIM_IC_Start_IT+0xca>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d104      	bne.n	8004812 <HAL_TIM_IC_Start_IT+0xb2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004810:	e00b      	b.n	800482a <HAL_TIM_IC_Start_IT+0xca>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b08      	cmp	r3, #8
 8004816:	d104      	bne.n	8004822 <HAL_TIM_IC_Start_IT+0xc2>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004820:	e003      	b.n	800482a <HAL_TIM_IC_Start_IT+0xca>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2202      	movs	r2, #2
 8004826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d104      	bne.n	800483a <HAL_TIM_IC_Start_IT+0xda>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004838:	e013      	b.n	8004862 <HAL_TIM_IC_Start_IT+0x102>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b04      	cmp	r3, #4
 800483e:	d104      	bne.n	800484a <HAL_TIM_IC_Start_IT+0xea>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004848:	e00b      	b.n	8004862 <HAL_TIM_IC_Start_IT+0x102>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d104      	bne.n	800485a <HAL_TIM_IC_Start_IT+0xfa>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004858:	e003      	b.n	8004862 <HAL_TIM_IC_Start_IT+0x102>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2202      	movs	r2, #2
 800485e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b0c      	cmp	r3, #12
 8004866:	d841      	bhi.n	80048ec <HAL_TIM_IC_Start_IT+0x18c>
 8004868:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <HAL_TIM_IC_Start_IT+0x110>)
 800486a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800486e:	bf00      	nop
 8004870:	080048a5 	.word	0x080048a5
 8004874:	080048ed 	.word	0x080048ed
 8004878:	080048ed 	.word	0x080048ed
 800487c:	080048ed 	.word	0x080048ed
 8004880:	080048b7 	.word	0x080048b7
 8004884:	080048ed 	.word	0x080048ed
 8004888:	080048ed 	.word	0x080048ed
 800488c:	080048ed 	.word	0x080048ed
 8004890:	080048c9 	.word	0x080048c9
 8004894:	080048ed 	.word	0x080048ed
 8004898:	080048ed 	.word	0x080048ed
 800489c:	080048ed 	.word	0x080048ed
 80048a0:	080048db 	.word	0x080048db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68da      	ldr	r2, [r3, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0202 	orr.w	r2, r2, #2
 80048b2:	60da      	str	r2, [r3, #12]
      break;
 80048b4:	e01d      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	68da      	ldr	r2, [r3, #12]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f042 0204 	orr.w	r2, r2, #4
 80048c4:	60da      	str	r2, [r3, #12]
      break;
 80048c6:	e014      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0208 	orr.w	r2, r2, #8
 80048d6:	60da      	str	r2, [r3, #12]
      break;
 80048d8:	e00b      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68da      	ldr	r2, [r3, #12]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f042 0210 	orr.w	r2, r2, #16
 80048e8:	60da      	str	r2, [r3, #12]
      break;
 80048ea:	e002      	b.n	80048f2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	73fb      	strb	r3, [r7, #15]
      break;
 80048f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80048f2:	7bfb      	ldrb	r3, [r7, #15]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d134      	bne.n	8004962 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2201      	movs	r2, #1
 80048fe:	6839      	ldr	r1, [r7, #0]
 8004900:	4618      	mov	r0, r3
 8004902:	f001 f878 	bl	80059f6 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a18      	ldr	r2, [pc, #96]	@ (800496c <HAL_TIM_IC_Start_IT+0x20c>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIM_IC_Start_IT+0x1ce>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004918:	d009      	beq.n	800492e <HAL_TIM_IC_Start_IT+0x1ce>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a14      	ldr	r2, [pc, #80]	@ (8004970 <HAL_TIM_IC_Start_IT+0x210>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIM_IC_Start_IT+0x1ce>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <HAL_TIM_IC_Start_IT+0x214>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d111      	bne.n	8004952 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	2b06      	cmp	r3, #6
 800493e:	d010      	beq.n	8004962 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f042 0201 	orr.w	r2, r2, #1
 800494e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004950:	e007      	b.n	8004962 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f042 0201 	orr.w	r2, r2, #1
 8004960:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40012c00 	.word	0x40012c00
 8004970:	40000400 	.word	0x40000400
 8004974:	40000800 	.word	0x40000800

08004978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d020      	beq.n	80049dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d01b      	beq.n	80049dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f06f 0202 	mvn.w	r2, #2
 80049ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2201      	movs	r2, #1
 80049b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f7fc f9b6 	bl	8000d34 <HAL_TIM_IC_CaptureCallback>
 80049c8:	e005      	b.n	80049d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fc fbf8 	bl	80011c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 fbd2 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d020      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0204 	mvn.w	r2, #4
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc f990 	bl	8000d34 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f7fc fbd2 	bl	80011c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fbac 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 0308 	and.w	r3, r3, #8
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d020      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f003 0308 	and.w	r3, r3, #8
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d01b      	beq.n	8004a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f06f 0208 	mvn.w	r2, #8
 8004a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2204      	movs	r2, #4
 8004a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fc f96a 	bl	8000d34 <HAL_TIM_IC_CaptureCallback>
 8004a60:	e005      	b.n	8004a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7fc fbac 	bl	80011c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fb86 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d020      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01b      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0210 	mvn.w	r2, #16
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2208      	movs	r2, #8
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7fc f944 	bl	8000d34 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fc fb86 	bl	80011c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fb60 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00c      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f003 0301 	and.w	r3, r3, #1
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d007      	beq.n	8004ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0201 	mvn.w	r2, #1
 8004adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fb42 	bl	8005168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00c      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d007      	beq.n	8004b08 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f001 f854 	bl	8005bb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00c      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d007      	beq.n	8004b2c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fb30 	bl	800518c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00c      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d007      	beq.n	8004b50 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f06f 0220 	mvn.w	r2, #32
 8004b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f001 f827 	bl	8005b9e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d101      	bne.n	8004b76 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004b72:	2302      	movs	r3, #2
 8004b74:	e048      	b.n	8004c08 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b0c      	cmp	r3, #12
 8004b82:	d839      	bhi.n	8004bf8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004b84:	a201      	add	r2, pc, #4	@ (adr r2, 8004b8c <HAL_TIM_OC_ConfigChannel+0x34>)
 8004b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b8a:	bf00      	nop
 8004b8c:	08004bc1 	.word	0x08004bc1
 8004b90:	08004bf9 	.word	0x08004bf9
 8004b94:	08004bf9 	.word	0x08004bf9
 8004b98:	08004bf9 	.word	0x08004bf9
 8004b9c:	08004bcf 	.word	0x08004bcf
 8004ba0:	08004bf9 	.word	0x08004bf9
 8004ba4:	08004bf9 	.word	0x08004bf9
 8004ba8:	08004bf9 	.word	0x08004bf9
 8004bac:	08004bdd 	.word	0x08004bdd
 8004bb0:	08004bf9 	.word	0x08004bf9
 8004bb4:	08004bf9 	.word	0x08004bf9
 8004bb8:	08004bf9 	.word	0x08004bf9
 8004bbc:	08004beb 	.word	0x08004beb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fb58 	bl	800527c <TIM_OC1_SetConfig>
      break;
 8004bcc:	e017      	b.n	8004bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68b9      	ldr	r1, [r7, #8]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fbb7 	bl	8005348 <TIM_OC2_SetConfig>
      break;
 8004bda:	e010      	b.n	8004bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fc1a 	bl	800541c <TIM_OC3_SetConfig>
      break;
 8004be8:	e009      	b.n	8004bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f000 fc7d 	bl	80054f0 <TIM_OC4_SetConfig>
      break;
 8004bf6:	e002      	b.n	8004bfe <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8004bfc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3718      	adds	r7, #24
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_TIM_IC_ConfigChannel+0x1e>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e088      	b.n	8004d40 <HAL_TIM_IC_ConfigChannel+0x130>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d11b      	bne.n	8004c74 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004c4c:	f000 fd30 	bl	80056b0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	699a      	ldr	r2, [r3, #24]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f022 020c 	bic.w	r2, r2, #12
 8004c5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6999      	ldr	r1, [r3, #24]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	619a      	str	r2, [r3, #24]
 8004c72:	e060      	b.n	8004d36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b04      	cmp	r3, #4
 8004c78:	d11c      	bne.n	8004cb4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004c8a:	f000 fd99 	bl	80057c0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699a      	ldr	r2, [r3, #24]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	6999      	ldr	r1, [r3, #24]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	021a      	lsls	r2, r3, #8
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	619a      	str	r2, [r3, #24]
 8004cb2:	e040      	b.n	8004d36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2b08      	cmp	r3, #8
 8004cb8:	d11b      	bne.n	8004cf2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004cca:	f000 fde4 	bl	8005896 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69da      	ldr	r2, [r3, #28]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f022 020c 	bic.w	r2, r2, #12
 8004cdc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69d9      	ldr	r1, [r3, #28]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	689a      	ldr	r2, [r3, #8]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	61da      	str	r2, [r3, #28]
 8004cf0:	e021      	b.n	8004d36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d11c      	bne.n	8004d32 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004d08:	f000 fe00 	bl	800590c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004d1a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	69d9      	ldr	r1, [r3, #28]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	61da      	str	r2, [r3, #28]
 8004d30:	e001      	b.n	8004d36 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d101      	bne.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d62:	2302      	movs	r3, #2
 8004d64:	e0ae      	b.n	8004ec4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2b0c      	cmp	r3, #12
 8004d72:	f200 809f 	bhi.w	8004eb4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d76:	a201      	add	r2, pc, #4	@ (adr r2, 8004d7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7c:	08004db1 	.word	0x08004db1
 8004d80:	08004eb5 	.word	0x08004eb5
 8004d84:	08004eb5 	.word	0x08004eb5
 8004d88:	08004eb5 	.word	0x08004eb5
 8004d8c:	08004df1 	.word	0x08004df1
 8004d90:	08004eb5 	.word	0x08004eb5
 8004d94:	08004eb5 	.word	0x08004eb5
 8004d98:	08004eb5 	.word	0x08004eb5
 8004d9c:	08004e33 	.word	0x08004e33
 8004da0:	08004eb5 	.word	0x08004eb5
 8004da4:	08004eb5 	.word	0x08004eb5
 8004da8:	08004eb5 	.word	0x08004eb5
 8004dac:	08004e73 	.word	0x08004e73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68b9      	ldr	r1, [r7, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fa60 	bl	800527c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	699a      	ldr	r2, [r3, #24]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0208 	orr.w	r2, r2, #8
 8004dca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699a      	ldr	r2, [r3, #24]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0204 	bic.w	r2, r2, #4
 8004dda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6999      	ldr	r1, [r3, #24]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	619a      	str	r2, [r3, #24]
      break;
 8004dee:	e064      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f000 faa6 	bl	8005348 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	699a      	ldr	r2, [r3, #24]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6999      	ldr	r1, [r3, #24]
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	691b      	ldr	r3, [r3, #16]
 8004e26:	021a      	lsls	r2, r3, #8
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	619a      	str	r2, [r3, #24]
      break;
 8004e30:	e043      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 faef 	bl	800541c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69da      	ldr	r2, [r3, #28]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0208 	orr.w	r2, r2, #8
 8004e4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	69da      	ldr	r2, [r3, #28]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0204 	bic.w	r2, r2, #4
 8004e5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69d9      	ldr	r1, [r3, #28]
 8004e64:	68bb      	ldr	r3, [r7, #8]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	61da      	str	r2, [r3, #28]
      break;
 8004e70:	e023      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68b9      	ldr	r1, [r7, #8]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fb39 	bl	80054f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69da      	ldr	r2, [r3, #28]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	69da      	ldr	r2, [r3, #28]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	69d9      	ldr	r1, [r3, #28]
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	021a      	lsls	r2, r3, #8
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	430a      	orrs	r2, r1
 8004eb0:	61da      	str	r2, [r3, #28]
      break;
 8004eb2:	e002      	b.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8004eb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d101      	bne.n	8004ee8 <HAL_TIM_ConfigClockSource+0x1c>
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	e0b4      	b.n	8005052 <HAL_TIM_ConfigClockSource+0x186>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004f06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004f0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f20:	d03e      	beq.n	8004fa0 <HAL_TIM_ConfigClockSource+0xd4>
 8004f22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f26:	f200 8087 	bhi.w	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f2e:	f000 8086 	beq.w	800503e <HAL_TIM_ConfigClockSource+0x172>
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f36:	d87f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f38:	2b70      	cmp	r3, #112	@ 0x70
 8004f3a:	d01a      	beq.n	8004f72 <HAL_TIM_ConfigClockSource+0xa6>
 8004f3c:	2b70      	cmp	r3, #112	@ 0x70
 8004f3e:	d87b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f40:	2b60      	cmp	r3, #96	@ 0x60
 8004f42:	d050      	beq.n	8004fe6 <HAL_TIM_ConfigClockSource+0x11a>
 8004f44:	2b60      	cmp	r3, #96	@ 0x60
 8004f46:	d877      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f48:	2b50      	cmp	r3, #80	@ 0x50
 8004f4a:	d03c      	beq.n	8004fc6 <HAL_TIM_ConfigClockSource+0xfa>
 8004f4c:	2b50      	cmp	r3, #80	@ 0x50
 8004f4e:	d873      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f50:	2b40      	cmp	r3, #64	@ 0x40
 8004f52:	d058      	beq.n	8005006 <HAL_TIM_ConfigClockSource+0x13a>
 8004f54:	2b40      	cmp	r3, #64	@ 0x40
 8004f56:	d86f      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d064      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f5c:	2b30      	cmp	r3, #48	@ 0x30
 8004f5e:	d86b      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d060      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d867      	bhi.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d05c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d05a      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0x15a>
 8004f70:	e062      	b.n	8005038 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004f82:	f000 fd19 	bl	80059b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004f94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	609a      	str	r2, [r3, #8]
      break;
 8004f9e:	e04f      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004fb0:	f000 fd02 	bl	80059b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004fc2:	609a      	str	r2, [r3, #8]
      break;
 8004fc4:	e03c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f000 fbc6 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2150      	movs	r1, #80	@ 0x50
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fcd0 	bl	8005984 <TIM_ITRx_SetConfig>
      break;
 8004fe4:	e02c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	f000 fc20 	bl	8005838 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2160      	movs	r1, #96	@ 0x60
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fcc0 	bl	8005984 <TIM_ITRx_SetConfig>
      break;
 8005004:	e01c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	461a      	mov	r2, r3
 8005014:	f000 fba6 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2140      	movs	r1, #64	@ 0x40
 800501e:	4618      	mov	r0, r3
 8005020:	f000 fcb0 	bl	8005984 <TIM_ITRx_SetConfig>
      break;
 8005024:	e00c      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f000 fca7 	bl	8005984 <TIM_ITRx_SetConfig>
      break;
 8005036:	e003      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	73fb      	strb	r3, [r7, #15]
      break;
 800503c:	e000      	b.n	8005040 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800503e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005050:	7bfb      	ldrb	r3, [r7, #15]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b082      	sub	sp, #8
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800506a:	2b01      	cmp	r3, #1
 800506c:	d101      	bne.n	8005072 <HAL_TIM_SlaveConfigSynchro+0x18>
 800506e:	2302      	movs	r3, #2
 8005070:	e031      	b.n	80050d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2202      	movs	r2, #2
 800507e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005082:	6839      	ldr	r1, [r7, #0]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f000 fa81 	bl	800558c <TIM_SlaveTimer_SetConfig>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e018      	b.n	80050d6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050b2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80050c2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
	...

080050e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b085      	sub	sp, #20
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80050ea:	2300      	movs	r3, #0
 80050ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b0c      	cmp	r3, #12
 80050f2:	d831      	bhi.n	8005158 <HAL_TIM_ReadCapturedValue+0x78>
 80050f4:	a201      	add	r2, pc, #4	@ (adr r2, 80050fc <HAL_TIM_ReadCapturedValue+0x1c>)
 80050f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fa:	bf00      	nop
 80050fc:	08005131 	.word	0x08005131
 8005100:	08005159 	.word	0x08005159
 8005104:	08005159 	.word	0x08005159
 8005108:	08005159 	.word	0x08005159
 800510c:	0800513b 	.word	0x0800513b
 8005110:	08005159 	.word	0x08005159
 8005114:	08005159 	.word	0x08005159
 8005118:	08005159 	.word	0x08005159
 800511c:	08005145 	.word	0x08005145
 8005120:	08005159 	.word	0x08005159
 8005124:	08005159 	.word	0x08005159
 8005128:	08005159 	.word	0x08005159
 800512c:	0800514f 	.word	0x0800514f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005136:	60fb      	str	r3, [r7, #12]

      break;
 8005138:	e00f      	b.n	800515a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005140:	60fb      	str	r3, [r7, #12]

      break;
 8005142:	e00a      	b.n	800515a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800514a:	60fb      	str	r3, [r7, #12]

      break;
 800514c:	e005      	b.n	800515a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005154:	60fb      	str	r3, [r7, #12]

      break;
 8005156:	e000      	b.n	800515a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005158:	bf00      	nop
  }

  return tmpreg;
 800515a:	68fb      	ldr	r3, [r7, #12]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	bc80      	pop	{r7}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop

08005168 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005170:	bf00      	nop
 8005172:	370c      	adds	r7, #12
 8005174:	46bd      	mov	sp, r7
 8005176:	bc80      	pop	{r7}
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	bc80      	pop	{r7}
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr
	...

080051a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005270 <TIM_Base_SetConfig+0xd0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00b      	beq.n	80051d0 <TIM_Base_SetConfig+0x30>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051be:	d007      	beq.n	80051d0 <TIM_Base_SetConfig+0x30>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005274 <TIM_Base_SetConfig+0xd4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d003      	beq.n	80051d0 <TIM_Base_SetConfig+0x30>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005278 <TIM_Base_SetConfig+0xd8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d108      	bne.n	80051e2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a22      	ldr	r2, [pc, #136]	@ (8005270 <TIM_Base_SetConfig+0xd0>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00b      	beq.n	8005202 <TIM_Base_SetConfig+0x62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f0:	d007      	beq.n	8005202 <TIM_Base_SetConfig+0x62>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4a1f      	ldr	r2, [pc, #124]	@ (8005274 <TIM_Base_SetConfig+0xd4>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d003      	beq.n	8005202 <TIM_Base_SetConfig+0x62>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	4a1e      	ldr	r2, [pc, #120]	@ (8005278 <TIM_Base_SetConfig+0xd8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d108      	bne.n	8005214 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	68fa      	ldr	r2, [r7, #12]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689a      	ldr	r2, [r3, #8]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a0d      	ldr	r2, [pc, #52]	@ (8005270 <TIM_Base_SetConfig+0xd0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d103      	bne.n	8005248 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0301 	and.w	r3, r3, #1
 8005256:	2b00      	cmp	r3, #0
 8005258:	d005      	beq.n	8005266 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691b      	ldr	r3, [r3, #16]
 800525e:	f023 0201 	bic.w	r2, r3, #1
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	611a      	str	r2, [r3, #16]
  }
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr
 8005270:	40012c00 	.word	0x40012c00
 8005274:	40000400 	.word	0x40000400
 8005278:	40000800 	.word	0x40000800

0800527c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f023 0201 	bic.w	r2, r3, #1
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f023 0302 	bic.w	r3, r3, #2
 80052c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005344 <TIM_OC1_SetConfig+0xc8>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d10c      	bne.n	80052f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f023 0308 	bic.w	r3, r3, #8
 80052de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f023 0304 	bic.w	r3, r3, #4
 80052f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a13      	ldr	r2, [pc, #76]	@ (8005344 <TIM_OC1_SetConfig+0xc8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d111      	bne.n	800531e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	693a      	ldr	r2, [r7, #16]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	699b      	ldr	r3, [r3, #24]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	bc80      	pop	{r7}
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40012c00 	.word	0x40012c00

08005348 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	f023 0210 	bic.w	r2, r3, #16
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800537e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	021b      	lsls	r3, r3, #8
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4313      	orrs	r3, r2
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0320 	bic.w	r3, r3, #32
 8005392:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a1d      	ldr	r2, [pc, #116]	@ (8005418 <TIM_OC2_SetConfig+0xd0>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d10d      	bne.n	80053c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a14      	ldr	r2, [pc, #80]	@ (8005418 <TIM_OC2_SetConfig+0xd0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d113      	bne.n	80053f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80053d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80053da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	693a      	ldr	r2, [r7, #16]
 80053e4:	4313      	orrs	r3, r2
 80053e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	621a      	str	r2, [r3, #32]
}
 800540e:	bf00      	nop
 8005410:	371c      	adds	r7, #28
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00

0800541c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800541c:	b480      	push	{r7}
 800541e:	b087      	sub	sp, #28
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a1b      	ldr	r3, [r3, #32]
 8005430:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f023 0303 	bic.w	r3, r3, #3
 8005452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	021b      	lsls	r3, r3, #8
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <TIM_OC3_SetConfig+0xd0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d10d      	bne.n	8005496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	021b      	lsls	r3, r3, #8
 8005488:	697a      	ldr	r2, [r7, #20]
 800548a:	4313      	orrs	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a14      	ldr	r2, [pc, #80]	@ (80054ec <TIM_OC3_SetConfig+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d113      	bne.n	80054c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	011b      	lsls	r3, r3, #4
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	685a      	ldr	r2, [r3, #4]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	697a      	ldr	r2, [r7, #20]
 80054de:	621a      	str	r2, [r3, #32]
}
 80054e0:	bf00      	nop
 80054e2:	371c      	adds	r7, #28
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bc80      	pop	{r7}
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40012c00 	.word	0x40012c00

080054f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a1b      	ldr	r3, [r3, #32]
 8005504:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800551e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800553a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	031b      	lsls	r3, r3, #12
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a0f      	ldr	r2, [pc, #60]	@ (8005588 <TIM_OC4_SetConfig+0x98>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d109      	bne.n	8005564 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	019b      	lsls	r3, r3, #6
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	4313      	orrs	r3, r2
 8005562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685a      	ldr	r2, [r3, #4]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	621a      	str	r2, [r3, #32]
}
 800557e:	bf00      	nop
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	bc80      	pop	{r7}
 8005586:	4770      	bx	lr
 8005588:	40012c00 	.word	0x40012c00

0800558c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b086      	sub	sp, #24
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 0307 	bic.w	r3, r3, #7
 80055ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	2b70      	cmp	r3, #112	@ 0x70
 80055d4:	d01a      	beq.n	800560c <TIM_SlaveTimer_SetConfig+0x80>
 80055d6:	2b70      	cmp	r3, #112	@ 0x70
 80055d8:	d860      	bhi.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
 80055da:	2b60      	cmp	r3, #96	@ 0x60
 80055dc:	d054      	beq.n	8005688 <TIM_SlaveTimer_SetConfig+0xfc>
 80055de:	2b60      	cmp	r3, #96	@ 0x60
 80055e0:	d85c      	bhi.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
 80055e2:	2b50      	cmp	r3, #80	@ 0x50
 80055e4:	d046      	beq.n	8005674 <TIM_SlaveTimer_SetConfig+0xe8>
 80055e6:	2b50      	cmp	r3, #80	@ 0x50
 80055e8:	d858      	bhi.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
 80055ea:	2b40      	cmp	r3, #64	@ 0x40
 80055ec:	d019      	beq.n	8005622 <TIM_SlaveTimer_SetConfig+0x96>
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	d854      	bhi.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
 80055f2:	2b30      	cmp	r3, #48	@ 0x30
 80055f4:	d055      	beq.n	80056a2 <TIM_SlaveTimer_SetConfig+0x116>
 80055f6:	2b30      	cmp	r3, #48	@ 0x30
 80055f8:	d850      	bhi.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
 80055fa:	2b20      	cmp	r3, #32
 80055fc:	d051      	beq.n	80056a2 <TIM_SlaveTimer_SetConfig+0x116>
 80055fe:	2b20      	cmp	r3, #32
 8005600:	d84c      	bhi.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
 8005602:	2b00      	cmp	r3, #0
 8005604:	d04d      	beq.n	80056a2 <TIM_SlaveTimer_SetConfig+0x116>
 8005606:	2b10      	cmp	r3, #16
 8005608:	d04b      	beq.n	80056a2 <TIM_SlaveTimer_SetConfig+0x116>
 800560a:	e047      	b.n	800569c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800561c:	f000 f9cc 	bl	80059b8 <TIM_ETR_SetConfig>
      break;
 8005620:	e040      	b.n	80056a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b05      	cmp	r3, #5
 8005628:	d101      	bne.n	800562e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e03b      	b.n	80056a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6a1a      	ldr	r2, [r3, #32]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0201 	bic.w	r2, r2, #1
 8005644:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005654:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	011b      	lsls	r3, r3, #4
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	4313      	orrs	r3, r2
 8005660:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68fa      	ldr	r2, [r7, #12]
 8005670:	621a      	str	r2, [r3, #32]
      break;
 8005672:	e017      	b.n	80056a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005680:	461a      	mov	r2, r3
 8005682:	f000 f86f 	bl	8005764 <TIM_TI1_ConfigInputStage>
      break;
 8005686:	e00d      	b.n	80056a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005694:	461a      	mov	r2, r3
 8005696:	f000 f8cf 	bl	8005838 <TIM_TI2_ConfigInputStage>
      break;
 800569a:	e003      	b.n	80056a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	75fb      	strb	r3, [r7, #23]
      break;
 80056a0:	e000      	b.n	80056a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80056a2:	bf00      	nop
  }

  return status;
 80056a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
	...

080056b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6a1b      	ldr	r3, [r3, #32]
 80056c2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1b      	ldr	r3, [r3, #32]
 80056c8:	f023 0201 	bic.w	r2, r3, #1
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005758 <TIM_TI1_SetConfig+0xa8>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d00b      	beq.n	80056f6 <TIM_TI1_SetConfig+0x46>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056e4:	d007      	beq.n	80056f6 <TIM_TI1_SetConfig+0x46>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	@ (800575c <TIM_TI1_SetConfig+0xac>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d003      	beq.n	80056f6 <TIM_TI1_SetConfig+0x46>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005760 <TIM_TI1_SetConfig+0xb0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d101      	bne.n	80056fa <TIM_TI1_SetConfig+0x4a>
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <TIM_TI1_SetConfig+0x4c>
 80056fa:	2300      	movs	r3, #0
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4313      	orrs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
 8005710:	e003      	b.n	800571a <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	b2db      	uxtb	r3, r3
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f003 030a 	and.w	r3, r3, #10
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	621a      	str	r2, [r3, #32]
}
 800574e:	bf00      	nop
 8005750:	371c      	adds	r7, #28
 8005752:	46bd      	mov	sp, r7
 8005754:	bc80      	pop	{r7}
 8005756:	4770      	bx	lr
 8005758:	40012c00 	.word	0x40012c00
 800575c:	40000400 	.word	0x40000400
 8005760:	40000800 	.word	0x40000800

08005764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 030a 	bic.w	r3, r3, #10
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	bc80      	pop	{r7}
 80057be:	4770      	bx	lr

080057c0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f023 0210 	bic.w	r2, r3, #16
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	021b      	lsls	r3, r3, #8
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	031b      	lsls	r3, r3, #12
 8005804:	b29b      	uxth	r3, r3
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	4313      	orrs	r3, r2
 800580a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005812:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	011b      	lsls	r3, r3, #4
 8005818:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a1b      	ldr	r3, [r3, #32]
 800584e:	f023 0210 	bic.w	r2, r3, #16
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	031b      	lsls	r3, r3, #12
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	4313      	orrs	r3, r2
 800586c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005874:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	4313      	orrs	r3, r2
 800587e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	621a      	str	r2, [r3, #32]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	bc80      	pop	{r7}
 8005894:	4770      	bx	lr

08005896 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005896:	b480      	push	{r7}
 8005898:	b087      	sub	sp, #28
 800589a:	af00      	add	r7, sp, #0
 800589c:	60f8      	str	r0, [r7, #12]
 800589e:	60b9      	str	r1, [r7, #8]
 80058a0:	607a      	str	r2, [r7, #4]
 80058a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 0303 	bic.w	r3, r3, #3
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4313      	orrs	r3, r2
 80058ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80058d2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058e6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
}
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr

0800590c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005938:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	021b      	lsls	r3, r3, #8
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	4313      	orrs	r3, r2
 8005942:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800594a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	031b      	lsls	r3, r3, #12
 8005950:	b29b      	uxth	r3, r3
 8005952:	693a      	ldr	r2, [r7, #16]
 8005954:	4313      	orrs	r3, r2
 8005956:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800595e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	031b      	lsls	r3, r3, #12
 8005964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	4313      	orrs	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	621a      	str	r2, [r3, #32]
}
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr

08005984 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800599a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f043 0307 	orr.w	r3, r3, #7
 80059a6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	609a      	str	r2, [r3, #8]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bc80      	pop	{r7}
 80059b6:	4770      	bx	lr

080059b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80059d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	021a      	lsls	r2, r3, #8
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	431a      	orrs	r2, r3
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4313      	orrs	r3, r2
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	609a      	str	r2, [r3, #8]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr

080059f6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b087      	sub	sp, #28
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	f003 031f 	and.w	r3, r3, #31
 8005a08:	2201      	movs	r2, #1
 8005a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1a      	ldr	r2, [r3, #32]
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	43db      	mvns	r3, r3
 8005a18:	401a      	ands	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6a1a      	ldr	r2, [r3, #32]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	6879      	ldr	r1, [r7, #4]
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	431a      	orrs	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	621a      	str	r2, [r3, #32]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
	...

08005a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e046      	b.n	8005ae6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a16      	ldr	r2, [pc, #88]	@ (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00e      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aa4:	d009      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a12      	ldr	r2, [pc, #72]	@ (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d004      	beq.n	8005aba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a10      	ldr	r2, [pc, #64]	@ (8005af8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d10c      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ae4:	2300      	movs	r3, #0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bc80      	pop	{r7}
 8005aee:	4770      	bx	lr
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800

08005afc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e03d      	b.n	8005b94 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	695b      	ldr	r3, [r3, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr

08005b9e <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b083      	sub	sp, #12
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bc80      	pop	{r7}
 8005bae:	4770      	bx	lr

08005bb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e042      	b.n	8005c5a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f7fc f947 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2224      	movs	r2, #36	@ 0x24
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fdb8 	bl	800677c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691a      	ldr	r2, [r3, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005c2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2220      	movs	r2, #32
 8005c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b08a      	sub	sp, #40	@ 0x28
 8005c66:	af02      	add	r7, sp, #8
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b20      	cmp	r3, #32
 8005c80:	d175      	bne.n	8005d6e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_UART_Transmit+0x2c>
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d101      	bne.n	8005c92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e06e      	b.n	8005d70 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	2200      	movs	r2, #0
 8005c96:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2221      	movs	r2, #33	@ 0x21
 8005c9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ca0:	f7fc fa54 	bl	800214c <HAL_GetTick>
 8005ca4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	88fa      	ldrh	r2, [r7, #6]
 8005caa:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	88fa      	ldrh	r2, [r7, #6]
 8005cb0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cba:	d108      	bne.n	8005cce <HAL_UART_Transmit+0x6c>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d104      	bne.n	8005cce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	61bb      	str	r3, [r7, #24]
 8005ccc:	e003      	b.n	8005cd6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005cd6:	e02e      	b.n	8005d36 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	2180      	movs	r1, #128	@ 0x80
 8005ce2:	68f8      	ldr	r0, [r7, #12]
 8005ce4:	f000 fb1d 	bl	8006322 <UART_WaitOnFlagUntilTimeout>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e03a      	b.n	8005d70 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10b      	bne.n	8005d18 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	881b      	ldrh	r3, [r3, #0]
 8005d04:	461a      	mov	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d0e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	3302      	adds	r3, #2
 8005d14:	61bb      	str	r3, [r7, #24]
 8005d16:	e007      	b.n	8005d28 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	781a      	ldrb	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005d22:	69fb      	ldr	r3, [r7, #28]
 8005d24:	3301      	adds	r3, #1
 8005d26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1cb      	bne.n	8005cd8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	9300      	str	r3, [sp, #0]
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	2200      	movs	r2, #0
 8005d48:	2140      	movs	r1, #64	@ 0x40
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fae9 	bl	8006322 <UART_WaitOnFlagUntilTimeout>
 8005d50:	4603      	mov	r3, r0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e006      	b.n	8005d70 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	e000      	b.n	8005d70 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d6e:	2302      	movs	r3, #2
  }
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3720      	adds	r7, #32
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bd80      	pop	{r7, pc}

08005d78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	4613      	mov	r3, r2
 8005d84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	2b20      	cmp	r3, #32
 8005d90:	d112      	bne.n	8005db8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d002      	beq.n	8005d9e <HAL_UART_Receive_IT+0x26>
 8005d98:	88fb      	ldrh	r3, [r7, #6]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d101      	bne.n	8005da2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e00b      	b.n	8005dba <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005da8:	88fb      	ldrh	r3, [r7, #6]
 8005daa:	461a      	mov	r2, r3
 8005dac:	68b9      	ldr	r1, [r7, #8]
 8005dae:	68f8      	ldr	r0, [r7, #12]
 8005db0:	f000 fb10 	bl	80063d4 <UART_Start_Receive_IT>
 8005db4:	4603      	mov	r3, r0
 8005db6:	e000      	b.n	8005dba <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005db8:	2302      	movs	r3, #2
  }
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
	...

08005dc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b0ba      	sub	sp, #232	@ 0xe8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005e02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10f      	bne.n	8005e2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f003 0320 	and.w	r3, r3, #32
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d009      	beq.n	8005e2a <HAL_UART_IRQHandler+0x66>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d003      	beq.n	8005e2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 fbec 	bl	8006600 <UART_Receive_IT>
      return;
 8005e28:	e25b      	b.n	80062e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f000 80de 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x22c>
 8005e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f000 80d1 	beq.w	8005ff0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <HAL_UART_IRQHandler+0xae>
 8005e5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d005      	beq.n	8005e72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e6a:	f043 0201 	orr.w	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00b      	beq.n	8005e96 <HAL_UART_IRQHandler+0xd2>
 8005e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8e:	f043 0202 	orr.w	r2, r3, #2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9a:	f003 0302 	and.w	r3, r3, #2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <HAL_UART_IRQHandler+0xf6>
 8005ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d005      	beq.n	8005eba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eb2:	f043 0204 	orr.w	r2, r3, #4
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d011      	beq.n	8005eea <HAL_UART_IRQHandler+0x126>
 8005ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eca:	f003 0320 	and.w	r3, r3, #32
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d105      	bne.n	8005ede <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee2:	f043 0208 	orr.w	r2, r3, #8
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 81f2 	beq.w	80062d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	f003 0320 	and.w	r3, r3, #32
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d008      	beq.n	8005f12 <HAL_UART_IRQHandler+0x14e>
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d002      	beq.n	8005f12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fb77 	bl	8006600 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	695b      	ldr	r3, [r3, #20]
 8005f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bf14      	ite	ne
 8005f20:	2301      	movne	r3, #1
 8005f22:	2300      	moveq	r3, #0
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f2e:	f003 0308 	and.w	r3, r3, #8
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <HAL_UART_IRQHandler+0x17a>
 8005f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d04f      	beq.n	8005fde <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa81 	bl	8006446 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	695b      	ldr	r3, [r3, #20]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d041      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	3314      	adds	r3, #20
 8005f58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f60:	e853 3f00 	ldrex	r3, [r3]
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	3314      	adds	r3, #20
 8005f7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1d9      	bne.n	8005f52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d013      	beq.n	8005fce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005faa:	4a7e      	ldr	r2, [pc, #504]	@ (80061a4 <HAL_UART_IRQHandler+0x3e0>)
 8005fac:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7fc fe9a 	bl	8002cec <HAL_DMA_Abort_IT>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d016      	beq.n	8005fec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e00e      	b.n	8005fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f993 	bl	80062fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00a      	b.n	8005fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f98f 	bl	80062fa <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e006      	b.n	8005fec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f98b 	bl	80062fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fea:	e175      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fec:	bf00      	nop
    return;
 8005fee:	e173      	b.n	80062d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	f040 814f 	bne.w	8006298 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 8148 	beq.w	8006298 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800600c:	f003 0310 	and.w	r3, r3, #16
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 8141 	beq.w	8006298 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695b      	ldr	r3, [r3, #20]
 8006032:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 80b6 	beq.w	80061a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006048:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 8145 	beq.w	80062dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006056:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800605a:	429a      	cmp	r2, r3
 800605c:	f080 813e 	bcs.w	80062dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006066:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	2b20      	cmp	r3, #32
 8006070:	f000 8088 	beq.w	8006184 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	330c      	adds	r3, #12
 800607a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006082:	e853 3f00 	ldrex	r3, [r3]
 8006086:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800608a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800608e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006092:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	330c      	adds	r3, #12
 800609c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80060a0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d1d9      	bne.n	8006074 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	3314      	adds	r3, #20
 80060c6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060ca:	e853 3f00 	ldrex	r3, [r3]
 80060ce:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060d0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060d2:	f023 0301 	bic.w	r3, r3, #1
 80060d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	3314      	adds	r3, #20
 80060e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060e4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ea:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e1      	bne.n	80060c0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3314      	adds	r3, #20
 8006102:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800610c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800610e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006112:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	3314      	adds	r3, #20
 800611c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006120:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006122:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006124:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006126:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006128:	e841 2300 	strex	r3, r2, [r1]
 800612c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800612e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1e3      	bne.n	80060fc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2220      	movs	r2, #32
 8006138:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	330c      	adds	r3, #12
 8006148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	330c      	adds	r3, #12
 8006162:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006166:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006168:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800616c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e3      	bne.n	8006142 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617e:	4618      	mov	r0, r3
 8006180:	f7fc fd78 	bl	8002c74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006192:	b29b      	uxth	r3, r3
 8006194:	1ad3      	subs	r3, r2, r3
 8006196:	b29b      	uxth	r3, r3
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f8b6 	bl	800630c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a0:	e09c      	b.n	80062dc <HAL_UART_IRQHandler+0x518>
 80061a2:	bf00      	nop
 80061a4:	0800650b 	.word	0x0800650b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061bc:	b29b      	uxth	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f000 808e 	beq.w	80062e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 8089 	beq.w	80062e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	330c      	adds	r3, #12
 80061d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	330c      	adds	r3, #12
 80061ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80061f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80061f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fa:	e841 2300 	strex	r3, r2, [r1]
 80061fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1e3      	bne.n	80061ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3314      	adds	r3, #20
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	623b      	str	r3, [r7, #32]
   return(result);
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3314      	adds	r3, #20
 8006226:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800622a:	633a      	str	r2, [r7, #48]	@ 0x30
 800622c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623a:	2b00      	cmp	r3, #0
 800623c:	d1e3      	bne.n	8006206 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	330c      	adds	r3, #12
 8006252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	60fb      	str	r3, [r7, #12]
   return(result);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0310 	bic.w	r3, r3, #16
 8006262:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	330c      	adds	r3, #12
 800626c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006270:	61fa      	str	r2, [r7, #28]
 8006272:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	69b9      	ldr	r1, [r7, #24]
 8006276:	69fa      	ldr	r2, [r7, #28]
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	617b      	str	r3, [r7, #20]
   return(result);
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e3      	bne.n	800624c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800628a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 f83b 	bl	800630c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006296:	e023      	b.n	80062e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800629c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d009      	beq.n	80062b8 <HAL_UART_IRQHandler+0x4f4>
 80062a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d003      	beq.n	80062b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f93e 	bl	8006532 <UART_Transmit_IT>
    return;
 80062b6:	e014      	b.n	80062e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00e      	beq.n	80062e2 <HAL_UART_IRQHandler+0x51e>
 80062c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d008      	beq.n	80062e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f97d 	bl	80065d0 <UART_EndTransmit_IT>
    return;
 80062d6:	e004      	b.n	80062e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80062d8:	bf00      	nop
 80062da:	e002      	b.n	80062e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062dc:	bf00      	nop
 80062de:	e000      	b.n	80062e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80062e0:	bf00      	nop
  }
}
 80062e2:	37e8      	adds	r7, #232	@ 0xe8
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bc80      	pop	{r7}
 80062f8:	4770      	bx	lr

080062fa <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	bc80      	pop	{r7}
 800630a:	4770      	bx	lr

0800630c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
 8006314:	460b      	mov	r3, r1
 8006316:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b086      	sub	sp, #24
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	603b      	str	r3, [r7, #0]
 800632e:	4613      	mov	r3, r2
 8006330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006332:	e03b      	b.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006334:	6a3b      	ldr	r3, [r7, #32]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800633a:	d037      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800633c:	f7fb ff06 	bl	800214c <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	429a      	cmp	r2, r3
 800634a:	d302      	bcc.n	8006352 <UART_WaitOnFlagUntilTimeout+0x30>
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e03a      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0304 	and.w	r3, r3, #4
 8006360:	2b00      	cmp	r3, #0
 8006362:	d023      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2b80      	cmp	r3, #128	@ 0x80
 8006368:	d020      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	2b40      	cmp	r3, #64	@ 0x40
 800636e:	d01d      	beq.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b08      	cmp	r3, #8
 800637c:	d116      	bne.n	80063ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	617b      	str	r3, [r7, #20]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f856 	bl	8006446 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2208      	movs	r2, #8
 800639e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063a8:	2301      	movs	r3, #1
 80063aa:	e00f      	b.n	80063cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	4013      	ands	r3, r2
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	bf0c      	ite	eq
 80063bc:	2301      	moveq	r3, #1
 80063be:	2300      	movne	r3, #0
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	461a      	mov	r2, r3
 80063c4:	79fb      	ldrb	r3, [r7, #7]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d0b4      	beq.n	8006334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}

080063d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	4613      	mov	r3, r2
 80063e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	88fa      	ldrh	r2, [r7, #6]
 80063ec:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	88fa      	ldrh	r2, [r7, #6]
 80063f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	2200      	movs	r2, #0
 80063f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2222      	movs	r2, #34	@ 0x22
 80063fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68da      	ldr	r2, [r3, #12]
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006418:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695a      	ldr	r2, [r3, #20]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0220 	orr.w	r2, r2, #32
 8006438:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	bc80      	pop	{r7}
 8006444:	4770      	bx	lr

08006446 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006446:	b480      	push	{r7}
 8006448:	b095      	sub	sp, #84	@ 0x54
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	330c      	adds	r3, #12
 8006454:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006458:	e853 3f00 	ldrex	r3, [r3]
 800645c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006464:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800646e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006472:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006474:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800647c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647e:	2b00      	cmp	r3, #0
 8006480:	d1e5      	bne.n	800644e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	3314      	adds	r3, #20
 8006488:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	e853 3f00 	ldrex	r3, [r3]
 8006490:	61fb      	str	r3, [r7, #28]
   return(result);
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	f023 0301 	bic.w	r3, r3, #1
 8006498:	64bb      	str	r3, [r7, #72]	@ 0x48
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3314      	adds	r3, #20
 80064a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064aa:	e841 2300 	strex	r3, r2, [r1]
 80064ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1e5      	bne.n	8006482 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d119      	bne.n	80064f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	330c      	adds	r3, #12
 80064c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	f023 0310 	bic.w	r3, r3, #16
 80064d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	330c      	adds	r3, #12
 80064dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064de:	61ba      	str	r2, [r7, #24]
 80064e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6979      	ldr	r1, [r7, #20]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	613b      	str	r3, [r7, #16]
   return(result);
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e5      	bne.n	80064be <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006500:	bf00      	nop
 8006502:	3754      	adds	r7, #84	@ 0x54
 8006504:	46bd      	mov	sp, r7
 8006506:	bc80      	pop	{r7}
 8006508:	4770      	bx	lr

0800650a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b084      	sub	sp, #16
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006516:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006524:	68f8      	ldr	r0, [r7, #12]
 8006526:	f7ff fee8 	bl	80062fa <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006532:	b480      	push	{r7}
 8006534:	b085      	sub	sp, #20
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b21      	cmp	r3, #33	@ 0x21
 8006544:	d13e      	bne.n	80065c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654e:	d114      	bne.n	800657a <UART_Transmit_IT+0x48>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d110      	bne.n	800657a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a1b      	ldr	r3, [r3, #32]
 800655c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	881b      	ldrh	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800656c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a1b      	ldr	r3, [r3, #32]
 8006572:	1c9a      	adds	r2, r3, #2
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	621a      	str	r2, [r3, #32]
 8006578:	e008      	b.n	800658c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6211      	str	r1, [r2, #32]
 8006584:	781a      	ldrb	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29b      	uxth	r3, r3
 8006596:	687a      	ldr	r2, [r7, #4]
 8006598:	4619      	mov	r1, r3
 800659a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10f      	bne.n	80065c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68da      	ldr	r2, [r3, #12]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065c0:	2300      	movs	r3, #0
 80065c2:	e000      	b.n	80065c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065c4:	2302      	movs	r3, #2
  }
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bc80      	pop	{r7}
 80065ce:	4770      	bx	lr

080065d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68da      	ldr	r2, [r3, #12]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fe79 	bl	80062e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b08c      	sub	sp, #48	@ 0x30
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800660e:	b2db      	uxtb	r3, r3
 8006610:	2b22      	cmp	r3, #34	@ 0x22
 8006612:	f040 80ae 	bne.w	8006772 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800661e:	d117      	bne.n	8006650 <UART_Receive_IT+0x50>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d113      	bne.n	8006650 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006630:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	b29b      	uxth	r3, r3
 800663a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663e:	b29a      	uxth	r2, r3
 8006640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006642:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006648:	1c9a      	adds	r2, r3, #2
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	629a      	str	r2, [r3, #40]	@ 0x28
 800664e:	e026      	b.n	800669e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006656:	2300      	movs	r3, #0
 8006658:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006662:	d007      	beq.n	8006674 <UART_Receive_IT+0x74>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <UART_Receive_IT+0x82>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d106      	bne.n	8006682 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	b2da      	uxtb	r2, r3
 800667c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800667e:	701a      	strb	r2, [r3, #0]
 8006680:	e008      	b.n	8006694 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800668e:	b2da      	uxtb	r2, r3
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006698:	1c5a      	adds	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4619      	mov	r1, r3
 80066ac:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d15d      	bne.n	800676e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0220 	bic.w	r2, r2, #32
 80066c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	695a      	ldr	r2, [r3, #20]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 0201 	bic.w	r2, r2, #1
 80066e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2220      	movs	r2, #32
 80066e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2200      	movs	r2, #0
 80066ee:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d135      	bne.n	8006764 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	330c      	adds	r3, #12
 8006704:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	e853 3f00 	ldrex	r3, [r3]
 800670c:	613b      	str	r3, [r7, #16]
   return(result);
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f023 0310 	bic.w	r3, r3, #16
 8006714:	627b      	str	r3, [r7, #36]	@ 0x24
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800671e:	623a      	str	r2, [r7, #32]
 8006720:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	69f9      	ldr	r1, [r7, #28]
 8006724:	6a3a      	ldr	r2, [r7, #32]
 8006726:	e841 2300 	strex	r3, r2, [r1]
 800672a:	61bb      	str	r3, [r7, #24]
   return(result);
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1e5      	bne.n	80066fe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b10      	cmp	r3, #16
 800673e:	d10a      	bne.n	8006756 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006740:	2300      	movs	r3, #0
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	60fb      	str	r3, [r7, #12]
 8006754:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7ff fdd5 	bl	800630c <HAL_UARTEx_RxEventCallback>
 8006762:	e002      	b.n	800676a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7fa f9e3 	bl	8000b30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	e002      	b.n	8006774 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800676e:	2300      	movs	r3, #0
 8006770:	e000      	b.n	8006774 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006772:	2302      	movs	r3, #2
  }
}
 8006774:	4618      	mov	r0, r3
 8006776:	3730      	adds	r7, #48	@ 0x30
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68da      	ldr	r2, [r3, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	695b      	ldr	r3, [r3, #20]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80067b6:	f023 030c 	bic.w	r3, r3, #12
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	6812      	ldr	r2, [r2, #0]
 80067be:	68b9      	ldr	r1, [r7, #8]
 80067c0:	430b      	orrs	r3, r1
 80067c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	430a      	orrs	r2, r1
 80067d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a2c      	ldr	r2, [pc, #176]	@ (8006890 <UART_SetConfig+0x114>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d103      	bne.n	80067ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80067e4:	f7fd f994 	bl	8003b10 <HAL_RCC_GetPCLK2Freq>
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	e002      	b.n	80067f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80067ec:	f7fd f97c 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 80067f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009a      	lsls	r2, r3, #2
 80067fc:	441a      	add	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	fbb2 f3f3 	udiv	r3, r2, r3
 8006808:	4a22      	ldr	r2, [pc, #136]	@ (8006894 <UART_SetConfig+0x118>)
 800680a:	fba2 2303 	umull	r2, r3, r2, r3
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	0119      	lsls	r1, r3, #4
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	009a      	lsls	r2, r3, #2
 800681c:	441a      	add	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	fbb2 f2f3 	udiv	r2, r2, r3
 8006828:	4b1a      	ldr	r3, [pc, #104]	@ (8006894 <UART_SetConfig+0x118>)
 800682a:	fba3 0302 	umull	r0, r3, r3, r2
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	2064      	movs	r0, #100	@ 0x64
 8006832:	fb00 f303 	mul.w	r3, r0, r3
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	3332      	adds	r3, #50	@ 0x32
 800683c:	4a15      	ldr	r2, [pc, #84]	@ (8006894 <UART_SetConfig+0x118>)
 800683e:	fba2 2303 	umull	r2, r3, r2, r3
 8006842:	095b      	lsrs	r3, r3, #5
 8006844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006848:	4419      	add	r1, r3
 800684a:	68fa      	ldr	r2, [r7, #12]
 800684c:	4613      	mov	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4413      	add	r3, r2
 8006852:	009a      	lsls	r2, r3, #2
 8006854:	441a      	add	r2, r3
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006860:	4b0c      	ldr	r3, [pc, #48]	@ (8006894 <UART_SetConfig+0x118>)
 8006862:	fba3 0302 	umull	r0, r3, r3, r2
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	2064      	movs	r0, #100	@ 0x64
 800686a:	fb00 f303 	mul.w	r3, r0, r3
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	011b      	lsls	r3, r3, #4
 8006872:	3332      	adds	r3, #50	@ 0x32
 8006874:	4a07      	ldr	r2, [pc, #28]	@ (8006894 <UART_SetConfig+0x118>)
 8006876:	fba2 2303 	umull	r2, r3, r2, r3
 800687a:	095b      	lsrs	r3, r3, #5
 800687c:	f003 020f 	and.w	r2, r3, #15
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	440a      	add	r2, r1
 8006886:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006888:	bf00      	nop
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	40013800 	.word	0x40013800
 8006894:	51eb851f 	.word	0x51eb851f

08006898 <memset>:
 8006898:	4603      	mov	r3, r0
 800689a:	4402      	add	r2, r0
 800689c:	4293      	cmp	r3, r2
 800689e:	d100      	bne.n	80068a2 <memset+0xa>
 80068a0:	4770      	bx	lr
 80068a2:	f803 1b01 	strb.w	r1, [r3], #1
 80068a6:	e7f9      	b.n	800689c <memset+0x4>

080068a8 <__libc_init_array>:
 80068a8:	b570      	push	{r4, r5, r6, lr}
 80068aa:	2600      	movs	r6, #0
 80068ac:	4d0c      	ldr	r5, [pc, #48]	@ (80068e0 <__libc_init_array+0x38>)
 80068ae:	4c0d      	ldr	r4, [pc, #52]	@ (80068e4 <__libc_init_array+0x3c>)
 80068b0:	1b64      	subs	r4, r4, r5
 80068b2:	10a4      	asrs	r4, r4, #2
 80068b4:	42a6      	cmp	r6, r4
 80068b6:	d109      	bne.n	80068cc <__libc_init_array+0x24>
 80068b8:	f000 f81a 	bl	80068f0 <_init>
 80068bc:	2600      	movs	r6, #0
 80068be:	4d0a      	ldr	r5, [pc, #40]	@ (80068e8 <__libc_init_array+0x40>)
 80068c0:	4c0a      	ldr	r4, [pc, #40]	@ (80068ec <__libc_init_array+0x44>)
 80068c2:	1b64      	subs	r4, r4, r5
 80068c4:	10a4      	asrs	r4, r4, #2
 80068c6:	42a6      	cmp	r6, r4
 80068c8:	d105      	bne.n	80068d6 <__libc_init_array+0x2e>
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80068d0:	4798      	blx	r3
 80068d2:	3601      	adds	r6, #1
 80068d4:	e7ee      	b.n	80068b4 <__libc_init_array+0xc>
 80068d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80068da:	4798      	blx	r3
 80068dc:	3601      	adds	r6, #1
 80068de:	e7f2      	b.n	80068c6 <__libc_init_array+0x1e>
 80068e0:	0800699c 	.word	0x0800699c
 80068e4:	0800699c 	.word	0x0800699c
 80068e8:	0800699c 	.word	0x0800699c
 80068ec:	080069a0 	.word	0x080069a0

080068f0 <_init>:
 80068f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068f2:	bf00      	nop
 80068f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068f6:	bc08      	pop	{r3}
 80068f8:	469e      	mov	lr, r3
 80068fa:	4770      	bx	lr

080068fc <_fini>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr
