
primera_prueba_real_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cd4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005de0  08005de0  00006de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e64  08005e64  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005e64  08005e64  00006e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e6c  08005e6c  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e6c  08005e6c  00006e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005e70  08005e70  00006e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005e74  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000060  08005ed4  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08005ed4  0000729c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de9e  00000000  00000000  00007089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000200e  00000000  00000000  00014f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00016f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac4  00000000  00000000  00017ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018514  00000000  00000000  000187ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9c0  00000000  00000000  00030cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f6c9  00000000  00000000  00040680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfd49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  000cfd8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d37d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08005dc8 	.word	0x08005dc8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08005dc8 	.word	0x08005dc8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_dmul>:
 8000170:	b570      	push	{r4, r5, r6, lr}
 8000172:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000176:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800017a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800017e:	bf1d      	ittte	ne
 8000180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000184:	ea94 0f0c 	teqne	r4, ip
 8000188:	ea95 0f0c 	teqne	r5, ip
 800018c:	f000 f8de 	bleq	800034c <__aeabi_dmul+0x1dc>
 8000190:	442c      	add	r4, r5
 8000192:	ea81 0603 	eor.w	r6, r1, r3
 8000196:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800019a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800019e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001a2:	bf18      	it	ne
 80001a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80001ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001b0:	d038      	beq.n	8000224 <__aeabi_dmul+0xb4>
 80001b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001b6:	f04f 0500 	mov.w	r5, #0
 80001ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001c6:	f04f 0600 	mov.w	r6, #0
 80001ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ce:	f09c 0f00 	teq	ip, #0
 80001d2:	bf18      	it	ne
 80001d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001e4:	d204      	bcs.n	80001f0 <__aeabi_dmul+0x80>
 80001e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ea:	416d      	adcs	r5, r5
 80001ec:	eb46 0606 	adc.w	r6, r6, r6
 80001f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000200:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000204:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000208:	bf88      	it	hi
 800020a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800020e:	d81e      	bhi.n	800024e <__aeabi_dmul+0xde>
 8000210:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000214:	bf08      	it	eq
 8000216:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800021a:	f150 0000 	adcs.w	r0, r0, #0
 800021e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000222:	bd70      	pop	{r4, r5, r6, pc}
 8000224:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000228:	ea46 0101 	orr.w	r1, r6, r1
 800022c:	ea40 0002 	orr.w	r0, r0, r2
 8000230:	ea81 0103 	eor.w	r1, r1, r3
 8000234:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000238:	bfc2      	ittt	gt
 800023a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800023e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000242:	bd70      	popgt	{r4, r5, r6, pc}
 8000244:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000248:	f04f 0e00 	mov.w	lr, #0
 800024c:	3c01      	subs	r4, #1
 800024e:	f300 80ab 	bgt.w	80003a8 <__aeabi_dmul+0x238>
 8000252:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000256:	bfde      	ittt	le
 8000258:	2000      	movle	r0, #0
 800025a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800025e:	bd70      	pople	{r4, r5, r6, pc}
 8000260:	f1c4 0400 	rsb	r4, r4, #0
 8000264:	3c20      	subs	r4, #32
 8000266:	da35      	bge.n	80002d4 <__aeabi_dmul+0x164>
 8000268:	340c      	adds	r4, #12
 800026a:	dc1b      	bgt.n	80002a4 <__aeabi_dmul+0x134>
 800026c:	f104 0414 	add.w	r4, r4, #20
 8000270:	f1c4 0520 	rsb	r5, r4, #32
 8000274:	fa00 f305 	lsl.w	r3, r0, r5
 8000278:	fa20 f004 	lsr.w	r0, r0, r4
 800027c:	fa01 f205 	lsl.w	r2, r1, r5
 8000280:	ea40 0002 	orr.w	r0, r0, r2
 8000284:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000288:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800028c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000290:	fa21 f604 	lsr.w	r6, r1, r4
 8000294:	eb42 0106 	adc.w	r1, r2, r6
 8000298:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800029c:	bf08      	it	eq
 800029e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f1c4 040c 	rsb	r4, r4, #12
 80002a8:	f1c4 0520 	rsb	r5, r4, #32
 80002ac:	fa00 f304 	lsl.w	r3, r0, r4
 80002b0:	fa20 f005 	lsr.w	r0, r0, r5
 80002b4:	fa01 f204 	lsl.w	r2, r1, r4
 80002b8:	ea40 0002 	orr.w	r0, r0, r2
 80002bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002cc:	bf08      	it	eq
 80002ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f1c4 0520 	rsb	r5, r4, #32
 80002d8:	fa00 f205 	lsl.w	r2, r0, r5
 80002dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002e0:	fa20 f304 	lsr.w	r3, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea43 0302 	orr.w	r3, r3, r2
 80002ec:	fa21 f004 	lsr.w	r0, r1, r4
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	fa21 f204 	lsr.w	r2, r1, r4
 80002f8:	ea20 0002 	bic.w	r0, r0, r2
 80002fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f094 0f00 	teq	r4, #0
 8000310:	d10f      	bne.n	8000332 <__aeabi_dmul+0x1c2>
 8000312:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000316:	0040      	lsls	r0, r0, #1
 8000318:	eb41 0101 	adc.w	r1, r1, r1
 800031c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3c01      	subeq	r4, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1a6>
 8000326:	ea41 0106 	orr.w	r1, r1, r6
 800032a:	f095 0f00 	teq	r5, #0
 800032e:	bf18      	it	ne
 8000330:	4770      	bxne	lr
 8000332:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000336:	0052      	lsls	r2, r2, #1
 8000338:	eb43 0303 	adc.w	r3, r3, r3
 800033c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000340:	bf08      	it	eq
 8000342:	3d01      	subeq	r5, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1c6>
 8000346:	ea43 0306 	orr.w	r3, r3, r6
 800034a:	4770      	bx	lr
 800034c:	ea94 0f0c 	teq	r4, ip
 8000350:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000354:	bf18      	it	ne
 8000356:	ea95 0f0c 	teqne	r5, ip
 800035a:	d00c      	beq.n	8000376 <__aeabi_dmul+0x206>
 800035c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000360:	bf18      	it	ne
 8000362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000366:	d1d1      	bne.n	800030c <__aeabi_dmul+0x19c>
 8000368:	ea81 0103 	eor.w	r1, r1, r3
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	f04f 0000 	mov.w	r0, #0
 8000374:	bd70      	pop	{r4, r5, r6, pc}
 8000376:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800037a:	bf06      	itte	eq
 800037c:	4610      	moveq	r0, r2
 800037e:	4619      	moveq	r1, r3
 8000380:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000384:	d019      	beq.n	80003ba <__aeabi_dmul+0x24a>
 8000386:	ea94 0f0c 	teq	r4, ip
 800038a:	d102      	bne.n	8000392 <__aeabi_dmul+0x222>
 800038c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000390:	d113      	bne.n	80003ba <__aeabi_dmul+0x24a>
 8000392:	ea95 0f0c 	teq	r5, ip
 8000396:	d105      	bne.n	80003a4 <__aeabi_dmul+0x234>
 8000398:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800039c:	bf1c      	itt	ne
 800039e:	4610      	movne	r0, r2
 80003a0:	4619      	movne	r1, r3
 80003a2:	d10a      	bne.n	80003ba <__aeabi_dmul+0x24a>
 80003a4:	ea81 0103 	eor.w	r1, r1, r3
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd70      	pop	{r4, r5, r6, pc}
 80003ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003c2:	bd70      	pop	{r4, r5, r6, pc}

080003c4 <__aeabi_drsub>:
 80003c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003c8:	e002      	b.n	80003d0 <__adddf3>
 80003ca:	bf00      	nop

080003cc <__aeabi_dsub>:
 80003cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003d0 <__adddf3>:
 80003d0:	b530      	push	{r4, r5, lr}
 80003d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	bf1f      	itttt	ne
 80003e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f6:	f000 80e2 	beq.w	80005be <__adddf3+0x1ee>
 80003fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000402:	bfb8      	it	lt
 8000404:	426d      	neglt	r5, r5
 8000406:	dd0c      	ble.n	8000422 <__adddf3+0x52>
 8000408:	442c      	add	r4, r5
 800040a:	ea80 0202 	eor.w	r2, r0, r2
 800040e:	ea81 0303 	eor.w	r3, r1, r3
 8000412:	ea82 0000 	eor.w	r0, r2, r0
 8000416:	ea83 0101 	eor.w	r1, r3, r1
 800041a:	ea80 0202 	eor.w	r2, r0, r2
 800041e:	ea81 0303 	eor.w	r3, r1, r3
 8000422:	2d36      	cmp	r5, #54	@ 0x36
 8000424:	bf88      	it	hi
 8000426:	bd30      	pophi	{r4, r5, pc}
 8000428:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800042c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000430:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000434:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x70>
 800043a:	4240      	negs	r0, r0
 800043c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000440:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000444:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000448:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800044c:	d002      	beq.n	8000454 <__adddf3+0x84>
 800044e:	4252      	negs	r2, r2
 8000450:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000454:	ea94 0f05 	teq	r4, r5
 8000458:	f000 80a7 	beq.w	80005aa <__adddf3+0x1da>
 800045c:	f1a4 0401 	sub.w	r4, r4, #1
 8000460:	f1d5 0e20 	rsbs	lr, r5, #32
 8000464:	db0d      	blt.n	8000482 <__adddf3+0xb2>
 8000466:	fa02 fc0e 	lsl.w	ip, r2, lr
 800046a:	fa22 f205 	lsr.w	r2, r2, r5
 800046e:	1880      	adds	r0, r0, r2
 8000470:	f141 0100 	adc.w	r1, r1, #0
 8000474:	fa03 f20e 	lsl.w	r2, r3, lr
 8000478:	1880      	adds	r0, r0, r2
 800047a:	fa43 f305 	asr.w	r3, r3, r5
 800047e:	4159      	adcs	r1, r3
 8000480:	e00e      	b.n	80004a0 <__adddf3+0xd0>
 8000482:	f1a5 0520 	sub.w	r5, r5, #32
 8000486:	f10e 0e20 	add.w	lr, lr, #32
 800048a:	2a01      	cmp	r2, #1
 800048c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000490:	bf28      	it	cs
 8000492:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	18c0      	adds	r0, r0, r3
 800049c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004a4:	d507      	bpl.n	80004b6 <__adddf3+0xe6>
 80004a6:	f04f 0e00 	mov.w	lr, #0
 80004aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004ba:	d31b      	bcc.n	80004f4 <__adddf3+0x124>
 80004bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004c0:	d30c      	bcc.n	80004dc <__adddf3+0x10c>
 80004c2:	0849      	lsrs	r1, r1, #1
 80004c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004cc:	f104 0401 	add.w	r4, r4, #1
 80004d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004d8:	f080 809a 	bcs.w	8000610 <__adddf3+0x240>
 80004dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004e0:	bf08      	it	eq
 80004e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e6:	f150 0000 	adcs.w	r0, r0, #0
 80004ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ee:	ea41 0105 	orr.w	r1, r1, r5
 80004f2:	bd30      	pop	{r4, r5, pc}
 80004f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f8:	4140      	adcs	r0, r0
 80004fa:	eb41 0101 	adc.w	r1, r1, r1
 80004fe:	3c01      	subs	r4, #1
 8000500:	bf28      	it	cs
 8000502:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000506:	d2e9      	bcs.n	80004dc <__adddf3+0x10c>
 8000508:	f091 0f00 	teq	r1, #0
 800050c:	bf04      	itt	eq
 800050e:	4601      	moveq	r1, r0
 8000510:	2000      	moveq	r0, #0
 8000512:	fab1 f381 	clz	r3, r1
 8000516:	bf08      	it	eq
 8000518:	3320      	addeq	r3, #32
 800051a:	f1a3 030b 	sub.w	r3, r3, #11
 800051e:	f1b3 0220 	subs.w	r2, r3, #32
 8000522:	da0c      	bge.n	800053e <__adddf3+0x16e>
 8000524:	320c      	adds	r2, #12
 8000526:	dd08      	ble.n	800053a <__adddf3+0x16a>
 8000528:	f102 0c14 	add.w	ip, r2, #20
 800052c:	f1c2 020c 	rsb	r2, r2, #12
 8000530:	fa01 f00c 	lsl.w	r0, r1, ip
 8000534:	fa21 f102 	lsr.w	r1, r1, r2
 8000538:	e00c      	b.n	8000554 <__adddf3+0x184>
 800053a:	f102 0214 	add.w	r2, r2, #20
 800053e:	bfd8      	it	le
 8000540:	f1c2 0c20 	rsble	ip, r2, #32
 8000544:	fa01 f102 	lsl.w	r1, r1, r2
 8000548:	fa20 fc0c 	lsr.w	ip, r0, ip
 800054c:	bfdc      	itt	le
 800054e:	ea41 010c 	orrle.w	r1, r1, ip
 8000552:	4090      	lslle	r0, r2
 8000554:	1ae4      	subs	r4, r4, r3
 8000556:	bfa2      	ittt	ge
 8000558:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800055c:	4329      	orrge	r1, r5
 800055e:	bd30      	popge	{r4, r5, pc}
 8000560:	ea6f 0404 	mvn.w	r4, r4
 8000564:	3c1f      	subs	r4, #31
 8000566:	da1c      	bge.n	80005a2 <__adddf3+0x1d2>
 8000568:	340c      	adds	r4, #12
 800056a:	dc0e      	bgt.n	800058a <__adddf3+0x1ba>
 800056c:	f104 0414 	add.w	r4, r4, #20
 8000570:	f1c4 0220 	rsb	r2, r4, #32
 8000574:	fa20 f004 	lsr.w	r0, r0, r4
 8000578:	fa01 f302 	lsl.w	r3, r1, r2
 800057c:	ea40 0003 	orr.w	r0, r0, r3
 8000580:	fa21 f304 	lsr.w	r3, r1, r4
 8000584:	ea45 0103 	orr.w	r1, r5, r3
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f1c4 040c 	rsb	r4, r4, #12
 800058e:	f1c4 0220 	rsb	r2, r4, #32
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 f304 	lsl.w	r3, r1, r4
 800059a:	ea40 0003 	orr.w	r0, r0, r3
 800059e:	4629      	mov	r1, r5
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	fa21 f004 	lsr.w	r0, r1, r4
 80005a6:	4629      	mov	r1, r5
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f094 0f00 	teq	r4, #0
 80005ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80005b2:	bf06      	itte	eq
 80005b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005b8:	3401      	addeq	r4, #1
 80005ba:	3d01      	subne	r5, #1
 80005bc:	e74e      	b.n	800045c <__adddf3+0x8c>
 80005be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005c2:	bf18      	it	ne
 80005c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c8:	d029      	beq.n	800061e <__adddf3+0x24e>
 80005ca:	ea94 0f05 	teq	r4, r5
 80005ce:	bf08      	it	eq
 80005d0:	ea90 0f02 	teqeq	r0, r2
 80005d4:	d005      	beq.n	80005e2 <__adddf3+0x212>
 80005d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005da:	bf04      	itt	eq
 80005dc:	4619      	moveq	r1, r3
 80005de:	4610      	moveq	r0, r2
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	ea91 0f03 	teq	r1, r3
 80005e6:	bf1e      	ittt	ne
 80005e8:	2100      	movne	r1, #0
 80005ea:	2000      	movne	r0, #0
 80005ec:	bd30      	popne	{r4, r5, pc}
 80005ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005f2:	d105      	bne.n	8000600 <__adddf3+0x230>
 80005f4:	0040      	lsls	r0, r0, #1
 80005f6:	4149      	adcs	r1, r1
 80005f8:	bf28      	it	cs
 80005fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005fe:	bd30      	pop	{r4, r5, pc}
 8000600:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000604:	bf3c      	itt	cc
 8000606:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800060a:	bd30      	popcc	{r4, r5, pc}
 800060c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000610:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000614:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	bd30      	pop	{r4, r5, pc}
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf1a      	itte	ne
 8000624:	4619      	movne	r1, r3
 8000626:	4610      	movne	r0, r2
 8000628:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800062c:	bf1c      	itt	ne
 800062e:	460b      	movne	r3, r1
 8000630:	4602      	movne	r2, r0
 8000632:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000636:	bf06      	itte	eq
 8000638:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800063c:	ea91 0f03 	teqeq	r1, r3
 8000640:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000644:	bd30      	pop	{r4, r5, pc}
 8000646:	bf00      	nop

08000648 <__aeabi_ui2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f04f 0500 	mov.w	r5, #0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e750      	b.n	8000508 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_i2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800067c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000680:	bf48      	it	mi
 8000682:	4240      	negmi	r0, r0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	e73e      	b.n	8000508 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_f2d>:
 800068c:	0042      	lsls	r2, r0, #1
 800068e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000692:	ea4f 0131 	mov.w	r1, r1, rrx
 8000696:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800069a:	bf1f      	itttt	ne
 800069c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80006a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80006a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80006a8:	4770      	bxne	lr
 80006aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80006ae:	bf08      	it	eq
 80006b0:	4770      	bxeq	lr
 80006b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006b6:	bf04      	itt	eq
 80006b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006bc:	4770      	bxeq	lr
 80006be:	b530      	push	{r4, r5, lr}
 80006c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	e71c      	b.n	8000508 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_ul2d>:
 80006d0:	ea50 0201 	orrs.w	r2, r0, r1
 80006d4:	bf08      	it	eq
 80006d6:	4770      	bxeq	lr
 80006d8:	b530      	push	{r4, r5, lr}
 80006da:	f04f 0500 	mov.w	r5, #0
 80006de:	e00a      	b.n	80006f6 <__aeabi_l2d+0x16>

080006e0 <__aeabi_l2d>:
 80006e0:	ea50 0201 	orrs.w	r2, r0, r1
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	b530      	push	{r4, r5, lr}
 80006ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ee:	d502      	bpl.n	80006f6 <__aeabi_l2d+0x16>
 80006f0:	4240      	negs	r0, r0
 80006f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000702:	f43f aed8 	beq.w	80004b6 <__adddf3+0xe6>
 8000706:	f04f 0203 	mov.w	r2, #3
 800070a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070e:	bf18      	it	ne
 8000710:	3203      	addne	r2, #3
 8000712:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000716:	bf18      	it	ne
 8000718:	3203      	addne	r2, #3
 800071a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071e:	f1c2 0320 	rsb	r3, r2, #32
 8000722:	fa00 fc03 	lsl.w	ip, r0, r3
 8000726:	fa20 f002 	lsr.w	r0, r0, r2
 800072a:	fa01 fe03 	lsl.w	lr, r1, r3
 800072e:	ea40 000e 	orr.w	r0, r0, lr
 8000732:	fa21 f102 	lsr.w	r1, r1, r2
 8000736:	4414      	add	r4, r2
 8000738:	e6bd      	b.n	80004b6 <__adddf3+0xe6>
 800073a:	bf00      	nop

0800073c <__aeabi_d2uiz>:
 800073c:	004a      	lsls	r2, r1, #1
 800073e:	d211      	bcs.n	8000764 <__aeabi_d2uiz+0x28>
 8000740:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000744:	d211      	bcs.n	800076a <__aeabi_d2uiz+0x2e>
 8000746:	d50d      	bpl.n	8000764 <__aeabi_d2uiz+0x28>
 8000748:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800074c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000750:	d40e      	bmi.n	8000770 <__aeabi_d2uiz+0x34>
 8000752:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000756:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800075a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800075e:	fa23 f002 	lsr.w	r0, r3, r2
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800076e:	d102      	bne.n	8000776 <__aeabi_d2uiz+0x3a>
 8000770:	f04f 30ff 	mov.w	r0, #4294967295
 8000774:	4770      	bx	lr
 8000776:	f04f 0000 	mov.w	r0, #0
 800077a:	4770      	bx	lr

0800077c <pwm_stop>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void pwm_stop(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, IN_U);
 8000780:	2100      	movs	r1, #0
 8000782:	4806      	ldr	r0, [pc, #24]	@ (800079c <pwm_stop+0x20>)
 8000784:	f003 fb24 	bl	8003dd0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, IN_V);
 8000788:	2104      	movs	r1, #4
 800078a:	4804      	ldr	r0, [pc, #16]	@ (800079c <pwm_stop+0x20>)
 800078c:	f003 fb20 	bl	8003dd0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, IN_W);
 8000790:	2108      	movs	r1, #8
 8000792:	4802      	ldr	r0, [pc, #8]	@ (800079c <pwm_stop+0x20>)
 8000794:	f003 fb1c 	bl	8003dd0 <HAL_TIM_PWM_Stop>
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	200000c4 	.word	0x200000c4

080007a0 <pwm_init>:

void pwm_init(void){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <pwm_init+0x38>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80007ac:	4b0a      	ldr	r3, [pc, #40]	@ (80007d8 <pwm_init+0x38>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2200      	movs	r2, #0
 80007b2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80007b4:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <pwm_init+0x38>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	2200      	movs	r2, #0
 80007ba:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3, IN_U);
 80007bc:	2100      	movs	r1, #0
 80007be:	4806      	ldr	r0, [pc, #24]	@ (80007d8 <pwm_init+0x38>)
 80007c0:	f003 fa64 	bl	8003c8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,IN_V);
 80007c4:	2104      	movs	r1, #4
 80007c6:	4804      	ldr	r0, [pc, #16]	@ (80007d8 <pwm_init+0x38>)
 80007c8:	f003 fa60 	bl	8003c8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, IN_W);
 80007cc:	2108      	movs	r1, #8
 80007ce:	4802      	ldr	r0, [pc, #8]	@ (80007d8 <pwm_init+0x38>)
 80007d0:	f003 fa5c 	bl	8003c8c <HAL_TIM_PWM_Start>
	return;
 80007d4:	bf00      	nop
}
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000c4 	.word	0x200000c4

080007dc <alignment>:

void alignment(void){
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
	aligned_flag = false;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <alignment+0x70>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
	state_machine = ALIGNING;
 80007e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <alignment+0x74>)
 80007e8:	2204      	movs	r2, #4
 80007ea:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 80007ec:	4819      	ldr	r0, [pc, #100]	@ (8000854 <alignment+0x78>)
 80007ee:	f002 ffcd 	bl	800378c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4817      	ldr	r0, [pc, #92]	@ (8000854 <alignment+0x78>)
 80007f6:	f003 f93f 	bl	8003a78 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim4);
 80007fa:	4816      	ldr	r0, [pc, #88]	@ (8000854 <alignment+0x78>)
 80007fc:	f002 ff4d 	bl	800369a <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000800:	4b14      	ldr	r3, [pc, #80]	@ (8000854 <alignment+0x78>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	2200      	movs	r2, #0
 8000806:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ALIGN_TIME);
 8000808:	4b12      	ldr	r3, [pc, #72]	@ (8000854 <alignment+0x78>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
	pwm_init();
 8000812:	f7ff ffc5 	bl	80007a0 <pwm_init>

	commutation(POS_UV, DC_ALIGN);
 8000816:	f240 61a4 	movw	r1, #1700	@ 0x6a4
 800081a:	2000      	movs	r0, #0
 800081c:	f000 faa4 	bl	8000d68 <commutation>
	HAL_TIM_Base_Start_IT(&htim4);
 8000820:	480c      	ldr	r0, [pc, #48]	@ (8000854 <alignment+0x78>)
 8000822:	f002 ff61 	bl	80036e8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000826:	2100      	movs	r1, #0
 8000828:	480a      	ldr	r0, [pc, #40]	@ (8000854 <alignment+0x78>)
 800082a:	f003 f835 	bl	8003898 <HAL_TIM_OC_Start_IT>
	while(!aligned_flag);
 800082e:	bf00      	nop
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <alignment+0x70>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	f083 0301 	eor.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f8      	bne.n	8000830 <alignment+0x54>
	state_machine = READY;
 800083e:	4b04      	ldr	r3, [pc, #16]	@ (8000850 <alignment+0x74>)
 8000840:	2205      	movs	r2, #5
 8000842:	701a      	strb	r2, [r3, #0]
	pwm_stop();
 8000844:	f7ff ff9a 	bl	800077c <pwm_stop>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000292 	.word	0x20000292
 8000850:	2000027d 	.word	0x2000027d
 8000854:	2000007c 	.word	0x2000007c

08000858 <startup>:

void startup(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
	alignment();
 800085e:	f7ff ffbd 	bl	80007dc <alignment>
	state_machine =  STARTUP;
 8000862:	4b43      	ldr	r3, [pc, #268]	@ (8000970 <startup+0x118>)
 8000864:	2202      	movs	r2, #2
 8000866:	701a      	strb	r2, [r3, #0]
	bool  localFlag = false;
 8000868:	2300      	movs	r3, #0
 800086a:	71fb      	strb	r3, [r7, #7]
	pwmVal = DC_STARTUP_INIT;
 800086c:	4b41      	ldr	r3, [pc, #260]	@ (8000974 <startup+0x11c>)
 800086e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000872:	801a      	strh	r2, [r3, #0]
	commutationStep = POS_UV;
 8000874:	4b40      	ldr	r3, [pc, #256]	@ (8000978 <startup+0x120>)
 8000876:	2200      	movs	r2, #0
 8000878:	701a      	strb	r2, [r3, #0]
	commutationTime = TIME_STARTUP_COMMUTATION_INIT;
 800087a:	4b40      	ldr	r3, [pc, #256]	@ (800097c <startup+0x124>)
 800087c:	2278      	movs	r2, #120	@ 0x78
 800087e:	801a      	strh	r2, [r3, #0]
	uint16_t duration = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	80bb      	strh	r3, [r7, #4]
	pwm_init();
 8000884:	f7ff ff8c 	bl	80007a0 <pwm_init>
	while(!localFlag){
 8000888:	e04c      	b.n	8000924 <startup+0xcc>
		//__HAL_TIM_SET_COUNTER(&htim4, 0);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, time);
		HAL_Delay(commutationTime);
 800088a:	4b3c      	ldr	r3, [pc, #240]	@ (800097c <startup+0x124>)
 800088c:	881b      	ldrh	r3, [r3, #0]
 800088e:	b29b      	uxth	r3, r3
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fadf 	bl	8001e54 <HAL_Delay>
		commutation(commutationStep, pwmVal);
 8000896:	4b38      	ldr	r3, [pc, #224]	@ (8000978 <startup+0x120>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	4a35      	ldr	r2, [pc, #212]	@ (8000974 <startup+0x11c>)
 800089e:	8812      	ldrh	r2, [r2, #0]
 80008a0:	b292      	uxth	r2, r2
 80008a2:	4611      	mov	r1, r2
 80008a4:	4618      	mov	r0, r3
 80008a6:	f000 fa5f 	bl	8000d68 <commutation>
		//HAL_TIM_Base_Start_IT(&htim4);
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		//while(!startup_flag);

		commutationStep = (commutationStep + 1) % NUM_POS;
 80008aa:	4b33      	ldr	r3, [pc, #204]	@ (8000978 <startup+0x120>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	1c5a      	adds	r2, r3, #1
 80008b2:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <startup+0x128>)
 80008b4:	fb83 3102 	smull	r3, r1, r3, r2
 80008b8:	17d3      	asrs	r3, r2, #31
 80008ba:	1ac9      	subs	r1, r1, r3
 80008bc:	460b      	mov	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	440b      	add	r3, r1
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	1ad1      	subs	r1, r2, r3
 80008c6:	b2ca      	uxtb	r2, r1
 80008c8:	4b2b      	ldr	r3, [pc, #172]	@ (8000978 <startup+0x120>)
 80008ca:	701a      	strb	r2, [r3, #0]
		(pwmVal < DC_STARTUP_END) ? pwmVal += DC_STARTUP_STEP : pwmVal;
 80008cc:	4b29      	ldr	r3, [pc, #164]	@ (8000974 <startup+0x11c>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	b29b      	uxth	r3, r3
 80008d2:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d807      	bhi.n	80008ea <startup+0x92>
 80008da:	4b26      	ldr	r3, [pc, #152]	@ (8000974 <startup+0x11c>)
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	b29b      	uxth	r3, r3
 80008e0:	330a      	adds	r3, #10
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	4b23      	ldr	r3, [pc, #140]	@ (8000974 <startup+0x11c>)
 80008e6:	801a      	strh	r2, [r3, #0]
 80008e8:	e001      	b.n	80008ee <startup+0x96>
 80008ea:	4b22      	ldr	r3, [pc, #136]	@ (8000974 <startup+0x11c>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
	    if (commutationTime > TIME_STARTUP_COMMUTATION_FINAL) {
 80008ee:	4b23      	ldr	r3, [pc, #140]	@ (800097c <startup+0x124>)
 80008f0:	881b      	ldrh	r3, [r3, #0]
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	2b08      	cmp	r3, #8
 80008f6:	d907      	bls.n	8000908 <startup+0xb0>
	    	commutationTime -= TIME_STARTUP_STEP;
 80008f8:	4b20      	ldr	r3, [pc, #128]	@ (800097c <startup+0x124>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	3b02      	subs	r3, #2
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b1e      	ldr	r3, [pc, #120]	@ (800097c <startup+0x124>)
 8000904:	801a      	strh	r2, [r3, #0]
 8000906:	e00d      	b.n	8000924 <startup+0xcc>
	    } else if (duration < 500){
 8000908:	88bb      	ldrh	r3, [r7, #4]
 800090a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800090e:	d203      	bcs.n	8000918 <startup+0xc0>
	        duration++;
 8000910:	88bb      	ldrh	r3, [r7, #4]
 8000912:	3301      	adds	r3, #1
 8000914:	80bb      	strh	r3, [r7, #4]
 8000916:	e005      	b.n	8000924 <startup+0xcc>

	    }
	    else {

			localFlag = true;
 8000918:	2301      	movs	r3, #1
 800091a:	71fb      	strb	r3, [r7, #7]
			__HAL_TIM_SET_COUNTER(&htim4, 0);
 800091c:	4b19      	ldr	r3, [pc, #100]	@ (8000984 <startup+0x12c>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2200      	movs	r2, #0
 8000922:	625a      	str	r2, [r3, #36]	@ 0x24
	while(!localFlag){
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	f083 0301 	eor.w	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d1ac      	bne.n	800088a <startup+0x32>
//		startup_flag = false;


	}
	//commutationTime*=10;
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1); // Detiene canal 1
 8000930:	2100      	movs	r1, #0
 8000932:	4814      	ldr	r0, [pc, #80]	@ (8000984 <startup+0x12c>)
 8000934:	f003 f8a0 	bl	8003a78 <HAL_TIM_OC_Stop_IT>
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, commutationTime); // Configura canal 2
	HAL_TIMEx_HallSensor_Start_IT(&htim2);
 8000938:	4813      	ldr	r0, [pc, #76]	@ (8000988 <startup+0x130>)
 800093a:	f004 fa73 	bl	8004e24 <HAL_TIMEx_HallSensor_Start_IT>
	reference_zcp = 0;
 800093e:	4b13      	ldr	r3, [pc, #76]	@ (800098c <startup+0x134>)
 8000940:	2200      	movs	r2, #0
 8000942:	801a      	strh	r2, [r3, #0]
	startup_ok = true;
 8000944:	4b12      	ldr	r3, [pc, #72]	@ (8000990 <startup+0x138>)
 8000946:	2201      	movs	r2, #1
 8000948:	701a      	strb	r2, [r3, #0]
	TIM4->ARR = 0xFFFF;
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <startup+0x13c>)
 800094c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000950:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 4;
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <startup+0x13c>)
 8000954:	2204      	movs	r2, #4
 8000956:	629a      	str	r2, [r3, #40]	@ 0x28
	//HAL_ADC_Start_IT(&hadc1);
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 8000958:	2104      	movs	r1, #4
 800095a:	480a      	ldr	r0, [pc, #40]	@ (8000984 <startup+0x12c>)
 800095c:	f002 ff9c 	bl	8003898 <HAL_TIM_OC_Start_IT>
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000960:	4b08      	ldr	r3, [pc, #32]	@ (8000984 <startup+0x12c>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2200      	movs	r2, #0
 8000966:	625a      	str	r2, [r3, #36]	@ 0x24


	// Inicia el canal 2 en modo Output Compare


}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	2000027d 	.word	0x2000027d
 8000974:	20000280 	.word	0x20000280
 8000978:	20000282 	.word	0x20000282
 800097c:	20000284 	.word	0x20000284
 8000980:	2aaaaaab 	.word	0x2aaaaaab
 8000984:	2000007c 	.word	0x2000007c
 8000988:	200001cc 	.word	0x200001cc
 800098c:	20000288 	.word	0x20000288
 8000990:	20000294 	.word	0x20000294
 8000994:	40000800 	.word	0x40000800

08000998 <ledON>:


void ledON(){
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0

	eventFlag = true;
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <ledON+0x20>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 19999);
 80009a2:	4b06      	ldr	r3, [pc, #24]	@ (80009bc <ledON+0x24>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4803      	ldr	r0, [pc, #12]	@ (80009bc <ledON+0x24>)
 80009b0:	f002 ff72 	bl	8003898 <HAL_TIM_OC_Start_IT>


}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000027e 	.word	0x2000027e
 80009bc:	2000007c 	.word	0x2000007c

080009c0 <processCommand>:
void processCommand(char *input) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    for (int i = 0; commandTable[i].command != NULL; i++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	e019      	b.n	8000a02 <processCommand+0x42>
        if (strcmp(input, commandTable[i].command) == 0) {  // Compara el comando recibido
 80009ce:	4a17      	ldr	r2, [pc, #92]	@ (8000a2c <processCommand+0x6c>)
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009d6:	4619      	mov	r1, r3
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f7ff fbb7 	bl	800014c <strcmp>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d10b      	bne.n	80009fc <processCommand+0x3c>
            eventFlag = true;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <processCommand+0x70>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	701a      	strb	r2, [r3, #0]
        	commandTable[i].execute();  // Ejecuta la función asociada
 80009ea:	4a10      	ldr	r2, [pc, #64]	@ (8000a2c <processCommand+0x6c>)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	00db      	lsls	r3, r3, #3
 80009f0:	4413      	add	r3, r2
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4798      	blx	r3
            clearRxBuffer();  // Limpia el buffer acumulador
 80009f6:	f000 f823 	bl	8000a40 <clearRxBuffer>

            return;
 80009fa:	e014      	b.n	8000a26 <processCommand+0x66>
    for (int i = 0; commandTable[i].command != NULL; i++) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <processCommand+0x6c>)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d1df      	bne.n	80009ce <processCommand+0xe>
        }
    }
    // Si no se encuentra el comando
    HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Command\r\n", 17, 3);
 8000a0e:	2303      	movs	r3, #3
 8000a10:	2211      	movs	r2, #17
 8000a12:	4908      	ldr	r1, [pc, #32]	@ (8000a34 <processCommand+0x74>)
 8000a14:	4808      	ldr	r0, [pc, #32]	@ (8000a38 <processCommand+0x78>)
 8000a16:	f004 fb90 	bl	800513a <HAL_UART_Transmit>
    clearRxBuffer();
 8000a1a:	f000 f811 	bl	8000a40 <clearRxBuffer>
    state_machine = IDLE;
 8000a1e:	4b07      	ldr	r3, [pc, #28]	@ (8000a3c <processCommand+0x7c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
    return;// Limpia el buffer acumulador
 8000a24:	bf00      	nop

}
 8000a26:	3710      	adds	r7, #16
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000004 	.word	0x20000004
 8000a30:	2000027e 	.word	0x2000027e
 8000a34:	08005df8 	.word	0x08005df8
 8000a38:	2000010c 	.word	0x2000010c
 8000a3c:	2000027d 	.word	0x2000027d

08000a40 <clearRxBuffer>:


void clearRxBuffer(void) {
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, BUFFER_SIZE);  // Establece todos los elementos a 0
 8000a44:	2220      	movs	r2, #32
 8000a46:	2100      	movs	r1, #0
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <clearRxBuffer+0x18>)
 8000a4a:	f005 f991 	bl	8005d70 <memset>
    rx_index = 0;                          // Reinicia el índice del buffer
 8000a4e:	4b03      	ldr	r3, [pc, #12]	@ (8000a5c <clearRxBuffer+0x1c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	701a      	strb	r2, [r3, #0]
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	2000025c 	.word	0x2000025c
 8000a5c:	2000027c 	.word	0x2000027c

08000a60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verifica el UART correcto
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a35      	ldr	r2, [pc, #212]	@ (8000b44 <HAL_UART_RxCpltCallback+0xe4>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d164      	bne.n	8000b3c <HAL_UART_RxCpltCallback+0xdc>
        if (rx_data[0] == '\r') {  // Detecta el carácter de fin de línea
 8000a72:	4b35      	ldr	r3, [pc, #212]	@ (8000b48 <HAL_UART_RxCpltCallback+0xe8>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b0d      	cmp	r3, #13
 8000a78:	d123      	bne.n	8000ac2 <HAL_UART_RxCpltCallback+0x62>
            rx_buffer[rx_index] = '\0';  // Finaliza la cadena con terminador nulo
 8000a7a:	4b34      	ldr	r3, [pc, #208]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	4b33      	ldr	r3, [pc, #204]	@ (8000b50 <HAL_UART_RxCpltCallback+0xf0>)
 8000a82:	2100      	movs	r1, #0
 8000a84:	5499      	strb	r1, [r3, r2]
            rx_index = 0;  // Reinicia el índice para el próximo mensaje
 8000a86:	4b31      	ldr	r3, [pc, #196]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

            // Procesa el mensaje completo
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nReceived: ", 12, 3);
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	220c      	movs	r2, #12
 8000a90:	4930      	ldr	r1, [pc, #192]	@ (8000b54 <HAL_UART_RxCpltCallback+0xf4>)
 8000a92:	4831      	ldr	r0, [pc, #196]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000a94:	f004 fb51 	bl	800513a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, rx_buffer	, strlen((char *)rx_buffer), 3);
 8000a98:	482d      	ldr	r0, [pc, #180]	@ (8000b50 <HAL_UART_RxCpltCallback+0xf0>)
 8000a9a:	f7ff fb61 	bl	8000160 <strlen>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	492a      	ldr	r1, [pc, #168]	@ (8000b50 <HAL_UART_RxCpltCallback+0xf0>)
 8000aa6:	482c      	ldr	r0, [pc, #176]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000aa8:	f004 fb47 	bl	800513a <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	492a      	ldr	r1, [pc, #168]	@ (8000b5c <HAL_UART_RxCpltCallback+0xfc>)
 8000ab4:	4828      	ldr	r0, [pc, #160]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000ab6:	f004 fb40 	bl	800513a <HAL_UART_Transmit>
            state_machine = PROCESS_COMMAND;
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <HAL_UART_RxCpltCallback+0x100>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e037      	b.n	8000b32 <HAL_UART_RxCpltCallback+0xd2>
        } else if (rx_data[0] == '\b' || rx_data[0] == '\177') {  // Detecta Backspace
 8000ac2:	4b21      	ldr	r3, [pc, #132]	@ (8000b48 <HAL_UART_RxCpltCallback+0xe8>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b08      	cmp	r3, #8
 8000ac8:	d003      	beq.n	8000ad2 <HAL_UART_RxCpltCallback+0x72>
 8000aca:	4b1f      	ldr	r3, [pc, #124]	@ (8000b48 <HAL_UART_RxCpltCallback+0xe8>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ad0:	d110      	bne.n	8000af4 <HAL_UART_RxCpltCallback+0x94>
            if (rx_index > 0) {  // Si hay algo en el buffer
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d02b      	beq.n	8000b32 <HAL_UART_RxCpltCallback+0xd2>
                rx_index--;  // Retrocede el índice
 8000ada:	4b1c      	ldr	r3, [pc, #112]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000adc:	781b      	ldrb	r3, [r3, #0]
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b2da      	uxtb	r2, r3
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000ae4:	701a      	strb	r2, [r3, #0]
                // Simula el borrado en el terminal
                HAL_UART_Transmit(&huart2, (uint8_t *)"\b \b", 3, 3);
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	2203      	movs	r2, #3
 8000aea:	491e      	ldr	r1, [pc, #120]	@ (8000b64 <HAL_UART_RxCpltCallback+0x104>)
 8000aec:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000aee:	f004 fb24 	bl	800513a <HAL_UART_Transmit>
            if (rx_index > 0) {  // Si hay algo en el buffer
 8000af2:	e01e      	b.n	8000b32 <HAL_UART_RxCpltCallback+0xd2>
            }
        } else {  // Cualquier otro carácter
            rx_buffer[rx_index++] = rx_data[0];  // Almacena el carácter en el buffer
 8000af4:	4b15      	ldr	r3, [pc, #84]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	1c5a      	adds	r2, r3, #1
 8000afa:	b2d1      	uxtb	r1, r2
 8000afc:	4a13      	ldr	r2, [pc, #76]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000afe:	7011      	strb	r1, [r2, #0]
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b11      	ldr	r3, [pc, #68]	@ (8000b48 <HAL_UART_RxCpltCallback+0xe8>)
 8000b04:	7819      	ldrb	r1, [r3, #0]
 8000b06:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_UART_RxCpltCallback+0xf0>)
 8000b08:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);  // Eco del carácter recibido
 8000b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0e:	2201      	movs	r2, #1
 8000b10:	490d      	ldr	r1, [pc, #52]	@ (8000b48 <HAL_UART_RxCpltCallback+0xe8>)
 8000b12:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000b14:	f004 fb11 	bl	800513a <HAL_UART_Transmit>

            // Evita desbordamientos
            if (rx_index >= BUFFER_SIZE) {
 8000b18:	4b0c      	ldr	r3, [pc, #48]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b1f      	cmp	r3, #31
 8000b1e:	d908      	bls.n	8000b32 <HAL_UART_RxCpltCallback+0xd2>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nBuffer Overflow\r\n", 19, 3);
 8000b20:	2303      	movs	r3, #3
 8000b22:	2213      	movs	r2, #19
 8000b24:	4910      	ldr	r1, [pc, #64]	@ (8000b68 <HAL_UART_RxCpltCallback+0x108>)
 8000b26:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000b28:	f004 fb07 	bl	800513a <HAL_UART_Transmit>
                rx_index = 0;  // Reinicia el índice en caso de desbordamiento
 8000b2c:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <HAL_UART_RxCpltCallback+0xec>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
            }
        }

        // Reinicia la recepción para el siguiente byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000b32:	2201      	movs	r2, #1
 8000b34:	4904      	ldr	r1, [pc, #16]	@ (8000b48 <HAL_UART_RxCpltCallback+0xe8>)
 8000b36:	4808      	ldr	r0, [pc, #32]	@ (8000b58 <HAL_UART_RxCpltCallback+0xf8>)
 8000b38:	f004 fb8a 	bl	8005250 <HAL_UART_Receive_IT>
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40004400 	.word	0x40004400
 8000b48:	20000258 	.word	0x20000258
 8000b4c:	2000027c 	.word	0x2000027c
 8000b50:	2000025c 	.word	0x2000025c
 8000b54:	08005e0c 	.word	0x08005e0c
 8000b58:	2000010c 	.word	0x2000010c
 8000b5c:	08005e1c 	.word	0x08005e1c
 8000b60:	2000027d 	.word	0x2000027d
 8000b64:	08005e20 	.word	0x08005e20
 8000b68:	08005e24 	.word	0x08005e24

08000b6c <handleState>:
state handleState(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
	switch(state_machine){
 8000b70:	4b39      	ldr	r3, [pc, #228]	@ (8000c58 <handleState+0xec>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d868      	bhi.n	8000c4c <handleState+0xe0>
 8000b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8000b80 <handleState+0x14>)
 8000b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b80:	08000b9d 	.word	0x08000b9d
 8000b84:	08000bbd 	.word	0x08000bbd
 8000b88:	08000bd5 	.word	0x08000bd5
 8000b8c:	08000bfd 	.word	0x08000bfd
 8000b90:	08000be7 	.word	0x08000be7
 8000b94:	08000c0f 	.word	0x08000c0f
 8000b98:	08000c2f 	.word	0x08000c2f
	case IDLE:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <handleState+0xf0>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	f003 0320 	and.w	r3, r3, #32
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d14d      	bne.n	8000c46 <handleState+0xda>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000baa:	4b2c      	ldr	r3, [pc, #176]	@ (8000c5c <handleState+0xf0>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	68da      	ldr	r2, [r3, #12]
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <handleState+0xf0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0220 	orr.w	r2, r2, #32
 8000bb8:	60da      	str	r2, [r3, #12]
		}
		break;
 8000bba:	e044      	b.n	8000c46 <handleState+0xda>

	case PROCESS_COMMAND:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <handleState+0xf0>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	68da      	ldr	r2, [r3, #12]
 8000bc2:	4b26      	ldr	r3, [pc, #152]	@ (8000c5c <handleState+0xf0>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f022 0220 	bic.w	r2, r2, #32
 8000bca:	60da      	str	r2, [r3, #12]
		processCommand((char*) rx_buffer);
 8000bcc:	4824      	ldr	r0, [pc, #144]	@ (8000c60 <handleState+0xf4>)
 8000bce:	f7ff fef7 	bl	80009c0 <processCommand>
		break;
 8000bd2:	e03b      	b.n	8000c4c <handleState+0xe0>

	case STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000bd4:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <handleState+0xf0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	68da      	ldr	r2, [r3, #12]
 8000bda:	4b20      	ldr	r3, [pc, #128]	@ (8000c5c <handleState+0xf0>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f022 0220 	bic.w	r2, r2, #32
 8000be2:	60da      	str	r2, [r3, #12]
		//startup();
		break;
 8000be4:	e032      	b.n	8000c4c <handleState+0xe0>
	case ALIGNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000be6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c5c <handleState+0xf0>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	4b1b      	ldr	r3, [pc, #108]	@ (8000c5c <handleState+0xf0>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0220 	bic.w	r2, r2, #32
 8000bf4:	60da      	str	r2, [r3, #12]
		alignment();
 8000bf6:	f7ff fdf1 	bl	80007dc <alignment>
		break;
 8000bfa:	e027      	b.n	8000c4c <handleState+0xe0>
	case RUNNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8000bfc:	4b17      	ldr	r3, [pc, #92]	@ (8000c5c <handleState+0xf0>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	4b16      	ldr	r3, [pc, #88]	@ (8000c5c <handleState+0xf0>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f022 0220 	bic.w	r2, r2, #32
 8000c0a:	60da      	str	r2, [r3, #12]
		break;
 8000c0c:	e01e      	b.n	8000c4c <handleState+0xe0>

	case READY:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8000c0e:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <handleState+0xf0>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	f003 0320 	and.w	r3, r3, #32
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d116      	bne.n	8000c4a <handleState+0xde>
					__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c5c <handleState+0xf0>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	68da      	ldr	r2, [r3, #12]
 8000c22:	4b0e      	ldr	r3, [pc, #56]	@ (8000c5c <handleState+0xf0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f042 0220 	orr.w	r2, r2, #32
 8000c2a:	60da      	str	r2, [r3, #12]
				}
		break;
 8000c2c:	e00d      	b.n	8000c4a <handleState+0xde>
	case FINISH:
		// Asegúrate de que las interrupciones de UART estén habilitadas al finalizar
		//timerCounter = 0; // Reinicia el contador
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <handleState+0xf0>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	4b09      	ldr	r3, [pc, #36]	@ (8000c5c <handleState+0xf0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f042 0220 	orr.w	r2, r2, #32
 8000c3c:	60da      	str	r2, [r3, #12]
		state_machine = IDLE; // Vuelve al estado IDLE
 8000c3e:	4b06      	ldr	r3, [pc, #24]	@ (8000c58 <handleState+0xec>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]

		break;
 8000c44:	e002      	b.n	8000c4c <handleState+0xe0>
		break;
 8000c46:	bf00      	nop
 8000c48:	e000      	b.n	8000c4c <handleState+0xe0>
		break;
 8000c4a:	bf00      	nop


}
	return (state_machine);
 8000c4c:	4b02      	ldr	r3, [pc, #8]	@ (8000c58 <handleState+0xec>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000027d 	.word	0x2000027d
 8000c5c:	2000010c 	.word	0x2000010c
 8000c60:	2000025c 	.word	0x2000025c

08000c64 <HAL_TIM_IC_CaptureCallback>:
TIM4->CCR2 = realCommutTime;
__enable_irq();
*/


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000c64:	b5b0      	push	{r4, r5, r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c74:	d160      	bne.n	8000d38 <HAL_TIM_IC_CaptureCallback+0xd4>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000c76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c7a:	4831      	ldr	r0, [pc, #196]	@ (8000d40 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000c7c:	f001 ffde 	bl	8002c3c <HAL_GPIO_TogglePin>
		//reference_zcp++;
		zcp_period_next = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000c80:	2100      	movs	r1, #0
 8000c82:	4830      	ldr	r0, [pc, #192]	@ (8000d44 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000c84:	f003 fc20 	bl	80044c8 <HAL_TIM_ReadCapturedValue>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000c8e:	801a      	strh	r2, [r3, #0]

		zcp_period_flt = zcp_period*0.5 + zcp_period_next*0.5;
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff fce6 	bl	8000668 <__aeabi_i2d>
 8000c9c:	f04f 0200 	mov.w	r2, #0
 8000ca0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000ca2:	f7ff fa65 	bl	8000170 <__aeabi_dmul>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4614      	mov	r4, r2
 8000cac:	461d      	mov	r5, r3
 8000cae:	4b26      	ldr	r3, [pc, #152]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fcd7 	bl	8000668 <__aeabi_i2d>
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	4b24      	ldr	r3, [pc, #144]	@ (8000d50 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000cc0:	f7ff fa56 	bl	8000170 <__aeabi_dmul>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	f7ff fb80 	bl	80003d0 <__adddf3>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f7ff fd30 	bl	800073c <__aeabi_d2uiz>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	b29a      	uxth	r2, r3
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000ce2:	801a      	strh	r2, [r3, #0]
		halfCommutTime = COEF_ADVC_ANGLE * zcp_period_flt;
 8000ce4:	4b1b      	ldr	r3, [pc, #108]	@ (8000d54 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fcbc 	bl	8000668 <__aeabi_i2d>
 8000cf0:	f04f 0200 	mov.w	r2, #0
 8000cf4:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000cf6:	f7ff fa3b 	bl	8000170 <__aeabi_dmul>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f7ff fd1b 	bl	800073c <__aeabi_d2uiz>
 8000d06:	4603      	mov	r3, r0
 8000d08:	b29a      	uxth	r2, r3
 8000d0a:	4b14      	ldr	r3, [pc, #80]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000d0c:	801a      	strh	r2, [r3, #0]
		zcp_period = zcp_period_next;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000d10:	881b      	ldrh	r3, [r3, #0]
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d16:	801a      	strh	r2, [r3, #0]
		nextCommutTime = zcp_period + halfCommutTime;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4413      	add	r3, r2
 8000d26:	b29a      	uxth	r2, r3
 8000d28:	4b0d      	ldr	r3, [pc, #52]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d2a:	801a      	strh	r2, [r3, #0]

		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, nextCommutTime);
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <HAL_TIM_IC_CaptureCallback+0xfc>)
 8000d2e:	881b      	ldrh	r3, [r3, #0]
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_TIM_IC_CaptureCallback+0x100>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	639a      	str	r2, [r3, #56]	@ 0x38

	}
}
 8000d38:	bf00      	nop
 8000d3a:	3708      	adds	r7, #8
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d40:	40011000 	.word	0x40011000
 8000d44:	200001cc 	.word	0x200001cc
 8000d48:	2000028a 	.word	0x2000028a
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	3fe00000 	.word	0x3fe00000
 8000d54:	2000028c 	.word	0x2000028c
 8000d58:	3fd80000 	.word	0x3fd80000
 8000d5c:	20000290 	.word	0x20000290
 8000d60:	2000028e 	.word	0x2000028e
 8000d64:	2000007c 	.word	0x2000007c

08000d68 <commutation>:

void commutation(uint8_t step, uint16_t pwm) {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	460a      	mov	r2, r1
 8000d72:	71fb      	strb	r3, [r7, #7]
 8000d74:	4613      	mov	r3, r2
 8000d76:	80bb      	strh	r3, [r7, #4]

    switch(step) {
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	f200 80e2 	bhi.w	8000f44 <commutation+0x1dc>
 8000d80:	a201      	add	r2, pc, #4	@ (adr r2, 8000d88 <commutation+0x20>)
 8000d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d86:	bf00      	nop
 8000d88:	08000da1 	.word	0x08000da1
 8000d8c:	08000de7 	.word	0x08000de7
 8000d90:	08000e2d 	.word	0x08000e2d
 8000d94:	08000e73 	.word	0x08000e73
 8000d98:	08000eb9 	.word	0x08000eb9
 8000d9c:	08000eff 	.word	0x08000eff

        case POS_UV:

            GPIOB->ODR |= EN_U;
 8000da0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f50 <commutation+0x1e8>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f50 <commutation+0x1e8>)
 8000da6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000daa:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR |= EN_V;  // Activar EN_U y EN_V
 8000dac:	4b68      	ldr	r3, [pc, #416]	@ (8000f50 <commutation+0x1e8>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	4a67      	ldr	r2, [pc, #412]	@ (8000f50 <commutation+0x1e8>)
 8000db2:	f043 0302 	orr.w	r3, r3, #2
 8000db6:	60d3      	str	r3, [r2, #12]

            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 8000db8:	4b66      	ldr	r3, [pc, #408]	@ (8000f54 <commutation+0x1ec>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	4a65      	ldr	r2, [pc, #404]	@ (8000f54 <commutation+0x1ec>)
 8000dbe:	f023 0320 	bic.w	r3, r3, #32
 8000dc2:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 8000dc4:	4b64      	ldr	r3, [pc, #400]	@ (8000f58 <commutation+0x1f0>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	88ba      	ldrh	r2, [r7, #4]
 8000dca:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8000dcc:	4b62      	ldr	r3, [pc, #392]	@ (8000f58 <commutation+0x1f0>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4860      	ldr	r0, [pc, #384]	@ (8000f58 <commutation+0x1f0>)
 8000dd8:	f002 ff58 	bl	8003c8c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_V);
 8000ddc:	2104      	movs	r1, #4
 8000dde:	485e      	ldr	r0, [pc, #376]	@ (8000f58 <commutation+0x1f0>)
 8000de0:	f002 ff54 	bl	8003c8c <HAL_TIM_PWM_Start>

            break;
 8000de4:	e0af      	b.n	8000f46 <commutation+0x1de>
        case POS_UW:

            GPIOB->ODR |= EN_U ; // Activar EN_U y EN_W
 8000de6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f50 <commutation+0x1e8>)
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	4a59      	ldr	r2, [pc, #356]	@ (8000f50 <commutation+0x1e8>)
 8000dec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000df0:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8000df2:	4b58      	ldr	r3, [pc, #352]	@ (8000f54 <commutation+0x1ec>)
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	4a57      	ldr	r2, [pc, #348]	@ (8000f54 <commutation+0x1ec>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 8000dfe:	4b54      	ldr	r3, [pc, #336]	@ (8000f50 <commutation+0x1e8>)
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	4a53      	ldr	r2, [pc, #332]	@ (8000f50 <commutation+0x1e8>)
 8000e04:	f023 0302 	bic.w	r3, r3, #2
 8000e08:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 8000e0a:	4b53      	ldr	r3, [pc, #332]	@ (8000f58 <commutation+0x1f0>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	88ba      	ldrh	r2, [r7, #4]
 8000e10:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000e12:	4b51      	ldr	r3, [pc, #324]	@ (8000f58 <commutation+0x1f0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2200      	movs	r2, #0
 8000e18:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	484e      	ldr	r0, [pc, #312]	@ (8000f58 <commutation+0x1f0>)
 8000e1e:	f002 ff35 	bl	8003c8c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8000e22:	2108      	movs	r1, #8
 8000e24:	484c      	ldr	r0, [pc, #304]	@ (8000f58 <commutation+0x1f0>)
 8000e26:	f002 ff31 	bl	8003c8c <HAL_TIM_PWM_Start>
            break;
 8000e2a:	e08c      	b.n	8000f46 <commutation+0x1de>
        case POS_VW:

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 8000e2c:	4b48      	ldr	r3, [pc, #288]	@ (8000f50 <commutation+0x1e8>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	4a47      	ldr	r2, [pc, #284]	@ (8000f50 <commutation+0x1e8>)
 8000e32:	f043 0302 	orr.w	r3, r3, #2
 8000e36:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8000e38:	4b46      	ldr	r3, [pc, #280]	@ (8000f54 <commutation+0x1ec>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	4a45      	ldr	r2, [pc, #276]	@ (8000f54 <commutation+0x1ec>)
 8000e3e:	f043 0320 	orr.w	r3, r3, #32
 8000e42:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 8000e44:	4b42      	ldr	r3, [pc, #264]	@ (8000f50 <commutation+0x1e8>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	4a41      	ldr	r2, [pc, #260]	@ (8000f50 <commutation+0x1e8>)
 8000e4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000e4e:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 8000e50:	4b41      	ldr	r3, [pc, #260]	@ (8000f58 <commutation+0x1f0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	88ba      	ldrh	r2, [r7, #4]
 8000e56:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000e58:	4b3f      	ldr	r3, [pc, #252]	@ (8000f58 <commutation+0x1f0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
            HAL_TIM_PWM_Start(&htim3, IN_V);
 8000e60:	2104      	movs	r1, #4
 8000e62:	483d      	ldr	r0, [pc, #244]	@ (8000f58 <commutation+0x1f0>)
 8000e64:	f002 ff12 	bl	8003c8c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8000e68:	2108      	movs	r1, #8
 8000e6a:	483b      	ldr	r0, [pc, #236]	@ (8000f58 <commutation+0x1f0>)
 8000e6c:	f002 ff0e 	bl	8003c8c <HAL_TIM_PWM_Start>
            break;
 8000e70:	e069      	b.n	8000f46 <commutation+0x1de>
        case POS_VU:

            GPIOB->ODR |= EN_U; // Activar EN_U y EN_V
 8000e72:	4b37      	ldr	r3, [pc, #220]	@ (8000f50 <commutation+0x1e8>)
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	4a36      	ldr	r2, [pc, #216]	@ (8000f50 <commutation+0x1e8>)
 8000e78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e7c:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR |=  EN_V;
 8000e7e:	4b34      	ldr	r3, [pc, #208]	@ (8000f50 <commutation+0x1e8>)
 8000e80:	68db      	ldr	r3, [r3, #12]
 8000e82:	4a33      	ldr	r2, [pc, #204]	@ (8000f50 <commutation+0x1e8>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 8000e8a:	4b32      	ldr	r3, [pc, #200]	@ (8000f54 <commutation+0x1ec>)
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	4a31      	ldr	r2, [pc, #196]	@ (8000f54 <commutation+0x1ec>)
 8000e90:	f023 0320 	bic.w	r3, r3, #32
 8000e94:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 8000e96:	4b30      	ldr	r3, [pc, #192]	@ (8000f58 <commutation+0x1f0>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	88ba      	ldrh	r2, [r7, #4]
 8000e9c:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000e9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f58 <commutation+0x1f0>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_TIM_PWM_Start(&htim3, IN_V);
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	482b      	ldr	r0, [pc, #172]	@ (8000f58 <commutation+0x1f0>)
 8000eaa:	f002 feef 	bl	8003c8c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4829      	ldr	r0, [pc, #164]	@ (8000f58 <commutation+0x1f0>)
 8000eb2:	f002 feeb 	bl	8003c8c <HAL_TIM_PWM_Start>

            break;
 8000eb6:	e046      	b.n	8000f46 <commutation+0x1de>
        case POS_WU:

            GPIOB->ODR |= EN_U; // Activar EN_U y EN_W
 8000eb8:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <commutation+0x1e8>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	4a24      	ldr	r2, [pc, #144]	@ (8000f50 <commutation+0x1e8>)
 8000ebe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ec2:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	@ (8000f54 <commutation+0x1ec>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	4a22      	ldr	r2, [pc, #136]	@ (8000f54 <commutation+0x1ec>)
 8000eca:	f043 0320 	orr.w	r3, r3, #32
 8000ece:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 8000ed0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f50 <commutation+0x1e8>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f50 <commutation+0x1e8>)
 8000ed6:	f023 0302 	bic.w	r3, r3, #2
 8000eda:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8000edc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f58 <commutation+0x1f0>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	88ba      	ldrh	r2, [r7, #4]
 8000ee2:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <commutation+0x1f0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8000eec:	2108      	movs	r1, #8
 8000eee:	481a      	ldr	r0, [pc, #104]	@ (8000f58 <commutation+0x1f0>)
 8000ef0:	f002 fecc 	bl	8003c8c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_U);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4818      	ldr	r0, [pc, #96]	@ (8000f58 <commutation+0x1f0>)
 8000ef8:	f002 fec8 	bl	8003c8c <HAL_TIM_PWM_Start>
            break;
 8000efc:	e023      	b.n	8000f46 <commutation+0x1de>
        case POS_WV:

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 8000efe:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <commutation+0x1e8>)
 8000f00:	68db      	ldr	r3, [r3, #12]
 8000f02:	4a13      	ldr	r2, [pc, #76]	@ (8000f50 <commutation+0x1e8>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 8000f0a:	4b12      	ldr	r3, [pc, #72]	@ (8000f54 <commutation+0x1ec>)
 8000f0c:	68db      	ldr	r3, [r3, #12]
 8000f0e:	4a11      	ldr	r2, [pc, #68]	@ (8000f54 <commutation+0x1ec>)
 8000f10:	f043 0320 	orr.w	r3, r3, #32
 8000f14:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <commutation+0x1e8>)
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f50 <commutation+0x1e8>)
 8000f1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000f20:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <commutation+0x1f0>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	88ba      	ldrh	r2, [r7, #4]
 8000f28:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <commutation+0x1f0>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	639a      	str	r2, [r3, #56]	@ 0x38
            HAL_TIM_PWM_Start(&htim3, IN_W);
 8000f32:	2108      	movs	r1, #8
 8000f34:	4808      	ldr	r0, [pc, #32]	@ (8000f58 <commutation+0x1f0>)
 8000f36:	f002 fea9 	bl	8003c8c <HAL_TIM_PWM_Start>
            HAL_TIM_PWM_Start(&htim3, IN_V);
 8000f3a:	2104      	movs	r1, #4
 8000f3c:	4806      	ldr	r0, [pc, #24]	@ (8000f58 <commutation+0x1f0>)
 8000f3e:	f002 fea5 	bl	8003c8c <HAL_TIM_PWM_Start>

            break;
 8000f42:	e000      	b.n	8000f46 <commutation+0x1de>
        default:
            break;
 8000f44:	bf00      	nop
    }
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	40010800 	.word	0x40010800
 8000f58:	200000c4 	.word	0x200000c4

08000f5c <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a62      	ldr	r2, [pc, #392]	@ (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d17b      	bne.n	8001066 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	7f1b      	ldrb	r3, [r3, #28]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d177      	bne.n	8001066 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
	    //TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
		__HAL_TIM_DISABLE(&htim4);
 8000f76:	4b60      	ldr	r3, [pc, #384]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	6a1a      	ldr	r2, [r3, #32]
 8000f7c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8000f80:	4013      	ands	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10f      	bne.n	8000fa6 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 8000f86:	4b5c      	ldr	r3, [pc, #368]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	6a1a      	ldr	r2, [r3, #32]
 8000f8c:	f240 4344 	movw	r3, #1092	@ 0x444
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d107      	bne.n	8000fa6 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 8000f96:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b56      	ldr	r3, [pc, #344]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f022 0201 	bic.w	r2, r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000fa6:	4b54      	ldr	r3, [pc, #336]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Stop_IT(&htim4);
 8000fae:	4852      	ldr	r0, [pc, #328]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000fb0:	f002 fbec 	bl	800378c <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim4);
 8000fb4:	4850      	ldr	r0, [pc, #320]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000fb6:	f002 fb70 	bl	800369a <HAL_TIM_Base_Stop>

		HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000fba:	2100      	movs	r1, #0
 8000fbc:	484e      	ldr	r0, [pc, #312]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8000fbe:	f002 fd5b 	bl	8003a78 <HAL_TIM_OC_Stop_IT>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
 8000fc6:	e036      	b.n	8001036 <HAL_TIM_OC_DelayElapsedCallback+0xda>
			// Detener el temporizador y deshabilitar el contador
			if (eventTable[i].currentState == state_machine) {
 8000fc8:	494c      	ldr	r1, [pc, #304]	@ (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000fca:	68fa      	ldr	r2, [r7, #12]
 8000fcc:	4613      	mov	r3, r2
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4413      	add	r3, r2
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	781a      	ldrb	r2, [r3, #0]
 8000fd8:	4b49      	ldr	r3, [pc, #292]	@ (8001100 <HAL_TIM_OC_DelayElapsedCallback+0x1a4>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d126      	bne.n	8001030 <HAL_TIM_OC_DelayElapsedCallback+0xd4>
				if (eventTable[i].eventFlag != NULL) {
 8000fe2:	4946      	ldr	r1, [pc, #280]	@ (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000fe4:	68fa      	ldr	r2, [r7, #12]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	3304      	adds	r3, #4
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d022      	beq.n	800103e <HAL_TIM_OC_DelayElapsedCallback+0xe2>
					*(eventTable[i].eventFlag) = true;
 8000ff8:	4940      	ldr	r1, [pc, #256]	@ (80010fc <HAL_TIM_OC_DelayElapsedCallback+0x1a0>)
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	440b      	add	r3, r1
 8001006:	3304      	adds	r3, #4
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2201      	movs	r2, #1
 800100c:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_ENABLE(&htim4);
 800100e:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f042 0201 	orr.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 800101e:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	@ 0x24

					HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8001026:	2100      	movs	r1, #0
 8001028:	4833      	ldr	r0, [pc, #204]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 800102a:	f002 fd25 	bl	8003a78 <HAL_TIM_OC_Stop_IT>

					return;
 800102e:	e05d      	b.n	80010ec <HAL_TIM_OC_DelayElapsedCallback+0x190>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	3301      	adds	r3, #1
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	2b03      	cmp	r3, #3
 800103a:	d9c5      	bls.n	8000fc8 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 800103c:	e000      	b.n	8001040 <HAL_TIM_OC_DelayElapsedCallback+0xe4>

				}
				break;
 800103e:	bf00      	nop

			}


		}
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 8001040:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 8001048:	482b      	ldr	r0, [pc, #172]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 800104a:	f002 fb4d 	bl	80036e8 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800104e:	2100      	movs	r1, #0
 8001050:	4829      	ldr	r0, [pc, #164]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001052:	f002 fc21 	bl	8003898 <HAL_TIM_OC_Start_IT>
		__HAL_TIM_ENABLE(&htim4);
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b26      	ldr	r3, [pc, #152]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f042 0201 	orr.w	r2, r2, #1
 8001064:	601a      	str	r2, [r3, #0]


	}
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a22      	ldr	r2, [pc, #136]	@ (80010f4 <HAL_TIM_OC_DelayElapsedCallback+0x198>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d12d      	bne.n	80010cc <HAL_TIM_OC_DelayElapsedCallback+0x170>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	7f1b      	ldrb	r3, [r3, #28]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d129      	bne.n	80010cc <HAL_TIM_OC_DelayElapsedCallback+0x170>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001078:	b672      	cpsid	i
}
 800107a:	bf00      	nop
        //TIM4->CCR2 = commutationTime;
		//(commutationStep);
		__disable_irq();
		commutation(commutationStep, pwmVal);
 800107c:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b2db      	uxtb	r3, r3
 8001082:	4a21      	ldr	r2, [pc, #132]	@ (8001108 <HAL_TIM_OC_DelayElapsedCallback+0x1ac>)
 8001084:	8812      	ldrh	r2, [r2, #0]
 8001086:	b292      	uxth	r2, r2
 8001088:	4611      	mov	r1, r2
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fe6c 	bl	8000d68 <commutation>

		commutationStep = (commutationStep + 1) % NUM_POS;
 8001090:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	1c5a      	adds	r2, r3, #1
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <HAL_TIM_OC_DelayElapsedCallback+0x1b0>)
 800109a:	fb83 3102 	smull	r3, r1, r3, r2
 800109e:	17d3      	asrs	r3, r2, #31
 80010a0:	1ac9      	subs	r1, r1, r3
 80010a2:	460b      	mov	r3, r1
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	440b      	add	r3, r1
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	1ad1      	subs	r1, r2, r3
 80010ac:	b2ca      	uxtb	r2, r1
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <HAL_TIM_OC_DelayElapsedCallback+0x1a8>)
 80010b0:	701a      	strb	r2, [r3, #0]
		reference_comm++;
 80010b2:	4b17      	ldr	r3, [pc, #92]	@ (8001110 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 80010b4:	881b      	ldrh	r3, [r3, #0]
 80010b6:	b29b      	uxth	r3, r3
 80010b8:	3301      	adds	r3, #1
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <HAL_TIM_OC_DelayElapsedCallback+0x1b4>)
 80010be:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80010c0:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <HAL_TIM_OC_DelayElapsedCallback+0x19c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("cpsie i" : : : "memory");
 80010c8:	b662      	cpsie	i
}
 80010ca:	bf00      	nop
		__enable_irq();
	}
	if(htim->Instance == TIM2 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010d4:	d10a      	bne.n	80010ec <HAL_TIM_OC_DelayElapsedCallback+0x190>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7f1b      	ldrb	r3, [r3, #28]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d106      	bne.n	80010ec <HAL_TIM_OC_DelayElapsedCallback+0x190>
		reference_zcp++;
 80010de:	4b0d      	ldr	r3, [pc, #52]	@ (8001114 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001114 <HAL_TIM_OC_DelayElapsedCallback+0x1b8>)
 80010ea:	801a      	strh	r2, [r3, #0]
	}
}
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40000800 	.word	0x40000800
 80010f8:	2000007c 	.word	0x2000007c
 80010fc:	20000024 	.word	0x20000024
 8001100:	2000027d 	.word	0x2000027d
 8001104:	20000282 	.word	0x20000282
 8001108:	20000280 	.word	0x20000280
 800110c:	2aaaaaab 	.word	0x2aaaaaab
 8001110:	20000286 	.word	0x20000286
 8001114:	20000288 	.word	0x20000288

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 fe37 	bl	8001d90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f827 	bl	8001174 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 fb3b 	bl	80017a0 <MX_GPIO_Init>
  MX_DMA_Init();
 800112a:	f000 fb1b 	bl	8001764 <MX_DMA_Init>
  MX_TIM4_Init();
 800112e:	f000 fa65 	bl	80015fc <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001132:	f000 faed 	bl	8001710 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001136:	f000 f9d5 	bl	80014e4 <MX_TIM3_Init>
  MX_TIM2_Init();
 800113a:	f000 f96b 	bl	8001414 <MX_TIM2_Init>
  MX_ADC1_Init();
 800113e:	f000 f875 	bl	800122c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001142:	f000 f8b1 	bl	80012a8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT(&htim4);
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800114c:	4806      	ldr	r0, [pc, #24]	@ (8001168 <main+0x50>)
 800114e:	f001 fd5d 	bl	8002c0c <HAL_GPIO_WritePin>
  state statetete;


  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8001152:	2201      	movs	r2, #1
 8001154:	4905      	ldr	r1, [pc, #20]	@ (800116c <main+0x54>)
 8001156:	4806      	ldr	r0, [pc, #24]	@ (8001170 <main+0x58>)
 8001158:	f004 f87a 	bl	8005250 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  statetete = handleState();
 800115c:	f7ff fd06 	bl	8000b6c <handleState>
 8001160:	4603      	mov	r3, r0
 8001162:	71fb      	strb	r3, [r7, #7]
 8001164:	bf00      	nop
 8001166:	e7f9      	b.n	800115c <main+0x44>
 8001168:	40011000 	.word	0x40011000
 800116c:	20000258 	.word	0x20000258
 8001170:	2000010c 	.word	0x2000010c

08001174 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	@ 0x50
 8001178:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800117e:	2228      	movs	r2, #40	@ 0x28
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f004 fdf4 	bl	8005d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a4:	2301      	movs	r3, #1
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011ae:	2300      	movs	r3, #0
 80011b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b2:	2301      	movs	r3, #1
 80011b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b6:	2302      	movs	r3, #2
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fd50 	bl	8002c70 <HAL_RCC_OscConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SystemClock_Config+0x66>
  {
    Error_Handler();
 80011d6:	f000 fb67 	bl	80018a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011da:	230f      	movs	r3, #15
 80011dc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011de:	2302      	movs	r3, #2
 80011e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ea:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ec:	2300      	movs	r3, #0
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	2102      	movs	r1, #2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 ffbc 	bl	8003174 <HAL_RCC_ClockConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001202:	f000 fb51 	bl	80018a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001206:	2302      	movs	r3, #2
 8001208:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800120a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800120e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001210:	1d3b      	adds	r3, r7, #4
 8001212:	4618      	mov	r0, r3
 8001214:	f002 f93c 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800121e:	f000 fb43 	bl	80018a8 <Error_Handler>
  }
}
 8001222:	bf00      	nop
 8001224:	3750      	adds	r7, #80	@ 0x50
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <MX_ADC1_Init+0x74>)
 800123e:	4a19      	ldr	r2, [pc, #100]	@ (80012a4 <MX_ADC1_Init+0x78>)
 8001240:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001242:	4b17      	ldr	r3, [pc, #92]	@ (80012a0 <MX_ADC1_Init+0x74>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001248:	4b15      	ldr	r3, [pc, #84]	@ (80012a0 <MX_ADC1_Init+0x74>)
 800124a:	2200      	movs	r2, #0
 800124c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800124e:	4b14      	ldr	r3, [pc, #80]	@ (80012a0 <MX_ADC1_Init+0x74>)
 8001250:	2200      	movs	r2, #0
 8001252:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8001254:	4b12      	ldr	r3, [pc, #72]	@ (80012a0 <MX_ADC1_Init+0x74>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800125a:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <MX_ADC1_Init+0x74>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001260:	4b0f      	ldr	r3, [pc, #60]	@ (80012a0 <MX_ADC1_Init+0x74>)
 8001262:	2201      	movs	r2, #1
 8001264:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001266:	480e      	ldr	r0, [pc, #56]	@ (80012a0 <MX_ADC1_Init+0x74>)
 8001268:	f000 fe18 	bl	8001e9c <HAL_ADC_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_ADC1_Init+0x4a>
  {
    Error_Handler();
 8001272:	f000 fb19 	bl	80018a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001276:	2304      	movs	r3, #4
 8001278:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800127a:	2301      	movs	r3, #1
 800127c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	4619      	mov	r1, r3
 8001286:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <MX_ADC1_Init+0x74>)
 8001288:	f000 fee0 	bl	800204c <HAL_ADC_ConfigChannel>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_ADC1_Init+0x6a>
  {
    Error_Handler();
 8001292:	f000 fb09 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	3710      	adds	r7, #16
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000154 	.word	0x20000154
 80012a4:	40012400 	.word	0x40012400

080012a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b09a      	sub	sp, #104	@ 0x68
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012bc:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012cc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
 80012e4:	611a      	str	r2, [r3, #16]
 80012e6:	615a      	str	r2, [r3, #20]
 80012e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2220      	movs	r2, #32
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f004 fd3d 	bl	8005d70 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012f6:	4b45      	ldr	r3, [pc, #276]	@ (800140c <MX_TIM1_Init+0x164>)
 80012f8:	4a45      	ldr	r2, [pc, #276]	@ (8001410 <MX_TIM1_Init+0x168>)
 80012fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2;
 80012fc:	4b43      	ldr	r3, [pc, #268]	@ (800140c <MX_TIM1_Init+0x164>)
 80012fe:	2202      	movs	r2, #2
 8001300:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001302:	4b42      	ldr	r3, [pc, #264]	@ (800140c <MX_TIM1_Init+0x164>)
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1799;
 8001308:	4b40      	ldr	r3, [pc, #256]	@ (800140c <MX_TIM1_Init+0x164>)
 800130a:	f240 7207 	movw	r2, #1799	@ 0x707
 800130e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001310:	4b3e      	ldr	r3, [pc, #248]	@ (800140c <MX_TIM1_Init+0x164>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <MX_TIM1_Init+0x164>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131c:	4b3b      	ldr	r3, [pc, #236]	@ (800140c <MX_TIM1_Init+0x164>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001322:	483a      	ldr	r0, [pc, #232]	@ (800140c <MX_TIM1_Init+0x164>)
 8001324:	f002 f96a 	bl	80035fc <HAL_TIM_Base_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800132e:	f000 fabb 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001332:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001336:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001338:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800133c:	4619      	mov	r1, r3
 800133e:	4833      	ldr	r0, [pc, #204]	@ (800140c <MX_TIM1_Init+0x164>)
 8001340:	f002 ffb8 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800134a:	f000 faad 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800134e:	482f      	ldr	r0, [pc, #188]	@ (800140c <MX_TIM1_Init+0x164>)
 8001350:	f002 fa4a 	bl	80037e8 <HAL_TIM_OC_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800135a:	f000 faa5 	bl	80018a8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 800135e:	2306      	movs	r3, #6
 8001360:	647b      	str	r3, [r7, #68]	@ 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001362:	2300      	movs	r3, #0
 8001364:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001366:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800136a:	4619      	mov	r1, r3
 800136c:	4827      	ldr	r0, [pc, #156]	@ (800140c <MX_TIM1_Init+0x164>)
 800136e:	f003 f868 	bl	8004442 <HAL_TIM_SlaveConfigSynchro>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001378:	f000 fa96 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800137c:	2350      	movs	r3, #80	@ 0x50
 800137e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001384:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001388:	4619      	mov	r1, r3
 800138a:	4820      	ldr	r0, [pc, #128]	@ (800140c <MX_TIM1_Init+0x164>)
 800138c:	f003 fdc4 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0xf2>
  {
    Error_Handler();
 8001396:	f000 fa87 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800139a:	2300      	movs	r3, #0
 800139c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 1770;
 800139e:	f240 63ea 	movw	r3, #1770	@ 0x6ea
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013b0:	2300      	movs	r3, #0
 80013b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013b4:	2300      	movs	r3, #0
 80013b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4812      	ldr	r0, [pc, #72]	@ (800140c <MX_TIM1_Init+0x164>)
 80013c2:	f002 fe59 	bl	8004078 <HAL_TIM_OC_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80013cc:	f000 fa6c 	bl	80018a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	4619      	mov	r1, r3
 80013f2:	4806      	ldr	r0, [pc, #24]	@ (800140c <MX_TIM1_Init+0x164>)
 80013f4:	f003 fdee 	bl	8004fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80013fe:	f000 fa53 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001402:	bf00      	nop
 8001404:	3768      	adds	r7, #104	@ 0x68
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000184 	.word	0x20000184
 8001410:	40012c00 	.word	0x40012c00

08001414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08a      	sub	sp, #40	@ 0x28
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141a:	f107 0318 	add.w	r3, r7, #24
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001428:	f107 0308 	add.w	r3, r7, #8
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800143e:	4b28      	ldr	r3, [pc, #160]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 8001440:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001444:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8001446:	4b26      	ldr	r3, [pc, #152]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 8001448:	2204      	movs	r2, #4
 800144a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001452:	4b23      	ldr	r3, [pc, #140]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 8001454:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001458:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800145a:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 800145c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001460:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001462:	4b1f      	ldr	r3, [pc, #124]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 8001464:	2280      	movs	r2, #128	@ 0x80
 8001466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001468:	481d      	ldr	r0, [pc, #116]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 800146a:	f002 f8c7 	bl	80035fc <HAL_TIM_Base_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001474:	f000 fa18 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001478:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	4619      	mov	r1, r3
 8001484:	4816      	ldr	r0, [pc, #88]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 8001486:	f002 ff15 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001490:	f000 fa0a 	bl	80018a8 <Error_Handler>
  }
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 15;
 800149c:	230f      	movs	r3, #15
 800149e:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim2, &sConfig) != HAL_OK)
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	4619      	mov	r1, r3
 80014aa:	480d      	ldr	r0, [pc, #52]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 80014ac:	f003 fc08 	bl	8004cc0 <HAL_TIMEx_HallSensor_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM2_Init+0xa6>
  {
    Error_Handler();
 80014b6:	f000 f9f7 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80014ba:	2350      	movs	r3, #80	@ 0x50
 80014bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014c2:	463b      	mov	r3, r7
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <MX_TIM2_Init+0xcc>)
 80014c8:	f003 fd26 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0xc2>
  {
    Error_Handler();
 80014d2:	f000 f9e9 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	@ 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200001cc 	.word	0x200001cc

080014e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08e      	sub	sp, #56	@ 0x38
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f8:	f107 0320 	add.w	r3, r7, #32
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
 8001510:	615a      	str	r2, [r3, #20]
 8001512:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001514:	4b37      	ldr	r3, [pc, #220]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001516:	4a38      	ldr	r2, [pc, #224]	@ (80015f8 <MX_TIM3_Init+0x114>)
 8001518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800151a:	4b36      	ldr	r3, [pc, #216]	@ (80015f4 <MX_TIM3_Init+0x110>)
 800151c:	2201      	movs	r2, #1
 800151e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b34      	ldr	r3, [pc, #208]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1799;
 8001526:	4b33      	ldr	r3, [pc, #204]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001528:	f240 7207 	movw	r2, #1799	@ 0x707
 800152c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b31      	ldr	r3, [pc, #196]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b2f      	ldr	r3, [pc, #188]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800153a:	482e      	ldr	r0, [pc, #184]	@ (80015f4 <MX_TIM3_Init+0x110>)
 800153c:	f002 f85e 	bl	80035fc <HAL_TIM_Base_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001546:	f000 f9af 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800154a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001550:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001554:	4619      	mov	r1, r3
 8001556:	4827      	ldr	r0, [pc, #156]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001558:	f002 feac 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001562:	f000 f9a1 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001566:	4823      	ldr	r0, [pc, #140]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001568:	f002 fb38 	bl	8003bdc <HAL_TIM_PWM_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001572:	f000 f999 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001576:	2320      	movs	r3, #32
 8001578:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800157e:	f107 0320 	add.w	r3, r7, #32
 8001582:	4619      	mov	r1, r3
 8001584:	481b      	ldr	r0, [pc, #108]	@ (80015f4 <MX_TIM3_Init+0x110>)
 8001586:	f003 fcc7 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001590:	f000 f98a 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001594:	2360      	movs	r3, #96	@ 0x60
 8001596:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a0:	2300      	movs	r3, #0
 80015a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a4:	1d3b      	adds	r3, r7, #4
 80015a6:	2200      	movs	r2, #0
 80015a8:	4619      	mov	r1, r3
 80015aa:	4812      	ldr	r0, [pc, #72]	@ (80015f4 <MX_TIM3_Init+0x110>)
 80015ac:	f002 fdc0 	bl	8004130 <HAL_TIM_PWM_ConfigChannel>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015b6:	f000 f977 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	2204      	movs	r2, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	480c      	ldr	r0, [pc, #48]	@ (80015f4 <MX_TIM3_Init+0x110>)
 80015c2:	f002 fdb5 	bl	8004130 <HAL_TIM_PWM_ConfigChannel>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80015cc:	f000 f96c 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2208      	movs	r2, #8
 80015d4:	4619      	mov	r1, r3
 80015d6:	4807      	ldr	r0, [pc, #28]	@ (80015f4 <MX_TIM3_Init+0x110>)
 80015d8:	f002 fdaa 	bl	8004130 <HAL_TIM_PWM_ConfigChannel>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80015e2:	f000 f961 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80015e6:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <MX_TIM3_Init+0x110>)
 80015e8:	f000 fa8a 	bl	8001b00 <HAL_TIM_MspPostInit>

}
 80015ec:	bf00      	nop
 80015ee:	3738      	adds	r7, #56	@ 0x38
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	200000c4 	.word	0x200000c4
 80015f8:	40000400 	.word	0x40000400

080015fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b096      	sub	sp, #88	@ 0x58
 8001600:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001602:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001606:	2200      	movs	r2, #0
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	605a      	str	r2, [r3, #4]
 800160c:	609a      	str	r2, [r3, #8]
 800160e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001610:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800161a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
 8001624:	609a      	str	r2, [r3, #8]
 8001626:	60da      	str	r2, [r3, #12]
 8001628:	611a      	str	r2, [r3, #16]
 800162a:	615a      	str	r2, [r3, #20]
 800162c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  TIM_OnePulse_InitTypeDef sConfig;
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800162e:	4b36      	ldr	r3, [pc, #216]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001630:	4a36      	ldr	r2, [pc, #216]	@ (800170c <MX_TIM4_Init+0x110>)
 8001632:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8001634:	4b34      	ldr	r3, [pc, #208]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001636:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800163a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800163c:	4b32      	ldr	r3, [pc, #200]	@ (8001708 <MX_TIM4_Init+0x10c>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001642:	4b31      	ldr	r3, [pc, #196]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001644:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001648:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164a:	4b2f      	ldr	r3, [pc, #188]	@ (8001708 <MX_TIM4_Init+0x10c>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001650:	4b2d      	ldr	r3, [pc, #180]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001652:	2200      	movs	r2, #0
 8001654:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001656:	482c      	ldr	r0, [pc, #176]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001658:	f001 ffd0 	bl	80035fc <HAL_TIM_Base_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001662:	f000 f921 	bl	80018a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001666:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800166c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001670:	4619      	mov	r1, r3
 8001672:	4825      	ldr	r0, [pc, #148]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001674:	f002 fe1e 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800167e:	f000 f913 	bl	80018a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001682:	4821      	ldr	r0, [pc, #132]	@ (8001708 <MX_TIM4_Init+0x10c>)
 8001684:	f002 f8b0 	bl	80037e8 <HAL_TIM_OC_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800168e:	f000 f90b 	bl	80018a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800169a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800169e:	4619      	mov	r1, r3
 80016a0:	4819      	ldr	r0, [pc, #100]	@ (8001708 <MX_TIM4_Init+0x10c>)
 80016a2:	f003 fc39 	bl	8004f18 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80016ac:	f000 f8fc 	bl	80018a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016b0:	2300      	movs	r3, #0
 80016b2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b8:	2300      	movs	r3, #0
 80016ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c4:	2200      	movs	r2, #0
 80016c6:	4619      	mov	r1, r3
 80016c8:	480f      	ldr	r0, [pc, #60]	@ (8001708 <MX_TIM4_Init+0x10c>)
 80016ca:	f002 fcd5 	bl	8004078 <HAL_TIM_OC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80016d4:	f000 f8e8 	bl	80018a8 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001708 <MX_TIM4_Init+0x10c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	699a      	ldr	r2, [r3, #24]
 80016de:	4b0a      	ldr	r3, [pc, #40]	@ (8001708 <MX_TIM4_Init+0x10c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0208 	orr.w	r2, r2, #8
 80016e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ec:	2204      	movs	r2, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4805      	ldr	r0, [pc, #20]	@ (8001708 <MX_TIM4_Init+0x10c>)
 80016f2:	f002 fcc1 	bl	8004078 <HAL_TIM_OC_ConfigChannel>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 80016fc:	f000 f8d4 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001700:	bf00      	nop
 8001702:	3758      	adds	r7, #88	@ 0x58
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000007c 	.word	0x2000007c
 800170c:	40000800 	.word	0x40000800

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b11      	ldr	r3, [pc, #68]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001716:	4a12      	ldr	r2, [pc, #72]	@ (8001760 <MX_USART2_UART_Init+0x50>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b0e      	ldr	r3, [pc, #56]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b0c      	ldr	r3, [pc, #48]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b0b      	ldr	r3, [pc, #44]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b09      	ldr	r3, [pc, #36]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	@ (800175c <MX_USART2_UART_Init+0x4c>)
 8001748:	f003 fca7 	bl	800509a <HAL_UART_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001752:	f000 f8a9 	bl	80018a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000010c 	.word	0x2000010c
 8001760:	40004400 	.word	0x40004400

08001764 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <MX_DMA_Init+0x38>)
 800176c:	695b      	ldr	r3, [r3, #20]
 800176e:	4a0b      	ldr	r2, [pc, #44]	@ (800179c <MX_DMA_Init+0x38>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6153      	str	r3, [r2, #20]
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <MX_DMA_Init+0x38>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001782:	2200      	movs	r2, #0
 8001784:	2100      	movs	r1, #0
 8001786:	2011      	movs	r0, #17
 8001788:	f000 fe71 	bl	800246e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800178c:	2011      	movs	r0, #17
 800178e:	f000 fe8a 	bl	80024a6 <HAL_NVIC_EnableIRQ>

}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b4:	4b38      	ldr	r3, [pc, #224]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	4a37      	ldr	r2, [pc, #220]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017ba:	f043 0310 	orr.w	r3, r3, #16
 80017be:	6193      	str	r3, [r2, #24]
 80017c0:	4b35      	ldr	r3, [pc, #212]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 0310 	and.w	r3, r3, #16
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017cc:	4b32      	ldr	r3, [pc, #200]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017ce:	699b      	ldr	r3, [r3, #24]
 80017d0:	4a31      	ldr	r2, [pc, #196]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017d2:	f043 0320 	orr.w	r3, r3, #32
 80017d6:	6193      	str	r3, [r2, #24]
 80017d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017da:	699b      	ldr	r3, [r3, #24]
 80017dc:	f003 0320 	and.w	r3, r3, #32
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	607b      	str	r3, [r7, #4]
 80017fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <MX_GPIO_Init+0xf8>)
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	4a25      	ldr	r2, [pc, #148]	@ (8001898 <MX_GPIO_Init+0xf8>)
 8001802:	f043 0308 	orr.w	r3, r3, #8
 8001806:	6193      	str	r3, [r2, #24]
 8001808:	4b23      	ldr	r3, [pc, #140]	@ (8001898 <MX_GPIO_Init+0xf8>)
 800180a:	699b      	ldr	r3, [r3, #24]
 800180c:	f003 0308 	and.w	r3, r3, #8
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800181a:	4820      	ldr	r0, [pc, #128]	@ (800189c <MX_GPIO_Init+0xfc>)
 800181c:	f001 f9f6 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_W_GPIO_Port, EN_W_Pin, GPIO_PIN_RESET);
 8001820:	2200      	movs	r2, #0
 8001822:	2120      	movs	r1, #32
 8001824:	481e      	ldr	r0, [pc, #120]	@ (80018a0 <MX_GPIO_Init+0x100>)
 8001826:	f001 f9f1 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_U_Pin, GPIO_PIN_RESET);
 800182a:	2200      	movs	r2, #0
 800182c:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001830:	481c      	ldr	r0, [pc, #112]	@ (80018a4 <MX_GPIO_Init+0x104>)
 8001832:	f001 f9eb 	bl	8002c0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001836:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800183c:	2311      	movs	r3, #17
 800183e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2303      	movs	r3, #3
 8001846:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	4619      	mov	r1, r3
 800184e:	4813      	ldr	r0, [pc, #76]	@ (800189c <MX_GPIO_Init+0xfc>)
 8001850:	f001 f858 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_W_Pin */
  GPIO_InitStruct.Pin = EN_W_Pin;
 8001854:	2320      	movs	r3, #32
 8001856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001858:	2301      	movs	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001860:	2303      	movs	r3, #3
 8001862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_W_GPIO_Port, &GPIO_InitStruct);
 8001864:	f107 0310 	add.w	r3, r7, #16
 8001868:	4619      	mov	r1, r3
 800186a:	480d      	ldr	r0, [pc, #52]	@ (80018a0 <MX_GPIO_Init+0x100>)
 800186c:	f001 f84a 	bl	8002904 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_V_Pin EN_U_Pin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_U_Pin;
 8001870:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800187e:	2303      	movs	r3, #3
 8001880:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 0310 	add.w	r3, r7, #16
 8001886:	4619      	mov	r1, r3
 8001888:	4806      	ldr	r0, [pc, #24]	@ (80018a4 <MX_GPIO_Init+0x104>)
 800188a:	f001 f83b 	bl	8002904 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800188e:	bf00      	nop
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40021000 	.word	0x40021000
 800189c:	40011000 	.word	0x40011000
 80018a0:	40010800 	.word	0x40010800
 80018a4:	40010c00 	.word	0x40010c00

080018a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018ac:	b672      	cpsid	i
}
 80018ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018b0:	bf00      	nop
 80018b2:	e7fd      	b.n	80018b0 <Error_Handler+0x8>

080018b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_MspInit+0x5c>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <HAL_MspInit+0x5c>)
 80018c0:	f043 0301 	orr.w	r3, r3, #1
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_MspInit+0x5c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_MspInit+0x5c>)
 80018d4:	69db      	ldr	r3, [r3, #28]
 80018d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001910 <HAL_MspInit+0x5c>)
 80018d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018dc:	61d3      	str	r3, [r2, #28]
 80018de:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_MspInit+0x5c>)
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001914 <HAL_MspInit+0x60>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <HAL_MspInit+0x60>)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001906:	bf00      	nop
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000
 8001914:	40010000 	.word	0x40010000

08001918 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 0310 	add.w	r3, r7, #16
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a14      	ldr	r2, [pc, #80]	@ (8001984 <HAL_ADC_MspInit+0x6c>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d121      	bne.n	800197c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001938:	4b13      	ldr	r3, [pc, #76]	@ (8001988 <HAL_ADC_MspInit+0x70>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_ADC_MspInit+0x70>)
 800193e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b10      	ldr	r3, [pc, #64]	@ (8001988 <HAL_ADC_MspInit+0x70>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <HAL_ADC_MspInit+0x70>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a0c      	ldr	r2, [pc, #48]	@ (8001988 <HAL_ADC_MspInit+0x70>)
 8001956:	f043 0304 	orr.w	r3, r3, #4
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <HAL_ADC_MspInit+0x70>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001968:	2310      	movs	r3, #16
 800196a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196c:	2303      	movs	r3, #3
 800196e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	4805      	ldr	r0, [pc, #20]	@ (800198c <HAL_ADC_MspInit+0x74>)
 8001978:	f000 ffc4 	bl	8002904 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40012400 	.word	0x40012400
 8001988:	40021000 	.word	0x40021000
 800198c:	40010800 	.word	0x40010800

08001990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	@ 0x38
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a4e      	ldr	r2, [pc, #312]	@ (8001ae4 <HAL_TIM_Base_MspInit+0x154>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d10c      	bne.n	80019ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019c4:	623b      	str	r3, [r7, #32]
 80019c6:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019c8:	e087      	b.n	8001ada <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019d2:	d157      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d4:	4b44      	ldr	r3, [pc, #272]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	4a43      	ldr	r2, [pc, #268]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	61d3      	str	r3, [r2, #28]
 80019e0:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019e2:	69db      	ldr	r3, [r3, #28]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	61fb      	str	r3, [r7, #28]
 80019ea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ec:	4b3e      	ldr	r3, [pc, #248]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	6193      	str	r3, [r2, #24]
 80019f8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	61bb      	str	r3, [r7, #24]
 8001a02:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	4b38      	ldr	r3, [pc, #224]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	4a37      	ldr	r2, [pc, #220]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001a0a:	f043 0308 	orr.w	r3, r3, #8
 8001a0e:	6193      	str	r3, [r2, #24]
 8001a10:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	f003 0308 	and.w	r3, r3, #8
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ZCP_W_Pin|ZCP_U_Pin;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482f      	ldr	r0, [pc, #188]	@ (8001aec <HAL_TIM_Base_MspInit+0x15c>)
 8001a30:	f000 ff68 	bl	8002904 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ZCP_V_Pin;
 8001a34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(ZCP_V_GPIO_Port, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4829      	ldr	r0, [pc, #164]	@ (8001af0 <HAL_TIM_Base_MspInit+0x160>)
 8001a4a:	f000 ff5b 	bl	8002904 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 8001a4e:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <HAL_TIM_Base_MspInit+0x164>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a5e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a6c:	4a21      	ldr	r2, [pc, #132]	@ (8001af4 <HAL_TIM_Base_MspInit+0x164>)
 8001a6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a70:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2100      	movs	r1, #0
 8001a76:	201c      	movs	r0, #28
 8001a78:	f000 fcf9 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a7c:	201c      	movs	r0, #28
 8001a7e:	f000 fd12 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001a82:	e02a      	b.n	8001ada <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM3)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a1b      	ldr	r2, [pc, #108]	@ (8001af8 <HAL_TIM_Base_MspInit+0x168>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d10c      	bne.n	8001aa8 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001a94:	f043 0302 	orr.w	r3, r3, #2
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
}
 8001aa6:	e018      	b.n	8001ada <HAL_TIM_Base_MspInit+0x14a>
  else if(htim_base->Instance==TIM4)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a13      	ldr	r2, [pc, #76]	@ (8001afc <HAL_TIM_Base_MspInit+0x16c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d113      	bne.n	8001ada <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001ab4:	69db      	ldr	r3, [r3, #28]
 8001ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	61d3      	str	r3, [r2, #28]
 8001abe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae8 <HAL_TIM_Base_MspInit+0x158>)
 8001ac0:	69db      	ldr	r3, [r3, #28]
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2100      	movs	r1, #0
 8001ace:	201e      	movs	r0, #30
 8001ad0:	f000 fccd 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ad4:	201e      	movs	r0, #30
 8001ad6:	f000 fce6 	bl	80024a6 <HAL_NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3738      	adds	r7, #56	@ 0x38
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010800 	.word	0x40010800
 8001af0:	40010c00 	.word	0x40010c00
 8001af4:	40010000 	.word	0x40010000
 8001af8:	40000400 	.word	0x40000400
 8001afc:	40000800 	.word	0x40000800

08001b00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b088      	sub	sp, #32
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b08:	f107 0310 	add.w	r3, r7, #16
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001b88 <HAL_TIM_MspPostInit+0x88>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d12f      	bne.n	8001b80 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b20:	4b1a      	ldr	r3, [pc, #104]	@ (8001b8c <HAL_TIM_MspPostInit+0x8c>)
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	4a19      	ldr	r2, [pc, #100]	@ (8001b8c <HAL_TIM_MspPostInit+0x8c>)
 8001b26:	f043 0304 	orr.w	r3, r3, #4
 8001b2a:	6193      	str	r3, [r2, #24]
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <HAL_TIM_MspPostInit+0x8c>)
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <HAL_TIM_MspPostInit+0x8c>)
 8001b3a:	699b      	ldr	r3, [r3, #24]
 8001b3c:	4a13      	ldr	r2, [pc, #76]	@ (8001b8c <HAL_TIM_MspPostInit+0x8c>)
 8001b3e:	f043 0308 	orr.w	r3, r3, #8
 8001b42:	6193      	str	r3, [r2, #24]
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <HAL_TIM_MspPostInit+0x8c>)
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = IN_U_Pin|IN_V_Pin;
 8001b50:	23c0      	movs	r3, #192	@ 0xc0
 8001b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	480b      	ldr	r0, [pc, #44]	@ (8001b90 <HAL_TIM_MspPostInit+0x90>)
 8001b64:	f000 fece 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_W_Pin;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IN_W_GPIO_Port, &GPIO_InitStruct);
 8001b74:	f107 0310 	add.w	r3, r7, #16
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4806      	ldr	r0, [pc, #24]	@ (8001b94 <HAL_TIM_MspPostInit+0x94>)
 8001b7c:	f000 fec2 	bl	8002904 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b80:	bf00      	nop
 8001b82:	3720      	adds	r7, #32
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40000400 	.word	0x40000400
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010800 	.word	0x40010800
 8001b94:	40010c00 	.word	0x40010c00

08001b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 0310 	add.w	r3, r7, #16
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a32      	ldr	r2, [pc, #200]	@ (8001c7c <HAL_UART_MspInit+0xe4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d15d      	bne.n	8001c74 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bb8:	4b31      	ldr	r3, [pc, #196]	@ (8001c80 <HAL_UART_MspInit+0xe8>)
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	4a30      	ldr	r2, [pc, #192]	@ (8001c80 <HAL_UART_MspInit+0xe8>)
 8001bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bc2:	61d3      	str	r3, [r2, #28]
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	@ (8001c80 <HAL_UART_MspInit+0xe8>)
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c80 <HAL_UART_MspInit+0xe8>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	4a2a      	ldr	r2, [pc, #168]	@ (8001c80 <HAL_UART_MspInit+0xe8>)
 8001bd6:	f043 0304 	orr.w	r3, r3, #4
 8001bda:	6193      	str	r3, [r2, #24]
 8001bdc:	4b28      	ldr	r3, [pc, #160]	@ (8001c80 <HAL_UART_MspInit+0xe8>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be8:	2304      	movs	r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4822      	ldr	r0, [pc, #136]	@ (8001c84 <HAL_UART_MspInit+0xec>)
 8001bfc:	f000 fe82 	bl	8002904 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c00:	2308      	movs	r3, #8
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4619      	mov	r1, r3
 8001c12:	481c      	ldr	r0, [pc, #112]	@ (8001c84 <HAL_UART_MspInit+0xec>)
 8001c14:	f000 fe76 	bl	8002904 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8001c8c <HAL_UART_MspInit+0xf4>)
 8001c1c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c20:	2210      	movs	r2, #16
 8001c22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c24:	4b18      	ldr	r3, [pc, #96]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c2a:	4b17      	ldr	r3, [pc, #92]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c2c:	2280      	movs	r2, #128	@ 0x80
 8001c2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c30:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c36:	4b14      	ldr	r3, [pc, #80]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001c3c:	4b12      	ldr	r3, [pc, #72]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c3e:	2220      	movs	r2, #32
 8001c40:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c42:	4b11      	ldr	r3, [pc, #68]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c48:	480f      	ldr	r0, [pc, #60]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c4a:	f000 fc47 	bl	80024dc <HAL_DMA_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001c54:	f7ff fe28 	bl	80018a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4a0b      	ldr	r2, [pc, #44]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c5c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c88 <HAL_UART_MspInit+0xf0>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2026      	movs	r0, #38	@ 0x26
 8001c6a:	f000 fc00 	bl	800246e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6e:	2026      	movs	r0, #38	@ 0x26
 8001c70:	f000 fc19 	bl	80024a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c74:	bf00      	nop
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	40021000 	.word	0x40021000
 8001c84:	40010800 	.word	0x40010800
 8001c88:	20000214 	.word	0x20000214
 8001c8c:	40020080 	.word	0x40020080

08001c90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <NMI_Handler+0x4>

08001c98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cac:	bf00      	nop
 8001cae:	e7fd      	b.n	8001cac <BusFault_Handler+0x4>

08001cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <UsageFault_Handler+0x4>

08001cb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bc80      	pop	{r7}
 8001cc2:	4770      	bx	lr

08001cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc8:	bf00      	nop
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce0:	f000 f89c 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <DMA1_Channel7_IRQHandler+0x10>)
 8001cee:	f000 fd03 	bl	80026f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000214 	.word	0x20000214

08001cfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d00:	4802      	ldr	r0, [pc, #8]	@ (8001d0c <TIM2_IRQHandler+0x10>)
 8001d02:	f002 f8c9 	bl	8003e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200001cc 	.word	0x200001cc

08001d10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d14:	4802      	ldr	r0, [pc, #8]	@ (8001d20 <TIM4_IRQHandler+0x10>)
 8001d16:	f002 f8bf 	bl	8003e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000007c 	.word	0x2000007c

08001d24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d28:	4802      	ldr	r0, [pc, #8]	@ (8001d34 <USART2_IRQHandler+0x10>)
 8001d2a:	f003 fab7 	bl	800529c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000010c 	.word	0x2000010c

08001d38 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d44:	f7ff fff8 	bl	8001d38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d48:	480b      	ldr	r0, [pc, #44]	@ (8001d78 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d4a:	490c      	ldr	r1, [pc, #48]	@ (8001d7c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001d80 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d50:	e002      	b.n	8001d58 <LoopCopyDataInit>

08001d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d56:	3304      	adds	r3, #4

08001d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d5c:	d3f9      	bcc.n	8001d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d5e:	4a09      	ldr	r2, [pc, #36]	@ (8001d84 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d60:	4c09      	ldr	r4, [pc, #36]	@ (8001d88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d64:	e001      	b.n	8001d6a <LoopFillZerobss>

08001d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d68:	3204      	adds	r2, #4

08001d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d6c:	d3fb      	bcc.n	8001d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d6e:	f004 f807 	bl	8005d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d72:	f7ff f9d1 	bl	8001118 <main>
  bx lr
 8001d76:	4770      	bx	lr
  ldr r0, =_sdata
 8001d78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d7c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001d80:	08005e74 	.word	0x08005e74
  ldr r2, =_sbss
 8001d84:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001d88:	2000029c 	.word	0x2000029c

08001d8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d8c:	e7fe      	b.n	8001d8c <ADC1_2_IRQHandler>
	...

08001d90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d94:	4b08      	ldr	r3, [pc, #32]	@ (8001db8 <HAL_Init+0x28>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a07      	ldr	r2, [pc, #28]	@ (8001db8 <HAL_Init+0x28>)
 8001d9a:	f043 0310 	orr.w	r3, r3, #16
 8001d9e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f000 fb59 	bl	8002458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da6:	200f      	movs	r0, #15
 8001da8:	f000 f808 	bl	8001dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dac:	f7ff fd82 	bl	80018b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40022000 	.word	0x40022000

08001dbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc4:	4b12      	ldr	r3, [pc, #72]	@ (8001e10 <HAL_InitTick+0x54>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <HAL_InitTick+0x58>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f000 fb71 	bl	80024c2 <HAL_SYSTICK_Config>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00e      	b.n	8001e08 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2b0f      	cmp	r3, #15
 8001dee:	d80a      	bhi.n	8001e06 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df0:	2200      	movs	r2, #0
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f000 fb39 	bl	800246e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dfc:	4a06      	ldr	r2, [pc, #24]	@ (8001e18 <HAL_InitTick+0x5c>)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	e000      	b.n	8001e08 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000054 	.word	0x20000054
 8001e14:	2000005c 	.word	0x2000005c
 8001e18:	20000058 	.word	0x20000058

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <HAL_IncTick+0x1c>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b05      	ldr	r3, [pc, #20]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a03      	ldr	r2, [pc, #12]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bc80      	pop	{r7}
 8001e36:	4770      	bx	lr
 8001e38:	2000005c 	.word	0x2000005c
 8001e3c:	20000298 	.word	0x20000298

08001e40 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b02      	ldr	r3, [pc, #8]	@ (8001e50 <HAL_GetTick+0x10>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bc80      	pop	{r7}
 8001e4e:	4770      	bx	lr
 8001e50:	20000298 	.word	0x20000298

08001e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff fff0 	bl	8001e40 <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6c:	d005      	beq.n	8001e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001e98 <HAL_Delay+0x44>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	461a      	mov	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e7a:	bf00      	nop
 8001e7c:	f7ff ffe0 	bl	8001e40 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d8f7      	bhi.n	8001e7c <HAL_Delay+0x28>
  {
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	2000005c 	.word	0x2000005c

08001e9c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d101      	bne.n	8001ebe <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0be      	b.n	800203c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d109      	bne.n	8001ee0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7ff fd1c 	bl	8001918 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f9ab 	bl	800223c <ADC_ConversionStop_Disable>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eee:	f003 0310 	and.w	r3, r3, #16
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f040 8099 	bne.w	800202a <HAL_ADC_Init+0x18e>
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f040 8095 	bne.w	800202a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f04:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f08:	f023 0302 	bic.w	r3, r3, #2
 8001f0c:	f043 0202 	orr.w	r2, r3, #2
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f1c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	7b1b      	ldrb	r3, [r3, #12]
 8001f22:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f24:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f34:	d003      	beq.n	8001f3e <HAL_ADC_Init+0xa2>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_ADC_Init+0xa8>
 8001f3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f42:	e000      	b.n	8001f46 <HAL_ADC_Init+0xaa>
 8001f44:	2300      	movs	r3, #0
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	7d1b      	ldrb	r3, [r3, #20]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d119      	bne.n	8001f88 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	7b1b      	ldrb	r3, [r3, #12]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d109      	bne.n	8001f70 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	3b01      	subs	r3, #1
 8001f62:	035a      	lsls	r2, r3, #13
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	e00b      	b.n	8001f88 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f043 0220 	orr.w	r2, r3, #32
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f80:	f043 0201 	orr.w	r2, r3, #1
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	4b28      	ldr	r3, [pc, #160]	@ (8002044 <HAL_ADC_Init+0x1a8>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	68b9      	ldr	r1, [r7, #8]
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fb8:	d003      	beq.n	8001fc2 <HAL_ADC_Init+0x126>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d104      	bne.n	8001fcc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	051b      	lsls	r3, r3, #20
 8001fca:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	4b18      	ldr	r3, [pc, #96]	@ (8002048 <HAL_ADC_Init+0x1ac>)
 8001fe8:	4013      	ands	r3, r2
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d10b      	bne.n	8002008 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ffa:	f023 0303 	bic.w	r3, r3, #3
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002006:	e018      	b.n	800203a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f023 0312 	bic.w	r3, r3, #18
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201c:	f043 0201 	orr.w	r2, r3, #1
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002028:	e007      	b.n	800203a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800202e:	f043 0210 	orr.w	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	ffe1f7fd 	.word	0xffe1f7fd
 8002048:	ff1f0efe 	.word	0xff1f0efe

0800204c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x20>
 8002068:	2302      	movs	r3, #2
 800206a:	e0dc      	b.n	8002226 <HAL_ADC_ConfigChannel+0x1da>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b06      	cmp	r3, #6
 800207a:	d81c      	bhi.n	80020b6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	3b05      	subs	r3, #5
 800208e:	221f      	movs	r2, #31
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	43db      	mvns	r3, r3
 8002096:	4019      	ands	r1, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	6818      	ldr	r0, [r3, #0]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685a      	ldr	r2, [r3, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	3b05      	subs	r3, #5
 80020a8:	fa00 f203 	lsl.w	r2, r0, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	635a      	str	r2, [r3, #52]	@ 0x34
 80020b4:	e03c      	b.n	8002130 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b0c      	cmp	r3, #12
 80020bc:	d81c      	bhi.n	80020f8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	3b23      	subs	r3, #35	@ 0x23
 80020d0:	221f      	movs	r2, #31
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	4019      	ands	r1, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	6818      	ldr	r0, [r3, #0]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	3b23      	subs	r3, #35	@ 0x23
 80020ea:	fa00 f203 	lsl.w	r2, r0, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80020f6:	e01b      	b.n	8002130 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685a      	ldr	r2, [r3, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	3b41      	subs	r3, #65	@ 0x41
 800210a:	221f      	movs	r2, #31
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	4019      	ands	r1, r3
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	4613      	mov	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4413      	add	r3, r2
 8002122:	3b41      	subs	r3, #65	@ 0x41
 8002124:	fa00 f203 	lsl.w	r2, r0, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2b09      	cmp	r3, #9
 8002136:	d91c      	bls.n	8002172 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68d9      	ldr	r1, [r3, #12]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4613      	mov	r3, r2
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	4413      	add	r3, r2
 8002148:	3b1e      	subs	r3, #30
 800214a:	2207      	movs	r2, #7
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	4019      	ands	r1, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	6898      	ldr	r0, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	3b1e      	subs	r3, #30
 8002164:	fa00 f203 	lsl.w	r2, r0, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	60da      	str	r2, [r3, #12]
 8002170:	e019      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6919      	ldr	r1, [r3, #16]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4613      	mov	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	4413      	add	r3, r2
 8002182:	2207      	movs	r2, #7
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	4019      	ands	r1, r3
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	6898      	ldr	r0, [r3, #8]
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	4413      	add	r3, r2
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2b10      	cmp	r3, #16
 80021ac:	d003      	beq.n	80021b6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80021b2:	2b11      	cmp	r3, #17
 80021b4:	d132      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1d      	ldr	r2, [pc, #116]	@ (8002230 <HAL_ADC_ConfigChannel+0x1e4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d125      	bne.n	800220c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d126      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80021dc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d11a      	bne.n	800221c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021e6:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <HAL_ADC_ConfigChannel+0x1e8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a13      	ldr	r2, [pc, #76]	@ (8002238 <HAL_ADC_ConfigChannel+0x1ec>)
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9a      	lsrs	r2, r3, #18
 80021f2:	4613      	mov	r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	4413      	add	r3, r2
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021fc:	e002      	b.n	8002204 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	3b01      	subs	r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x1b2>
 800220a:	e007      	b.n	800221c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr
 8002230:	40012400 	.word	0x40012400
 8002234:	20000054 	.word	0x20000054
 8002238:	431bde83 	.word	0x431bde83

0800223c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002244:	2300      	movs	r3, #0
 8002246:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b01      	cmp	r3, #1
 8002254:	d12e      	bne.n	80022b4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0201 	bic.w	r2, r2, #1
 8002264:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002266:	f7ff fdeb 	bl	8001e40 <HAL_GetTick>
 800226a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800226c:	e01b      	b.n	80022a6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800226e:	f7ff fde7 	bl	8001e40 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d914      	bls.n	80022a6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d10d      	bne.n	80022a6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800228e:	f043 0210 	orr.w	r2, r3, #16
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800229a:	f043 0201 	orr.w	r2, r3, #1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e007      	b.n	80022b6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d0dc      	beq.n	800226e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f003 0307 	and.w	r3, r3, #7
 80022ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d6:	68ba      	ldr	r2, [r7, #8]
 80022d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022dc:	4013      	ands	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022f2:	4a04      	ldr	r2, [pc, #16]	@ (8002304 <__NVIC_SetPriorityGrouping+0x44>)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	60d3      	str	r3, [r2, #12]
}
 80022f8:	bf00      	nop
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800230c:	4b04      	ldr	r3, [pc, #16]	@ (8002320 <__NVIC_GetPriorityGrouping+0x18>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	f003 0307 	and.w	r3, r3, #7
}
 8002316:	4618      	mov	r0, r3
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	e000ed00 	.word	0xe000ed00

08002324 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	2b00      	cmp	r3, #0
 8002334:	db0b      	blt.n	800234e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002336:	79fb      	ldrb	r3, [r7, #7]
 8002338:	f003 021f 	and.w	r2, r3, #31
 800233c:	4906      	ldr	r1, [pc, #24]	@ (8002358 <__NVIC_EnableIRQ+0x34>)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	095b      	lsrs	r3, r3, #5
 8002344:	2001      	movs	r0, #1
 8002346:	fa00 f202 	lsl.w	r2, r0, r2
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	79fb      	ldrb	r3, [r7, #7]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bc80      	pop	{r7}
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr

08002414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002424:	d301      	bcc.n	800242a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002426:	2301      	movs	r3, #1
 8002428:	e00f      	b.n	800244a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <SysTick_Config+0x40>)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	3b01      	subs	r3, #1
 8002430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002432:	210f      	movs	r1, #15
 8002434:	f04f 30ff 	mov.w	r0, #4294967295
 8002438:	f7ff ff90 	bl	800235c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800243c:	4b05      	ldr	r3, [pc, #20]	@ (8002454 <SysTick_Config+0x40>)
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002442:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <SysTick_Config+0x40>)
 8002444:	2207      	movs	r2, #7
 8002446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	e000e010 	.word	0xe000e010

08002458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ff2d 	bl	80022c0 <__NVIC_SetPriorityGrouping>
}
 8002466:	bf00      	nop
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800246e:	b580      	push	{r7, lr}
 8002470:	b086      	sub	sp, #24
 8002472:	af00      	add	r7, sp, #0
 8002474:	4603      	mov	r3, r0
 8002476:	60b9      	str	r1, [r7, #8]
 8002478:	607a      	str	r2, [r7, #4]
 800247a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800247c:	2300      	movs	r3, #0
 800247e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002480:	f7ff ff42 	bl	8002308 <__NVIC_GetPriorityGrouping>
 8002484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68b9      	ldr	r1, [r7, #8]
 800248a:	6978      	ldr	r0, [r7, #20]
 800248c:	f7ff ff90 	bl	80023b0 <NVIC_EncodePriority>
 8002490:	4602      	mov	r2, r0
 8002492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002496:	4611      	mov	r1, r2
 8002498:	4618      	mov	r0, r3
 800249a:	f7ff ff5f 	bl	800235c <__NVIC_SetPriority>
}
 800249e:	bf00      	nop
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b082      	sub	sp, #8
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	4603      	mov	r3, r0
 80024ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff35 	bl	8002324 <__NVIC_EnableIRQ>
}
 80024ba:	bf00      	nop
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff ffa2 	bl	8002414 <SysTick_Config>
 80024d0:	4603      	mov	r3, r0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
	...

080024dc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e043      	b.n	800257a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <HAL_DMA_Init+0xa8>)
 80024fa:	4413      	add	r3, r2
 80024fc:	4a22      	ldr	r2, [pc, #136]	@ (8002588 <HAL_DMA_Init+0xac>)
 80024fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002502:	091b      	lsrs	r3, r3, #4
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a1f      	ldr	r2, [pc, #124]	@ (800258c <HAL_DMA_Init+0xb0>)
 800250e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002526:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800252a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002534:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002540:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800254c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68fa      	ldr	r2, [r7, #12]
 8002560:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	bffdfff8 	.word	0xbffdfff8
 8002588:	cccccccd 	.word	0xcccccccd
 800258c:	40020000 	.word	0x40020000

08002590 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002598:	2300      	movs	r3, #0
 800259a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e020      	b.n	80025fc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 020e 	bic.w	r2, r2, #14
 80025c8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f022 0201 	bic.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025e2:	2101      	movs	r1, #1
 80025e4:	fa01 f202 	lsl.w	r2, r1, r2
 80025e8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b02      	cmp	r3, #2
 800261e:	d005      	beq.n	800262c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2204      	movs	r2, #4
 8002624:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
 800262a:	e051      	b.n	80026d0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 020e 	bic.w	r2, r2, #14
 800263a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_DMA_Abort_IT+0xd4>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d029      	beq.n	80026aa <HAL_DMA_Abort_IT+0xa2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_DMA_Abort_IT+0xd8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d022      	beq.n	80026a6 <HAL_DMA_Abort_IT+0x9e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1f      	ldr	r2, [pc, #124]	@ (80026e4 <HAL_DMA_Abort_IT+0xdc>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01a      	beq.n	80026a0 <HAL_DMA_Abort_IT+0x98>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1e      	ldr	r2, [pc, #120]	@ (80026e8 <HAL_DMA_Abort_IT+0xe0>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d012      	beq.n	800269a <HAL_DMA_Abort_IT+0x92>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a1c      	ldr	r2, [pc, #112]	@ (80026ec <HAL_DMA_Abort_IT+0xe4>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d00a      	beq.n	8002694 <HAL_DMA_Abort_IT+0x8c>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a1b      	ldr	r2, [pc, #108]	@ (80026f0 <HAL_DMA_Abort_IT+0xe8>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d102      	bne.n	800268e <HAL_DMA_Abort_IT+0x86>
 8002688:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800268c:	e00e      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 800268e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002692:	e00b      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 8002694:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002698:	e008      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 800269a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800269e:	e005      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 80026a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026a4:	e002      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 80026a6:	2310      	movs	r3, #16
 80026a8:	e000      	b.n	80026ac <HAL_DMA_Abort_IT+0xa4>
 80026aa:	2301      	movs	r3, #1
 80026ac:	4a11      	ldr	r2, [pc, #68]	@ (80026f4 <HAL_DMA_Abort_IT+0xec>)
 80026ae:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	4798      	blx	r3
    } 
  }
  return status;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40020008 	.word	0x40020008
 80026e0:	4002001c 	.word	0x4002001c
 80026e4:	40020030 	.word	0x40020030
 80026e8:	40020044 	.word	0x40020044
 80026ec:	40020058 	.word	0x40020058
 80026f0:	4002006c 	.word	0x4002006c
 80026f4:	40020000 	.word	0x40020000

080026f8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002714:	2204      	movs	r2, #4
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d04f      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xc8>
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f003 0304 	and.w	r3, r3, #4
 8002726:	2b00      	cmp	r3, #0
 8002728:	d04a      	beq.n	80027c0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0320 	and.w	r3, r3, #32
 8002734:	2b00      	cmp	r3, #0
 8002736:	d107      	bne.n	8002748 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a66      	ldr	r2, [pc, #408]	@ (80028e8 <HAL_DMA_IRQHandler+0x1f0>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d029      	beq.n	80027a6 <HAL_DMA_IRQHandler+0xae>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_DMA_IRQHandler+0x1f4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0xaa>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a63      	ldr	r2, [pc, #396]	@ (80028f0 <HAL_DMA_IRQHandler+0x1f8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d01a      	beq.n	800279c <HAL_DMA_IRQHandler+0xa4>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a62      	ldr	r2, [pc, #392]	@ (80028f4 <HAL_DMA_IRQHandler+0x1fc>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d012      	beq.n	8002796 <HAL_DMA_IRQHandler+0x9e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a60      	ldr	r2, [pc, #384]	@ (80028f8 <HAL_DMA_IRQHandler+0x200>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d00a      	beq.n	8002790 <HAL_DMA_IRQHandler+0x98>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5f      	ldr	r2, [pc, #380]	@ (80028fc <HAL_DMA_IRQHandler+0x204>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <HAL_DMA_IRQHandler+0x92>
 8002784:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002788:	e00e      	b.n	80027a8 <HAL_DMA_IRQHandler+0xb0>
 800278a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800278e:	e00b      	b.n	80027a8 <HAL_DMA_IRQHandler+0xb0>
 8002790:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002794:	e008      	b.n	80027a8 <HAL_DMA_IRQHandler+0xb0>
 8002796:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800279a:	e005      	b.n	80027a8 <HAL_DMA_IRQHandler+0xb0>
 800279c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027a0:	e002      	b.n	80027a8 <HAL_DMA_IRQHandler+0xb0>
 80027a2:	2340      	movs	r3, #64	@ 0x40
 80027a4:	e000      	b.n	80027a8 <HAL_DMA_IRQHandler+0xb0>
 80027a6:	2304      	movs	r3, #4
 80027a8:	4a55      	ldr	r2, [pc, #340]	@ (8002900 <HAL_DMA_IRQHandler+0x208>)
 80027aa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8094 	beq.w	80028de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027be:	e08e      	b.n	80028de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	2202      	movs	r2, #2
 80027c6:	409a      	lsls	r2, r3
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4013      	ands	r3, r2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d056      	beq.n	800287e <HAL_DMA_IRQHandler+0x186>
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d051      	beq.n	800287e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10b      	bne.n	8002800 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 020a 	bic.w	r2, r2, #10
 80027f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a38      	ldr	r2, [pc, #224]	@ (80028e8 <HAL_DMA_IRQHandler+0x1f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d029      	beq.n	800285e <HAL_DMA_IRQHandler+0x166>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a37      	ldr	r2, [pc, #220]	@ (80028ec <HAL_DMA_IRQHandler+0x1f4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d022      	beq.n	800285a <HAL_DMA_IRQHandler+0x162>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a35      	ldr	r2, [pc, #212]	@ (80028f0 <HAL_DMA_IRQHandler+0x1f8>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d01a      	beq.n	8002854 <HAL_DMA_IRQHandler+0x15c>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a34      	ldr	r2, [pc, #208]	@ (80028f4 <HAL_DMA_IRQHandler+0x1fc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d012      	beq.n	800284e <HAL_DMA_IRQHandler+0x156>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a32      	ldr	r2, [pc, #200]	@ (80028f8 <HAL_DMA_IRQHandler+0x200>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00a      	beq.n	8002848 <HAL_DMA_IRQHandler+0x150>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a31      	ldr	r2, [pc, #196]	@ (80028fc <HAL_DMA_IRQHandler+0x204>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d102      	bne.n	8002842 <HAL_DMA_IRQHandler+0x14a>
 800283c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002840:	e00e      	b.n	8002860 <HAL_DMA_IRQHandler+0x168>
 8002842:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002846:	e00b      	b.n	8002860 <HAL_DMA_IRQHandler+0x168>
 8002848:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800284c:	e008      	b.n	8002860 <HAL_DMA_IRQHandler+0x168>
 800284e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002852:	e005      	b.n	8002860 <HAL_DMA_IRQHandler+0x168>
 8002854:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002858:	e002      	b.n	8002860 <HAL_DMA_IRQHandler+0x168>
 800285a:	2320      	movs	r3, #32
 800285c:	e000      	b.n	8002860 <HAL_DMA_IRQHandler+0x168>
 800285e:	2302      	movs	r3, #2
 8002860:	4a27      	ldr	r2, [pc, #156]	@ (8002900 <HAL_DMA_IRQHandler+0x208>)
 8002862:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002870:	2b00      	cmp	r3, #0
 8002872:	d034      	beq.n	80028de <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800287c:	e02f      	b.n	80028de <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002882:	2208      	movs	r2, #8
 8002884:	409a      	lsls	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4013      	ands	r3, r2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d028      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x1e8>
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d023      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 020e 	bic.w	r2, r2, #14
 80028a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028b0:	2101      	movs	r1, #1
 80028b2:	fa01 f202 	lsl.w	r2, r1, r2
 80028b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d004      	beq.n	80028e0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
    }
  }
  return;
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
}
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40020008 	.word	0x40020008
 80028ec:	4002001c 	.word	0x4002001c
 80028f0:	40020030 	.word	0x40020030
 80028f4:	40020044 	.word	0x40020044
 80028f8:	40020058 	.word	0x40020058
 80028fc:	4002006c 	.word	0x4002006c
 8002900:	40020000 	.word	0x40020000

08002904 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002904:	b480      	push	{r7}
 8002906:	b08b      	sub	sp, #44	@ 0x2c
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002916:	e169      	b.n	8002bec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002918:	2201      	movs	r2, #1
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	69fa      	ldr	r2, [r7, #28]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	429a      	cmp	r2, r3
 8002932:	f040 8158 	bne.w	8002be6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a9a      	ldr	r2, [pc, #616]	@ (8002ba4 <HAL_GPIO_Init+0x2a0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d05e      	beq.n	80029fe <HAL_GPIO_Init+0xfa>
 8002940:	4a98      	ldr	r2, [pc, #608]	@ (8002ba4 <HAL_GPIO_Init+0x2a0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d875      	bhi.n	8002a32 <HAL_GPIO_Init+0x12e>
 8002946:	4a98      	ldr	r2, [pc, #608]	@ (8002ba8 <HAL_GPIO_Init+0x2a4>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d058      	beq.n	80029fe <HAL_GPIO_Init+0xfa>
 800294c:	4a96      	ldr	r2, [pc, #600]	@ (8002ba8 <HAL_GPIO_Init+0x2a4>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d86f      	bhi.n	8002a32 <HAL_GPIO_Init+0x12e>
 8002952:	4a96      	ldr	r2, [pc, #600]	@ (8002bac <HAL_GPIO_Init+0x2a8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d052      	beq.n	80029fe <HAL_GPIO_Init+0xfa>
 8002958:	4a94      	ldr	r2, [pc, #592]	@ (8002bac <HAL_GPIO_Init+0x2a8>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d869      	bhi.n	8002a32 <HAL_GPIO_Init+0x12e>
 800295e:	4a94      	ldr	r2, [pc, #592]	@ (8002bb0 <HAL_GPIO_Init+0x2ac>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d04c      	beq.n	80029fe <HAL_GPIO_Init+0xfa>
 8002964:	4a92      	ldr	r2, [pc, #584]	@ (8002bb0 <HAL_GPIO_Init+0x2ac>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d863      	bhi.n	8002a32 <HAL_GPIO_Init+0x12e>
 800296a:	4a92      	ldr	r2, [pc, #584]	@ (8002bb4 <HAL_GPIO_Init+0x2b0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d046      	beq.n	80029fe <HAL_GPIO_Init+0xfa>
 8002970:	4a90      	ldr	r2, [pc, #576]	@ (8002bb4 <HAL_GPIO_Init+0x2b0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d85d      	bhi.n	8002a32 <HAL_GPIO_Init+0x12e>
 8002976:	2b12      	cmp	r3, #18
 8002978:	d82a      	bhi.n	80029d0 <HAL_GPIO_Init+0xcc>
 800297a:	2b12      	cmp	r3, #18
 800297c:	d859      	bhi.n	8002a32 <HAL_GPIO_Init+0x12e>
 800297e:	a201      	add	r2, pc, #4	@ (adr r2, 8002984 <HAL_GPIO_Init+0x80>)
 8002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002984:	080029ff 	.word	0x080029ff
 8002988:	080029d9 	.word	0x080029d9
 800298c:	080029eb 	.word	0x080029eb
 8002990:	08002a2d 	.word	0x08002a2d
 8002994:	08002a33 	.word	0x08002a33
 8002998:	08002a33 	.word	0x08002a33
 800299c:	08002a33 	.word	0x08002a33
 80029a0:	08002a33 	.word	0x08002a33
 80029a4:	08002a33 	.word	0x08002a33
 80029a8:	08002a33 	.word	0x08002a33
 80029ac:	08002a33 	.word	0x08002a33
 80029b0:	08002a33 	.word	0x08002a33
 80029b4:	08002a33 	.word	0x08002a33
 80029b8:	08002a33 	.word	0x08002a33
 80029bc:	08002a33 	.word	0x08002a33
 80029c0:	08002a33 	.word	0x08002a33
 80029c4:	08002a33 	.word	0x08002a33
 80029c8:	080029e1 	.word	0x080029e1
 80029cc:	080029f5 	.word	0x080029f5
 80029d0:	4a79      	ldr	r2, [pc, #484]	@ (8002bb8 <HAL_GPIO_Init+0x2b4>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d013      	beq.n	80029fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029d6:	e02c      	b.n	8002a32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	623b      	str	r3, [r7, #32]
          break;
 80029de:	e029      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	3304      	adds	r3, #4
 80029e6:	623b      	str	r3, [r7, #32]
          break;
 80029e8:	e024      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	3308      	adds	r3, #8
 80029f0:	623b      	str	r3, [r7, #32]
          break;
 80029f2:	e01f      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	330c      	adds	r3, #12
 80029fa:	623b      	str	r3, [r7, #32]
          break;
 80029fc:	e01a      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a06:	2304      	movs	r3, #4
 8002a08:	623b      	str	r3, [r7, #32]
          break;
 8002a0a:	e013      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a14:	2308      	movs	r3, #8
 8002a16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	611a      	str	r2, [r3, #16]
          break;
 8002a1e:	e009      	b.n	8002a34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a20:	2308      	movs	r3, #8
 8002a22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	69fa      	ldr	r2, [r7, #28]
 8002a28:	615a      	str	r2, [r3, #20]
          break;
 8002a2a:	e003      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	623b      	str	r3, [r7, #32]
          break;
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x130>
          break;
 8002a32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2bff      	cmp	r3, #255	@ 0xff
 8002a38:	d801      	bhi.n	8002a3e <HAL_GPIO_Init+0x13a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	e001      	b.n	8002a42 <HAL_GPIO_Init+0x13e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	3304      	adds	r3, #4
 8002a42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2bff      	cmp	r3, #255	@ 0xff
 8002a48:	d802      	bhi.n	8002a50 <HAL_GPIO_Init+0x14c>
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	e002      	b.n	8002a56 <HAL_GPIO_Init+0x152>
 8002a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a52:	3b08      	subs	r3, #8
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	fa01 f303 	lsl.w	r3, r1, r3
 8002a64:	43db      	mvns	r3, r3
 8002a66:	401a      	ands	r2, r3
 8002a68:	6a39      	ldr	r1, [r7, #32]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a70:	431a      	orrs	r2, r3
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80b1 	beq.w	8002be6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a84:	4b4d      	ldr	r3, [pc, #308]	@ (8002bbc <HAL_GPIO_Init+0x2b8>)
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	4a4c      	ldr	r2, [pc, #304]	@ (8002bbc <HAL_GPIO_Init+0x2b8>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6193      	str	r3, [r2, #24]
 8002a90:	4b4a      	ldr	r3, [pc, #296]	@ (8002bbc <HAL_GPIO_Init+0x2b8>)
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a9c:	4a48      	ldr	r2, [pc, #288]	@ (8002bc0 <HAL_GPIO_Init+0x2bc>)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	089b      	lsrs	r3, r3, #2
 8002aa2:	3302      	adds	r3, #2
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4013      	ands	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a40      	ldr	r2, [pc, #256]	@ (8002bc4 <HAL_GPIO_Init+0x2c0>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d013      	beq.n	8002af0 <HAL_GPIO_Init+0x1ec>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a3f      	ldr	r2, [pc, #252]	@ (8002bc8 <HAL_GPIO_Init+0x2c4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d00d      	beq.n	8002aec <HAL_GPIO_Init+0x1e8>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8002bcc <HAL_GPIO_Init+0x2c8>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d007      	beq.n	8002ae8 <HAL_GPIO_Init+0x1e4>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3d      	ldr	r2, [pc, #244]	@ (8002bd0 <HAL_GPIO_Init+0x2cc>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_GPIO_Init+0x1e0>
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e006      	b.n	8002af2 <HAL_GPIO_Init+0x1ee>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e004      	b.n	8002af2 <HAL_GPIO_Init+0x1ee>
 8002ae8:	2302      	movs	r3, #2
 8002aea:	e002      	b.n	8002af2 <HAL_GPIO_Init+0x1ee>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <HAL_GPIO_Init+0x1ee>
 8002af0:	2300      	movs	r3, #0
 8002af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af4:	f002 0203 	and.w	r2, r2, #3
 8002af8:	0092      	lsls	r2, r2, #2
 8002afa:	4093      	lsls	r3, r2
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b02:	492f      	ldr	r1, [pc, #188]	@ (8002bc0 <HAL_GPIO_Init+0x2bc>)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b06:	089b      	lsrs	r3, r3, #2
 8002b08:	3302      	adds	r3, #2
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b1e:	689a      	ldr	r2, [r3, #8]
 8002b20:	492c      	ldr	r1, [pc, #176]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	608b      	str	r3, [r1, #8]
 8002b28:	e006      	b.n	8002b38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	4928      	ldr	r1, [pc, #160]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d006      	beq.n	8002b52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b44:	4b23      	ldr	r3, [pc, #140]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	4922      	ldr	r1, [pc, #136]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60cb      	str	r3, [r1, #12]
 8002b50:	e006      	b.n	8002b60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b52:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	43db      	mvns	r3, r3
 8002b5a:	491e      	ldr	r1, [pc, #120]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d006      	beq.n	8002b7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	4918      	ldr	r1, [pc, #96]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
 8002b78:	e006      	b.n	8002b88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b7a:	4b16      	ldr	r3, [pc, #88]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b7c:	685a      	ldr	r2, [r3, #4]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	4914      	ldr	r1, [pc, #80]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d021      	beq.n	8002bd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b94:	4b0f      	ldr	r3, [pc, #60]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	490e      	ldr	r1, [pc, #56]	@ (8002bd4 <HAL_GPIO_Init+0x2d0>)
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	600b      	str	r3, [r1, #0]
 8002ba0:	e021      	b.n	8002be6 <HAL_GPIO_Init+0x2e2>
 8002ba2:	bf00      	nop
 8002ba4:	10320000 	.word	0x10320000
 8002ba8:	10310000 	.word	0x10310000
 8002bac:	10220000 	.word	0x10220000
 8002bb0:	10210000 	.word	0x10210000
 8002bb4:	10120000 	.word	0x10120000
 8002bb8:	10110000 	.word	0x10110000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	40010800 	.word	0x40010800
 8002bc8:	40010c00 	.word	0x40010c00
 8002bcc:	40011000 	.word	0x40011000
 8002bd0:	40011400 	.word	0x40011400
 8002bd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	4909      	ldr	r1, [pc, #36]	@ (8002c08 <HAL_GPIO_Init+0x304>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	3301      	adds	r3, #1
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f47f ae8e 	bne.w	8002918 <HAL_GPIO_Init+0x14>
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	bf00      	nop
 8002c00:	372c      	adds	r7, #44	@ 0x2c
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr
 8002c08:	40010400 	.word	0x40010400

08002c0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	460b      	mov	r3, r1
 8002c16:	807b      	strh	r3, [r7, #2]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c1c:	787b      	ldrb	r3, [r7, #1]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c22:	887a      	ldrh	r2, [r7, #2]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c28:	e003      	b.n	8002c32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c2a:	887b      	ldrh	r3, [r7, #2]
 8002c2c:	041a      	lsls	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	611a      	str	r2, [r3, #16]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	460b      	mov	r3, r1
 8002c46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c4e:	887a      	ldrh	r2, [r7, #2]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4013      	ands	r3, r2
 8002c54:	041a      	lsls	r2, r3, #16
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43d9      	mvns	r1, r3
 8002c5a:	887b      	ldrh	r3, [r7, #2]
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	611a      	str	r2, [r3, #16]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr
	...

08002c70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d101      	bne.n	8002c82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e272      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8087 	beq.w	8002d9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c90:	4b92      	ldr	r3, [pc, #584]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 030c 	and.w	r3, r3, #12
 8002c98:	2b04      	cmp	r3, #4
 8002c9a:	d00c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d112      	bne.n	8002cce <HAL_RCC_OscConfig+0x5e>
 8002ca8:	4b8c      	ldr	r3, [pc, #560]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cb4:	d10b      	bne.n	8002cce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb6:	4b89      	ldr	r3, [pc, #548]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d06c      	beq.n	8002d9c <HAL_RCC_OscConfig+0x12c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d168      	bne.n	8002d9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e24c      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x76>
 8002cd8:	4b80      	ldr	r3, [pc, #512]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a7f      	ldr	r2, [pc, #508]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	e02e      	b.n	8002d44 <HAL_RCC_OscConfig+0xd4>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x98>
 8002cee:	4b7b      	ldr	r3, [pc, #492]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7a      	ldr	r2, [pc, #488]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	4b78      	ldr	r3, [pc, #480]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a77      	ldr	r2, [pc, #476]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d04:	6013      	str	r3, [r2, #0]
 8002d06:	e01d      	b.n	8002d44 <HAL_RCC_OscConfig+0xd4>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d10:	d10c      	bne.n	8002d2c <HAL_RCC_OscConfig+0xbc>
 8002d12:	4b72      	ldr	r3, [pc, #456]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a71      	ldr	r2, [pc, #452]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a6e      	ldr	r2, [pc, #440]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d28:	6013      	str	r3, [r2, #0]
 8002d2a:	e00b      	b.n	8002d44 <HAL_RCC_OscConfig+0xd4>
 8002d2c:	4b6b      	ldr	r3, [pc, #428]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a6a      	ldr	r2, [pc, #424]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b68      	ldr	r3, [pc, #416]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a67      	ldr	r2, [pc, #412]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d013      	beq.n	8002d74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d4c:	f7ff f878 	bl	8001e40 <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	e008      	b.n	8002d66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d54:	f7ff f874 	bl	8001e40 <HAL_GetTick>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	2b64      	cmp	r3, #100	@ 0x64
 8002d60:	d901      	bls.n	8002d66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e200      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b5d      	ldr	r3, [pc, #372]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d0f0      	beq.n	8002d54 <HAL_RCC_OscConfig+0xe4>
 8002d72:	e014      	b.n	8002d9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d74:	f7ff f864 	bl	8001e40 <HAL_GetTick>
 8002d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7a:	e008      	b.n	8002d8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d7c:	f7ff f860 	bl	8001e40 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	2b64      	cmp	r3, #100	@ 0x64
 8002d88:	d901      	bls.n	8002d8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e1ec      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8e:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d1f0      	bne.n	8002d7c <HAL_RCC_OscConfig+0x10c>
 8002d9a:	e000      	b.n	8002d9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d063      	beq.n	8002e72 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002daa:	4b4c      	ldr	r3, [pc, #304]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00b      	beq.n	8002dce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002db6:	4b49      	ldr	r3, [pc, #292]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 030c 	and.w	r3, r3, #12
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d11c      	bne.n	8002dfc <HAL_RCC_OscConfig+0x18c>
 8002dc2:	4b46      	ldr	r3, [pc, #280]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d116      	bne.n	8002dfc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_RCC_OscConfig+0x176>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e1c0      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de6:	4b3d      	ldr	r3, [pc, #244]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	4939      	ldr	r1, [pc, #228]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	e03a      	b.n	8002e72 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d020      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e04:	4b36      	ldr	r3, [pc, #216]	@ (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e06:	2201      	movs	r2, #1
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7ff f819 	bl	8001e40 <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e12:	f7ff f815 	bl	8001e40 <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e1a1      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e24:	4b2d      	ldr	r3, [pc, #180]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0f0      	beq.n	8002e12 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e30:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4927      	ldr	r1, [pc, #156]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	600b      	str	r3, [r1, #0]
 8002e44:	e015      	b.n	8002e72 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e46:	4b26      	ldr	r3, [pc, #152]	@ (8002ee0 <HAL_RCC_OscConfig+0x270>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4c:	f7fe fff8 	bl	8001e40 <HAL_GetTick>
 8002e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e52:	e008      	b.n	8002e66 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e54:	f7fe fff4 	bl	8001e40 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e180      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e66:	4b1d      	ldr	r3, [pc, #116]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d1f0      	bne.n	8002e54 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d03a      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d019      	beq.n	8002eba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e86:	4b17      	ldr	r3, [pc, #92]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8c:	f7fe ffd8 	bl	8001e40 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe ffd4 	bl	8001e40 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e160      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	@ (8002edc <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002eb2:	2001      	movs	r0, #1
 8002eb4:	f000 face 	bl	8003454 <RCC_Delay>
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee4 <HAL_RCC_OscConfig+0x274>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec0:	f7fe ffbe 	bl	8001e40 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec6:	e00f      	b.n	8002ee8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe ffba 	bl	8001e40 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d908      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e146      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	42420000 	.word	0x42420000
 8002ee4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b92      	ldr	r3, [pc, #584]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e9      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80a6 	beq.w	800304e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b8b      	ldr	r3, [pc, #556]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	69db      	ldr	r3, [r3, #28]
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4a87      	ldr	r2, [pc, #540]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f1c:	61d3      	str	r3, [r2, #28]
 8002f1e:	4b85      	ldr	r3, [pc, #532]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f2e:	4b82      	ldr	r3, [pc, #520]	@ (8003138 <HAL_RCC_OscConfig+0x4c8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d118      	bne.n	8002f6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003138 <HAL_RCC_OscConfig+0x4c8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003138 <HAL_RCC_OscConfig+0x4c8>)
 8002f40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f46:	f7fe ff7b 	bl	8001e40 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f4e:	f7fe ff77 	bl	8001e40 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b64      	cmp	r3, #100	@ 0x64
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e103      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f60:	4b75      	ldr	r3, [pc, #468]	@ (8003138 <HAL_RCC_OscConfig+0x4c8>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d106      	bne.n	8002f82 <HAL_RCC_OscConfig+0x312>
 8002f74:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	4a6e      	ldr	r2, [pc, #440]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f7a:	f043 0301 	orr.w	r3, r3, #1
 8002f7e:	6213      	str	r3, [r2, #32]
 8002f80:	e02d      	b.n	8002fde <HAL_RCC_OscConfig+0x36e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x334>
 8002f8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f8c:	6a1b      	ldr	r3, [r3, #32]
 8002f8e:	4a69      	ldr	r2, [pc, #420]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f90:	f023 0301 	bic.w	r3, r3, #1
 8002f94:	6213      	str	r3, [r2, #32]
 8002f96:	4b67      	ldr	r3, [pc, #412]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a66      	ldr	r2, [pc, #408]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 0304 	bic.w	r3, r3, #4
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	e01c      	b.n	8002fde <HAL_RCC_OscConfig+0x36e>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b05      	cmp	r3, #5
 8002faa:	d10c      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x356>
 8002fac:	4b61      	ldr	r3, [pc, #388]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	4a60      	ldr	r2, [pc, #384]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fb2:	f043 0304 	orr.w	r3, r3, #4
 8002fb6:	6213      	str	r3, [r2, #32]
 8002fb8:	4b5e      	ldr	r3, [pc, #376]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	6a1b      	ldr	r3, [r3, #32]
 8002fbc:	4a5d      	ldr	r2, [pc, #372]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6213      	str	r3, [r2, #32]
 8002fc4:	e00b      	b.n	8002fde <HAL_RCC_OscConfig+0x36e>
 8002fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	4a5a      	ldr	r2, [pc, #360]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	f023 0301 	bic.w	r3, r3, #1
 8002fd0:	6213      	str	r3, [r2, #32]
 8002fd2:	4b58      	ldr	r3, [pc, #352]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	4a57      	ldr	r2, [pc, #348]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	f023 0304 	bic.w	r3, r3, #4
 8002fdc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d015      	beq.n	8003012 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe6:	f7fe ff2b 	bl	8001e40 <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fec:	e00a      	b.n	8003004 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe ff27 	bl	8001e40 <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0b1      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003004:	4b4b      	ldr	r3, [pc, #300]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	6a1b      	ldr	r3, [r3, #32]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0ee      	beq.n	8002fee <HAL_RCC_OscConfig+0x37e>
 8003010:	e014      	b.n	800303c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003012:	f7fe ff15 	bl	8001e40 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800301a:	f7fe ff11 	bl	8001e40 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003028:	4293      	cmp	r3, r2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e09b      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003030:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800303c:	7dfb      	ldrb	r3, [r7, #23]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d105      	bne.n	800304e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003042:	4b3c      	ldr	r3, [pc, #240]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4a3b      	ldr	r2, [pc, #236]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800304c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 8087 	beq.w	8003166 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003058:	4b36      	ldr	r3, [pc, #216]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f003 030c 	and.w	r3, r3, #12
 8003060:	2b08      	cmp	r3, #8
 8003062:	d061      	beq.n	8003128 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b02      	cmp	r3, #2
 800306a:	d146      	bne.n	80030fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800306c:	4b33      	ldr	r3, [pc, #204]	@ (800313c <HAL_RCC_OscConfig+0x4cc>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe fee5 	bl	8001e40 <HAL_GetTick>
 8003076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fee1 	bl	8001e40 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e06d      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800308c:	4b29      	ldr	r3, [pc, #164]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030a0:	d108      	bne.n	80030b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030a2:	4b24      	ldr	r3, [pc, #144]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4921      	ldr	r1, [pc, #132]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b4:	4b1f      	ldr	r3, [pc, #124]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a19      	ldr	r1, [r3, #32]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	430b      	orrs	r3, r1
 80030c6:	491b      	ldr	r1, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030cc:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <HAL_RCC_OscConfig+0x4cc>)
 80030ce:	2201      	movs	r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d2:	f7fe feb5 	bl	8001e40 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030da:	f7fe feb1 	bl	8001e40 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e03d      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x46a>
 80030f8:	e035      	b.n	8003166 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_RCC_OscConfig+0x4cc>)
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fe9e 	bl	8001e40 <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003108:	f7fe fe9a 	bl	8001e40 <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b02      	cmp	r3, #2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e026      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800311a:	4b06      	ldr	r3, [pc, #24]	@ (8003134 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f0      	bne.n	8003108 <HAL_RCC_OscConfig+0x498>
 8003126:	e01e      	b.n	8003166 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d107      	bne.n	8003140 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	e019      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
 8003134:	40021000 	.word	0x40021000
 8003138:	40007000 	.word	0x40007000
 800313c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003140:	4b0b      	ldr	r3, [pc, #44]	@ (8003170 <HAL_RCC_OscConfig+0x500>)
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	429a      	cmp	r2, r3
 8003152:	d106      	bne.n	8003162 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	429a      	cmp	r2, r3
 8003160:	d001      	beq.n	8003166 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000

08003174 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d101      	bne.n	8003188 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0d0      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003188:	4b6a      	ldr	r3, [pc, #424]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	683a      	ldr	r2, [r7, #0]
 8003192:	429a      	cmp	r2, r3
 8003194:	d910      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003196:	4b67      	ldr	r3, [pc, #412]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 0207 	bic.w	r2, r3, #7
 800319e:	4965      	ldr	r1, [pc, #404]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a58      	ldr	r2, [pc, #352]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80031d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80031da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	4a52      	ldr	r2, [pc, #328]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80031ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80031f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003202:	4313      	orrs	r3, r2
 8003204:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d040      	beq.n	8003294 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d115      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d107      	bne.n	8003242 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003232:	4b41      	ldr	r3, [pc, #260]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e073      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003242:	4b3d      	ldr	r3, [pc, #244]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e06b      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003252:	4b39      	ldr	r3, [pc, #228]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f023 0203 	bic.w	r2, r3, #3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	4936      	ldr	r1, [pc, #216]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	4313      	orrs	r3, r2
 8003262:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003264:	f7fe fdec 	bl	8001e40 <HAL_GetTick>
 8003268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326a:	e00a      	b.n	8003282 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800326c:	f7fe fde8 	bl	8001e40 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e053      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	4b2d      	ldr	r3, [pc, #180]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f003 020c 	and.w	r2, r3, #12
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	429a      	cmp	r2, r3
 8003292:	d1eb      	bne.n	800326c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003294:	4b27      	ldr	r3, [pc, #156]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d210      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a2:	4b24      	ldr	r3, [pc, #144]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f023 0207 	bic.w	r2, r3, #7
 80032aa:	4922      	ldr	r1, [pc, #136]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032ee:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	@ (800333c <HAL_RCC_ClockConfig+0x1c8>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_RCC_ClockConfig+0x1cc>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1d0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fe fd4a 	bl	8001dbc <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40022000 	.word	0x40022000
 8003338:	40021000 	.word	0x40021000
 800333c:	08005e38 	.word	0x08005e38
 8003340:	20000054 	.word	0x20000054
 8003344:	20000058 	.word	0x20000058

08003348 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	b480      	push	{r7}
 800334a:	b087      	sub	sp, #28
 800334c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	2300      	movs	r3, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]
 800335a:	2300      	movs	r3, #0
 800335c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f003 030c 	and.w	r3, r3, #12
 800336e:	2b04      	cmp	r3, #4
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x30>
 8003372:	2b08      	cmp	r3, #8
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x36>
 8003376:	e027      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003378:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x98>)
 800337a:	613b      	str	r3, [r7, #16]
      break;
 800337c:	e027      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	0c9b      	lsrs	r3, r3, #18
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	4a17      	ldr	r2, [pc, #92]	@ (80033e4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003388:	5cd3      	ldrb	r3, [r2, r3]
 800338a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d010      	beq.n	80033b8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003396:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x94>)
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	0c5b      	lsrs	r3, r3, #17
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	4a11      	ldr	r2, [pc, #68]	@ (80033e8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80033a2:	5cd3      	ldrb	r3, [r2, r3]
 80033a4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a0d      	ldr	r2, [pc, #52]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033aa:	fb03 f202 	mul.w	r2, r3, r2
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	e004      	b.n	80033c2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0c      	ldr	r2, [pc, #48]	@ (80033ec <HAL_RCC_GetSysClockFreq+0xa4>)
 80033bc:	fb02 f303 	mul.w	r3, r2, r3
 80033c0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	613b      	str	r3, [r7, #16]
      break;
 80033c6:	e002      	b.n	80033ce <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <HAL_RCC_GetSysClockFreq+0x98>)
 80033ca:	613b      	str	r3, [r7, #16]
      break;
 80033cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ce:	693b      	ldr	r3, [r7, #16]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bc80      	pop	{r7}
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40021000 	.word	0x40021000
 80033e0:	007a1200 	.word	0x007a1200
 80033e4:	08005e50 	.word	0x08005e50
 80033e8:	08005e60 	.word	0x08005e60
 80033ec:	003d0900 	.word	0x003d0900

080033f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033f4:	4b02      	ldr	r3, [pc, #8]	@ (8003400 <HAL_RCC_GetHCLKFreq+0x10>)
 80033f6:	681b      	ldr	r3, [r3, #0]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	20000054 	.word	0x20000054

08003404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003408:	f7ff fff2 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 800340c:	4602      	mov	r2, r0
 800340e:	4b05      	ldr	r3, [pc, #20]	@ (8003424 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	0a1b      	lsrs	r3, r3, #8
 8003414:	f003 0307 	and.w	r3, r3, #7
 8003418:	4903      	ldr	r1, [pc, #12]	@ (8003428 <HAL_RCC_GetPCLK1Freq+0x24>)
 800341a:	5ccb      	ldrb	r3, [r1, r3]
 800341c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003420:	4618      	mov	r0, r3
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40021000 	.word	0x40021000
 8003428:	08005e48 	.word	0x08005e48

0800342c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003430:	f7ff ffde 	bl	80033f0 <HAL_RCC_GetHCLKFreq>
 8003434:	4602      	mov	r2, r0
 8003436:	4b05      	ldr	r3, [pc, #20]	@ (800344c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	0adb      	lsrs	r3, r3, #11
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	4903      	ldr	r1, [pc, #12]	@ (8003450 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003442:	5ccb      	ldrb	r3, [r1, r3]
 8003444:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003448:	4618      	mov	r0, r3
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40021000 	.word	0x40021000
 8003450:	08005e48 	.word	0x08005e48

08003454 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800345c:	4b0a      	ldr	r3, [pc, #40]	@ (8003488 <RCC_Delay+0x34>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a0a      	ldr	r2, [pc, #40]	@ (800348c <RCC_Delay+0x38>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0a5b      	lsrs	r3, r3, #9
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	fb02 f303 	mul.w	r3, r2, r3
 800346e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003470:	bf00      	nop
  }
  while (Delay --);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1e5a      	subs	r2, r3, #1
 8003476:	60fa      	str	r2, [r7, #12]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d1f9      	bne.n	8003470 <RCC_Delay+0x1c>
}
 800347c:	bf00      	nop
 800347e:	bf00      	nop
 8003480:	3714      	adds	r7, #20
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr
 8003488:	20000054 	.word	0x20000054
 800348c:	10624dd3 	.word	0x10624dd3

08003490 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	613b      	str	r3, [r7, #16]
 800349c:	2300      	movs	r3, #0
 800349e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d07d      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80034ac:	2300      	movs	r3, #0
 80034ae:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034b0:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034bc:	4b4c      	ldr	r3, [pc, #304]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	4a4b      	ldr	r2, [pc, #300]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034c6:	61d3      	str	r3, [r2, #28]
 80034c8:	4b49      	ldr	r3, [pc, #292]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d4:	2301      	movs	r3, #1
 80034d6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b46      	ldr	r3, [pc, #280]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d118      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e4:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a42      	ldr	r2, [pc, #264]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f0:	f7fe fca6 	bl	8001e40 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	e008      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f8:	f7fe fca2 	bl	8001e40 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	2b64      	cmp	r3, #100	@ 0x64
 8003504:	d901      	bls.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e06d      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350a:	4b3a      	ldr	r3, [pc, #232]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003512:	2b00      	cmp	r3, #0
 8003514:	d0f0      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003516:	4b36      	ldr	r3, [pc, #216]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800351e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d02e      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	429a      	cmp	r2, r3
 8003532:	d027      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003534:	4b2e      	ldr	r3, [pc, #184]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800353c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800353e:	4b2e      	ldr	r3, [pc, #184]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003544:	4b2c      	ldr	r3, [pc, #176]	@ (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003546:	2200      	movs	r2, #0
 8003548:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800354a:	4a29      	ldr	r2, [pc, #164]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d014      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800355a:	f7fe fc71 	bl	8001e40 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003562:	f7fe fc6d 	bl	8001e40 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003570:	4293      	cmp	r3, r2
 8003572:	d901      	bls.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e036      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800357a:	6a1b      	ldr	r3, [r3, #32]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d0ee      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003584:	4b1a      	ldr	r3, [pc, #104]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003586:	6a1b      	ldr	r3, [r3, #32]
 8003588:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4917      	ldr	r1, [pc, #92]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	4313      	orrs	r3, r2
 8003594:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003596:	7dfb      	ldrb	r3, [r7, #23]
 8003598:	2b01      	cmp	r3, #1
 800359a:	d105      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800359c:	4b14      	ldr	r3, [pc, #80]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	4a13      	ldr	r2, [pc, #76]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	490b      	ldr	r1, [pc, #44]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0310 	and.w	r3, r3, #16
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035d2:	4b07      	ldr	r3, [pc, #28]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	4904      	ldr	r1, [pc, #16]	@ (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3718      	adds	r7, #24
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	40007000 	.word	0x40007000
 80035f8:	42420440 	.word	0x42420440

080035fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e041      	b.n	8003692 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7fe f9b4 	bl	8001990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2202      	movs	r2, #2
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3304      	adds	r3, #4
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 ffa4 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1a      	ldr	r2, [r3, #32]
 80036a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10f      	bne.n	80036d2 <HAL_TIM_Base_Stop+0x38>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a1a      	ldr	r2, [r3, #32]
 80036b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80036bc:	4013      	ands	r3, r2
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_TIM_Base_Stop+0x38>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0201 	bic.w	r2, r2, #1
 80036d0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d001      	beq.n	8003700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e03a      	b.n	8003776 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0201 	orr.w	r2, r2, #1
 8003716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a18      	ldr	r2, [pc, #96]	@ (8003780 <HAL_TIM_Base_Start_IT+0x98>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00e      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800372a:	d009      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a14      	ldr	r2, [pc, #80]	@ (8003784 <HAL_TIM_Base_Start_IT+0x9c>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_Base_Start_IT+0x58>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a13      	ldr	r2, [pc, #76]	@ (8003788 <HAL_TIM_Base_Start_IT+0xa0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d111      	bne.n	8003764 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f003 0307 	and.w	r3, r3, #7
 800374a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d010      	beq.n	8003774 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003762:	e007      	b.n	8003774 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	bc80      	pop	{r7}
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40000400 	.word	0x40000400
 8003788:	40000800 	.word	0x40000800

0800378c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6a1a      	ldr	r2, [r3, #32]
 80037aa:	f241 1311 	movw	r3, #4369	@ 0x1111
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10f      	bne.n	80037d4 <HAL_TIM_Base_Stop_IT+0x48>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a1a      	ldr	r2, [r3, #32]
 80037ba:	f240 4344 	movw	r3, #1092	@ 0x444
 80037be:	4013      	ands	r3, r2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d107      	bne.n	80037d4 <HAL_TIM_Base_Stop_IT+0x48>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0201 	bic.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e041      	b.n	800387e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f839 	bl	8003886 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	3304      	adds	r3, #4
 8003824:	4619      	mov	r1, r3
 8003826:	4610      	mov	r0, r2
 8003828:	f000 feae 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2201      	movs	r2, #1
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800388e:	bf00      	nop
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_TIM_OC_Start_IT+0x28>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	bf14      	ite	ne
 80038b8:	2301      	movne	r3, #1
 80038ba:	2300      	moveq	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e022      	b.n	8003906 <HAL_TIM_OC_Start_IT+0x6e>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b04      	cmp	r3, #4
 80038c4:	d109      	bne.n	80038da <HAL_TIM_OC_Start_IT+0x42>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	bf14      	ite	ne
 80038d2:	2301      	movne	r3, #1
 80038d4:	2300      	moveq	r3, #0
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	e015      	b.n	8003906 <HAL_TIM_OC_Start_IT+0x6e>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d109      	bne.n	80038f4 <HAL_TIM_OC_Start_IT+0x5c>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	bf14      	ite	ne
 80038ec:	2301      	movne	r3, #1
 80038ee:	2300      	moveq	r3, #0
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e008      	b.n	8003906 <HAL_TIM_OC_Start_IT+0x6e>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	bf14      	ite	ne
 8003900:	2301      	movne	r3, #1
 8003902:	2300      	moveq	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e0a9      	b.n	8003a62 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d104      	bne.n	800391e <HAL_TIM_OC_Start_IT+0x86>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800391c:	e013      	b.n	8003946 <HAL_TIM_OC_Start_IT+0xae>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b04      	cmp	r3, #4
 8003922:	d104      	bne.n	800392e <HAL_TIM_OC_Start_IT+0x96>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2202      	movs	r2, #2
 8003928:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800392c:	e00b      	b.n	8003946 <HAL_TIM_OC_Start_IT+0xae>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b08      	cmp	r3, #8
 8003932:	d104      	bne.n	800393e <HAL_TIM_OC_Start_IT+0xa6>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800393c:	e003      	b.n	8003946 <HAL_TIM_OC_Start_IT+0xae>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b0c      	cmp	r3, #12
 800394a:	d841      	bhi.n	80039d0 <HAL_TIM_OC_Start_IT+0x138>
 800394c:	a201      	add	r2, pc, #4	@ (adr r2, 8003954 <HAL_TIM_OC_Start_IT+0xbc>)
 800394e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003952:	bf00      	nop
 8003954:	08003989 	.word	0x08003989
 8003958:	080039d1 	.word	0x080039d1
 800395c:	080039d1 	.word	0x080039d1
 8003960:	080039d1 	.word	0x080039d1
 8003964:	0800399b 	.word	0x0800399b
 8003968:	080039d1 	.word	0x080039d1
 800396c:	080039d1 	.word	0x080039d1
 8003970:	080039d1 	.word	0x080039d1
 8003974:	080039ad 	.word	0x080039ad
 8003978:	080039d1 	.word	0x080039d1
 800397c:	080039d1 	.word	0x080039d1
 8003980:	080039d1 	.word	0x080039d1
 8003984:	080039bf 	.word	0x080039bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68da      	ldr	r2, [r3, #12]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0202 	orr.w	r2, r2, #2
 8003996:	60da      	str	r2, [r3, #12]
      break;
 8003998:	e01d      	b.n	80039d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68da      	ldr	r2, [r3, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f042 0204 	orr.w	r2, r2, #4
 80039a8:	60da      	str	r2, [r3, #12]
      break;
 80039aa:	e014      	b.n	80039d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0208 	orr.w	r2, r2, #8
 80039ba:	60da      	str	r2, [r3, #12]
      break;
 80039bc:	e00b      	b.n	80039d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0210 	orr.w	r2, r2, #16
 80039cc:	60da      	str	r2, [r3, #12]
      break;
 80039ce:	e002      	b.n	80039d6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d141      	bne.n	8003a60 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	6839      	ldr	r1, [r7, #0]
 80039e4:	4618      	mov	r0, r3
 80039e6:	f001 f947 	bl	8004c78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1f      	ldr	r2, [pc, #124]	@ (8003a6c <HAL_TIM_OC_Start_IT+0x1d4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d107      	bne.n	8003a04 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a18      	ldr	r2, [pc, #96]	@ (8003a6c <HAL_TIM_OC_Start_IT+0x1d4>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d00e      	beq.n	8003a2c <HAL_TIM_OC_Start_IT+0x194>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a16:	d009      	beq.n	8003a2c <HAL_TIM_OC_Start_IT+0x194>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a14      	ldr	r2, [pc, #80]	@ (8003a70 <HAL_TIM_OC_Start_IT+0x1d8>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d004      	beq.n	8003a2c <HAL_TIM_OC_Start_IT+0x194>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a13      	ldr	r2, [pc, #76]	@ (8003a74 <HAL_TIM_OC_Start_IT+0x1dc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d111      	bne.n	8003a50 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 0307 	and.w	r3, r3, #7
 8003a36:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d010      	beq.n	8003a60 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f042 0201 	orr.w	r2, r2, #1
 8003a4c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4e:	e007      	b.n	8003a60 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40012c00 	.word	0x40012c00
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800

08003a78 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b084      	sub	sp, #16
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
 8003a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b0c      	cmp	r3, #12
 8003a8a:	d841      	bhi.n	8003b10 <HAL_TIM_OC_Stop_IT+0x98>
 8003a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <HAL_TIM_OC_Stop_IT+0x1c>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac9 	.word	0x08003ac9
 8003a98:	08003b11 	.word	0x08003b11
 8003a9c:	08003b11 	.word	0x08003b11
 8003aa0:	08003b11 	.word	0x08003b11
 8003aa4:	08003adb 	.word	0x08003adb
 8003aa8:	08003b11 	.word	0x08003b11
 8003aac:	08003b11 	.word	0x08003b11
 8003ab0:	08003b11 	.word	0x08003b11
 8003ab4:	08003aed 	.word	0x08003aed
 8003ab8:	08003b11 	.word	0x08003b11
 8003abc:	08003b11 	.word	0x08003b11
 8003ac0:	08003b11 	.word	0x08003b11
 8003ac4:	08003aff 	.word	0x08003aff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0202 	bic.w	r2, r2, #2
 8003ad6:	60da      	str	r2, [r3, #12]
      break;
 8003ad8:	e01d      	b.n	8003b16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 0204 	bic.w	r2, r2, #4
 8003ae8:	60da      	str	r2, [r3, #12]
      break;
 8003aea:	e014      	b.n	8003b16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68da      	ldr	r2, [r3, #12]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0208 	bic.w	r2, r2, #8
 8003afa:	60da      	str	r2, [r3, #12]
      break;
 8003afc:	e00b      	b.n	8003b16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68da      	ldr	r2, [r3, #12]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0210 	bic.w	r2, r2, #16
 8003b0c:	60da      	str	r2, [r3, #12]
      break;
 8003b0e:	e002      	b.n	8003b16 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
      break;
 8003b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d157      	bne.n	8003bcc <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2200      	movs	r2, #0
 8003b22:	6839      	ldr	r1, [r7, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f8a7 	bl	8004c78 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003bd8 <HAL_TIM_OC_Stop_IT+0x160>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d117      	bne.n	8003b64 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6a1a      	ldr	r2, [r3, #32]
 8003b3a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10f      	bne.n	8003b64 <HAL_TIM_OC_Stop_IT+0xec>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	6a1a      	ldr	r2, [r3, #32]
 8003b4a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b4e:	4013      	ands	r3, r2
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d107      	bne.n	8003b64 <HAL_TIM_OC_Stop_IT+0xec>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b62:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6a1a      	ldr	r2, [r3, #32]
 8003b6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003b6e:	4013      	ands	r3, r2
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10f      	bne.n	8003b94 <HAL_TIM_OC_Stop_IT+0x11c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6a1a      	ldr	r2, [r3, #32]
 8003b7a:	f240 4344 	movw	r3, #1092	@ 0x444
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d107      	bne.n	8003b94 <HAL_TIM_OC_Stop_IT+0x11c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <HAL_TIM_OC_Stop_IT+0x12c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba2:	e013      	b.n	8003bcc <HAL_TIM_OC_Stop_IT+0x154>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d104      	bne.n	8003bb4 <HAL_TIM_OC_Stop_IT+0x13c>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb2:	e00b      	b.n	8003bcc <HAL_TIM_OC_Stop_IT+0x154>
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d104      	bne.n	8003bc4 <HAL_TIM_OC_Stop_IT+0x14c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bc2:	e003      	b.n	8003bcc <HAL_TIM_OC_Stop_IT+0x154>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40012c00 	.word	0x40012c00

08003bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f839 	bl	8003c7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fcb4 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bc80      	pop	{r7}
 8003c8a:	4770      	bx	lr

08003c8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <HAL_TIM_PWM_Start+0x24>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	bf14      	ite	ne
 8003ca8:	2301      	movne	r3, #1
 8003caa:	2300      	moveq	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	e022      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	d109      	bne.n	8003cca <HAL_TIM_PWM_Start+0x3e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	bf14      	ite	ne
 8003cc2:	2301      	movne	r3, #1
 8003cc4:	2300      	moveq	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	e015      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	2b08      	cmp	r3, #8
 8003cce:	d109      	bne.n	8003ce4 <HAL_TIM_PWM_Start+0x58>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	bf14      	ite	ne
 8003cdc:	2301      	movne	r3, #1
 8003cde:	2300      	moveq	r3, #0
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	e008      	b.n	8003cf6 <HAL_TIM_PWM_Start+0x6a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	bf14      	ite	ne
 8003cf0:	2301      	movne	r3, #1
 8003cf2:	2300      	moveq	r3, #0
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e05e      	b.n	8003dbc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d104      	bne.n	8003d0e <HAL_TIM_PWM_Start+0x82>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	e013      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	2b04      	cmp	r3, #4
 8003d12:	d104      	bne.n	8003d1e <HAL_TIM_PWM_Start+0x92>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d1c:	e00b      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	2b08      	cmp	r3, #8
 8003d22:	d104      	bne.n	8003d2e <HAL_TIM_PWM_Start+0xa2>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d2c:	e003      	b.n	8003d36 <HAL_TIM_PWM_Start+0xaa>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2202      	movs	r2, #2
 8003d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 ff9a 	bl	8004c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a1e      	ldr	r2, [pc, #120]	@ (8003dc4 <HAL_TIM_PWM_Start+0x138>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d107      	bne.n	8003d5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <HAL_TIM_PWM_Start+0x138>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00e      	beq.n	8003d86 <HAL_TIM_PWM_Start+0xfa>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d70:	d009      	beq.n	8003d86 <HAL_TIM_PWM_Start+0xfa>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a14      	ldr	r2, [pc, #80]	@ (8003dc8 <HAL_TIM_PWM_Start+0x13c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d004      	beq.n	8003d86 <HAL_TIM_PWM_Start+0xfa>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a12      	ldr	r2, [pc, #72]	@ (8003dcc <HAL_TIM_PWM_Start+0x140>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d111      	bne.n	8003daa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 0307 	and.w	r3, r3, #7
 8003d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b06      	cmp	r3, #6
 8003d96:	d010      	beq.n	8003dba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f042 0201 	orr.w	r2, r2, #1
 8003da6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da8:	e007      	b.n	8003dba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f042 0201 	orr.w	r2, r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	40012c00 	.word	0x40012c00
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800

08003dd0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2200      	movs	r2, #0
 8003de0:	6839      	ldr	r1, [r7, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 ff48 	bl	8004c78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a29      	ldr	r2, [pc, #164]	@ (8003e94 <HAL_TIM_PWM_Stop+0xc4>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d117      	bne.n	8003e22 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6a1a      	ldr	r2, [r3, #32]
 8003df8:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10f      	bne.n	8003e22 <HAL_TIM_PWM_Stop+0x52>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d107      	bne.n	8003e22 <HAL_TIM_PWM_Stop+0x52>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10f      	bne.n	8003e52 <HAL_TIM_PWM_Stop+0x82>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	f240 4344 	movw	r3, #1092	@ 0x444
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d107      	bne.n	8003e52 <HAL_TIM_PWM_Stop+0x82>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0201 	bic.w	r2, r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Stop+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e60:	e013      	b.n	8003e8a <HAL_TIM_PWM_Stop+0xba>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b04      	cmp	r3, #4
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Stop+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e70:	e00b      	b.n	8003e8a <HAL_TIM_PWM_Stop+0xba>
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b08      	cmp	r3, #8
 8003e76:	d104      	bne.n	8003e82 <HAL_TIM_PWM_Stop+0xb2>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e80:	e003      	b.n	8003e8a <HAL_TIM_PWM_Stop+0xba>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40012c00 	.word	0x40012c00

08003e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d020      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01b      	beq.n	8003efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f06f 0202 	mvn.w	r2, #2
 8003ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fc febe 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8003ee8:	e005      	b.n	8003ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f7fd f836 	bl	8000f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 fb36 	bl	8004562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d020      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d01b      	beq.n	8003f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0204 	mvn.w	r2, #4
 8003f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	699b      	ldr	r3, [r3, #24]
 8003f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fc fe98 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd f810 	bl	8000f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fb10 	bl	8004562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f003 0308 	and.w	r3, r3, #8
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d020      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 0308 	and.w	r3, r3, #8
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d01b      	beq.n	8003f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f06f 0208 	mvn.w	r2, #8
 8003f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2204      	movs	r2, #4
 8003f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	f003 0303 	and.w	r3, r3, #3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fc fe72 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8003f80:	e005      	b.n	8003f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7fc ffea 	bl	8000f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 faea 	bl	8004562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0310 	and.w	r3, r3, #16
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0310 	and.w	r3, r3, #16
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0210 	mvn.w	r2, #16
 8003fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f7fc fe4c 	bl	8000c64 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7fc ffc4 	bl	8000f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fac4 	bl	8004562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00c      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d007      	beq.n	8004004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0201 	mvn.w	r2, #1
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 faa6 	bl	8004550 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00c      	beq.n	8004028 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004014:	2b00      	cmp	r3, #0
 8004016:	d007      	beq.n	8004028 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f001 f830 	bl	8005088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00c      	beq.n	800404c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	d007      	beq.n	800404c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 fa94 	bl	8004574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00c      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d007      	beq.n	8004070 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0220 	mvn.w	r2, #32
 8004068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f001 f803 	bl	8005076 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004084:	2300      	movs	r3, #0
 8004086:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004092:	2302      	movs	r3, #2
 8004094:	e048      	b.n	8004128 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2b0c      	cmp	r3, #12
 80040a2:	d839      	bhi.n	8004118 <HAL_TIM_OC_ConfigChannel+0xa0>
 80040a4:	a201      	add	r2, pc, #4	@ (adr r2, 80040ac <HAL_TIM_OC_ConfigChannel+0x34>)
 80040a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040aa:	bf00      	nop
 80040ac:	080040e1 	.word	0x080040e1
 80040b0:	08004119 	.word	0x08004119
 80040b4:	08004119 	.word	0x08004119
 80040b8:	08004119 	.word	0x08004119
 80040bc:	080040ef 	.word	0x080040ef
 80040c0:	08004119 	.word	0x08004119
 80040c4:	08004119 	.word	0x08004119
 80040c8:	08004119 	.word	0x08004119
 80040cc:	080040fd 	.word	0x080040fd
 80040d0:	08004119 	.word	0x08004119
 80040d4:	08004119 	.word	0x08004119
 80040d8:	08004119 	.word	0x08004119
 80040dc:	0800410b 	.word	0x0800410b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fabc 	bl	8004664 <TIM_OC1_SetConfig>
      break;
 80040ec:	e017      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f000 fb1b 	bl	8004730 <TIM_OC2_SetConfig>
      break;
 80040fa:	e010      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68b9      	ldr	r1, [r7, #8]
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fb7e 	bl	8004804 <TIM_OC3_SetConfig>
      break;
 8004108:	e009      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fbe1 	bl	80048d8 <TIM_OC4_SetConfig>
      break;
 8004116:	e002      	b.n	800411e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004146:	2b01      	cmp	r3, #1
 8004148:	d101      	bne.n	800414e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800414a:	2302      	movs	r3, #2
 800414c:	e0ae      	b.n	80042ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2201      	movs	r2, #1
 8004152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	f200 809f 	bhi.w	800429c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800415e:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004164:	08004199 	.word	0x08004199
 8004168:	0800429d 	.word	0x0800429d
 800416c:	0800429d 	.word	0x0800429d
 8004170:	0800429d 	.word	0x0800429d
 8004174:	080041d9 	.word	0x080041d9
 8004178:	0800429d 	.word	0x0800429d
 800417c:	0800429d 	.word	0x0800429d
 8004180:	0800429d 	.word	0x0800429d
 8004184:	0800421b 	.word	0x0800421b
 8004188:	0800429d 	.word	0x0800429d
 800418c:	0800429d 	.word	0x0800429d
 8004190:	0800429d 	.word	0x0800429d
 8004194:	0800425b 	.word	0x0800425b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa60 	bl	8004664 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0208 	orr.w	r2, r2, #8
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f022 0204 	bic.w	r2, r2, #4
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691a      	ldr	r2, [r3, #16]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	430a      	orrs	r2, r1
 80041d4:	619a      	str	r2, [r3, #24]
      break;
 80041d6:	e064      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 faa6 	bl	8004730 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	619a      	str	r2, [r3, #24]
      break;
 8004218:	e043      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 faef 	bl	8004804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0208 	orr.w	r2, r2, #8
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0204 	bic.w	r2, r2, #4
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691a      	ldr	r2, [r3, #16]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	61da      	str	r2, [r3, #28]
      break;
 8004258:	e023      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fb39 	bl	80048d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	61da      	str	r2, [r3, #28]
      break;
 800429a:	e002      	b.n	80042a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	75fb      	strb	r3, [r7, #23]
      break;
 80042a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3718      	adds	r7, #24
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d101      	bne.n	80042d0 <HAL_TIM_ConfigClockSource+0x1c>
 80042cc:	2302      	movs	r3, #2
 80042ce:	e0b4      	b.n	800443a <HAL_TIM_ConfigClockSource+0x186>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2202      	movs	r2, #2
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004308:	d03e      	beq.n	8004388 <HAL_TIM_ConfigClockSource+0xd4>
 800430a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800430e:	f200 8087 	bhi.w	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	f000 8086 	beq.w	8004426 <HAL_TIM_ConfigClockSource+0x172>
 800431a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431e:	d87f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004320:	2b70      	cmp	r3, #112	@ 0x70
 8004322:	d01a      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xa6>
 8004324:	2b70      	cmp	r3, #112	@ 0x70
 8004326:	d87b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004328:	2b60      	cmp	r3, #96	@ 0x60
 800432a:	d050      	beq.n	80043ce <HAL_TIM_ConfigClockSource+0x11a>
 800432c:	2b60      	cmp	r3, #96	@ 0x60
 800432e:	d877      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004330:	2b50      	cmp	r3, #80	@ 0x50
 8004332:	d03c      	beq.n	80043ae <HAL_TIM_ConfigClockSource+0xfa>
 8004334:	2b50      	cmp	r3, #80	@ 0x50
 8004336:	d873      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004338:	2b40      	cmp	r3, #64	@ 0x40
 800433a:	d058      	beq.n	80043ee <HAL_TIM_ConfigClockSource+0x13a>
 800433c:	2b40      	cmp	r3, #64	@ 0x40
 800433e:	d86f      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004340:	2b30      	cmp	r3, #48	@ 0x30
 8004342:	d064      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004344:	2b30      	cmp	r3, #48	@ 0x30
 8004346:	d86b      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d060      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 800434c:	2b20      	cmp	r3, #32
 800434e:	d867      	bhi.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d05c      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004354:	2b10      	cmp	r3, #16
 8004356:	d05a      	beq.n	800440e <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	e062      	b.n	8004420 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800436a:	f000 fc66 	bl	8004c3a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800437c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	609a      	str	r2, [r3, #8]
      break;
 8004386:	e04f      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004398:	f000 fc4f 	bl	8004c3a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	689a      	ldr	r2, [r3, #8]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043aa:	609a      	str	r2, [r3, #8]
      break;
 80043ac:	e03c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	461a      	mov	r2, r3
 80043bc:	f000 fbc6 	bl	8004b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2150      	movs	r1, #80	@ 0x50
 80043c6:	4618      	mov	r0, r3
 80043c8:	f000 fc1d 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 80043cc:	e02c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	461a      	mov	r2, r3
 80043dc:	f000 fbe4 	bl	8004ba8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2160      	movs	r1, #96	@ 0x60
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fc0d 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 80043ec:	e01c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	461a      	mov	r2, r3
 80043fc:	f000 fba6 	bl	8004b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2140      	movs	r1, #64	@ 0x40
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fbfd 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 800440c:	e00c      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4619      	mov	r1, r3
 8004418:	4610      	mov	r0, r2
 800441a:	f000 fbf4 	bl	8004c06 <TIM_ITRx_SetConfig>
      break;
 800441e:	e003      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	73fb      	strb	r3, [r7, #15]
      break;
 8004424:	e000      	b.n	8004428 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004426:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004438:	7bfb      	ldrb	r3, [r7, #15]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b082      	sub	sp, #8
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
 800444a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_TIM_SlaveConfigSynchro+0x18>
 8004456:	2302      	movs	r3, #2
 8004458:	e031      	b.n	80044be <HAL_TIM_SlaveConfigSynchro+0x7c>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2202      	movs	r2, #2
 8004466:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800446a:	6839      	ldr	r1, [r7, #0]
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fa81 	bl	8004974 <TIM_SlaveTimer_SetConfig>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d009      	beq.n	800448c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e018      	b.n	80044be <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044aa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3708      	adds	r7, #8
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80044d2:	2300      	movs	r3, #0
 80044d4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b0c      	cmp	r3, #12
 80044da:	d831      	bhi.n	8004540 <HAL_TIM_ReadCapturedValue+0x78>
 80044dc:	a201      	add	r2, pc, #4	@ (adr r2, 80044e4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80044de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044e2:	bf00      	nop
 80044e4:	08004519 	.word	0x08004519
 80044e8:	08004541 	.word	0x08004541
 80044ec:	08004541 	.word	0x08004541
 80044f0:	08004541 	.word	0x08004541
 80044f4:	08004523 	.word	0x08004523
 80044f8:	08004541 	.word	0x08004541
 80044fc:	08004541 	.word	0x08004541
 8004500:	08004541 	.word	0x08004541
 8004504:	0800452d 	.word	0x0800452d
 8004508:	08004541 	.word	0x08004541
 800450c:	08004541 	.word	0x08004541
 8004510:	08004541 	.word	0x08004541
 8004514:	08004537 	.word	0x08004537
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800451e:	60fb      	str	r3, [r7, #12]

      break;
 8004520:	e00f      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004528:	60fb      	str	r3, [r7, #12]

      break;
 800452a:	e00a      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004532:	60fb      	str	r3, [r7, #12]

      break;
 8004534:	e005      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800453c:	60fb      	str	r3, [r7, #12]

      break;
 800453e:	e000      	b.n	8004542 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004540:	bf00      	nop
  }

  return tmpreg;
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3714      	adds	r7, #20
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop

08004550 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	bc80      	pop	{r7}
 8004560:	4770      	bx	lr

08004562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
	...

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a2f      	ldr	r2, [pc, #188]	@ (8004658 <TIM_Base_SetConfig+0xd0>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d00b      	beq.n	80045b8 <TIM_Base_SetConfig+0x30>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a6:	d007      	beq.n	80045b8 <TIM_Base_SetConfig+0x30>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a2c      	ldr	r2, [pc, #176]	@ (800465c <TIM_Base_SetConfig+0xd4>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d003      	beq.n	80045b8 <TIM_Base_SetConfig+0x30>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004660 <TIM_Base_SetConfig+0xd8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d108      	bne.n	80045ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	68fa      	ldr	r2, [r7, #12]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a22      	ldr	r2, [pc, #136]	@ (8004658 <TIM_Base_SetConfig+0xd0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00b      	beq.n	80045ea <TIM_Base_SetConfig+0x62>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d8:	d007      	beq.n	80045ea <TIM_Base_SetConfig+0x62>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1f      	ldr	r2, [pc, #124]	@ (800465c <TIM_Base_SetConfig+0xd4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d003      	beq.n	80045ea <TIM_Base_SetConfig+0x62>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004660 <TIM_Base_SetConfig+0xd8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68fa      	ldr	r2, [r7, #12]
 800460e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a0d      	ldr	r2, [pc, #52]	@ (8004658 <TIM_Base_SetConfig+0xd0>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d103      	bne.n	8004630 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	691a      	ldr	r2, [r3, #16]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	691b      	ldr	r3, [r3, #16]
 800463a:	f003 0301 	and.w	r3, r3, #1
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	611a      	str	r2, [r3, #16]
  }
}
 800464e:	bf00      	nop
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800

08004664 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004664:	b480      	push	{r7}
 8004666:	b087      	sub	sp, #28
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 0201 	bic.w	r2, r3, #1
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0303 	bic.w	r3, r3, #3
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f023 0302 	bic.w	r3, r3, #2
 80046ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	@ (800472c <TIM_OC1_SetConfig+0xc8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10c      	bne.n	80046da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f023 0308 	bic.w	r3, r3, #8
 80046c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 0304 	bic.w	r3, r3, #4
 80046d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a13      	ldr	r2, [pc, #76]	@ (800472c <TIM_OC1_SetConfig+0xc8>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	4313      	orrs	r3, r2
 8004704:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	621a      	str	r2, [r3, #32]
}
 8004720:	bf00      	nop
 8004722:	371c      	adds	r7, #28
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40012c00 	.word	0x40012c00

08004730 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	f023 0210 	bic.w	r2, r3, #16
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004766:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4313      	orrs	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 0320 	bic.w	r3, r3, #32
 800477a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a1d      	ldr	r2, [pc, #116]	@ (8004800 <TIM_OC2_SetConfig+0xd0>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d10d      	bne.n	80047ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	011b      	lsls	r3, r3, #4
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	4313      	orrs	r3, r2
 80047a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a14      	ldr	r2, [pc, #80]	@ (8004800 <TIM_OC2_SetConfig+0xd0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d113      	bne.n	80047dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4313      	orrs	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	693a      	ldr	r2, [r7, #16]
 80047e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68fa      	ldr	r2, [r7, #12]
 80047e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	621a      	str	r2, [r3, #32]
}
 80047f6:	bf00      	nop
 80047f8:	371c      	adds	r7, #28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	40012c00 	.word	0x40012c00

08004804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f023 0303 	bic.w	r3, r3, #3
 800483a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	4313      	orrs	r3, r2
 8004844:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800484c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	697a      	ldr	r2, [r7, #20]
 8004856:	4313      	orrs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1d      	ldr	r2, [pc, #116]	@ (80048d4 <TIM_OC3_SetConfig+0xd0>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10d      	bne.n	800487e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004868:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	021b      	lsls	r3, r3, #8
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	4313      	orrs	r3, r2
 8004874:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800487c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a14      	ldr	r2, [pc, #80]	@ (80048d4 <TIM_OC3_SetConfig+0xd0>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d113      	bne.n	80048ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800488c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	695b      	ldr	r3, [r3, #20]
 800489a:	011b      	lsls	r3, r3, #4
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	4313      	orrs	r3, r2
 80048a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	685a      	ldr	r2, [r3, #4]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	621a      	str	r2, [r3, #32]
}
 80048c8:	bf00      	nop
 80048ca:	371c      	adds	r7, #28
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bc80      	pop	{r7}
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40012c00 	.word	0x40012c00

080048d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a1b      	ldr	r3, [r3, #32]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800490e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	021b      	lsls	r3, r3, #8
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	4313      	orrs	r3, r2
 800491a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004922:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	031b      	lsls	r3, r3, #12
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	4a0f      	ldr	r2, [pc, #60]	@ (8004970 <TIM_OC4_SetConfig+0x98>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d109      	bne.n	800494c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800493e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	019b      	lsls	r3, r3, #6
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68fa      	ldr	r2, [r7, #12]
 8004956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	621a      	str	r2, [r3, #32]
}
 8004966:	bf00      	nop
 8004968:	371c      	adds	r7, #28
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00

08004974 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004990:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f023 0307 	bic.w	r3, r3, #7
 80049a2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	693a      	ldr	r2, [r7, #16]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b70      	cmp	r3, #112	@ 0x70
 80049bc:	d01a      	beq.n	80049f4 <TIM_SlaveTimer_SetConfig+0x80>
 80049be:	2b70      	cmp	r3, #112	@ 0x70
 80049c0:	d860      	bhi.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
 80049c2:	2b60      	cmp	r3, #96	@ 0x60
 80049c4:	d054      	beq.n	8004a70 <TIM_SlaveTimer_SetConfig+0xfc>
 80049c6:	2b60      	cmp	r3, #96	@ 0x60
 80049c8:	d85c      	bhi.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
 80049ca:	2b50      	cmp	r3, #80	@ 0x50
 80049cc:	d046      	beq.n	8004a5c <TIM_SlaveTimer_SetConfig+0xe8>
 80049ce:	2b50      	cmp	r3, #80	@ 0x50
 80049d0:	d858      	bhi.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
 80049d2:	2b40      	cmp	r3, #64	@ 0x40
 80049d4:	d019      	beq.n	8004a0a <TIM_SlaveTimer_SetConfig+0x96>
 80049d6:	2b40      	cmp	r3, #64	@ 0x40
 80049d8:	d854      	bhi.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
 80049da:	2b30      	cmp	r3, #48	@ 0x30
 80049dc:	d055      	beq.n	8004a8a <TIM_SlaveTimer_SetConfig+0x116>
 80049de:	2b30      	cmp	r3, #48	@ 0x30
 80049e0:	d850      	bhi.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d051      	beq.n	8004a8a <TIM_SlaveTimer_SetConfig+0x116>
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d84c      	bhi.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d04d      	beq.n	8004a8a <TIM_SlaveTimer_SetConfig+0x116>
 80049ee:	2b10      	cmp	r3, #16
 80049f0:	d04b      	beq.n	8004a8a <TIM_SlaveTimer_SetConfig+0x116>
 80049f2:	e047      	b.n	8004a84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004a04:	f000 f919 	bl	8004c3a <TIM_ETR_SetConfig>
      break;
 8004a08:	e040      	b.n	8004a8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b05      	cmp	r3, #5
 8004a10:	d101      	bne.n	8004a16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e03b      	b.n	8004a8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0201 	bic.w	r2, r2, #1
 8004a2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	011b      	lsls	r3, r3, #4
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	621a      	str	r2, [r3, #32]
      break;
 8004a5a:	e017      	b.n	8004a8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a68:	461a      	mov	r2, r3
 8004a6a:	f000 f86f 	bl	8004b4c <TIM_TI1_ConfigInputStage>
      break;
 8004a6e:	e00d      	b.n	8004a8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f000 f893 	bl	8004ba8 <TIM_TI2_ConfigInputStage>
      break;
 8004a82:	e003      	b.n	8004a8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	75fb      	strb	r3, [r7, #23]
      break;
 8004a88:	e000      	b.n	8004a8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004a8a:	bf00      	nop
  }

  return status;
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	607a      	str	r2, [r7, #4]
 8004aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	f023 0201 	bic.w	r2, r3, #1
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b40 <TIM_TI1_SetConfig+0xa8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_TI1_SetConfig+0x46>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004acc:	d007      	beq.n	8004ade <TIM_TI1_SetConfig+0x46>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b44 <TIM_TI1_SetConfig+0xac>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_TI1_SetConfig+0x46>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8004b48 <TIM_TI1_SetConfig+0xb0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <TIM_TI1_SetConfig+0x4a>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <TIM_TI1_SetConfig+0x4c>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	f023 0303 	bic.w	r3, r3, #3
 8004aee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e003      	b.n	8004b02 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f043 0301 	orr.w	r3, r3, #1
 8004b00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	011b      	lsls	r3, r3, #4
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	697a      	ldr	r2, [r7, #20]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	f023 030a 	bic.w	r3, r3, #10
 8004b1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	f003 030a 	and.w	r3, r3, #10
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	4313      	orrs	r3, r2
 8004b28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	693a      	ldr	r2, [r7, #16]
 8004b34:	621a      	str	r2, [r3, #32]
}
 8004b36:	bf00      	nop
 8004b38:	371c      	adds	r7, #28
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bc80      	pop	{r7}
 8004b3e:	4770      	bx	lr
 8004b40:	40012c00 	.word	0x40012c00
 8004b44:	40000400 	.word	0x40000400
 8004b48:	40000800 	.word	0x40000800

08004b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b087      	sub	sp, #28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a1b      	ldr	r3, [r3, #32]
 8004b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	011b      	lsls	r3, r3, #4
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	f023 030a 	bic.w	r3, r3, #10
 8004b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b087      	sub	sp, #28
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
 8004bbe:	f023 0210 	bic.w	r2, r3, #16
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	031b      	lsls	r3, r3, #12
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004be4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	011b      	lsls	r3, r3, #4
 8004bea:	697a      	ldr	r2, [r7, #20]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	621a      	str	r2, [r3, #32]
}
 8004bfc:	bf00      	nop
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bc80      	pop	{r7}
 8004c04:	4770      	bx	lr

08004c06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b085      	sub	sp, #20
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f043 0307 	orr.w	r3, r3, #7
 8004c28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	609a      	str	r2, [r3, #8]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bc80      	pop	{r7}
 8004c38:	4770      	bx	lr

08004c3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c3a:	b480      	push	{r7}
 8004c3c:	b087      	sub	sp, #28
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	607a      	str	r2, [r7, #4]
 8004c46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	021a      	lsls	r2, r3, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	431a      	orrs	r2, r3
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	609a      	str	r2, [r3, #8]
}
 8004c6e:	bf00      	nop
 8004c70:	371c      	adds	r7, #28
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bc80      	pop	{r7}
 8004c76:	4770      	bx	lr

08004c78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b087      	sub	sp, #28
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f003 031f 	and.w	r3, r3, #31
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a1a      	ldr	r2, [r3, #32]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	43db      	mvns	r3, r3
 8004c9a:	401a      	ands	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a1a      	ldr	r2, [r3, #32]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f003 031f 	and.w	r3, r3, #31
 8004caa:	6879      	ldr	r1, [r7, #4]
 8004cac:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bc80      	pop	{r7}
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b08a      	sub	sp, #40	@ 0x28
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e09a      	b.n	8004e0a <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d106      	bne.n	8004cee <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 f892 	bl	8004e12 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2202      	movs	r2, #2
 8004cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4610      	mov	r0, r2
 8004d02:	f7ff fc41 	bl	8004588 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6819      	ldr	r1, [r3, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2203      	movs	r2, #3
 8004d14:	f7ff fec0 	bl	8004a98 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	699a      	ldr	r2, [r3, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 020c 	bic.w	r2, r2, #12
 8004d26:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6999      	ldr	r1, [r3, #24]
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	430a      	orrs	r2, r1
 8004d38:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	685a      	ldr	r2, [r3, #4]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d48:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004d58:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d68:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0207 	bic.w	r2, r2, #7
 8004d78:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f042 0204 	orr.w	r2, r2, #4
 8004d88:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8004d92:	2370      	movs	r3, #112	@ 0x70
 8004d94:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f107 020c 	add.w	r2, r7, #12
 8004db0:	4611      	mov	r1, r2
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff fcbc 	bl	8004730 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8004dc6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8004dd6:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3728      	adds	r7, #40	@ 0x28
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIMEx_HallSensor_MspInit>:
  * @brief  Initializes the TIM Hall Sensor MSP.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval None
  */
__weak void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bc80      	pop	{r7}
 8004e22:	4770      	bx	lr

08004e24 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e32:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e3a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e42:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004e4a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d108      	bne.n	8004e64 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e52:	7bbb      	ldrb	r3, [r7, #14]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d105      	bne.n	8004e64 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e58:	7b7b      	ldrb	r3, [r7, #13]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d102      	bne.n	8004e64 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e5e:	7b3b      	ldrb	r3, [r7, #12]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d001      	beq.n	8004e68 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e04d      	b.n	8004f04 <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2202      	movs	r2, #2
 8004e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0202 	orr.w	r2, r2, #2
 8004e96:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7ff fee9 	bl	8004c78 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a18      	ldr	r2, [pc, #96]	@ (8004f0c <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb8:	d009      	beq.n	8004ece <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d111      	bne.n	8004ef2 <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	2b06      	cmp	r3, #6
 8004ede:	d010      	beq.n	8004f02 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0201 	orr.w	r2, r2, #1
 8004eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef0:	e007      	b.n	8004f02 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f02:	2300      	movs	r3, #0
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	40012c00 	.word	0x40012c00
 8004f10:	40000400 	.word	0x40000400
 8004f14:	40000800 	.word	0x40000800

08004f18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e046      	b.n	8004fbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d00e      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f7c:	d009      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d004      	beq.n	8004f92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a10      	ldr	r2, [pc, #64]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d10c      	bne.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	68ba      	ldr	r2, [r7, #8]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40000800 	.word	0x40000800

08004fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e03d      	b.n	800506c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68fa      	ldr	r2, [r7, #12]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800506a:	2300      	movs	r3, #0
}
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	bc80      	pop	{r7}
 8005086:	4770      	bx	lr

08005088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b082      	sub	sp, #8
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d101      	bne.n	80050ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e042      	b.n	8005132 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d106      	bne.n	80050c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7fc fd69 	bl	8001b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2224      	movs	r2, #36	@ 0x24
 80050ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 fdb8 	bl	8005c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005102:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005112:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}

0800513a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	b08a      	sub	sp, #40	@ 0x28
 800513e:	af02      	add	r7, sp, #8
 8005140:	60f8      	str	r0, [r7, #12]
 8005142:	60b9      	str	r1, [r7, #8]
 8005144:	603b      	str	r3, [r7, #0]
 8005146:	4613      	mov	r3, r2
 8005148:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b20      	cmp	r3, #32
 8005158:	d175      	bne.n	8005246 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_UART_Transmit+0x2c>
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e06e      	b.n	8005248 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2221      	movs	r2, #33	@ 0x21
 8005174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005178:	f7fc fe62 	bl	8001e40 <HAL_GetTick>
 800517c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	88fa      	ldrh	r2, [r7, #6]
 8005182:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	88fa      	ldrh	r2, [r7, #6]
 8005188:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005192:	d108      	bne.n	80051a6 <HAL_UART_Transmit+0x6c>
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d104      	bne.n	80051a6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	e003      	b.n	80051ae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051ae:	e02e      	b.n	800520e <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2200      	movs	r2, #0
 80051b8:	2180      	movs	r1, #128	@ 0x80
 80051ba:	68f8      	ldr	r0, [r7, #12]
 80051bc:	f000 fb1d 	bl	80057fa <UART_WaitOnFlagUntilTimeout>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e03a      	b.n	8005248 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	881b      	ldrh	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051e6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	3302      	adds	r3, #2
 80051ec:	61bb      	str	r3, [r7, #24]
 80051ee:	e007      	b.n	8005200 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	781a      	ldrb	r2, [r3, #0]
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005212:	b29b      	uxth	r3, r3
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1cb      	bne.n	80051b0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2200      	movs	r2, #0
 8005220:	2140      	movs	r1, #64	@ 0x40
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fae9 	bl	80057fa <UART_WaitOnFlagUntilTimeout>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2220      	movs	r2, #32
 8005232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e006      	b.n	8005248 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005242:	2300      	movs	r3, #0
 8005244:	e000      	b.n	8005248 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005246:	2302      	movs	r3, #2
  }
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	4613      	mov	r3, r2
 800525c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d112      	bne.n	8005290 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d002      	beq.n	8005276 <HAL_UART_Receive_IT+0x26>
 8005270:	88fb      	ldrh	r3, [r7, #6]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e00b      	b.n	8005292 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005280:	88fb      	ldrh	r3, [r7, #6]
 8005282:	461a      	mov	r2, r3
 8005284:	68b9      	ldr	r1, [r7, #8]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fb10 	bl	80058ac <UART_Start_Receive_IT>
 800528c:	4603      	mov	r3, r0
 800528e:	e000      	b.n	8005292 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b0ba      	sub	sp, #232	@ 0xe8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80052ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d2:	f003 030f 	and.w	r3, r3, #15
 80052d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80052da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e6:	f003 0320 	and.w	r3, r3, #32
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_UART_IRQHandler+0x66>
 80052ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f2:	f003 0320 	and.w	r3, r3, #32
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d003      	beq.n	8005302 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fbec 	bl	8005ad8 <UART_Receive_IT>
      return;
 8005300:	e25b      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005302:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005306:	2b00      	cmp	r3, #0
 8005308:	f000 80de 	beq.w	80054c8 <HAL_UART_IRQHandler+0x22c>
 800530c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005318:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80d1 	beq.w	80054c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00b      	beq.n	800534a <HAL_UART_IRQHandler+0xae>
 8005332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005336:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005342:	f043 0201 	orr.w	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00b      	beq.n	800536e <HAL_UART_IRQHandler+0xd2>
 8005356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d005      	beq.n	800536e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005366:	f043 0202 	orr.w	r2, r3, #2
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005372:	f003 0302 	and.w	r3, r3, #2
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00b      	beq.n	8005392 <HAL_UART_IRQHandler+0xf6>
 800537a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d005      	beq.n	8005392 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538a:	f043 0204 	orr.w	r2, r3, #4
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d011      	beq.n	80053c2 <HAL_UART_IRQHandler+0x126>
 800539e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053a2:	f003 0320 	and.w	r3, r3, #32
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d105      	bne.n	80053b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80053aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d005      	beq.n	80053c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ba:	f043 0208 	orr.w	r2, r3, #8
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 81f2 	beq.w	80057b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d008      	beq.n	80053ea <HAL_UART_IRQHandler+0x14e>
 80053d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d002      	beq.n	80053ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb77 	bl	8005ad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	695b      	ldr	r3, [r3, #20]
 80053f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	bf14      	ite	ne
 80053f8:	2301      	movne	r3, #1
 80053fa:	2300      	moveq	r3, #0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d103      	bne.n	8005416 <HAL_UART_IRQHandler+0x17a>
 800540e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005412:	2b00      	cmp	r3, #0
 8005414:	d04f      	beq.n	80054b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fa81 	bl	800591e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	d041      	beq.n	80054ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3314      	adds	r3, #20
 8005430:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005444:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005456:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800545a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005462:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800546e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1d9      	bne.n	800542a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d013      	beq.n	80054a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005482:	4a7e      	ldr	r2, [pc, #504]	@ (800567c <HAL_UART_IRQHandler+0x3e0>)
 8005484:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800548a:	4618      	mov	r0, r3
 800548c:	f7fd f8bc 	bl	8002608 <HAL_DMA_Abort_IT>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d016      	beq.n	80054c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800549a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80054a0:	4610      	mov	r0, r2
 80054a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a4:	e00e      	b.n	80054c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f993 	bl	80057d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	e00a      	b.n	80054c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f98f 	bl	80057d2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054b4:	e006      	b.n	80054c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f98b 	bl	80057d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80054c2:	e175      	b.n	80057b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c4:	bf00      	nop
    return;
 80054c6:	e173      	b.n	80057b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	f040 814f 	bne.w	8005770 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80054d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d6:	f003 0310 	and.w	r3, r3, #16
 80054da:	2b00      	cmp	r3, #0
 80054dc:	f000 8148 	beq.w	8005770 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80054e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 8141 	beq.w	8005770 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60bb      	str	r3, [r7, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	60bb      	str	r3, [r7, #8]
 8005502:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 80b6 	beq.w	8005680 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005520:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8145 	beq.w	80057b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800552e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005532:	429a      	cmp	r2, r3
 8005534:	f080 813e 	bcs.w	80057b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800553e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	699b      	ldr	r3, [r3, #24]
 8005546:	2b20      	cmp	r3, #32
 8005548:	f000 8088 	beq.w	800565c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	330c      	adds	r3, #12
 8005552:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005566:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800556a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005578:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800557c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005584:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005588:	e841 2300 	strex	r3, r2, [r1]
 800558c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005590:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1d9      	bne.n	800554c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3314      	adds	r3, #20
 800559e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3314      	adds	r3, #20
 80055b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055bc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e1      	bne.n	8005598 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	3314      	adds	r3, #20
 80055da:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80055e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80055e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3314      	adds	r3, #20
 80055f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80055f8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80055fa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80055fe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005606:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e3      	bne.n	80055d4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2220      	movs	r2, #32
 8005610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	330c      	adds	r3, #12
 8005620:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005624:	e853 3f00 	ldrex	r3, [r3]
 8005628:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800562c:	f023 0310 	bic.w	r3, r3, #16
 8005630:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	330c      	adds	r3, #12
 800563a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800563e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005640:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005642:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005644:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005646:	e841 2300 	strex	r3, r2, [r1]
 800564a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800564c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800564e:	2b00      	cmp	r3, #0
 8005650:	d1e3      	bne.n	800561a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005656:	4618      	mov	r0, r3
 8005658:	f7fc ff9a 	bl	8002590 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2202      	movs	r2, #2
 8005660:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800566a:	b29b      	uxth	r3, r3
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	b29b      	uxth	r3, r3
 8005670:	4619      	mov	r1, r3
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f8b6 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005678:	e09c      	b.n	80057b4 <HAL_UART_IRQHandler+0x518>
 800567a:	bf00      	nop
 800567c:	080059e3 	.word	0x080059e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005688:	b29b      	uxth	r3, r3
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	f000 808e 	beq.w	80057b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800569c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f000 8089 	beq.w	80057b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	330c      	adds	r3, #12
 80056ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80056b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	330c      	adds	r3, #12
 80056c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80056ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80056cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80056d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80056d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e3      	bne.n	80056a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3314      	adds	r3, #20
 80056e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	623b      	str	r3, [r7, #32]
   return(result);
 80056ee:	6a3b      	ldr	r3, [r7, #32]
 80056f0:	f023 0301 	bic.w	r3, r3, #1
 80056f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	3314      	adds	r3, #20
 80056fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005702:	633a      	str	r2, [r7, #48]	@ 0x30
 8005704:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800570a:	e841 2300 	strex	r3, r2, [r1]
 800570e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1e3      	bne.n	80056de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2220      	movs	r2, #32
 800571a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	60fb      	str	r3, [r7, #12]
   return(result);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0310 	bic.w	r3, r3, #16
 800573a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005748:	61fa      	str	r2, [r7, #28]
 800574a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	69b9      	ldr	r1, [r7, #24]
 800574e:	69fa      	ldr	r2, [r7, #28]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	617b      	str	r3, [r7, #20]
   return(result);
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e3      	bne.n	8005724 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2202      	movs	r2, #2
 8005760:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f83b 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800576e:	e023      	b.n	80057b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005778:	2b00      	cmp	r3, #0
 800577a:	d009      	beq.n	8005790 <HAL_UART_IRQHandler+0x4f4>
 800577c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 f93e 	bl	8005a0a <UART_Transmit_IT>
    return;
 800578e:	e014      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00e      	beq.n	80057ba <HAL_UART_IRQHandler+0x51e>
 800579c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f97d 	bl	8005aa8 <UART_EndTransmit_IT>
    return;
 80057ae:	e004      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
    return;
 80057b0:	bf00      	nop
 80057b2:	e002      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
      return;
 80057b4:	bf00      	nop
 80057b6:	e000      	b.n	80057ba <HAL_UART_IRQHandler+0x51e>
      return;
 80057b8:	bf00      	nop
  }
}
 80057ba:	37e8      	adds	r7, #232	@ 0xe8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bc80      	pop	{r7}
 80057d0:	4770      	bx	lr

080057d2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80057da:	bf00      	nop
 80057dc:	370c      	adds	r7, #12
 80057de:	46bd      	mov	sp, r7
 80057e0:	bc80      	pop	{r7}
 80057e2:	4770      	bx	lr

080057e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bc80      	pop	{r7}
 80057f8:	4770      	bx	lr

080057fa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b086      	sub	sp, #24
 80057fe:	af00      	add	r7, sp, #0
 8005800:	60f8      	str	r0, [r7, #12]
 8005802:	60b9      	str	r1, [r7, #8]
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	4613      	mov	r3, r2
 8005808:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	e03b      	b.n	8005884 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d037      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005814:	f7fc fb14 	bl	8001e40 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	6a3a      	ldr	r2, [r7, #32]
 8005820:	429a      	cmp	r2, r3
 8005822:	d302      	bcc.n	800582a <UART_WaitOnFlagUntilTimeout+0x30>
 8005824:	6a3b      	ldr	r3, [r7, #32]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d101      	bne.n	800582e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e03a      	b.n	80058a4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f003 0304 	and.w	r3, r3, #4
 8005838:	2b00      	cmp	r3, #0
 800583a:	d023      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0x8a>
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b80      	cmp	r3, #128	@ 0x80
 8005840:	d020      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b40      	cmp	r3, #64	@ 0x40
 8005846:	d01d      	beq.n	8005884 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b08      	cmp	r3, #8
 8005854:	d116      	bne.n	8005884 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	617b      	str	r3, [r7, #20]
 800586a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f856 	bl	800591e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2208      	movs	r2, #8
 8005876:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e00f      	b.n	80058a4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	4013      	ands	r3, r2
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	429a      	cmp	r2, r3
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	461a      	mov	r2, r3
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d0b4      	beq.n	800580c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058a2:	2300      	movs	r3, #0
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3718      	adds	r7, #24
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	4613      	mov	r3, r2
 80058b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	88fa      	ldrh	r2, [r7, #6]
 80058c4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2222      	movs	r2, #34	@ 0x22
 80058d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d007      	beq.n	80058f2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058f0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f042 0201 	orr.w	r2, r2, #1
 8005900:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f042 0220 	orr.w	r2, r2, #32
 8005910:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800591e:	b480      	push	{r7}
 8005920:	b095      	sub	sp, #84	@ 0x54
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005938:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800593c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	330c      	adds	r3, #12
 8005944:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005946:	643a      	str	r2, [r7, #64]	@ 0x40
 8005948:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800594c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800594e:	e841 2300 	strex	r3, r2, [r1]
 8005952:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e5      	bne.n	8005926 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3314      	adds	r3, #20
 8005960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	61fb      	str	r3, [r7, #28]
   return(result);
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3314      	adds	r3, #20
 8005978:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800597a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800597c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005980:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e5      	bne.n	800595a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005992:	2b01      	cmp	r3, #1
 8005994:	d119      	bne.n	80059ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f023 0310 	bic.w	r3, r3, #16
 80059ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b6:	61ba      	str	r2, [r7, #24]
 80059b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	6979      	ldr	r1, [r7, #20]
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	613b      	str	r3, [r7, #16]
   return(result);
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e5      	bne.n	8005996 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2220      	movs	r2, #32
 80059ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059d8:	bf00      	nop
 80059da:	3754      	adds	r7, #84	@ 0x54
 80059dc:	46bd      	mov	sp, r7
 80059de:	bc80      	pop	{r7}
 80059e0:	4770      	bx	lr

080059e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059e2:	b580      	push	{r7, lr}
 80059e4:	b084      	sub	sp, #16
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f7ff fee8 	bl	80057d2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a02:	bf00      	nop
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b085      	sub	sp, #20
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b21      	cmp	r3, #33	@ 0x21
 8005a1c:	d13e      	bne.n	8005a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a26:	d114      	bne.n	8005a52 <UART_Transmit_IT+0x48>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d110      	bne.n	8005a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	881b      	ldrh	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	1c9a      	adds	r2, r3, #2
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	621a      	str	r2, [r3, #32]
 8005a50:	e008      	b.n	8005a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	1c59      	adds	r1, r3, #1
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6211      	str	r1, [r2, #32]
 8005a5c:	781a      	ldrb	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	3b01      	subs	r3, #1
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	4619      	mov	r1, r3
 8005a72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10f      	bne.n	8005a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68da      	ldr	r2, [r3, #12]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e000      	b.n	8005a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a9c:	2302      	movs	r3, #2
  }
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr

08005aa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005abe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2220      	movs	r2, #32
 8005ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f7ff fe79 	bl	80057c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08c      	sub	sp, #48	@ 0x30
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	2b22      	cmp	r3, #34	@ 0x22
 8005aea:	f040 80ae 	bne.w	8005c4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005af6:	d117      	bne.n	8005b28 <UART_Receive_IT+0x50>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d113      	bne.n	8005b28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b00:	2300      	movs	r3, #0
 8005b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b16:	b29a      	uxth	r2, r3
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	1c9a      	adds	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b26:	e026      	b.n	8005b76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3a:	d007      	beq.n	8005b4c <UART_Receive_IT+0x74>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10a      	bne.n	8005b5a <UART_Receive_IT+0x82>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d106      	bne.n	8005b5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b56:	701a      	strb	r2, [r3, #0]
 8005b58:	e008      	b.n	8005b6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	3b01      	subs	r3, #1
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	4619      	mov	r1, r3
 8005b84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d15d      	bne.n	8005c46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68da      	ldr	r2, [r3, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f022 0220 	bic.w	r2, r2, #32
 8005b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68da      	ldr	r2, [r3, #12]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695a      	ldr	r2, [r3, #20]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d135      	bne.n	8005c3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	330c      	adds	r3, #12
 8005bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	613b      	str	r3, [r7, #16]
   return(result);
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	f023 0310 	bic.w	r3, r3, #16
 8005bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	330c      	adds	r3, #12
 8005bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bf6:	623a      	str	r2, [r7, #32]
 8005bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	69f9      	ldr	r1, [r7, #28]
 8005bfc:	6a3a      	ldr	r2, [r7, #32]
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e5      	bne.n	8005bd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0310 	and.w	r3, r3, #16
 8005c14:	2b10      	cmp	r3, #16
 8005c16:	d10a      	bne.n	8005c2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff fdd5 	bl	80057e4 <HAL_UARTEx_RxEventCallback>
 8005c3a:	e002      	b.n	8005c42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fa ff0f 	bl	8000a60 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	e002      	b.n	8005c4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e000      	b.n	8005c4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c4a:	2302      	movs	r3, #2
  }
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3730      	adds	r7, #48	@ 0x30
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	430a      	orrs	r2, r1
 8005c70:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	695b      	ldr	r3, [r3, #20]
 8005c80:	4313      	orrs	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005c8e:	f023 030c 	bic.w	r3, r3, #12
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6812      	ldr	r2, [r2, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d68 <UART_SetConfig+0x114>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d103      	bne.n	8005cc4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005cbc:	f7fd fbb6 	bl	800342c <HAL_RCC_GetPCLK2Freq>
 8005cc0:	60f8      	str	r0, [r7, #12]
 8005cc2:	e002      	b.n	8005cca <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fd fb9e 	bl	8003404 <HAL_RCC_GetPCLK1Freq>
 8005cc8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009a      	lsls	r2, r3, #2
 8005cd4:	441a      	add	r2, r3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce0:	4a22      	ldr	r2, [pc, #136]	@ (8005d6c <UART_SetConfig+0x118>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	0119      	lsls	r1, r3, #4
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	009a      	lsls	r2, r3, #2
 8005cf4:	441a      	add	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d00:	4b1a      	ldr	r3, [pc, #104]	@ (8005d6c <UART_SetConfig+0x118>)
 8005d02:	fba3 0302 	umull	r0, r3, r3, r2
 8005d06:	095b      	lsrs	r3, r3, #5
 8005d08:	2064      	movs	r0, #100	@ 0x64
 8005d0a:	fb00 f303 	mul.w	r3, r0, r3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	3332      	adds	r3, #50	@ 0x32
 8005d14:	4a15      	ldr	r2, [pc, #84]	@ (8005d6c <UART_SetConfig+0x118>)
 8005d16:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005d20:	4419      	add	r1, r3
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	4613      	mov	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	4413      	add	r3, r2
 8005d2a:	009a      	lsls	r2, r3, #2
 8005d2c:	441a      	add	r2, r3
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d38:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <UART_SetConfig+0x118>)
 8005d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8005d3e:	095b      	lsrs	r3, r3, #5
 8005d40:	2064      	movs	r0, #100	@ 0x64
 8005d42:	fb00 f303 	mul.w	r3, r0, r3
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	011b      	lsls	r3, r3, #4
 8005d4a:	3332      	adds	r3, #50	@ 0x32
 8005d4c:	4a07      	ldr	r2, [pc, #28]	@ (8005d6c <UART_SetConfig+0x118>)
 8005d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d52:	095b      	lsrs	r3, r3, #5
 8005d54:	f003 020f 	and.w	r2, r3, #15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	440a      	add	r2, r1
 8005d5e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005d60:	bf00      	nop
 8005d62:	3710      	adds	r7, #16
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}
 8005d68:	40013800 	.word	0x40013800
 8005d6c:	51eb851f 	.word	0x51eb851f

08005d70 <memset>:
 8005d70:	4603      	mov	r3, r0
 8005d72:	4402      	add	r2, r0
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d100      	bne.n	8005d7a <memset+0xa>
 8005d78:	4770      	bx	lr
 8005d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d7e:	e7f9      	b.n	8005d74 <memset+0x4>

08005d80 <__libc_init_array>:
 8005d80:	b570      	push	{r4, r5, r6, lr}
 8005d82:	2600      	movs	r6, #0
 8005d84:	4d0c      	ldr	r5, [pc, #48]	@ (8005db8 <__libc_init_array+0x38>)
 8005d86:	4c0d      	ldr	r4, [pc, #52]	@ (8005dbc <__libc_init_array+0x3c>)
 8005d88:	1b64      	subs	r4, r4, r5
 8005d8a:	10a4      	asrs	r4, r4, #2
 8005d8c:	42a6      	cmp	r6, r4
 8005d8e:	d109      	bne.n	8005da4 <__libc_init_array+0x24>
 8005d90:	f000 f81a 	bl	8005dc8 <_init>
 8005d94:	2600      	movs	r6, #0
 8005d96:	4d0a      	ldr	r5, [pc, #40]	@ (8005dc0 <__libc_init_array+0x40>)
 8005d98:	4c0a      	ldr	r4, [pc, #40]	@ (8005dc4 <__libc_init_array+0x44>)
 8005d9a:	1b64      	subs	r4, r4, r5
 8005d9c:	10a4      	asrs	r4, r4, #2
 8005d9e:	42a6      	cmp	r6, r4
 8005da0:	d105      	bne.n	8005dae <__libc_init_array+0x2e>
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da8:	4798      	blx	r3
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7ee      	b.n	8005d8c <__libc_init_array+0xc>
 8005dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005db2:	4798      	blx	r3
 8005db4:	3601      	adds	r6, #1
 8005db6:	e7f2      	b.n	8005d9e <__libc_init_array+0x1e>
 8005db8:	08005e6c 	.word	0x08005e6c
 8005dbc:	08005e6c 	.word	0x08005e6c
 8005dc0:	08005e6c 	.word	0x08005e6c
 8005dc4:	08005e70 	.word	0x08005e70

08005dc8 <_init>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	bf00      	nop
 8005dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dce:	bc08      	pop	{r3}
 8005dd0:	469e      	mov	lr, r3
 8005dd2:	4770      	bx	lr

08005dd4 <_fini>:
 8005dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dd6:	bf00      	nop
 8005dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dda:	bc08      	pop	{r3}
 8005ddc:	469e      	mov	lr, r3
 8005dde:	4770      	bx	lr
