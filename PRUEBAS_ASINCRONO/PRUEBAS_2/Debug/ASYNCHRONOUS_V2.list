
ASYNCHRONOUS_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b18  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004c24  08004c24  00005c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ca8  08004ca8  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ca8  08004ca8  00005ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004cb0  08004cb0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cb0  08004cb0  00005cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004cb4  08004cb4  00005cb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004cb8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000005c  08004d14  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000214  08004d14  00006214  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c704  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c75  00000000  00000000  00012789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00014400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f1  00000000  00000000  000150a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017a50  00000000  00000000  00015a91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dcb5  00000000  00000000  0002d4e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a674  00000000  00000000  0003b196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c580a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034ec  00000000  00000000  000c5850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000c8d3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c0c 	.word	0x08004c0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08004c0c 	.word	0x08004c0c

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <pwm_stop>:
/* USER CODE BEGIN 0 */




void pwm_stop(void) {
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 8000174:	4b09      	ldr	r3, [pc, #36]	@ (800019c <pwm_stop+0x2c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2200      	movs	r2, #0
 800017a:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 800017c:	4b07      	ldr	r3, [pc, #28]	@ (800019c <pwm_stop+0x2c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	2200      	movs	r2, #0
 8000182:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000184:	4b05      	ldr	r3, [pc, #20]	@ (800019c <pwm_stop+0x2c>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	2200      	movs	r2, #0
 800018a:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800018c:	4b03      	ldr	r3, [pc, #12]	@ (800019c <pwm_stop+0x2c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2200      	movs	r2, #0
 8000192:	625a      	str	r2, [r3, #36]	@ 0x24

}
 8000194:	bf00      	nop
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000c0 	.word	0x200000c0

080001a0 <pwm_init>:

void pwm_init(void){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 80001a4:	4b0c      	ldr	r3, [pc, #48]	@ (80001d8 <pwm_init+0x38>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	2200      	movs	r2, #0
 80001aa:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80001ac:	4b0a      	ldr	r3, [pc, #40]	@ (80001d8 <pwm_init+0x38>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2200      	movs	r2, #0
 80001b2:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 80001b4:	4b08      	ldr	r3, [pc, #32]	@ (80001d8 <pwm_init+0x38>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2200      	movs	r2, #0
 80001ba:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_TIM_PWM_Start(&htim3, IN_U);
 80001bc:	2100      	movs	r1, #0
 80001be:	4806      	ldr	r0, [pc, #24]	@ (80001d8 <pwm_init+0x38>)
 80001c0:	f002 fe02 	bl	8002dc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3,IN_V);
 80001c4:	2104      	movs	r1, #4
 80001c6:	4804      	ldr	r0, [pc, #16]	@ (80001d8 <pwm_init+0x38>)
 80001c8:	f002 fdfe 	bl	8002dc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, IN_W);
 80001cc:	2108      	movs	r1, #8
 80001ce:	4802      	ldr	r0, [pc, #8]	@ (80001d8 <pwm_init+0x38>)
 80001d0:	f002 fdfa 	bl	8002dc8 <HAL_TIM_PWM_Start>
	return;
 80001d4:	bf00      	nop
}
 80001d6:	bd80      	pop	{r7, pc}
 80001d8:	200000c0 	.word	0x200000c0

080001dc <alignment>:

void alignment(void){
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	aligned_flag = false;
 80001e0:	4b1a      	ldr	r3, [pc, #104]	@ (800024c <alignment+0x70>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	701a      	strb	r2, [r3, #0]
	state_machine = ALIGNING;
 80001e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000250 <alignment+0x74>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim4);
 80001ec:	4819      	ldr	r0, [pc, #100]	@ (8000254 <alignment+0x78>)
 80001ee:	f002 fb6b 	bl	80028c8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80001f2:	2100      	movs	r1, #0
 80001f4:	4817      	ldr	r0, [pc, #92]	@ (8000254 <alignment+0x78>)
 80001f6:	f002 fcdd 	bl	8002bb4 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_Base_Stop(&htim4);
 80001fa:	4816      	ldr	r0, [pc, #88]	@ (8000254 <alignment+0x78>)
 80001fc:	f002 faeb 	bl	80027d6 <HAL_TIM_Base_Stop>

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000200:	4b14      	ldr	r3, [pc, #80]	@ (8000254 <alignment+0x78>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, ALIGN_TIME);
 8000208:	4b12      	ldr	r3, [pc, #72]	@ (8000254 <alignment+0x78>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000210:	635a      	str	r2, [r3, #52]	@ 0x34
	pwm_init();
 8000212:	f7ff ffc5 	bl	80001a0 <pwm_init>

	commutation(POS_UV, DC_ALIGN);
 8000216:	f44f 6116 	mov.w	r1, #2400	@ 0x960
 800021a:	2000      	movs	r0, #0
 800021c:	f000 fa22 	bl	8000664 <commutation>
	HAL_TIM_Base_Start_IT(&htim4);
 8000220:	480c      	ldr	r0, [pc, #48]	@ (8000254 <alignment+0x78>)
 8000222:	f002 faff 	bl	8002824 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8000226:	2100      	movs	r1, #0
 8000228:	480a      	ldr	r0, [pc, #40]	@ (8000254 <alignment+0x78>)
 800022a:	f002 fbd3 	bl	80029d4 <HAL_TIM_OC_Start_IT>
	while(!aligned_flag);
 800022e:	bf00      	nop
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <alignment+0x70>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	f083 0301 	eor.w	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	2b00      	cmp	r3, #0
 800023c:	d1f8      	bne.n	8000230 <alignment+0x54>
	state_machine = READY;
 800023e:	4b04      	ldr	r3, [pc, #16]	@ (8000250 <alignment+0x74>)
 8000240:	2205      	movs	r2, #5
 8000242:	701a      	strb	r2, [r3, #0]
	pwm_stop();
 8000244:	f7ff ff94 	bl	8000170 <pwm_stop>
}
 8000248:	bf00      	nop
 800024a:	bd80      	pop	{r7, pc}
 800024c:	2000020a 	.word	0x2000020a
 8000250:	20000201 	.word	0x20000201
 8000254:	20000108 	.word	0x20000108

08000258 <startup>:

void startup(void){
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	alignment();
 800025e:	f7ff ffbd 	bl	80001dc <alignment>
	state_machine =  STARTUP;
 8000262:	4b43      	ldr	r3, [pc, #268]	@ (8000370 <startup+0x118>)
 8000264:	2202      	movs	r2, #2
 8000266:	701a      	strb	r2, [r3, #0]
	bool  localFlag = false;
 8000268:	2300      	movs	r3, #0
 800026a:	71fb      	strb	r3, [r7, #7]
	pwmVal = DC_STARTUP_INIT;
 800026c:	4b41      	ldr	r3, [pc, #260]	@ (8000374 <startup+0x11c>)
 800026e:	f44f 7261 	mov.w	r2, #900	@ 0x384
 8000272:	801a      	strh	r2, [r3, #0]
	pwm_init();
 8000274:	f7ff ff94 	bl	80001a0 <pwm_init>
	commutationStep = POS_UV;
 8000278:	4b3f      	ldr	r3, [pc, #252]	@ (8000378 <startup+0x120>)
 800027a:	2200      	movs	r2, #0
 800027c:	701a      	strb	r2, [r3, #0]
	commutationTime = TIME_STARTUP_COMMUTATION_INIT;
 800027e:	4b3f      	ldr	r3, [pc, #252]	@ (800037c <startup+0x124>)
 8000280:	2290      	movs	r2, #144	@ 0x90
 8000282:	801a      	strh	r2, [r3, #0]
	uint16_t duration = 0;
 8000284:	2300      	movs	r3, #0
 8000286:	80bb      	strh	r3, [r7, #4]
	pwm_init();
 8000288:	f7ff ff8a 	bl	80001a0 <pwm_init>
	while(!localFlag){
 800028c:	e04c      	b.n	8000328 <startup+0xd0>
		//__HAL_TIM_SET_COUNTER(&htim4, 0);
		//__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, time);
		HAL_Delay(commutationTime);
 800028e:	4b3b      	ldr	r3, [pc, #236]	@ (800037c <startup+0x124>)
 8000290:	881b      	ldrh	r3, [r3, #0]
 8000292:	b29b      	uxth	r3, r3
 8000294:	4618      	mov	r0, r3
 8000296:	f001 f95d 	bl	8001554 <HAL_Delay>
		commutation(commutationStep, pwmVal);
 800029a:	4b37      	ldr	r3, [pc, #220]	@ (8000378 <startup+0x120>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	4a34      	ldr	r2, [pc, #208]	@ (8000374 <startup+0x11c>)
 80002a2:	8812      	ldrh	r2, [r2, #0]
 80002a4:	b292      	uxth	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 f9db 	bl	8000664 <commutation>
		//HAL_TIM_Base_Start_IT(&htim4);
		//HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
		//while(!startup_flag);

		commutationStep = (commutationStep + 1) % NUM_POS;
 80002ae:	4b32      	ldr	r3, [pc, #200]	@ (8000378 <startup+0x120>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	b2db      	uxtb	r3, r3
 80002b4:	1c5a      	adds	r2, r3, #1
 80002b6:	4b32      	ldr	r3, [pc, #200]	@ (8000380 <startup+0x128>)
 80002b8:	fb83 3102 	smull	r3, r1, r3, r2
 80002bc:	17d3      	asrs	r3, r2, #31
 80002be:	1ac9      	subs	r1, r1, r3
 80002c0:	460b      	mov	r3, r1
 80002c2:	005b      	lsls	r3, r3, #1
 80002c4:	440b      	add	r3, r1
 80002c6:	005b      	lsls	r3, r3, #1
 80002c8:	1ad1      	subs	r1, r2, r3
 80002ca:	b2ca      	uxtb	r2, r1
 80002cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000378 <startup+0x120>)
 80002ce:	701a      	strb	r2, [r3, #0]
		(pwmVal < DC_STARTUP_END) ? pwmVal += DC_STARTUP_STEP : pwmVal;
 80002d0:	4b28      	ldr	r3, [pc, #160]	@ (8000374 <startup+0x11c>)
 80002d2:	881b      	ldrh	r3, [r3, #0]
 80002d4:	b29b      	uxth	r3, r3
 80002d6:	f240 424b 	movw	r2, #1099	@ 0x44b
 80002da:	4293      	cmp	r3, r2
 80002dc:	d807      	bhi.n	80002ee <startup+0x96>
 80002de:	4b25      	ldr	r3, [pc, #148]	@ (8000374 <startup+0x11c>)
 80002e0:	881b      	ldrh	r3, [r3, #0]
 80002e2:	b29b      	uxth	r3, r3
 80002e4:	3306      	adds	r3, #6
 80002e6:	b29a      	uxth	r2, r3
 80002e8:	4b22      	ldr	r3, [pc, #136]	@ (8000374 <startup+0x11c>)
 80002ea:	801a      	strh	r2, [r3, #0]
 80002ec:	e001      	b.n	80002f2 <startup+0x9a>
 80002ee:	4b21      	ldr	r3, [pc, #132]	@ (8000374 <startup+0x11c>)
 80002f0:	881b      	ldrh	r3, [r3, #0]
	    if (commutationTime > TIME_STARTUP_COMMUTATION_FINAL) {
 80002f2:	4b22      	ldr	r3, [pc, #136]	@ (800037c <startup+0x124>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	b29b      	uxth	r3, r3
 80002f8:	2b0c      	cmp	r3, #12
 80002fa:	d907      	bls.n	800030c <startup+0xb4>
	    	commutationTime -= TIME_STARTUP_STEP;
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <startup+0x124>)
 80002fe:	881b      	ldrh	r3, [r3, #0]
 8000300:	b29b      	uxth	r3, r3
 8000302:	3b02      	subs	r3, #2
 8000304:	b29a      	uxth	r2, r3
 8000306:	4b1d      	ldr	r3, [pc, #116]	@ (800037c <startup+0x124>)
 8000308:	801a      	strh	r2, [r3, #0]
 800030a:	e00d      	b.n	8000328 <startup+0xd0>
	    } else if (duration < 500){
 800030c:	88bb      	ldrh	r3, [r7, #4]
 800030e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000312:	d203      	bcs.n	800031c <startup+0xc4>
	        duration++;
 8000314:	88bb      	ldrh	r3, [r7, #4]
 8000316:	3301      	adds	r3, #1
 8000318:	80bb      	strh	r3, [r7, #4]
 800031a:	e005      	b.n	8000328 <startup+0xd0>

	    }
	    else {

			localFlag = true;
 800031c:	2301      	movs	r3, #1
 800031e:	71fb      	strb	r3, [r7, #7]

			__HAL_TIM_SET_COUNTER(&htim4, 0);
 8000320:	4b18      	ldr	r3, [pc, #96]	@ (8000384 <startup+0x12c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2200      	movs	r2, #0
 8000326:	625a      	str	r2, [r3, #36]	@ 0x24
	while(!localFlag){
 8000328:	79fb      	ldrb	r3, [r7, #7]
 800032a:	f083 0301 	eor.w	r3, r3, #1
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d1ac      	bne.n	800028e <startup+0x36>
//		startup_flag = false;


	}
	//commutationTime*=10;
	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1); // Detiene canal 1
 8000334:	2100      	movs	r1, #0
 8000336:	4813      	ldr	r0, [pc, #76]	@ (8000384 <startup+0x12c>)
 8000338:	f002 fc3c 	bl	8002bb4 <HAL_TIM_OC_Stop_IT>
	TIM4->ARR = 0xFFFF;
 800033c:	4b12      	ldr	r3, [pc, #72]	@ (8000388 <startup+0x130>)
 800033e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000342:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM4->PSC = 809;
 8000344:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <startup+0x130>)
 8000346:	f240 3229 	movw	r2, #809	@ 0x329
 800034a:	629a      	str	r2, [r3, #40]	@ 0x28

	float_U = true;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <startup+0x134>)
 800034e:	2201      	movs	r2, #1
 8000350:	701a      	strb	r2, [r3, #0]
	float_V = true;
 8000352:	4b0f      	ldr	r3, [pc, #60]	@ (8000390 <startup+0x138>)
 8000354:	2201      	movs	r2, #1
 8000356:	701a      	strb	r2, [r3, #0]
	float_W = true;
 8000358:	4b0e      	ldr	r3, [pc, #56]	@ (8000394 <startup+0x13c>)
 800035a:	2201      	movs	r2, #1
 800035c:	701a      	strb	r2, [r3, #0]
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <startup+0x12c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	2200      	movs	r2, #0
 8000364:	625a      	str	r2, [r3, #36]	@ 0x24





}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000201 	.word	0x20000201
 8000374:	20000204 	.word	0x20000204
 8000378:	20000206 	.word	0x20000206
 800037c:	20000208 	.word	0x20000208
 8000380:	2aaaaaab 	.word	0x2aaaaaab
 8000384:	20000108 	.word	0x20000108
 8000388:	40000800 	.word	0x40000800
 800038c:	2000020d 	.word	0x2000020d
 8000390:	2000020e 	.word	0x2000020e
 8000394:	2000020c 	.word	0x2000020c

08000398 <ledON>:


void ledON(){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0

	eventFlag = true;
 800039c:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <ledON+0x20>)
 800039e:	2201      	movs	r2, #1
 80003a0:	701a      	strb	r2, [r3, #0]

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 19999);
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <ledON+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80003aa:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80003ac:	2100      	movs	r1, #0
 80003ae:	4803      	ldr	r0, [pc, #12]	@ (80003bc <ledON+0x24>)
 80003b0:	f002 fb10 	bl	80029d4 <HAL_TIM_OC_Start_IT>


}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000202 	.word	0x20000202
 80003bc:	20000108 	.word	0x20000108

080003c0 <processCommand>:
void processCommand(char *input) {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
    for (int i = 0; commandTable[i].command != NULL; i++) {
 80003c8:	2300      	movs	r3, #0
 80003ca:	60fb      	str	r3, [r7, #12]
 80003cc:	e019      	b.n	8000402 <processCommand+0x42>
        if (strcmp(input, commandTable[i].command) == 0) {  // Compara el comando recibido
 80003ce:	4a17      	ldr	r2, [pc, #92]	@ (800042c <processCommand+0x6c>)
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80003d6:	4619      	mov	r1, r3
 80003d8:	6878      	ldr	r0, [r7, #4]
 80003da:	f7ff feb7 	bl	800014c <strcmp>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d10b      	bne.n	80003fc <processCommand+0x3c>
            eventFlag = true;
 80003e4:	4b12      	ldr	r3, [pc, #72]	@ (8000430 <processCommand+0x70>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
        	commandTable[i].execute();  // Ejecuta la función asociada
 80003ea:	4a10      	ldr	r2, [pc, #64]	@ (800042c <processCommand+0x6c>)
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	00db      	lsls	r3, r3, #3
 80003f0:	4413      	add	r3, r2
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	4798      	blx	r3
            clearRxBuffer();  // Limpia el buffer acumulador
 80003f6:	f000 f823 	bl	8000440 <clearRxBuffer>

            return;
 80003fa:	e014      	b.n	8000426 <processCommand+0x66>
    for (int i = 0; commandTable[i].command != NULL; i++) {
 80003fc:	68fb      	ldr	r3, [r7, #12]
 80003fe:	3301      	adds	r3, #1
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	4a0a      	ldr	r2, [pc, #40]	@ (800042c <processCommand+0x6c>)
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d1df      	bne.n	80003ce <processCommand+0xe>
        }
    }
    // Si no se encuentra el comando
    HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown Command\r\n", 17, 3);
 800040e:	2303      	movs	r3, #3
 8000410:	2211      	movs	r2, #17
 8000412:	4908      	ldr	r1, [pc, #32]	@ (8000434 <processCommand+0x74>)
 8000414:	4808      	ldr	r0, [pc, #32]	@ (8000438 <processCommand+0x78>)
 8000416:	f003 fdb3 	bl	8003f80 <HAL_UART_Transmit>
    clearRxBuffer();
 800041a:	f000 f811 	bl	8000440 <clearRxBuffer>
    state_machine = IDLE;
 800041e:	4b07      	ldr	r3, [pc, #28]	@ (800043c <processCommand+0x7c>)
 8000420:	2200      	movs	r2, #0
 8000422:	701a      	strb	r2, [r3, #0]
    return;// Limpia el buffer acumulador
 8000424:	bf00      	nop

}
 8000426:	3710      	adds	r7, #16
 8000428:	46bd      	mov	sp, r7
 800042a:	bd80      	pop	{r7, pc}
 800042c:	20000000 	.word	0x20000000
 8000430:	20000202 	.word	0x20000202
 8000434:	08004c3c 	.word	0x08004c3c
 8000438:	20000150 	.word	0x20000150
 800043c:	20000201 	.word	0x20000201

08000440 <clearRxBuffer>:


void clearRxBuffer(void) {
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, BUFFER_SIZE);  // Establece todos los elementos a 0
 8000444:	2220      	movs	r2, #32
 8000446:	2100      	movs	r1, #0
 8000448:	4803      	ldr	r0, [pc, #12]	@ (8000458 <clearRxBuffer+0x18>)
 800044a:	f004 fbb3 	bl	8004bb4 <memset>
    rx_index = 0;                          // Reinicia el índice del buffer
 800044e:	4b03      	ldr	r3, [pc, #12]	@ (800045c <clearRxBuffer+0x1c>)
 8000450:	2200      	movs	r2, #0
 8000452:	701a      	strb	r2, [r3, #0]
}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	200001e0 	.word	0x200001e0
 800045c:	20000200 	.word	0x20000200

08000460 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verifica el UART correcto
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a35      	ldr	r2, [pc, #212]	@ (8000544 <HAL_UART_RxCpltCallback+0xe4>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d164      	bne.n	800053c <HAL_UART_RxCpltCallback+0xdc>
        if (rx_data[0] == '\r') {  // Detecta el carácter de fin de línea
 8000472:	4b35      	ldr	r3, [pc, #212]	@ (8000548 <HAL_UART_RxCpltCallback+0xe8>)
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b0d      	cmp	r3, #13
 8000478:	d123      	bne.n	80004c2 <HAL_UART_RxCpltCallback+0x62>
            rx_buffer[rx_index] = '\0';  // Finaliza la cadena con terminador nulo
 800047a:	4b34      	ldr	r3, [pc, #208]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	461a      	mov	r2, r3
 8000480:	4b33      	ldr	r3, [pc, #204]	@ (8000550 <HAL_UART_RxCpltCallback+0xf0>)
 8000482:	2100      	movs	r1, #0
 8000484:	5499      	strb	r1, [r3, r2]
            rx_index = 0;  // Reinicia el índice para el próximo mensaje
 8000486:	4b31      	ldr	r3, [pc, #196]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 8000488:	2200      	movs	r2, #0
 800048a:	701a      	strb	r2, [r3, #0]

            // Procesa el mensaje completo
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nReceived: ", 12, 3);
 800048c:	2303      	movs	r3, #3
 800048e:	220c      	movs	r2, #12
 8000490:	4930      	ldr	r1, [pc, #192]	@ (8000554 <HAL_UART_RxCpltCallback+0xf4>)
 8000492:	4831      	ldr	r0, [pc, #196]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 8000494:	f003 fd74 	bl	8003f80 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, rx_buffer	, strlen((char *)rx_buffer), 3);
 8000498:	482d      	ldr	r0, [pc, #180]	@ (8000550 <HAL_UART_RxCpltCallback+0xf0>)
 800049a:	f7ff fe61 	bl	8000160 <strlen>
 800049e:	4603      	mov	r3, r0
 80004a0:	b29a      	uxth	r2, r3
 80004a2:	2303      	movs	r3, #3
 80004a4:	492a      	ldr	r1, [pc, #168]	@ (8000550 <HAL_UART_RxCpltCallback+0xf0>)
 80004a6:	482c      	ldr	r0, [pc, #176]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 80004a8:	f003 fd6a 	bl	8003f80 <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	2202      	movs	r2, #2
 80004b2:	492a      	ldr	r1, [pc, #168]	@ (800055c <HAL_UART_RxCpltCallback+0xfc>)
 80004b4:	4828      	ldr	r0, [pc, #160]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 80004b6:	f003 fd63 	bl	8003f80 <HAL_UART_Transmit>
            state_machine = PROCESS_COMMAND;
 80004ba:	4b29      	ldr	r3, [pc, #164]	@ (8000560 <HAL_UART_RxCpltCallback+0x100>)
 80004bc:	2201      	movs	r2, #1
 80004be:	701a      	strb	r2, [r3, #0]
 80004c0:	e037      	b.n	8000532 <HAL_UART_RxCpltCallback+0xd2>
        } else if (rx_data[0] == '\b' || rx_data[0] == '\177') {  // Detecta Backspace
 80004c2:	4b21      	ldr	r3, [pc, #132]	@ (8000548 <HAL_UART_RxCpltCallback+0xe8>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b08      	cmp	r3, #8
 80004c8:	d003      	beq.n	80004d2 <HAL_UART_RxCpltCallback+0x72>
 80004ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000548 <HAL_UART_RxCpltCallback+0xe8>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80004d0:	d110      	bne.n	80004f4 <HAL_UART_RxCpltCallback+0x94>
            if (rx_index > 0) {  // Si hay algo en el buffer
 80004d2:	4b1e      	ldr	r3, [pc, #120]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d02b      	beq.n	8000532 <HAL_UART_RxCpltCallback+0xd2>
                rx_index--;  // Retrocede el índice
 80004da:	4b1c      	ldr	r3, [pc, #112]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	3b01      	subs	r3, #1
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b1a      	ldr	r3, [pc, #104]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 80004e4:	701a      	strb	r2, [r3, #0]
                // Simula el borrado en el terminal
                HAL_UART_Transmit(&huart2, (uint8_t *)"\b \b", 3, 3);
 80004e6:	2303      	movs	r3, #3
 80004e8:	2203      	movs	r2, #3
 80004ea:	491e      	ldr	r1, [pc, #120]	@ (8000564 <HAL_UART_RxCpltCallback+0x104>)
 80004ec:	481a      	ldr	r0, [pc, #104]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 80004ee:	f003 fd47 	bl	8003f80 <HAL_UART_Transmit>
            if (rx_index > 0) {  // Si hay algo en el buffer
 80004f2:	e01e      	b.n	8000532 <HAL_UART_RxCpltCallback+0xd2>
            }
        } else {  // Cualquier otro carácter
            rx_buffer[rx_index++] = rx_data[0];  // Almacena el carácter en el buffer
 80004f4:	4b15      	ldr	r3, [pc, #84]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	1c5a      	adds	r2, r3, #1
 80004fa:	b2d1      	uxtb	r1, r2
 80004fc:	4a13      	ldr	r2, [pc, #76]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 80004fe:	7011      	strb	r1, [r2, #0]
 8000500:	461a      	mov	r2, r3
 8000502:	4b11      	ldr	r3, [pc, #68]	@ (8000548 <HAL_UART_RxCpltCallback+0xe8>)
 8000504:	7819      	ldrb	r1, [r3, #0]
 8000506:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <HAL_UART_RxCpltCallback+0xf0>)
 8000508:	5499      	strb	r1, [r3, r2]
            HAL_UART_Transmit(&huart2, rx_data, 1, HAL_MAX_DELAY);  // Eco del carácter recibido
 800050a:	f04f 33ff 	mov.w	r3, #4294967295
 800050e:	2201      	movs	r2, #1
 8000510:	490d      	ldr	r1, [pc, #52]	@ (8000548 <HAL_UART_RxCpltCallback+0xe8>)
 8000512:	4811      	ldr	r0, [pc, #68]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 8000514:	f003 fd34 	bl	8003f80 <HAL_UART_Transmit>

            // Evita desbordamientos
            if (rx_index >= BUFFER_SIZE) {
 8000518:	4b0c      	ldr	r3, [pc, #48]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b1f      	cmp	r3, #31
 800051e:	d908      	bls.n	8000532 <HAL_UART_RxCpltCallback+0xd2>
                HAL_UART_Transmit(&huart2, (uint8_t *)"\r\nBuffer Overflow\r\n", 19, 3);
 8000520:	2303      	movs	r3, #3
 8000522:	2213      	movs	r2, #19
 8000524:	4910      	ldr	r1, [pc, #64]	@ (8000568 <HAL_UART_RxCpltCallback+0x108>)
 8000526:	480c      	ldr	r0, [pc, #48]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 8000528:	f003 fd2a 	bl	8003f80 <HAL_UART_Transmit>
                rx_index = 0;  // Reinicia el índice en caso de desbordamiento
 800052c:	4b07      	ldr	r3, [pc, #28]	@ (800054c <HAL_UART_RxCpltCallback+0xec>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
            }
        }

        // Reinicia la recepción para el siguiente byte
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	4904      	ldr	r1, [pc, #16]	@ (8000548 <HAL_UART_RxCpltCallback+0xe8>)
 8000536:	4808      	ldr	r0, [pc, #32]	@ (8000558 <HAL_UART_RxCpltCallback+0xf8>)
 8000538:	f003 fdad 	bl	8004096 <HAL_UART_Receive_IT>
    }
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40004400 	.word	0x40004400
 8000548:	200001dc 	.word	0x200001dc
 800054c:	20000200 	.word	0x20000200
 8000550:	200001e0 	.word	0x200001e0
 8000554:	08004c50 	.word	0x08004c50
 8000558:	20000150 	.word	0x20000150
 800055c:	08004c60 	.word	0x08004c60
 8000560:	20000201 	.word	0x20000201
 8000564:	08004c64 	.word	0x08004c64
 8000568:	08004c68 	.word	0x08004c68

0800056c <handleState>:
state handleState(void){
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	switch(state_machine){
 8000570:	4b39      	ldr	r3, [pc, #228]	@ (8000658 <handleState+0xec>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b06      	cmp	r3, #6
 8000578:	d868      	bhi.n	800064c <handleState+0xe0>
 800057a:	a201      	add	r2, pc, #4	@ (adr r2, 8000580 <handleState+0x14>)
 800057c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000580:	0800059d 	.word	0x0800059d
 8000584:	080005bd 	.word	0x080005bd
 8000588:	080005d5 	.word	0x080005d5
 800058c:	080005fd 	.word	0x080005fd
 8000590:	080005e7 	.word	0x080005e7
 8000594:	0800060f 	.word	0x0800060f
 8000598:	0800062f 	.word	0x0800062f
	case IDLE:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 800059c:	4b2f      	ldr	r3, [pc, #188]	@ (800065c <handleState+0xf0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	f003 0320 	and.w	r3, r3, #32
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d14d      	bne.n	8000646 <handleState+0xda>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80005aa:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <handleState+0xf0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68da      	ldr	r2, [r3, #12]
 80005b0:	4b2a      	ldr	r3, [pc, #168]	@ (800065c <handleState+0xf0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f042 0220 	orr.w	r2, r2, #32
 80005b8:	60da      	str	r2, [r3, #12]
		}
		break;
 80005ba:	e044      	b.n	8000646 <handleState+0xda>

	case PROCESS_COMMAND:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <handleState+0xf0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	68da      	ldr	r2, [r3, #12]
 80005c2:	4b26      	ldr	r3, [pc, #152]	@ (800065c <handleState+0xf0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f022 0220 	bic.w	r2, r2, #32
 80005ca:	60da      	str	r2, [r3, #12]
		processCommand((char*) rx_buffer);
 80005cc:	4824      	ldr	r0, [pc, #144]	@ (8000660 <handleState+0xf4>)
 80005ce:	f7ff fef7 	bl	80003c0 <processCommand>
		break;
 80005d2:	e03b      	b.n	800064c <handleState+0xe0>

	case STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <handleState+0xf0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	68da      	ldr	r2, [r3, #12]
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <handleState+0xf0>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f022 0220 	bic.w	r2, r2, #32
 80005e2:	60da      	str	r2, [r3, #12]
		//startup();
		break;
 80005e4:	e032      	b.n	800064c <handleState+0xe0>
	case ALIGNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <handleState+0xf0>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	68da      	ldr	r2, [r3, #12]
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <handleState+0xf0>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f022 0220 	bic.w	r2, r2, #32
 80005f4:	60da      	str	r2, [r3, #12]
		alignment();
 80005f6:	f7ff fdf1 	bl	80001dc <alignment>
		break;
 80005fa:	e027      	b.n	800064c <handleState+0xe0>
	case RUNNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80005fc:	4b17      	ldr	r3, [pc, #92]	@ (800065c <handleState+0xf0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	68da      	ldr	r2, [r3, #12]
 8000602:	4b16      	ldr	r3, [pc, #88]	@ (800065c <handleState+0xf0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	f022 0220 	bic.w	r2, r2, #32
 800060a:	60da      	str	r2, [r3, #12]
		break;
 800060c:	e01e      	b.n	800064c <handleState+0xe0>

	case READY:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 800060e:	4b13      	ldr	r3, [pc, #76]	@ (800065c <handleState+0xf0>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	68db      	ldr	r3, [r3, #12]
 8000614:	f003 0320 	and.w	r3, r3, #32
 8000618:	2b00      	cmp	r3, #0
 800061a:	d116      	bne.n	800064a <handleState+0xde>
					__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800061c:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <handleState+0xf0>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	68da      	ldr	r2, [r3, #12]
 8000622:	4b0e      	ldr	r3, [pc, #56]	@ (800065c <handleState+0xf0>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f042 0220 	orr.w	r2, r2, #32
 800062a:	60da      	str	r2, [r3, #12]
				}
		break;
 800062c:	e00d      	b.n	800064a <handleState+0xde>
	case FINISH:
		// Asegúrate de que las interrupciones de UART estén habilitadas al finalizar
		//timerCounter = 0; // Reinicia el contador
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800062e:	4b0b      	ldr	r3, [pc, #44]	@ (800065c <handleState+0xf0>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68da      	ldr	r2, [r3, #12]
 8000634:	4b09      	ldr	r3, [pc, #36]	@ (800065c <handleState+0xf0>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	f042 0220 	orr.w	r2, r2, #32
 800063c:	60da      	str	r2, [r3, #12]
		state_machine = IDLE; // Vuelve al estado IDLE
 800063e:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <handleState+0xec>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]

		break;
 8000644:	e002      	b.n	800064c <handleState+0xe0>
		break;
 8000646:	bf00      	nop
 8000648:	e000      	b.n	800064c <handleState+0xe0>
		break;
 800064a:	bf00      	nop


}
	return (state_machine);
 800064c:	4b02      	ldr	r3, [pc, #8]	@ (8000658 <handleState+0xec>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	b2db      	uxtb	r3, r3
}
 8000652:	4618      	mov	r0, r3
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000201 	.word	0x20000201
 800065c:	20000150 	.word	0x20000150
 8000660:	200001e0 	.word	0x200001e0

08000664 <commutation>:

void commutation(uint8_t step, uint16_t pwm) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	80bb      	strh	r3, [r7, #4]

    switch(step) {
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b05      	cmp	r3, #5
 8000678:	f200 80f4 	bhi.w	8000864 <commutation+0x200>
 800067c:	a201      	add	r2, pc, #4	@ (adr r2, 8000684 <commutation+0x20>)
 800067e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000682:	bf00      	nop
 8000684:	0800069d 	.word	0x0800069d
 8000688:	080006f1 	.word	0x080006f1
 800068c:	08000739 	.word	0x08000739
 8000690:	08000781 	.word	0x08000781
 8000694:	080007d5 	.word	0x080007d5
 8000698:	0800081d 	.word	0x0800081d

        case POS_UV:
        	pwm_stop();
 800069c:	f7ff fd68 	bl	8000170 <pwm_stop>
        	float_W = true;
 80006a0:	4b73      	ldr	r3, [pc, #460]	@ (8000870 <commutation+0x20c>)
 80006a2:	2201      	movs	r2, #1
 80006a4:	701a      	strb	r2, [r3, #0]
        	float_V = false;
 80006a6:	4b73      	ldr	r3, [pc, #460]	@ (8000874 <commutation+0x210>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	701a      	strb	r2, [r3, #0]
        	float_U = false;
 80006ac:	4b72      	ldr	r3, [pc, #456]	@ (8000878 <commutation+0x214>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
            GPIOA->ODR &= ~EN_W;         // Desactivar EN_W
 80006b2:	4b72      	ldr	r3, [pc, #456]	@ (800087c <commutation+0x218>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	4a71      	ldr	r2, [pc, #452]	@ (800087c <commutation+0x218>)
 80006b8:	f023 0320 	bic.w	r3, r3, #32
 80006bc:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR |= EN_U;
 80006be:	4b70      	ldr	r3, [pc, #448]	@ (8000880 <commutation+0x21c>)
 80006c0:	68db      	ldr	r3, [r3, #12]
 80006c2:	4a6f      	ldr	r2, [pc, #444]	@ (8000880 <commutation+0x21c>)
 80006c4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006c8:	60d3      	str	r3, [r2, #12]
			GPIOB->ODR |= EN_V;  // Activar EN_U y EN_V
 80006ca:	4b6d      	ldr	r3, [pc, #436]	@ (8000880 <commutation+0x21c>)
 80006cc:	68db      	ldr	r3, [r3, #12]
 80006ce:	4a6c      	ldr	r2, [pc, #432]	@ (8000880 <commutation+0x21c>)
 80006d0:	f043 0302 	orr.w	r3, r3, #2
 80006d4:	60d3      	str	r3, [r2, #12]

            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 80006d6:	4b6b      	ldr	r3, [pc, #428]	@ (8000884 <commutation+0x220>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	88ba      	ldrh	r2, [r7, #4]
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 80006de:	4b69      	ldr	r3, [pc, #420]	@ (8000884 <commutation+0x220>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2200      	movs	r2, #0
 80006e4:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80006e6:	4b67      	ldr	r3, [pc, #412]	@ (8000884 <commutation+0x220>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	@ 0x24




            break;
 80006ee:	e0ba      	b.n	8000866 <commutation+0x202>
        case POS_UW:
        	pwm_stop();
 80006f0:	f7ff fd3e 	bl	8000170 <pwm_stop>
        	float_W = false;
 80006f4:	4b5e      	ldr	r3, [pc, #376]	@ (8000870 <commutation+0x20c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
            	float_U = false;
 80006fa:	4b5f      	ldr	r3, [pc, #380]	@ (8000878 <commutation+0x214>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
            	float_V = true;
 8000700:	4b5c      	ldr	r3, [pc, #368]	@ (8000874 <commutation+0x210>)
 8000702:	2201      	movs	r2, #1
 8000704:	701a      	strb	r2, [r3, #0]
            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 8000706:	4b5e      	ldr	r3, [pc, #376]	@ (8000880 <commutation+0x21c>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4a5d      	ldr	r2, [pc, #372]	@ (8000880 <commutation+0x21c>)
 800070c:	f023 0302 	bic.w	r3, r3, #2
 8000710:	60d3      	str	r3, [r2, #12]

            GPIOA->ODR |=  EN_W;
 8000712:	4b5a      	ldr	r3, [pc, #360]	@ (800087c <commutation+0x218>)
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	4a59      	ldr	r2, [pc, #356]	@ (800087c <commutation+0x218>)
 8000718:	f043 0320 	orr.w	r3, r3, #32
 800071c:	60d3      	str	r3, [r2, #12]

            __HAL_TIM_SET_COMPARE(&htim3, IN_U, pwm);
 800071e:	4b59      	ldr	r3, [pc, #356]	@ (8000884 <commutation+0x220>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	88ba      	ldrh	r2, [r7, #4]
 8000724:	635a      	str	r2, [r3, #52]	@ 0x34
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 8000726:	4b57      	ldr	r3, [pc, #348]	@ (8000884 <commutation+0x220>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2200      	movs	r2, #0
 800072c:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COUNTER(&htim3, 0);
 800072e:	4b55      	ldr	r3, [pc, #340]	@ (8000884 <commutation+0x220>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	@ 0x24


            break;
 8000736:	e096      	b.n	8000866 <commutation+0x202>
        case POS_VW:
        	pwm_stop();
 8000738:	f7ff fd1a 	bl	8000170 <pwm_stop>
        	float_W = false;
 800073c:	4b4c      	ldr	r3, [pc, #304]	@ (8000870 <commutation+0x20c>)
 800073e:	2200      	movs	r2, #0
 8000740:	701a      	strb	r2, [r3, #0]
        	float_V = false;
 8000742:	4b4c      	ldr	r3, [pc, #304]	@ (8000874 <commutation+0x210>)
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
        	float_U = true;
 8000748:	4b4b      	ldr	r3, [pc, #300]	@ (8000878 <commutation+0x214>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 800074e:	4b4c      	ldr	r3, [pc, #304]	@ (8000880 <commutation+0x21c>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	4a4b      	ldr	r2, [pc, #300]	@ (8000880 <commutation+0x21c>)
 8000754:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000758:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 800075a:	4b49      	ldr	r3, [pc, #292]	@ (8000880 <commutation+0x21c>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	4a48      	ldr	r2, [pc, #288]	@ (8000880 <commutation+0x21c>)
 8000760:	f043 0302 	orr.w	r3, r3, #2
 8000764:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 8000766:	4b47      	ldr	r3, [pc, #284]	@ (8000884 <commutation+0x220>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	88ba      	ldrh	r2, [r7, #4]
 800076c:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_W, 0);
 800076e:	4b45      	ldr	r3, [pc, #276]	@ (8000884 <commutation+0x220>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	63da      	str	r2, [r3, #60]	@ 0x3c
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000776:	4b43      	ldr	r3, [pc, #268]	@ (8000884 <commutation+0x220>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	625a      	str	r2, [r3, #36]	@ 0x24




            break;
 800077e:	e072      	b.n	8000866 <commutation+0x202>
        case POS_VU:
        	pwm_stop();
 8000780:	f7ff fcf6 	bl	8000170 <pwm_stop>

        	float_W = true;
 8000784:	4b3a      	ldr	r3, [pc, #232]	@ (8000870 <commutation+0x20c>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
                	float_V = false;
 800078a:	4b3a      	ldr	r3, [pc, #232]	@ (8000874 <commutation+0x210>)
 800078c:	2200      	movs	r2, #0
 800078e:	701a      	strb	r2, [r3, #0]
                	float_U = false;
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <commutation+0x214>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
            GPIOB->ODR |= EN_U; // Activar EN_U y EN_V
 8000796:	4b3a      	ldr	r3, [pc, #232]	@ (8000880 <commutation+0x21c>)
 8000798:	68db      	ldr	r3, [r3, #12]
 800079a:	4a39      	ldr	r2, [pc, #228]	@ (8000880 <commutation+0x21c>)
 800079c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007a0:	60d3      	str	r3, [r2, #12]
            GPIOB->ODR |=  EN_V;
 80007a2:	4b37      	ldr	r3, [pc, #220]	@ (8000880 <commutation+0x21c>)
 80007a4:	68db      	ldr	r3, [r3, #12]
 80007a6:	4a36      	ldr	r2, [pc, #216]	@ (8000880 <commutation+0x21c>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR &= ~EN_W;
 80007ae:	4b33      	ldr	r3, [pc, #204]	@ (800087c <commutation+0x218>)
 80007b0:	68db      	ldr	r3, [r3, #12]
 80007b2:	4a32      	ldr	r2, [pc, #200]	@ (800087c <commutation+0x218>)
 80007b4:	f023 0320 	bic.w	r3, r3, #32
 80007b8:	60d3      	str	r3, [r2, #12]
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, pwm);
 80007ba:	4b32      	ldr	r3, [pc, #200]	@ (8000884 <commutation+0x220>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	88ba      	ldrh	r2, [r7, #4]
 80007c0:	639a      	str	r2, [r3, #56]	@ 0x38
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 80007c2:	4b30      	ldr	r3, [pc, #192]	@ (8000884 <commutation+0x220>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80007ca:	4b2e      	ldr	r3, [pc, #184]	@ (8000884 <commutation+0x220>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	2200      	movs	r2, #0
 80007d0:	625a      	str	r2, [r3, #36]	@ 0x24




            break;
 80007d2:	e048      	b.n	8000866 <commutation+0x202>
        case POS_WU:
        	pwm_stop();
 80007d4:	f7ff fccc 	bl	8000170 <pwm_stop>
        	float_W = false;
 80007d8:	4b25      	ldr	r3, [pc, #148]	@ (8000870 <commutation+0x20c>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
        	float_U = false;
 80007de:	4b26      	ldr	r3, [pc, #152]	@ (8000878 <commutation+0x214>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
        	float_V = true;
 80007e4:	4b23      	ldr	r3, [pc, #140]	@ (8000874 <commutation+0x210>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]

            GPIOB->ODR &= ~EN_V;         // Desactivar EN_V
 80007ea:	4b25      	ldr	r3, [pc, #148]	@ (8000880 <commutation+0x21c>)
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	4a24      	ldr	r2, [pc, #144]	@ (8000880 <commutation+0x21c>)
 80007f0:	f023 0302 	bic.w	r3, r3, #2
 80007f4:	60d3      	str	r3, [r2, #12]
            GPIOA->ODR |=  EN_W;
 80007f6:	4b21      	ldr	r3, [pc, #132]	@ (800087c <commutation+0x218>)
 80007f8:	68db      	ldr	r3, [r3, #12]
 80007fa:	4a20      	ldr	r2, [pc, #128]	@ (800087c <commutation+0x218>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	60d3      	str	r3, [r2, #12]

            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 8000802:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <commutation+0x220>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	88ba      	ldrh	r2, [r7, #4]
 8000808:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_U, 0);
 800080a:	4b1e      	ldr	r3, [pc, #120]	@ (8000884 <commutation+0x220>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2200      	movs	r2, #0
 8000810:	635a      	str	r2, [r3, #52]	@ 0x34
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 8000812:	4b1c      	ldr	r3, [pc, #112]	@ (8000884 <commutation+0x220>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	2200      	movs	r2, #0
 8000818:	625a      	str	r2, [r3, #36]	@ 0x24



            break;
 800081a:	e024      	b.n	8000866 <commutation+0x202>
        case POS_WV:
        	pwm_stop();
 800081c:	f7ff fca8 	bl	8000170 <pwm_stop>
           	float_W = false;
 8000820:	4b13      	ldr	r3, [pc, #76]	@ (8000870 <commutation+0x20c>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
                	float_V = false;
 8000826:	4b13      	ldr	r3, [pc, #76]	@ (8000874 <commutation+0x210>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
                	float_U = true;
 800082c:	4b12      	ldr	r3, [pc, #72]	@ (8000878 <commutation+0x214>)
 800082e:	2201      	movs	r2, #1
 8000830:	701a      	strb	r2, [r3, #0]
            GPIOB->ODR &= ~EN_U;         // Desactivar EN_U
 8000832:	4b13      	ldr	r3, [pc, #76]	@ (8000880 <commutation+0x21c>)
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	4a12      	ldr	r2, [pc, #72]	@ (8000880 <commutation+0x21c>)
 8000838:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800083c:	60d3      	str	r3, [r2, #12]

            GPIOB->ODR |= EN_V; // Activar EN_V y EN_W
 800083e:	4b10      	ldr	r3, [pc, #64]	@ (8000880 <commutation+0x21c>)
 8000840:	68db      	ldr	r3, [r3, #12]
 8000842:	4a0f      	ldr	r2, [pc, #60]	@ (8000880 <commutation+0x21c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	60d3      	str	r3, [r2, #12]

            __HAL_TIM_SET_COMPARE(&htim3, IN_W, pwm);
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <commutation+0x220>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	88ba      	ldrh	r2, [r7, #4]
 8000850:	63da      	str	r2, [r3, #60]	@ 0x3c
            __HAL_TIM_SET_COMPARE(&htim3, IN_V, 0);
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <commutation+0x220>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2200      	movs	r2, #0
 8000858:	639a      	str	r2, [r3, #56]	@ 0x38
        	__HAL_TIM_SET_COUNTER(&htim3, 0);
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <commutation+0x220>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24





            break;
 8000862:	e000      	b.n	8000866 <commutation+0x202>
        default:
            break;
 8000864:	bf00      	nop
    }
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000020c 	.word	0x2000020c
 8000874:	2000020e 	.word	0x2000020e
 8000878:	2000020d 	.word	0x2000020d
 800087c:	40010800 	.word	0x40010800
 8000880:	40010c00 	.word	0x40010c00
 8000884:	200000c0 	.word	0x200000c0

08000888 <HAL_TIM_OC_DelayElapsedCallback>:



void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a40      	ldr	r2, [pc, #256]	@ (8000998 <HAL_TIM_OC_DelayElapsedCallback+0x110>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d17b      	bne.n	8000992 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	7f1b      	ldrb	r3, [r3, #28]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d177      	bne.n	8000992 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
	    //TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
		__HAL_TIM_DISABLE(&htim4);
 80008a2:	4b3e      	ldr	r3, [pc, #248]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	6a1a      	ldr	r2, [r3, #32]
 80008a8:	f241 1311 	movw	r3, #4369	@ 0x1111
 80008ac:	4013      	ands	r3, r2
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d10f      	bne.n	80008d2 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 80008b2:	4b3a      	ldr	r3, [pc, #232]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	6a1a      	ldr	r2, [r3, #32]
 80008b8:	f240 4344 	movw	r3, #1092	@ 0x444
 80008bc:	4013      	ands	r3, r2
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d107      	bne.n	80008d2 <HAL_TIM_OC_DelayElapsedCallback+0x4a>
 80008c2:	4b36      	ldr	r3, [pc, #216]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	681a      	ldr	r2, [r3, #0]
 80008c8:	4b34      	ldr	r3, [pc, #208]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f022 0201 	bic.w	r2, r2, #1
 80008d0:	601a      	str	r2, [r3, #0]

		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80008d2:	4b32      	ldr	r3, [pc, #200]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Stop_IT(&htim4);
 80008da:	4830      	ldr	r0, [pc, #192]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008dc:	f001 fff4 	bl	80028c8 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_Base_Stop(&htim4);
 80008e0:	482e      	ldr	r0, [pc, #184]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008e2:	f001 ff78 	bl	80027d6 <HAL_TIM_Base_Stop>

		HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 80008e6:	2100      	movs	r1, #0
 80008e8:	482c      	ldr	r0, [pc, #176]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 80008ea:	f002 f963 	bl	8002bb4 <HAL_TIM_OC_Stop_IT>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e036      	b.n	8000962 <HAL_TIM_OC_DelayElapsedCallback+0xda>
			// Detener el temporizador y deshabilitar el contador
			if (eventTable[i].currentState == state_machine) {
 80008f4:	492a      	ldr	r1, [pc, #168]	@ (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	4613      	mov	r3, r2
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	4413      	add	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	440b      	add	r3, r1
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <HAL_TIM_OC_DelayElapsedCallback+0x11c>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	b2db      	uxtb	r3, r3
 800090a:	429a      	cmp	r2, r3
 800090c:	d126      	bne.n	800095c <HAL_TIM_OC_DelayElapsedCallback+0xd4>
				if (eventTable[i].eventFlag != NULL) {
 800090e:	4924      	ldr	r1, [pc, #144]	@ (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000910:	68fa      	ldr	r2, [r7, #12]
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	3304      	adds	r3, #4
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d022      	beq.n	800096a <HAL_TIM_OC_DelayElapsedCallback+0xe2>
					*(eventTable[i].eventFlag) = true;
 8000924:	491e      	ldr	r1, [pc, #120]	@ (80009a0 <HAL_TIM_OC_DelayElapsedCallback+0x118>)
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4613      	mov	r3, r2
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	4413      	add	r3, r2
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	440b      	add	r3, r1
 8000932:	3304      	adds	r3, #4
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2201      	movs	r2, #1
 8000938:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_ENABLE(&htim4);
 800093a:	4b18      	ldr	r3, [pc, #96]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b16      	ldr	r3, [pc, #88]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f042 0201 	orr.w	r2, r2, #1
 8000948:	601a      	str	r2, [r3, #0]
					__HAL_TIM_SET_COUNTER(&htim4, 0);
 800094a:	4b14      	ldr	r3, [pc, #80]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	@ 0x24

					HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_1);
 8000952:	2100      	movs	r1, #0
 8000954:	4811      	ldr	r0, [pc, #68]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000956:	f002 f92d 	bl	8002bb4 <HAL_TIM_OC_Stop_IT>

					return;
 800095a:	e01a      	b.n	8000992 <HAL_TIM_OC_DelayElapsedCallback+0x10a>
		for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	3301      	adds	r3, #1
 8000960:	60fb      	str	r3, [r7, #12]
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	2b03      	cmp	r3, #3
 8000966:	d9c5      	bls.n	80008f4 <HAL_TIM_OC_DelayElapsedCallback+0x6c>
 8000968:	e000      	b.n	800096c <HAL_TIM_OC_DelayElapsedCallback+0xe4>

				}
				break;
 800096a:	bf00      	nop

			}


		}
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 800096c:	4b0b      	ldr	r3, [pc, #44]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2200      	movs	r2, #0
 8000972:	625a      	str	r2, [r3, #36]	@ 0x24
		HAL_TIM_Base_Start_IT(&htim4);
 8000974:	4809      	ldr	r0, [pc, #36]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000976:	f001 ff55 	bl	8002824 <HAL_TIM_Base_Start_IT>
		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 800097a:	2100      	movs	r1, #0
 800097c:	4807      	ldr	r0, [pc, #28]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800097e:	f002 f829 	bl	80029d4 <HAL_TIM_OC_Start_IT>
		__HAL_TIM_ENABLE(&htim4);
 8000982:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <HAL_TIM_OC_DelayElapsedCallback+0x114>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f042 0201 	orr.w	r2, r2, #1
 8000990:	601a      	str	r2, [r3, #0]


	}

}
 8000992:	3710      	adds	r7, #16
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40000800 	.word	0x40000800
 800099c:	20000108 	.word	0x20000108
 80009a0:	20000020 	.word	0x20000020
 80009a4:	20000201 	.word	0x20000201

080009a8 <HAL_TIM_IC_CaptureCallback>:

	}
}
 */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a16      	ldr	r2, [pc, #88]	@ (8000a10 <HAL_TIM_IC_CaptureCallback+0x68>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d125      	bne.n	8000a06 <HAL_TIM_IC_CaptureCallback+0x5e>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	7f1b      	ldrb	r3, [r3, #28]
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d121      	bne.n	8000a06 <HAL_TIM_IC_CaptureCallback+0x5e>
		sensor_state = HAL_TIMEx_HallSensor_GetState(&htim1);
 80009c2:	4814      	ldr	r0, [pc, #80]	@ (8000a14 <HAL_TIM_IC_CaptureCallback+0x6c>)
 80009c4:	f003 fa7f 	bl	8003ec6 <HAL_TIMEx_HallSensor_GetState>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <HAL_TIM_IC_CaptureCallback+0x70>)
 80009ce:	701a      	strb	r2, [r3, #0]
		commutation(commutationStep, pwmVal);
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_TIM_IC_CaptureCallback+0x74>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	4a12      	ldr	r2, [pc, #72]	@ (8000a20 <HAL_TIM_IC_CaptureCallback+0x78>)
 80009d8:	8812      	ldrh	r2, [r2, #0]
 80009da:	b292      	uxth	r2, r2
 80009dc:	4611      	mov	r1, r2
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fe40 	bl	8000664 <commutation>
		commutationStep = (commutationStep + 1) % NUM_POS;
 80009e4:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <HAL_TIM_IC_CaptureCallback+0x74>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	1c5a      	adds	r2, r3, #1
 80009ec:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_TIM_IC_CaptureCallback+0x7c>)
 80009ee:	fb83 3102 	smull	r3, r1, r3, r2
 80009f2:	17d3      	asrs	r3, r2, #31
 80009f4:	1ac9      	subs	r1, r1, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	440b      	add	r3, r1
 80009fc:	005b      	lsls	r3, r3, #1
 80009fe:	1ad1      	subs	r1, r2, r3
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <HAL_TIM_IC_CaptureCallback+0x74>)
 8000a04:	701a      	strb	r2, [r3, #0]

	}
}
 8000a06:	bf00      	nop
 8000a08:	3708      	adds	r7, #8
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40012c00 	.word	0x40012c00
 8000a14:	20000078 	.word	0x20000078
 8000a18:	2000020f 	.word	0x2000020f
 8000a1c:	20000206 	.word	0x20000206
 8000a20:	20000204 	.word	0x20000204
 8000a24:	2aaaaaab 	.word	0x2aaaaaab

08000a28 <HAL_TIMEx_CommutCallback>:
void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM1){
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a06      	ldr	r2, [pc, #24]	@ (8000a50 <HAL_TIMEx_CommutCallback+0x28>)
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d106      	bne.n	8000a48 <HAL_TIMEx_CommutCallback+0x20>
		sensor_state = HAL_TIMEx_HallSensor_GetState(&htim1);
 8000a3a:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <HAL_TIMEx_CommutCallback+0x2c>)
 8000a3c:	f003 fa43 	bl	8003ec6 <HAL_TIMEx_HallSensor_GetState>
 8000a40:	4603      	mov	r3, r0
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b04      	ldr	r3, [pc, #16]	@ (8000a58 <HAL_TIMEx_CommutCallback+0x30>)
 8000a46:	701a      	strb	r2, [r3, #0]

	}
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40012c00 	.word	0x40012c00
 8000a54:	20000078 	.word	0x20000078
 8000a58:	2000020f 	.word	0x2000020f

08000a5c <HAL_TIM_TriggerCallback>:

void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	if(htim->Instance  == TIM1){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a06      	ldr	r2, [pc, #24]	@ (8000a84 <HAL_TIM_TriggerCallback+0x28>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <HAL_TIM_TriggerCallback+0x20>
		sensor_state = HAL_TIMEx_HallSensor_GetState(&htim1);
 8000a6e:	4806      	ldr	r0, [pc, #24]	@ (8000a88 <HAL_TIM_TriggerCallback+0x2c>)
 8000a70:	f003 fa29 	bl	8003ec6 <HAL_TIMEx_HallSensor_GetState>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <HAL_TIM_TriggerCallback+0x30>)
 8000a7a:	701a      	strb	r2, [r3, #0]
	}
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40012c00 	.word	0x40012c00
 8000a88:	20000078 	.word	0x20000078
 8000a8c:	2000020f 	.word	0x2000020f

08000a90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a94:	f000 fcfc 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a98:	f000 f82c 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a9c:	f000 fa3c 	bl	8000f18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aa0:	f000 fa1c 	bl	8000edc <MX_DMA_Init>
  MX_TIM4_Init();
 8000aa4:	f000 f95e 	bl	8000d64 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000aa8:	f000 f9ee 	bl	8000e88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000aac:	f000 f8b6 	bl	8000c1c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000ab0:	f000 f866 	bl	8000b80 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIMEx_HallSensor_Start_IT(&htim1);
 8000ab4:	480b      	ldr	r0, [pc, #44]	@ (8000ae4 <main+0x54>)
 8000ab6:	f003 f8c5 	bl	8003c44 <HAL_TIMEx_HallSensor_Start_IT>

  HAL_TIMEx_ConfigCommutEvent_IT(
 8000aba:	2200      	movs	r2, #0
 8000abc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ac0:	4808      	ldr	r0, [pc, #32]	@ (8000ae4 <main+0x54>)
 8000ac2:	f003 f939 	bl	8003d38 <HAL_TIMEx_ConfigCommutEvent_IT>
    &htim1,
    TIM_TS_NONE, // Usa el trigger interno del Hall Sensor
    TIM_COMMUTATION_SOFTWARE
  );
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000acc:	4806      	ldr	r0, [pc, #24]	@ (8000ae8 <main+0x58>)
 8000ace:	f001 fa0b 	bl	8001ee8 <HAL_GPIO_WritePin>
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4905      	ldr	r1, [pc, #20]	@ (8000aec <main+0x5c>)
 8000ad6:	4806      	ldr	r0, [pc, #24]	@ (8000af0 <main+0x60>)
 8000ad8:	f003 fadd 	bl	8004096 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  handleState();
 8000adc:	f7ff fd46 	bl	800056c <handleState>
 8000ae0:	e7fc      	b.n	8000adc <main+0x4c>
 8000ae2:	bf00      	nop
 8000ae4:	20000078 	.word	0x20000078
 8000ae8:	40011000 	.word	0x40011000
 8000aec:	200001dc 	.word	0x200001dc
 8000af0:	20000150 	.word	0x20000150

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b090      	sub	sp, #64	@ 0x40
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0318 	add.w	r3, r7, #24
 8000afe:	2228      	movs	r2, #40	@ 0x28
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 f856 	bl	8004bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b16:	2301      	movs	r3, #1
 8000b18:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b24:	2301      	movs	r3, #1
 8000b26:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b32:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b38:	f107 0318 	add.w	r3, r7, #24
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 f9eb 	bl	8001f18 <HAL_RCC_OscConfig>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b48:	f000 fa6a 	bl	8001020 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b50:	2302      	movs	r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b54:	2300      	movs	r3, #0
 8000b56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	2102      	movs	r1, #2
 8000b66:	4618      	mov	r0, r3
 8000b68:	f001 fc58 	bl	800241c <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b72:	f000 fa55 	bl	8001020 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	@ 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000b86:	f107 0308 	add.w	r3, r7, #8
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b94:	463b      	mov	r3, r7
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
 8000b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <MX_TIM1_Init+0x98>)
 8000ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 809;
 8000ba2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000ba4:	f240 3229 	movw	r2, #809	@ 0x329
 8000ba8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bb0:	4b18      	ldr	r3, [pc, #96]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000bb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	60bb      	str	r3, [r7, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Filter = 15;
 8000bd2:	230f      	movs	r3, #15
 8000bd4:	613b      	str	r3, [r7, #16]
  sConfig.Commutation_Delay = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_HallSensor_Init(&htim1, &sConfig) != HAL_OK)
 8000bda:	f107 0308 	add.w	r3, r7, #8
 8000bde:	4619      	mov	r1, r3
 8000be0:	480c      	ldr	r0, [pc, #48]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000be2:	f002 ff85 	bl	8003af0 <HAL_TIMEx_HallSensor_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000bec:	f000 fa18 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000bf0:	2350      	movs	r3, #80	@ 0x50
 8000bf2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bf8:	463b      	mov	r3, r7
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_TIM1_Init+0x94>)
 8000bfe:	f003 f8fb 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000c08:	f000 fa0a 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	20000078 	.word	0x20000078
 8000c18:	40012c00 	.word	0x40012c00

08000c1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08e      	sub	sp, #56	@ 0x38
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c22:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	2200      	movs	r2, #0
 8000c36:	601a      	str	r2, [r3, #0]
 8000c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
 8000c48:	615a      	str	r2, [r3, #20]
 8000c4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c4c:	4b43      	ldr	r3, [pc, #268]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c4e:	4a44      	ldr	r2, [pc, #272]	@ (8000d60 <MX_TIM3_Init+0x144>)
 8000c50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c52:	4b42      	ldr	r3, [pc, #264]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c58:	4b40      	ldr	r3, [pc, #256]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3000;
 8000c5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c60:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8000c64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c66:	4b3d      	ldr	r3, [pc, #244]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c6c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c72:	483a      	ldr	r0, [pc, #232]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c74:	f001 fd60 	bl	8002738 <HAL_TIM_Base_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000c7e:	f000 f9cf 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000c88:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4833      	ldr	r0, [pc, #204]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000c90:	f002 fb4a 	bl	8003328 <HAL_TIM_ConfigClockSource>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000c9a:	f000 f9c1 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000c9e:	482f      	ldr	r0, [pc, #188]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000ca0:	f002 f83a 	bl	8002d18 <HAL_TIM_PWM_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000caa:	f000 f9b9 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cae:	2320      	movs	r3, #32
 8000cb0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cb6:	f107 0320 	add.w	r3, r7, #32
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4827      	ldr	r0, [pc, #156]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000cbe:	f003 f89b 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000cc8:	f000 f9aa 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ccc:	2360      	movs	r3, #96	@ 0x60
 8000cce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cdc:	1d3b      	adds	r3, r7, #4
 8000cde:	2200      	movs	r2, #0
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481e      	ldr	r0, [pc, #120]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000ce4:	f002 fa5e 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000cee:	f000 f997 	bl	8001020 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8000cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	699a      	ldr	r2, [r3, #24]
 8000cf8:	4b18      	ldr	r3, [pc, #96]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0208 	bic.w	r2, r2, #8
 8000d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2204      	movs	r2, #4
 8000d06:	4619      	mov	r1, r3
 8000d08:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d0a:	f002 fa4b 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_TIM3_Init+0xfc>
  {
    Error_Handler();
 8000d14:	f000 f984 	bl	8001020 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_2);
 8000d18:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	699a      	ldr	r2, [r3, #24]
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d30:	f002 fa38 	bl	80031a4 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_TIM3_Init+0x122>
  {
    Error_Handler();
 8000d3a:	f000 f971 	bl	8001020 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_3);
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	69da      	ldr	r2, [r3, #28]
 8000d44:	4b05      	ldr	r3, [pc, #20]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f022 0208 	bic.w	r2, r2, #8
 8000d4c:	61da      	str	r2, [r3, #28]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <MX_TIM3_Init+0x140>)
 8000d50:	f000 fa38 	bl	80011c4 <HAL_TIM_MspPostInit>

}
 8000d54:	bf00      	nop
 8000d56:	3738      	adds	r7, #56	@ 0x38
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	200000c0 	.word	0x200000c0
 8000d60:	40000400 	.word	0x40000400

08000d64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b096      	sub	sp, #88	@ 0x58
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]
 8000d92:	615a      	str	r2, [r3, #20]
 8000d94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  TIM_OnePulse_InitTypeDef sConfig;
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d96:	4b3a      	ldr	r3, [pc, #232]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000d98:	4a3a      	ldr	r2, [pc, #232]	@ (8000e84 <MX_TIM4_Init+0x120>)
 8000d9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 8000d9c:	4b38      	ldr	r3, [pc, #224]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000d9e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000da2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da4:	4b36      	ldr	r3, [pc, #216]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000daa:	4b35      	ldr	r3, [pc, #212]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000dac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000db0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db2:	4b33      	ldr	r3, [pc, #204]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000db8:	4b31      	ldr	r3, [pc, #196]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000dbe:	4830      	ldr	r0, [pc, #192]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000dc0:	f001 fcba 	bl	8002738 <HAL_TIM_Base_Init>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8000dca:	f000 f929 	bl	8001020 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dd4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4829      	ldr	r0, [pc, #164]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000ddc:	f002 faa4 	bl	8003328 <HAL_TIM_ConfigClockSource>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8000de6:	f000 f91b 	bl	8001020 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8000dea:	4825      	ldr	r0, [pc, #148]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000dec:	f001 fd9a 	bl	8002924 <HAL_TIM_OC_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8000df6:	f000 f913 	bl	8001020 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000dfa:	2320      	movs	r3, #32
 8000dfc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e02:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000e06:	4619      	mov	r1, r3
 8000e08:	481d      	ldr	r0, [pc, #116]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e0a:	f002 fff5 	bl	8003df8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8000e14:	f000 f904 	bl	8001020 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e20:	2300      	movs	r3, #0
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e24:	2300      	movs	r3, #0
 8000e26:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4813      	ldr	r0, [pc, #76]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e32:	f002 f95b 	bl	80030ec <HAL_TIM_OC_ConfigChannel>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8000e3c:	f000 f8f0 	bl	8001020 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8000e40:	4b0f      	ldr	r3, [pc, #60]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	699a      	ldr	r2, [r3, #24]
 8000e46:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f042 0208 	orr.w	r2, r2, #8
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	2204      	movs	r2, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4809      	ldr	r0, [pc, #36]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e5a:	f002 f947 	bl	80030ec <HAL_TIM_OC_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM4_Init+0x104>
  {
    Error_Handler();
 8000e64:	f000 f8dc 	bl	8001020 <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_2);
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <MX_TIM4_Init+0x11c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000e76:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3758      	adds	r7, #88	@ 0x58
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000108 	.word	0x20000108
 8000e84:	40000800 	.word	0x40000800

08000e88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ed8 <MX_USART2_UART_Init+0x50>)
 8000e90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eae:	220c      	movs	r2, #12
 8000eb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb2:	4b08      	ldr	r3, [pc, #32]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <MX_USART2_UART_Init+0x4c>)
 8000ec0:	f003 f80e 	bl	8003ee0 <HAL_UART_Init>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eca:	f000 f8a9 	bl	8001020 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000150 	.word	0x20000150
 8000ed8:	40004400 	.word	0x40004400

08000edc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ee2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f14 <MX_DMA_Init+0x38>)
 8000ee4:	695b      	ldr	r3, [r3, #20]
 8000ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8000f14 <MX_DMA_Init+0x38>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6153      	str	r3, [r2, #20]
 8000eee:	4b09      	ldr	r3, [pc, #36]	@ (8000f14 <MX_DMA_Init+0x38>)
 8000ef0:	695b      	ldr	r3, [r3, #20]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2011      	movs	r0, #17
 8000f00:	f000 fc23 	bl	800174a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f04:	2011      	movs	r0, #17
 8000f06:	f000 fc3c 	bl	8001782 <HAL_NVIC_EnableIRQ>

}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b088      	sub	sp, #32
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0310 	add.w	r3, r7, #16
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f2c:	4b38      	ldr	r3, [pc, #224]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a37      	ldr	r2, [pc, #220]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b35      	ldr	r3, [pc, #212]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f44:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a31      	ldr	r2, [pc, #196]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f4a:	f043 0320 	orr.w	r3, r3, #32
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b2f      	ldr	r3, [pc, #188]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0320 	and.w	r3, r3, #32
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a2b      	ldr	r2, [pc, #172]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f62:	f043 0304 	orr.w	r3, r3, #4
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <MX_GPIO_Init+0xf8>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f92:	4820      	ldr	r0, [pc, #128]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000f94:	f000 ffa8 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_W_GPIO_Port, EN_W_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	481e      	ldr	r0, [pc, #120]	@ (8001018 <MX_GPIO_Init+0x100>)
 8000f9e:	f000 ffa3 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_U_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f242 0102 	movw	r1, #8194	@ 0x2002
 8000fa8:	481c      	ldr	r0, [pc, #112]	@ (800101c <MX_GPIO_Init+0x104>)
 8000faa:	f000 ff9d 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4813      	ldr	r0, [pc, #76]	@ (8001014 <MX_GPIO_Init+0xfc>)
 8000fc8:	f000 fe0a 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_W_Pin */
  GPIO_InitStruct.Pin = EN_W_Pin;
 8000fcc:	2320      	movs	r3, #32
 8000fce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_W_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_GPIO_Init+0x100>)
 8000fe4:	f000 fdfc 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_V_Pin EN_U_Pin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_U_Pin;
 8000fe8:	f242 0302 	movw	r3, #8194	@ 0x2002
 8000fec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4619      	mov	r1, r3
 8001000:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_GPIO_Init+0x104>)
 8001002:	f000 fded 	bl	8001be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40021000 	.word	0x40021000
 8001014:	40011000 	.word	0x40011000
 8001018:	40010800 	.word	0x40010800
 800101c:	40010c00 	.word	0x40010c00

08001020 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001024:	b672      	cpsid	i
}
 8001026:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <Error_Handler+0x8>

0800102c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b480      	push	{r7}
 800102e:	b085      	sub	sp, #20
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_MspInit+0x5c>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <HAL_MspInit+0x5c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b12      	ldr	r3, [pc, #72]	@ (8001088 <HAL_MspInit+0x5c>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b0f      	ldr	r3, [pc, #60]	@ (8001088 <HAL_MspInit+0x5c>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a0e      	ldr	r2, [pc, #56]	@ (8001088 <HAL_MspInit+0x5c>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b0c      	ldr	r3, [pc, #48]	@ (8001088 <HAL_MspInit+0x5c>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_MspInit+0x60>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_MspInit+0x60>)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	40021000 	.word	0x40021000
 800108c:	40010000 	.word	0x40010000

08001090 <HAL_TIMEx_HallSensor_MspInit>:
* This function configures the hardware resources used in this example
* @param htimex_hallsensor: TIMEx_HallSensor handle pointer
* @retval None
*/
void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* htimex_hallsensor)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
  if(htimex_hallsensor->Instance==TIM1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a26      	ldr	r2, [pc, #152]	@ (8001144 <HAL_TIMEx_HallSensor_MspInit+0xb4>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d144      	bne.n	800113a <HAL_TIMEx_HallSensor_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010b0:	4b25      	ldr	r3, [pc, #148]	@ (8001148 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	4a24      	ldr	r2, [pc, #144]	@ (8001148 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80010ba:	6193      	str	r3, [r2, #24]
 80010bc:	4b22      	ldr	r3, [pc, #136]	@ (8001148 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80010c4:	60fb      	str	r3, [r7, #12]
 80010c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001148 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001148 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6193      	str	r3, [r2, #24]
 80010d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001148 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80010e0:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80010e4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0310 	add.w	r3, r7, #16
 80010f2:	4619      	mov	r1, r3
 80010f4:	4815      	ldr	r0, [pc, #84]	@ (800114c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010f6:	f000 fd73 	bl	8001be0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	2018      	movs	r0, #24
 8001100:	f000 fb23 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8001104:	2018      	movs	r0, #24
 8001106:	f000 fb3c 	bl	8001782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2019      	movs	r0, #25
 8001110:	f000 fb1b 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001114:	2019      	movs	r0, #25
 8001116:	f000 fb34 	bl	8001782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	201a      	movs	r0, #26
 8001120:	f000 fb13 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8001124:	201a      	movs	r0, #26
 8001126:	f000 fb2c 	bl	8001782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	201b      	movs	r0, #27
 8001130:	f000 fb0b 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001134:	201b      	movs	r0, #27
 8001136:	f000 fb24 	bl	8001782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800113a:	bf00      	nop
 800113c:	3720      	adds	r7, #32
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40012c00 	.word	0x40012c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40010800 	.word	0x40010800

08001150 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a16      	ldr	r2, [pc, #88]	@ (80011b8 <HAL_TIM_Base_MspInit+0x68>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10c      	bne.n	800117c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001162:	4b16      	ldr	r3, [pc, #88]	@ (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a15      	ldr	r2, [pc, #84]	@ (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b13      	ldr	r3, [pc, #76]	@ (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800117a:	e018      	b.n	80011ae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a0f      	ldr	r2, [pc, #60]	@ (80011c0 <HAL_TIM_Base_MspInit+0x70>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d113      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	4a0c      	ldr	r2, [pc, #48]	@ (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	61d3      	str	r3, [r2, #28]
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <HAL_TIM_Base_MspInit+0x6c>)
 8001194:	69db      	ldr	r3, [r3, #28]
 8001196:	f003 0304 	and.w	r3, r3, #4
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	201e      	movs	r0, #30
 80011a4:	f000 fad1 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011a8:	201e      	movs	r0, #30
 80011aa:	f000 faea 	bl	8001782 <HAL_NVIC_EnableIRQ>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40000400 	.word	0x40000400
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40000800 	.word	0x40000800

080011c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b088      	sub	sp, #32
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 0310 	add.w	r3, r7, #16
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1b      	ldr	r2, [pc, #108]	@ (800124c <HAL_TIM_MspPostInit+0x88>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d12f      	bne.n	8001244 <HAL_TIM_MspPostInit+0x80>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_TIM_MspPostInit+0x8c>)
 80011e6:	699b      	ldr	r3, [r3, #24]
 80011e8:	4a19      	ldr	r2, [pc, #100]	@ (8001250 <HAL_TIM_MspPostInit+0x8c>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6193      	str	r3, [r2, #24]
 80011f0:	4b17      	ldr	r3, [pc, #92]	@ (8001250 <HAL_TIM_MspPostInit+0x8c>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_TIM_MspPostInit+0x8c>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	4a13      	ldr	r2, [pc, #76]	@ (8001250 <HAL_TIM_MspPostInit+0x8c>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6193      	str	r3, [r2, #24]
 8001208:	4b11      	ldr	r3, [pc, #68]	@ (8001250 <HAL_TIM_MspPostInit+0x8c>)
 800120a:	699b      	ldr	r3, [r3, #24]
 800120c:	f003 0308 	and.w	r3, r3, #8
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = IN_U_Pin|IN_V_Pin;
 8001214:	23c0      	movs	r3, #192	@ 0xc0
 8001216:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001218:	2302      	movs	r3, #2
 800121a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	4619      	mov	r1, r3
 8001226:	480b      	ldr	r0, [pc, #44]	@ (8001254 <HAL_TIM_MspPostInit+0x90>)
 8001228:	f000 fcda 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = IN_W_Pin;
 800122c:	2301      	movs	r3, #1
 800122e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(IN_W_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	4619      	mov	r1, r3
 800123e:	4806      	ldr	r0, [pc, #24]	@ (8001258 <HAL_TIM_MspPostInit+0x94>)
 8001240:	f000 fcce 	bl	8001be0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001244:	bf00      	nop
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40000400 	.word	0x40000400
 8001250:	40021000 	.word	0x40021000
 8001254:	40010800 	.word	0x40010800
 8001258:	40010c00 	.word	0x40010c00

0800125c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0310 	add.w	r3, r7, #16
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a32      	ldr	r2, [pc, #200]	@ (8001340 <HAL_UART_MspInit+0xe4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d15d      	bne.n	8001338 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127c:	4b31      	ldr	r3, [pc, #196]	@ (8001344 <HAL_UART_MspInit+0xe8>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a30      	ldr	r2, [pc, #192]	@ (8001344 <HAL_UART_MspInit+0xe8>)
 8001282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b2e      	ldr	r3, [pc, #184]	@ (8001344 <HAL_UART_MspInit+0xe8>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b2b      	ldr	r3, [pc, #172]	@ (8001344 <HAL_UART_MspInit+0xe8>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a2a      	ldr	r2, [pc, #168]	@ (8001344 <HAL_UART_MspInit+0xe8>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b28      	ldr	r3, [pc, #160]	@ (8001344 <HAL_UART_MspInit+0xe8>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ac:	2304      	movs	r3, #4
 80012ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	4822      	ldr	r0, [pc, #136]	@ (8001348 <HAL_UART_MspInit+0xec>)
 80012c0:	f000 fc8e 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012c4:	2308      	movs	r3, #8
 80012c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4619      	mov	r1, r3
 80012d6:	481c      	ldr	r0, [pc, #112]	@ (8001348 <HAL_UART_MspInit+0xec>)
 80012d8:	f000 fc82 	bl	8001be0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <HAL_UART_MspInit+0xf0>)
 80012de:	4a1c      	ldr	r2, [pc, #112]	@ (8001350 <HAL_UART_MspInit+0xf4>)
 80012e0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <HAL_UART_MspInit+0xf0>)
 80012e4:	2210      	movs	r2, #16
 80012e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_UART_MspInit+0xf0>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ee:	4b17      	ldr	r3, [pc, #92]	@ (800134c <HAL_UART_MspInit+0xf0>)
 80012f0:	2280      	movs	r2, #128	@ 0x80
 80012f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012f4:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_UART_MspInit+0xf0>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012fa:	4b14      	ldr	r3, [pc, #80]	@ (800134c <HAL_UART_MspInit+0xf0>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_UART_MspInit+0xf0>)
 8001302:	2220      	movs	r2, #32
 8001304:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UART_MspInit+0xf0>)
 8001308:	2200      	movs	r2, #0
 800130a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <HAL_UART_MspInit+0xf0>)
 800130e:	f000 fa53 	bl	80017b8 <HAL_DMA_Init>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8001318:	f7ff fe82 	bl	8001020 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a0b      	ldr	r2, [pc, #44]	@ (800134c <HAL_UART_MspInit+0xf0>)
 8001320:	639a      	str	r2, [r3, #56]	@ 0x38
 8001322:	4a0a      	ldr	r2, [pc, #40]	@ (800134c <HAL_UART_MspInit+0xf0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001328:	2200      	movs	r2, #0
 800132a:	2100      	movs	r1, #0
 800132c:	2026      	movs	r0, #38	@ 0x26
 800132e:	f000 fa0c 	bl	800174a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001332:	2026      	movs	r0, #38	@ 0x26
 8001334:	f000 fa25 	bl	8001782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40004400 	.word	0x40004400
 8001344:	40021000 	.word	0x40021000
 8001348:	40010800 	.word	0x40010800
 800134c:	20000198 	.word	0x20000198
 8001350:	40020080 	.word	0x40020080

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <NMI_Handler+0x4>

0800135c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <HardFault_Handler+0x4>

08001364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <MemManage_Handler+0x4>

0800136c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <UsageFault_Handler+0x4>

0800137c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	bc80      	pop	{r7}
 8001392:	4770      	bx	lr

08001394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr

080013a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a4:	f000 f8ba 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <DMA1_Channel7_IRQHandler+0x10>)
 80013b2:	f000 fb0f 	bl	80019d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000198 	.word	0x20000198

080013c0 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <TIM1_BRK_IRQHandler+0x10>)
 80013c6:	f001 fda1 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000078 	.word	0x20000078

080013d4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <TIM1_UP_IRQHandler+0x10>)
 80013da:	f001 fd97 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000078 	.word	0x20000078

080013e8 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013ec:	4802      	ldr	r0, [pc, #8]	@ (80013f8 <TIM1_TRG_COM_IRQHandler+0x10>)
 80013ee:	f001 fd8d 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	20000078 	.word	0x20000078

080013fc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001400:	4802      	ldr	r0, [pc, #8]	@ (800140c <TIM1_CC_IRQHandler+0x10>)
 8001402:	f001 fd83 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000078 	.word	0x20000078

08001410 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001414:	4802      	ldr	r0, [pc, #8]	@ (8001420 <TIM4_IRQHandler+0x10>)
 8001416:	f001 fd79 	bl	8002f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000108 	.word	0x20000108

08001424 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001428:	4802      	ldr	r0, [pc, #8]	@ (8001434 <USART2_IRQHandler+0x10>)
 800142a:	f002 fe59 	bl	80040e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000150 	.word	0x20000150

08001438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001444:	f7ff fff8 	bl	8001438 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001448:	480b      	ldr	r0, [pc, #44]	@ (8001478 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800144a:	490c      	ldr	r1, [pc, #48]	@ (800147c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800144c:	4a0c      	ldr	r2, [pc, #48]	@ (8001480 <LoopFillZerobss+0x16>)
  movs r3, #0
 800144e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001450:	e002      	b.n	8001458 <LoopCopyDataInit>

08001452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001456:	3304      	adds	r3, #4

08001458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800145c:	d3f9      	bcc.n	8001452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145e:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001460:	4c09      	ldr	r4, [pc, #36]	@ (8001488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001464:	e001      	b.n	800146a <LoopFillZerobss>

08001466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001468:	3204      	adds	r2, #4

0800146a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800146c:	d3fb      	bcc.n	8001466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146e:	f003 fba9 	bl	8004bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fb0d 	bl	8000a90 <main>
  bx lr
 8001476:	4770      	bx	lr
  ldr r0, =_sdata
 8001478:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800147c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001480:	08004cb8 	.word	0x08004cb8
  ldr r2, =_sbss
 8001484:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001488:	20000214 	.word	0x20000214

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <HAL_Init+0x28>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	@ (80014b8 <HAL_Init+0x28>)
 800149a:	f043 0310 	orr.w	r3, r3, #16
 800149e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f947 	bl	8001734 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	200f      	movs	r0, #15
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fdbe 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40022000 	.word	0x40022000

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f95f 	bl	800179e <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f927 	bl	800174a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	@ (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000050 	.word	0x20000050
 8001514:	20000058 	.word	0x20000058
 8001518:	20000054 	.word	0x20000054

0800151c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <HAL_IncTick+0x1c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b05      	ldr	r3, [pc, #20]	@ (800153c <HAL_IncTick+0x20>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a03      	ldr	r2, [pc, #12]	@ (800153c <HAL_IncTick+0x20>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	20000058 	.word	0x20000058
 800153c:	20000210 	.word	0x20000210

08001540 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  return uwTick;
 8001544:	4b02      	ldr	r3, [pc, #8]	@ (8001550 <HAL_GetTick+0x10>)
 8001546:	681b      	ldr	r3, [r3, #0]
}
 8001548:	4618      	mov	r0, r3
 800154a:	46bd      	mov	sp, r7
 800154c:	bc80      	pop	{r7}
 800154e:	4770      	bx	lr
 8001550:	20000210 	.word	0x20000210

08001554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800155c:	f7ff fff0 	bl	8001540 <HAL_GetTick>
 8001560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800156c:	d005      	beq.n	800157a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_Delay+0x44>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	461a      	mov	r2, r3
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	4413      	add	r3, r2
 8001578:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800157a:	bf00      	nop
 800157c:	f7ff ffe0 	bl	8001540 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	429a      	cmp	r2, r3
 800158a:	d8f7      	bhi.n	800157c <HAL_Delay+0x28>
  {
  }
}
 800158c:	bf00      	nop
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000058 	.word	0x20000058

0800159c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159c:	b480      	push	{r7}
 800159e:	b085      	sub	sp, #20
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ac:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b2:	68ba      	ldr	r2, [r7, #8]
 80015b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015b8:	4013      	ands	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ce:	4a04      	ldr	r2, [pc, #16]	@ (80015e0 <__NVIC_SetPriorityGrouping+0x44>)
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	60d3      	str	r3, [r2, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	bc80      	pop	{r7}
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e8:	4b04      	ldr	r3, [pc, #16]	@ (80015fc <__NVIC_GetPriorityGrouping+0x18>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	f003 0307 	and.w	r3, r3, #7
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db0b      	blt.n	800162a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	f003 021f 	and.w	r2, r3, #31
 8001618:	4906      	ldr	r1, [pc, #24]	@ (8001634 <__NVIC_EnableIRQ+0x34>)
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	2001      	movs	r0, #1
 8001622:	fa00 f202 	lsl.w	r2, r0, r2
 8001626:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162a:	bf00      	nop
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	e000e100 	.word	0xe000e100

08001638 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	6039      	str	r1, [r7, #0]
 8001642:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001648:	2b00      	cmp	r3, #0
 800164a:	db0a      	blt.n	8001662 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	b2da      	uxtb	r2, r3
 8001650:	490c      	ldr	r1, [pc, #48]	@ (8001684 <__NVIC_SetPriority+0x4c>)
 8001652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001656:	0112      	lsls	r2, r2, #4
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	440b      	add	r3, r1
 800165c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001660:	e00a      	b.n	8001678 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	b2da      	uxtb	r2, r3
 8001666:	4908      	ldr	r1, [pc, #32]	@ (8001688 <__NVIC_SetPriority+0x50>)
 8001668:	79fb      	ldrb	r3, [r7, #7]
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	3b04      	subs	r3, #4
 8001670:	0112      	lsls	r2, r2, #4
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	440b      	add	r3, r1
 8001676:	761a      	strb	r2, [r3, #24]
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000e100 	.word	0xe000e100
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800168c:	b480      	push	{r7}
 800168e:	b089      	sub	sp, #36	@ 0x24
 8001690:	af00      	add	r7, sp, #0
 8001692:	60f8      	str	r0, [r7, #12]
 8001694:	60b9      	str	r1, [r7, #8]
 8001696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f1c3 0307 	rsb	r3, r3, #7
 80016a6:	2b04      	cmp	r3, #4
 80016a8:	bf28      	it	cs
 80016aa:	2304      	movcs	r3, #4
 80016ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	3304      	adds	r3, #4
 80016b2:	2b06      	cmp	r3, #6
 80016b4:	d902      	bls.n	80016bc <NVIC_EncodePriority+0x30>
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	3b03      	subs	r3, #3
 80016ba:	e000      	b.n	80016be <NVIC_EncodePriority+0x32>
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c0:	f04f 32ff 	mov.w	r2, #4294967295
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	401a      	ands	r2, r3
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d4:	f04f 31ff 	mov.w	r1, #4294967295
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43d9      	mvns	r1, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	4313      	orrs	r3, r2
         );
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3724      	adds	r7, #36	@ 0x24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3b01      	subs	r3, #1
 80016fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001700:	d301      	bcc.n	8001706 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001702:	2301      	movs	r3, #1
 8001704:	e00f      	b.n	8001726 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001706:	4a0a      	ldr	r2, [pc, #40]	@ (8001730 <SysTick_Config+0x40>)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800170e:	210f      	movs	r1, #15
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f7ff ff90 	bl	8001638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <SysTick_Config+0x40>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800171e:	4b04      	ldr	r3, [pc, #16]	@ (8001730 <SysTick_Config+0x40>)
 8001720:	2207      	movs	r2, #7
 8001722:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	e000e010 	.word	0xe000e010

08001734 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff ff2d 	bl	800159c <__NVIC_SetPriorityGrouping>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174a:	b580      	push	{r7, lr}
 800174c:	b086      	sub	sp, #24
 800174e:	af00      	add	r7, sp, #0
 8001750:	4603      	mov	r3, r0
 8001752:	60b9      	str	r1, [r7, #8]
 8001754:	607a      	str	r2, [r7, #4]
 8001756:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001758:	2300      	movs	r3, #0
 800175a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800175c:	f7ff ff42 	bl	80015e4 <__NVIC_GetPriorityGrouping>
 8001760:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	6978      	ldr	r0, [r7, #20]
 8001768:	f7ff ff90 	bl	800168c <NVIC_EncodePriority>
 800176c:	4602      	mov	r2, r0
 800176e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001772:	4611      	mov	r1, r2
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff5f 	bl	8001638 <__NVIC_SetPriority>
}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff ff35 	bl	8001600 <__NVIC_EnableIRQ>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ffa2 	bl	80016f0 <SysTick_Config>
 80017ac:	4603      	mov	r3, r0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e043      	b.n	8001856 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	461a      	mov	r2, r3
 80017d4:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_DMA_Init+0xa8>)
 80017d6:	4413      	add	r3, r2
 80017d8:	4a22      	ldr	r2, [pc, #136]	@ (8001864 <HAL_DMA_Init+0xac>)
 80017da:	fba2 2303 	umull	r2, r3, r2, r3
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	009a      	lsls	r2, r3, #2
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <HAL_DMA_Init+0xb0>)
 80017ea:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001802:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001806:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001810:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	69db      	ldr	r3, [r3, #28]
 800182e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001830:	68fa      	ldr	r2, [r7, #12]
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr
 8001860:	bffdfff8 	.word	0xbffdfff8
 8001864:	cccccccd 	.word	0xcccccccd
 8001868:	40020000 	.word	0x40020000

0800186c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e020      	b.n	80018d8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020e 	bic.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 0201 	bic.w	r2, r2, #1
 80018b4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80018d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
	...

080018e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d005      	beq.n	8001908 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2204      	movs	r2, #4
 8001900:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	73fb      	strb	r3, [r7, #15]
 8001906:	e051      	b.n	80019ac <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 020e 	bic.w	r2, r2, #14
 8001916:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <HAL_DMA_Abort_IT+0xd4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d029      	beq.n	8001986 <HAL_DMA_Abort_IT+0xa2>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a21      	ldr	r2, [pc, #132]	@ (80019bc <HAL_DMA_Abort_IT+0xd8>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d022      	beq.n	8001982 <HAL_DMA_Abort_IT+0x9e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1f      	ldr	r2, [pc, #124]	@ (80019c0 <HAL_DMA_Abort_IT+0xdc>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01a      	beq.n	800197c <HAL_DMA_Abort_IT+0x98>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a1e      	ldr	r2, [pc, #120]	@ (80019c4 <HAL_DMA_Abort_IT+0xe0>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d012      	beq.n	8001976 <HAL_DMA_Abort_IT+0x92>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a1c      	ldr	r2, [pc, #112]	@ (80019c8 <HAL_DMA_Abort_IT+0xe4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00a      	beq.n	8001970 <HAL_DMA_Abort_IT+0x8c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1b      	ldr	r2, [pc, #108]	@ (80019cc <HAL_DMA_Abort_IT+0xe8>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d102      	bne.n	800196a <HAL_DMA_Abort_IT+0x86>
 8001964:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001968:	e00e      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 800196a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800196e:	e00b      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001970:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001974:	e008      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001976:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800197a:	e005      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 800197c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001980:	e002      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001982:	2310      	movs	r3, #16
 8001984:	e000      	b.n	8001988 <HAL_DMA_Abort_IT+0xa4>
 8001986:	2301      	movs	r3, #1
 8001988:	4a11      	ldr	r2, [pc, #68]	@ (80019d0 <HAL_DMA_Abort_IT+0xec>)
 800198a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	4798      	blx	r3
    } 
  }
  return status;
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40020008 	.word	0x40020008
 80019bc:	4002001c 	.word	0x4002001c
 80019c0:	40020030 	.word	0x40020030
 80019c4:	40020044 	.word	0x40020044
 80019c8:	40020058 	.word	0x40020058
 80019cc:	4002006c 	.word	0x4002006c
 80019d0:	40020000 	.word	0x40020000

080019d4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2204      	movs	r2, #4
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d04f      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xc8>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d04a      	beq.n	8001a9c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0320 	and.w	r3, r3, #32
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d107      	bne.n	8001a24 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0204 	bic.w	r2, r2, #4
 8001a22:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a66      	ldr	r2, [pc, #408]	@ (8001bc4 <HAL_DMA_IRQHandler+0x1f0>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d029      	beq.n	8001a82 <HAL_DMA_IRQHandler+0xae>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a65      	ldr	r2, [pc, #404]	@ (8001bc8 <HAL_DMA_IRQHandler+0x1f4>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <HAL_DMA_IRQHandler+0xaa>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a63      	ldr	r2, [pc, #396]	@ (8001bcc <HAL_DMA_IRQHandler+0x1f8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01a      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xa4>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a62      	ldr	r2, [pc, #392]	@ (8001bd0 <HAL_DMA_IRQHandler+0x1fc>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d012      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x9e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a60      	ldr	r2, [pc, #384]	@ (8001bd4 <HAL_DMA_IRQHandler+0x200>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d00a      	beq.n	8001a6c <HAL_DMA_IRQHandler+0x98>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a5f      	ldr	r2, [pc, #380]	@ (8001bd8 <HAL_DMA_IRQHandler+0x204>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <HAL_DMA_IRQHandler+0x92>
 8001a60:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a64:	e00e      	b.n	8001a84 <HAL_DMA_IRQHandler+0xb0>
 8001a66:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001a6a:	e00b      	b.n	8001a84 <HAL_DMA_IRQHandler+0xb0>
 8001a6c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001a70:	e008      	b.n	8001a84 <HAL_DMA_IRQHandler+0xb0>
 8001a72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a76:	e005      	b.n	8001a84 <HAL_DMA_IRQHandler+0xb0>
 8001a78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a7c:	e002      	b.n	8001a84 <HAL_DMA_IRQHandler+0xb0>
 8001a7e:	2340      	movs	r3, #64	@ 0x40
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_IRQHandler+0xb0>
 8001a82:	2304      	movs	r3, #4
 8001a84:	4a55      	ldr	r2, [pc, #340]	@ (8001bdc <HAL_DMA_IRQHandler+0x208>)
 8001a86:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 8094 	beq.w	8001bba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a9a:	e08e      	b.n	8001bba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d056      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x186>
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d051      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0320 	and.w	r3, r3, #32
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d10b      	bne.n	8001adc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 020a 	bic.w	r2, r2, #10
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a38      	ldr	r2, [pc, #224]	@ (8001bc4 <HAL_DMA_IRQHandler+0x1f0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d029      	beq.n	8001b3a <HAL_DMA_IRQHandler+0x166>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a37      	ldr	r2, [pc, #220]	@ (8001bc8 <HAL_DMA_IRQHandler+0x1f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x162>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a35      	ldr	r2, [pc, #212]	@ (8001bcc <HAL_DMA_IRQHandler+0x1f8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01a      	beq.n	8001b30 <HAL_DMA_IRQHandler+0x15c>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a34      	ldr	r2, [pc, #208]	@ (8001bd0 <HAL_DMA_IRQHandler+0x1fc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d012      	beq.n	8001b2a <HAL_DMA_IRQHandler+0x156>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a32      	ldr	r2, [pc, #200]	@ (8001bd4 <HAL_DMA_IRQHandler+0x200>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d00a      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x150>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a31      	ldr	r2, [pc, #196]	@ (8001bd8 <HAL_DMA_IRQHandler+0x204>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d102      	bne.n	8001b1e <HAL_DMA_IRQHandler+0x14a>
 8001b18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001b1c:	e00e      	b.n	8001b3c <HAL_DMA_IRQHandler+0x168>
 8001b1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001b22:	e00b      	b.n	8001b3c <HAL_DMA_IRQHandler+0x168>
 8001b24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001b28:	e008      	b.n	8001b3c <HAL_DMA_IRQHandler+0x168>
 8001b2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b2e:	e005      	b.n	8001b3c <HAL_DMA_IRQHandler+0x168>
 8001b30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b34:	e002      	b.n	8001b3c <HAL_DMA_IRQHandler+0x168>
 8001b36:	2320      	movs	r3, #32
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_IRQHandler+0x168>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	4a27      	ldr	r2, [pc, #156]	@ (8001bdc <HAL_DMA_IRQHandler+0x208>)
 8001b3e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d034      	beq.n	8001bba <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b58:	e02f      	b.n	8001bba <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	2208      	movs	r2, #8
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d028      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x1e8>
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	f003 0308 	and.w	r3, r3, #8
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d023      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f022 020e 	bic.w	r2, r2, #14
 8001b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d004      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
    }
  }
  return;
 8001bba:	bf00      	nop
 8001bbc:	bf00      	nop
}
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40020008 	.word	0x40020008
 8001bc8:	4002001c 	.word	0x4002001c
 8001bcc:	40020030 	.word	0x40020030
 8001bd0:	40020044 	.word	0x40020044
 8001bd4:	40020058 	.word	0x40020058
 8001bd8:	4002006c 	.word	0x4002006c
 8001bdc:	40020000 	.word	0x40020000

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b08b      	sub	sp, #44	@ 0x2c
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bf2:	e169      	b.n	8001ec8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	f040 8158 	bne.w	8001ec2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4a9a      	ldr	r2, [pc, #616]	@ (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d05e      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c1c:	4a98      	ldr	r2, [pc, #608]	@ (8001e80 <HAL_GPIO_Init+0x2a0>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d875      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c22:	4a98      	ldr	r2, [pc, #608]	@ (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d058      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c28:	4a96      	ldr	r2, [pc, #600]	@ (8001e84 <HAL_GPIO_Init+0x2a4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d86f      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c2e:	4a96      	ldr	r2, [pc, #600]	@ (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d052      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c34:	4a94      	ldr	r2, [pc, #592]	@ (8001e88 <HAL_GPIO_Init+0x2a8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d869      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c3a:	4a94      	ldr	r2, [pc, #592]	@ (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d04c      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c40:	4a92      	ldr	r2, [pc, #584]	@ (8001e8c <HAL_GPIO_Init+0x2ac>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d863      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c46:	4a92      	ldr	r2, [pc, #584]	@ (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d046      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
 8001c4c:	4a90      	ldr	r2, [pc, #576]	@ (8001e90 <HAL_GPIO_Init+0x2b0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d85d      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c52:	2b12      	cmp	r3, #18
 8001c54:	d82a      	bhi.n	8001cac <HAL_GPIO_Init+0xcc>
 8001c56:	2b12      	cmp	r3, #18
 8001c58:	d859      	bhi.n	8001d0e <HAL_GPIO_Init+0x12e>
 8001c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001c60 <HAL_GPIO_Init+0x80>)
 8001c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c60:	08001cdb 	.word	0x08001cdb
 8001c64:	08001cb5 	.word	0x08001cb5
 8001c68:	08001cc7 	.word	0x08001cc7
 8001c6c:	08001d09 	.word	0x08001d09
 8001c70:	08001d0f 	.word	0x08001d0f
 8001c74:	08001d0f 	.word	0x08001d0f
 8001c78:	08001d0f 	.word	0x08001d0f
 8001c7c:	08001d0f 	.word	0x08001d0f
 8001c80:	08001d0f 	.word	0x08001d0f
 8001c84:	08001d0f 	.word	0x08001d0f
 8001c88:	08001d0f 	.word	0x08001d0f
 8001c8c:	08001d0f 	.word	0x08001d0f
 8001c90:	08001d0f 	.word	0x08001d0f
 8001c94:	08001d0f 	.word	0x08001d0f
 8001c98:	08001d0f 	.word	0x08001d0f
 8001c9c:	08001d0f 	.word	0x08001d0f
 8001ca0:	08001d0f 	.word	0x08001d0f
 8001ca4:	08001cbd 	.word	0x08001cbd
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	4a79      	ldr	r2, [pc, #484]	@ (8001e94 <HAL_GPIO_Init+0x2b4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d013      	beq.n	8001cda <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cb2:	e02c      	b.n	8001d0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e029      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e024      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	3308      	adds	r3, #8
 8001ccc:	623b      	str	r3, [r7, #32]
          break;
 8001cce:	e01f      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	330c      	adds	r3, #12
 8001cd6:	623b      	str	r3, [r7, #32]
          break;
 8001cd8:	e01a      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	623b      	str	r3, [r7, #32]
          break;
 8001ce6:	e013      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cf0:	2308      	movs	r3, #8
 8001cf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69fa      	ldr	r2, [r7, #28]
 8001cf8:	611a      	str	r2, [r3, #16]
          break;
 8001cfa:	e009      	b.n	8001d10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cfc:	2308      	movs	r3, #8
 8001cfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	615a      	str	r2, [r3, #20]
          break;
 8001d06:	e003      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
          break;
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_Init+0x130>
          break;
 8001d0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2bff      	cmp	r3, #255	@ 0xff
 8001d14:	d801      	bhi.n	8001d1a <HAL_GPIO_Init+0x13a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	e001      	b.n	8001d1e <HAL_GPIO_Init+0x13e>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2bff      	cmp	r3, #255	@ 0xff
 8001d24:	d802      	bhi.n	8001d2c <HAL_GPIO_Init+0x14c>
 8001d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	e002      	b.n	8001d32 <HAL_GPIO_Init+0x152>
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	3b08      	subs	r3, #8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	210f      	movs	r1, #15
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	401a      	ands	r2, r3
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4c:	431a      	orrs	r2, r3
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 80b1 	beq.w	8001ec2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d60:	4b4d      	ldr	r3, [pc, #308]	@ (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a4c      	ldr	r2, [pc, #304]	@ (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001d66:	f043 0301 	orr.w	r3, r3, #1
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e98 <HAL_GPIO_Init+0x2b8>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0301 	and.w	r3, r3, #1
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d78:	4a48      	ldr	r2, [pc, #288]	@ (8001e9c <HAL_GPIO_Init+0x2bc>)
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	f003 0303 	and.w	r3, r3, #3
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a40      	ldr	r2, [pc, #256]	@ (8001ea0 <HAL_GPIO_Init+0x2c0>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_GPIO_Init+0x1ec>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a3f      	ldr	r2, [pc, #252]	@ (8001ea4 <HAL_GPIO_Init+0x2c4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d00d      	beq.n	8001dc8 <HAL_GPIO_Init+0x1e8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a3e      	ldr	r2, [pc, #248]	@ (8001ea8 <HAL_GPIO_Init+0x2c8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <HAL_GPIO_Init+0x1e4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a3d      	ldr	r2, [pc, #244]	@ (8001eac <HAL_GPIO_Init+0x2cc>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d101      	bne.n	8001dc0 <HAL_GPIO_Init+0x1e0>
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e006      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dc0:	2304      	movs	r3, #4
 8001dc2:	e004      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e002      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_GPIO_Init+0x1ee>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001dd0:	f002 0203 	and.w	r2, r2, #3
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001dde:	492f      	ldr	r1, [pc, #188]	@ (8001e9c <HAL_GPIO_Init+0x2bc>)
 8001de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d006      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001df8:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	492c      	ldr	r1, [pc, #176]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001dfe:	69bb      	ldr	r3, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	608b      	str	r3, [r1, #8]
 8001e04:	e006      	b.n	8001e14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e06:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4928      	ldr	r1, [pc, #160]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e10:	4013      	ands	r3, r2
 8001e12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d006      	beq.n	8001e2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e20:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e22:	68da      	ldr	r2, [r3, #12]
 8001e24:	4922      	ldr	r1, [pc, #136]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60cb      	str	r3, [r1, #12]
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e2e:	4b20      	ldr	r3, [pc, #128]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	491e      	ldr	r1, [pc, #120]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d006      	beq.n	8001e56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e48:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	685a      	ldr	r2, [r3, #4]
 8001e4c:	4918      	ldr	r1, [pc, #96]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
 8001e54:	e006      	b.n	8001e64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4914      	ldr	r1, [pc, #80]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e60:	4013      	ands	r3, r2
 8001e62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d021      	beq.n	8001eb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e70:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	490e      	ldr	r1, [pc, #56]	@ (8001eb0 <HAL_GPIO_Init+0x2d0>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
 8001e7c:	e021      	b.n	8001ec2 <HAL_GPIO_Init+0x2e2>
 8001e7e:	bf00      	nop
 8001e80:	10320000 	.word	0x10320000
 8001e84:	10310000 	.word	0x10310000
 8001e88:	10220000 	.word	0x10220000
 8001e8c:	10210000 	.word	0x10210000
 8001e90:	10120000 	.word	0x10120000
 8001e94:	10110000 	.word	0x10110000
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40010800 	.word	0x40010800
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40011400 	.word	0x40011400
 8001eb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee4 <HAL_GPIO_Init+0x304>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	4909      	ldr	r1, [pc, #36]	@ (8001ee4 <HAL_GPIO_Init+0x304>)
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	fa22 f303 	lsr.w	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f47f ae8e 	bne.w	8001bf4 <HAL_GPIO_Init+0x14>
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	372c      	adds	r7, #44	@ 0x2c
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bc80      	pop	{r7}
 8001f16:	4770      	bx	lr

08001f18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b086      	sub	sp, #24
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d101      	bne.n	8001f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e272      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f38:	4b92      	ldr	r3, [pc, #584]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d00c      	beq.n	8001f5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f44:	4b8f      	ldr	r3, [pc, #572]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 030c 	and.w	r3, r3, #12
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d112      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
 8001f50:	4b8c      	ldr	r3, [pc, #560]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f5c:	d10b      	bne.n	8001f76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5e:	4b89      	ldr	r3, [pc, #548]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d06c      	beq.n	8002044 <HAL_RCC_OscConfig+0x12c>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d168      	bne.n	8002044 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e24c      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7e:	d106      	bne.n	8001f8e <HAL_RCC_OscConfig+0x76>
 8001f80:	4b80      	ldr	r3, [pc, #512]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a7f      	ldr	r2, [pc, #508]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e02e      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d10c      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x98>
 8001f96:	4b7b      	ldr	r3, [pc, #492]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a7a      	ldr	r2, [pc, #488]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa0:	6013      	str	r3, [r2, #0]
 8001fa2:	4b78      	ldr	r3, [pc, #480]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a77      	ldr	r2, [pc, #476]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xbc>
 8001fba:	4b72      	ldr	r3, [pc, #456]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a71      	ldr	r2, [pc, #452]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6f      	ldr	r3, [pc, #444]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6e      	ldr	r2, [pc, #440]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xd4>
 8001fd4:	4b6b      	ldr	r3, [pc, #428]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a6a      	ldr	r2, [pc, #424]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b68      	ldr	r3, [pc, #416]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a67      	ldr	r2, [pc, #412]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff faa4 	bl	8001540 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff faa0 	bl	8001540 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	@ 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e200      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5d      	ldr	r3, [pc, #372]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xe4>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fa90 	bl	8001540 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fa8c 	bl	8001540 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1ec      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b53      	ldr	r3, [pc, #332]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x10c>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002052:	4b4c      	ldr	r3, [pc, #304]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205e:	4b49      	ldr	r3, [pc, #292]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
 800206a:	4b46      	ldr	r3, [pc, #280]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b43      	ldr	r3, [pc, #268]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1c0      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3d      	ldr	r3, [pc, #244]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4939      	ldr	r1, [pc, #228]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b36      	ldr	r3, [pc, #216]	@ (8002188 <HAL_RCC_OscConfig+0x270>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b2:	f7ff fa45 	bl	8001540 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fa41 	bl	8001540 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1a1      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4927      	ldr	r1, [pc, #156]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b26      	ldr	r3, [pc, #152]	@ (8002188 <HAL_RCC_OscConfig+0x270>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f4:	f7ff fa24 	bl	8001540 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fa20 	bl	8001540 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e180      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1d      	ldr	r3, [pc, #116]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03a      	beq.n	800219c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d019      	beq.n	8002162 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b17      	ldr	r3, [pc, #92]	@ (800218c <HAL_RCC_OscConfig+0x274>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002134:	f7ff fa04 	bl	8001540 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff fa00 	bl	8001540 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e160      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0d      	ldr	r3, [pc, #52]	@ (8002184 <HAL_RCC_OscConfig+0x26c>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800215a:	2001      	movs	r0, #1
 800215c:	f000 face 	bl	80026fc <RCC_Delay>
 8002160:	e01c      	b.n	800219c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <HAL_RCC_OscConfig+0x274>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002168:	f7ff f9ea 	bl	8001540 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216e:	e00f      	b.n	8002190 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002170:	f7ff f9e6 	bl	8001540 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d908      	bls.n	8002190 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e146      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	42420000 	.word	0x42420000
 800218c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	4b92      	ldr	r3, [pc, #584]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1e9      	bne.n	8002170 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a6 	beq.w	80022f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ae:	4b8b      	ldr	r3, [pc, #556]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10d      	bne.n	80021d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ba:	4b88      	ldr	r3, [pc, #544]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	4a87      	ldr	r2, [pc, #540]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c4:	61d3      	str	r3, [r2, #28]
 80021c6:	4b85      	ldr	r3, [pc, #532]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80021c8:	69db      	ldr	r3, [r3, #28]
 80021ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ce:	60bb      	str	r3, [r7, #8]
 80021d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021d2:	2301      	movs	r3, #1
 80021d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d6:	4b82      	ldr	r3, [pc, #520]	@ (80023e0 <HAL_RCC_OscConfig+0x4c8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d118      	bne.n	8002214 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021e2:	4b7f      	ldr	r3, [pc, #508]	@ (80023e0 <HAL_RCC_OscConfig+0x4c8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a7e      	ldr	r2, [pc, #504]	@ (80023e0 <HAL_RCC_OscConfig+0x4c8>)
 80021e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ee:	f7ff f9a7 	bl	8001540 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f6:	f7ff f9a3 	bl	8001540 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b64      	cmp	r3, #100	@ 0x64
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e103      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002208:	4b75      	ldr	r3, [pc, #468]	@ (80023e0 <HAL_RCC_OscConfig+0x4c8>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x312>
 800221c:	4b6f      	ldr	r3, [pc, #444]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a6e      	ldr	r2, [pc, #440]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	e02d      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x334>
 8002232:	4b6a      	ldr	r3, [pc, #424]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	4a69      	ldr	r2, [pc, #420]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002238:	f023 0301 	bic.w	r3, r3, #1
 800223c:	6213      	str	r3, [r2, #32]
 800223e:	4b67      	ldr	r3, [pc, #412]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4a66      	ldr	r2, [pc, #408]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002244:	f023 0304 	bic.w	r3, r3, #4
 8002248:	6213      	str	r3, [r2, #32]
 800224a:	e01c      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	2b05      	cmp	r3, #5
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x356>
 8002254:	4b61      	ldr	r3, [pc, #388]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	4a60      	ldr	r2, [pc, #384]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 800225a:	f043 0304 	orr.w	r3, r3, #4
 800225e:	6213      	str	r3, [r2, #32]
 8002260:	4b5e      	ldr	r3, [pc, #376]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002262:	6a1b      	ldr	r3, [r3, #32]
 8002264:	4a5d      	ldr	r2, [pc, #372]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	6213      	str	r3, [r2, #32]
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0x36e>
 800226e:	4b5b      	ldr	r3, [pc, #364]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	4a5a      	ldr	r2, [pc, #360]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f023 0301 	bic.w	r3, r3, #1
 8002278:	6213      	str	r3, [r2, #32]
 800227a:	4b58      	ldr	r3, [pc, #352]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	4a57      	ldr	r2, [pc, #348]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002280:	f023 0304 	bic.w	r3, r3, #4
 8002284:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d015      	beq.n	80022ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7ff f957 	bl	8001540 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7ff f953 	bl	8001540 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e0b1      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ac:	4b4b      	ldr	r3, [pc, #300]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0ee      	beq.n	8002296 <HAL_RCC_OscConfig+0x37e>
 80022b8:	e014      	b.n	80022e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ba:	f7ff f941 	bl	8001540 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c0:	e00a      	b.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c2:	f7ff f93d 	bl	8001540 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e09b      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d8:	4b40      	ldr	r3, [pc, #256]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e4:	7dfb      	ldrb	r3, [r7, #23]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d105      	bne.n	80022f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ea:	4b3c      	ldr	r3, [pc, #240]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a3b      	ldr	r2, [pc, #236]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8087 	beq.w	800240e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002300:	4b36      	ldr	r3, [pc, #216]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 030c 	and.w	r3, r3, #12
 8002308:	2b08      	cmp	r3, #8
 800230a:	d061      	beq.n	80023d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	2b02      	cmp	r3, #2
 8002312:	d146      	bne.n	80023a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b33      	ldr	r3, [pc, #204]	@ (80023e4 <HAL_RCC_OscConfig+0x4cc>)
 8002316:	2200      	movs	r2, #0
 8002318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231a:	f7ff f911 	bl	8001540 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002322:	f7ff f90d 	bl	8001540 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b02      	cmp	r3, #2
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e06d      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002334:	4b29      	ldr	r3, [pc, #164]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f0      	bne.n	8002322 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a1b      	ldr	r3, [r3, #32]
 8002344:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002348:	d108      	bne.n	800235c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800234a:	4b24      	ldr	r3, [pc, #144]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4921      	ldr	r1, [pc, #132]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235c:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a19      	ldr	r1, [r3, #32]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236c:	430b      	orrs	r3, r1
 800236e:	491b      	ldr	r1, [pc, #108]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002370:	4313      	orrs	r3, r2
 8002372:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002374:	4b1b      	ldr	r3, [pc, #108]	@ (80023e4 <HAL_RCC_OscConfig+0x4cc>)
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7ff f8e1 	bl	8001540 <HAL_GetTick>
 800237e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff f8dd 	bl	8001540 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e03d      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002394:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x46a>
 80023a0:	e035      	b.n	800240e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023a2:	4b10      	ldr	r3, [pc, #64]	@ (80023e4 <HAL_RCC_OscConfig+0x4cc>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a8:	f7ff f8ca 	bl	8001540 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff f8c6 	bl	8001540 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e026      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x498>
 80023ce:	e01e      	b.n	800240e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d107      	bne.n	80023e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e019      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
 80023dc:	40021000 	.word	0x40021000
 80023e0:	40007000 	.word	0x40007000
 80023e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_OscConfig+0x500>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40021000 	.word	0x40021000

0800241c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e0d0      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002430:	4b6a      	ldr	r3, [pc, #424]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d910      	bls.n	8002460 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b67      	ldr	r3, [pc, #412]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4965      	ldr	r1, [pc, #404]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b63      	ldr	r3, [pc, #396]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0b8      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b00      	cmp	r3, #0
 800246a:	d020      	beq.n	80024ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	2b00      	cmp	r3, #0
 8002476:	d005      	beq.n	8002484 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002478:	4b59      	ldr	r3, [pc, #356]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	4a58      	ldr	r2, [pc, #352]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002482:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0308 	and.w	r3, r3, #8
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002490:	4b53      	ldr	r3, [pc, #332]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	4a52      	ldr	r2, [pc, #328]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002496:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800249a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800249c:	4b50      	ldr	r3, [pc, #320]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	494d      	ldr	r1, [pc, #308]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d040      	beq.n	800253c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c2:	4b47      	ldr	r3, [pc, #284]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d115      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e07f      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024da:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e073      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b3d      	ldr	r3, [pc, #244]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06b      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	4b39      	ldr	r3, [pc, #228]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f023 0203 	bic.w	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4936      	ldr	r1, [pc, #216]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002508:	4313      	orrs	r3, r2
 800250a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800250c:	f7ff f818 	bl	8001540 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	e00a      	b.n	800252a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002514:	f7ff f814 	bl	8001540 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002522:	4293      	cmp	r3, r2
 8002524:	d901      	bls.n	800252a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e053      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	4b2d      	ldr	r3, [pc, #180]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f003 020c 	and.w	r2, r3, #12
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	429a      	cmp	r2, r3
 800253a:	d1eb      	bne.n	8002514 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800253c:	4b27      	ldr	r3, [pc, #156]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d210      	bcs.n	800256c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800254a:	4b24      	ldr	r3, [pc, #144]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 0207 	bic.w	r2, r3, #7
 8002552:	4922      	ldr	r1, [pc, #136]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <HAL_RCC_ClockConfig+0x1c0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e032      	b.n	80025d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d008      	beq.n	800258a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002578:	4b19      	ldr	r3, [pc, #100]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	4916      	ldr	r1, [pc, #88]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	4313      	orrs	r3, r2
 8002588:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002596:	4b12      	ldr	r3, [pc, #72]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	00db      	lsls	r3, r3, #3
 80025a4:	490e      	ldr	r1, [pc, #56]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025aa:	f000 f821 	bl	80025f0 <HAL_RCC_GetSysClockFreq>
 80025ae:	4602      	mov	r2, r0
 80025b0:	4b0b      	ldr	r3, [pc, #44]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c4>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	490a      	ldr	r1, [pc, #40]	@ (80025e4 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	5ccb      	ldrb	r3, [r1, r3]
 80025be:	fa22 f303 	lsr.w	r3, r2, r3
 80025c2:	4a09      	ldr	r2, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1cc>)
 80025c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c6:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <HAL_RCC_ClockConfig+0x1d0>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fe ff76 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40022000 	.word	0x40022000
 80025e0:	40021000 	.word	0x40021000
 80025e4:	08004c7c 	.word	0x08004c7c
 80025e8:	20000050 	.word	0x20000050
 80025ec:	20000054 	.word	0x20000054

080025f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b087      	sub	sp, #28
 80025f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800260a:	4b1e      	ldr	r3, [pc, #120]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x94>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d002      	beq.n	8002620 <HAL_RCC_GetSysClockFreq+0x30>
 800261a:	2b08      	cmp	r3, #8
 800261c:	d003      	beq.n	8002626 <HAL_RCC_GetSysClockFreq+0x36>
 800261e:	e027      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002620:	4b19      	ldr	r3, [pc, #100]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x98>)
 8002622:	613b      	str	r3, [r7, #16]
      break;
 8002624:	e027      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	0c9b      	lsrs	r3, r3, #18
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	4a17      	ldr	r2, [pc, #92]	@ (800268c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002630:	5cd3      	ldrb	r3, [r2, r3]
 8002632:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d010      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x94>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	0c5b      	lsrs	r3, r3, #17
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xa0>)
 800264a:	5cd3      	ldrb	r3, [r2, r3]
 800264c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a0d      	ldr	r2, [pc, #52]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x98>)
 8002652:	fb03 f202 	mul.w	r2, r3, r2
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	fbb2 f3f3 	udiv	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e004      	b.n	800266a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4a0c      	ldr	r2, [pc, #48]	@ (8002694 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002664:	fb02 f303 	mul.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	613b      	str	r3, [r7, #16]
      break;
 800266e:	e002      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002670:	4b05      	ldr	r3, [pc, #20]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x98>)
 8002672:	613b      	str	r3, [r7, #16]
      break;
 8002674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002676:	693b      	ldr	r3, [r7, #16]
}
 8002678:	4618      	mov	r0, r3
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	007a1200 	.word	0x007a1200
 800268c:	08004c94 	.word	0x08004c94
 8002690:	08004ca4 	.word	0x08004ca4
 8002694:	003d0900 	.word	0x003d0900

08002698 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800269c:	4b02      	ldr	r3, [pc, #8]	@ (80026a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800269e:	681b      	ldr	r3, [r3, #0]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bc80      	pop	{r7}
 80026a6:	4770      	bx	lr
 80026a8:	20000050 	.word	0x20000050

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026b0:	f7ff fff2 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026b4:	4602      	mov	r2, r0
 80026b6:	4b05      	ldr	r3, [pc, #20]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	0a1b      	lsrs	r3, r3, #8
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	4903      	ldr	r1, [pc, #12]	@ (80026d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026c2:	5ccb      	ldrb	r3, [r1, r3]
 80026c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08004c8c 	.word	0x08004c8c

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d8:	f7ff ffde 	bl	8002698 <HAL_RCC_GetHCLKFreq>
 80026dc:	4602      	mov	r2, r0
 80026de:	4b05      	ldr	r3, [pc, #20]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	0adb      	lsrs	r3, r3, #11
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	4903      	ldr	r1, [pc, #12]	@ (80026f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ea:	5ccb      	ldrb	r3, [r1, r3]
 80026ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08004c8c 	.word	0x08004c8c

080026fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002704:	4b0a      	ldr	r3, [pc, #40]	@ (8002730 <RCC_Delay+0x34>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a0a      	ldr	r2, [pc, #40]	@ (8002734 <RCC_Delay+0x38>)
 800270a:	fba2 2303 	umull	r2, r3, r2, r3
 800270e:	0a5b      	lsrs	r3, r3, #9
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	fb02 f303 	mul.w	r3, r2, r3
 8002716:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002718:	bf00      	nop
  }
  while (Delay --);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e5a      	subs	r2, r3, #1
 800271e:	60fa      	str	r2, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f9      	bne.n	8002718 <RCC_Delay+0x1c>
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	20000050 	.word	0x20000050
 8002734:	10624dd3 	.word	0x10624dd3

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e041      	b.n	80027ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7fe fcf6 	bl	8001150 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 feb0 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6a1a      	ldr	r2, [r3, #32]
 80027e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80027e8:	4013      	ands	r3, r2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10f      	bne.n	800280e <HAL_TIM_Base_Stop+0x38>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	6a1a      	ldr	r2, [r3, #32]
 80027f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d107      	bne.n	800280e <HAL_TIM_Base_Stop+0x38>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0201 	bic.w	r2, r2, #1
 800280c:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	bc80      	pop	{r7}
 8002820:	4770      	bx	lr
	...

08002824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d001      	beq.n	800283c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e03a      	b.n	80028b2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a18      	ldr	r2, [pc, #96]	@ (80028bc <HAL_TIM_Base_Start_IT+0x98>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d00e      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x58>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002866:	d009      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x58>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d004      	beq.n	800287c <HAL_TIM_Base_Start_IT+0x58>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a13      	ldr	r2, [pc, #76]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d111      	bne.n	80028a0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 0307 	and.w	r3, r3, #7
 8002886:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d010      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f042 0201 	orr.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289e:	e007      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40000400 	.word	0x40000400
 80028c4:	40000800 	.word	0x40000800

080028c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a1a      	ldr	r2, [r3, #32]
 80028e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80028ea:	4013      	ands	r3, r2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10f      	bne.n	8002910 <HAL_TIM_Base_Stop_IT+0x48>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6a1a      	ldr	r2, [r3, #32]
 80028f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80028fa:	4013      	ands	r3, r2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d107      	bne.n	8002910 <HAL_TIM_Base_Stop_IT+0x48>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f022 0201 	bic.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e041      	b.n	80029ba <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f839 	bl	80029c2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3304      	adds	r3, #4
 8002960:	4619      	mov	r1, r3
 8002962:	4610      	mov	r0, r2
 8002964:	f000 fdba 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d109      	bne.n	80029fc <HAL_TIM_OC_Start_IT+0x28>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80029ee:	b2db      	uxtb	r3, r3
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	e022      	b.n	8002a42 <HAL_TIM_OC_Start_IT+0x6e>
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	2b04      	cmp	r3, #4
 8002a00:	d109      	bne.n	8002a16 <HAL_TIM_OC_Start_IT+0x42>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	e015      	b.n	8002a42 <HAL_TIM_OC_Start_IT+0x6e>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b08      	cmp	r3, #8
 8002a1a:	d109      	bne.n	8002a30 <HAL_TIM_OC_Start_IT+0x5c>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e008      	b.n	8002a42 <HAL_TIM_OC_Start_IT+0x6e>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	bf14      	ite	ne
 8002a3c:	2301      	movne	r3, #1
 8002a3e:	2300      	moveq	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0a9      	b.n	8002b9e <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <HAL_TIM_OC_Start_IT+0x86>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a58:	e013      	b.n	8002a82 <HAL_TIM_OC_Start_IT+0xae>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d104      	bne.n	8002a6a <HAL_TIM_OC_Start_IT+0x96>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2202      	movs	r2, #2
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a68:	e00b      	b.n	8002a82 <HAL_TIM_OC_Start_IT+0xae>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d104      	bne.n	8002a7a <HAL_TIM_OC_Start_IT+0xa6>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a78:	e003      	b.n	8002a82 <HAL_TIM_OC_Start_IT+0xae>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	2b0c      	cmp	r3, #12
 8002a86:	d841      	bhi.n	8002b0c <HAL_TIM_OC_Start_IT+0x138>
 8002a88:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <HAL_TIM_OC_Start_IT+0xbc>)
 8002a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8e:	bf00      	nop
 8002a90:	08002ac5 	.word	0x08002ac5
 8002a94:	08002b0d 	.word	0x08002b0d
 8002a98:	08002b0d 	.word	0x08002b0d
 8002a9c:	08002b0d 	.word	0x08002b0d
 8002aa0:	08002ad7 	.word	0x08002ad7
 8002aa4:	08002b0d 	.word	0x08002b0d
 8002aa8:	08002b0d 	.word	0x08002b0d
 8002aac:	08002b0d 	.word	0x08002b0d
 8002ab0:	08002ae9 	.word	0x08002ae9
 8002ab4:	08002b0d 	.word	0x08002b0d
 8002ab8:	08002b0d 	.word	0x08002b0d
 8002abc:	08002b0d 	.word	0x08002b0d
 8002ac0:	08002afb 	.word	0x08002afb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68da      	ldr	r2, [r3, #12]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0202 	orr.w	r2, r2, #2
 8002ad2:	60da      	str	r2, [r3, #12]
      break;
 8002ad4:	e01d      	b.n	8002b12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0204 	orr.w	r2, r2, #4
 8002ae4:	60da      	str	r2, [r3, #12]
      break;
 8002ae6:	e014      	b.n	8002b12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0208 	orr.w	r2, r2, #8
 8002af6:	60da      	str	r2, [r3, #12]
      break;
 8002af8:	e00b      	b.n	8002b12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0210 	orr.w	r2, r2, #16
 8002b08:	60da      	str	r2, [r3, #12]
      break;
 8002b0a:	e002      	b.n	8002b12 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b10:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d141      	bne.n	8002b9c <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	6839      	ldr	r1, [r7, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 ffc1 	bl	8003aa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8002ba8 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d107      	bne.n	8002b40 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b3e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a18      	ldr	r2, [pc, #96]	@ (8002ba8 <HAL_TIM_OC_Start_IT+0x1d4>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00e      	beq.n	8002b68 <HAL_TIM_OC_Start_IT+0x194>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b52:	d009      	beq.n	8002b68 <HAL_TIM_OC_Start_IT+0x194>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a14      	ldr	r2, [pc, #80]	@ (8002bac <HAL_TIM_OC_Start_IT+0x1d8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d004      	beq.n	8002b68 <HAL_TIM_OC_Start_IT+0x194>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a13      	ldr	r2, [pc, #76]	@ (8002bb0 <HAL_TIM_OC_Start_IT+0x1dc>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d111      	bne.n	8002b8c <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b06      	cmp	r3, #6
 8002b78:	d010      	beq.n	8002b9c <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0201 	orr.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8a:	e007      	b.n	8002b9c <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0201 	orr.w	r2, r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40012c00 	.word	0x40012c00
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40000800 	.word	0x40000800

08002bb4 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b0c      	cmp	r3, #12
 8002bc6:	d841      	bhi.n	8002c4c <HAL_TIM_OC_Stop_IT+0x98>
 8002bc8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd0 <HAL_TIM_OC_Stop_IT+0x1c>)
 8002bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bce:	bf00      	nop
 8002bd0:	08002c05 	.word	0x08002c05
 8002bd4:	08002c4d 	.word	0x08002c4d
 8002bd8:	08002c4d 	.word	0x08002c4d
 8002bdc:	08002c4d 	.word	0x08002c4d
 8002be0:	08002c17 	.word	0x08002c17
 8002be4:	08002c4d 	.word	0x08002c4d
 8002be8:	08002c4d 	.word	0x08002c4d
 8002bec:	08002c4d 	.word	0x08002c4d
 8002bf0:	08002c29 	.word	0x08002c29
 8002bf4:	08002c4d 	.word	0x08002c4d
 8002bf8:	08002c4d 	.word	0x08002c4d
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c3b 	.word	0x08002c3b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f022 0202 	bic.w	r2, r2, #2
 8002c12:	60da      	str	r2, [r3, #12]
      break;
 8002c14:	e01d      	b.n	8002c52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68da      	ldr	r2, [r3, #12]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0204 	bic.w	r2, r2, #4
 8002c24:	60da      	str	r2, [r3, #12]
      break;
 8002c26:	e014      	b.n	8002c52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0208 	bic.w	r2, r2, #8
 8002c36:	60da      	str	r2, [r3, #12]
      break;
 8002c38:	e00b      	b.n	8002c52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0210 	bic.w	r2, r2, #16
 8002c48:	60da      	str	r2, [r3, #12]
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	bf00      	nop
  }

  if (status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d157      	bne.n	8002d08 <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	6839      	ldr	r1, [r7, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 ff21 	bl	8003aa8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d14 <HAL_TIM_OC_Stop_IT+0x160>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d117      	bne.n	8002ca0 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6a1a      	ldr	r2, [r3, #32]
 8002c76:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d10f      	bne.n	8002ca0 <HAL_TIM_OC_Stop_IT+0xec>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6a1a      	ldr	r2, [r3, #32]
 8002c86:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d107      	bne.n	8002ca0 <HAL_TIM_OC_Stop_IT+0xec>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c9e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6a1a      	ldr	r2, [r3, #32]
 8002ca6:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10f      	bne.n	8002cd0 <HAL_TIM_OC_Stop_IT+0x11c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a1a      	ldr	r2, [r3, #32]
 8002cb6:	f240 4344 	movw	r3, #1092	@ 0x444
 8002cba:	4013      	ands	r3, r2
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d107      	bne.n	8002cd0 <HAL_TIM_OC_Stop_IT+0x11c>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d104      	bne.n	8002ce0 <HAL_TIM_OC_Stop_IT+0x12c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cde:	e013      	b.n	8002d08 <HAL_TIM_OC_Stop_IT+0x154>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d104      	bne.n	8002cf0 <HAL_TIM_OC_Stop_IT+0x13c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cee:	e00b      	b.n	8002d08 <HAL_TIM_OC_Stop_IT+0x154>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d104      	bne.n	8002d00 <HAL_TIM_OC_Stop_IT+0x14c>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cfe:	e003      	b.n	8002d08 <HAL_TIM_OC_Stop_IT+0x154>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d101      	bne.n	8002d2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e041      	b.n	8002dae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f839 	bl	8002db6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2202      	movs	r2, #2
 8002d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3304      	adds	r3, #4
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f000 fbc0 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d109      	bne.n	8002dec <HAL_TIM_PWM_Start+0x24>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	e022      	b.n	8002e32 <HAL_TIM_PWM_Start+0x6a>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	d109      	bne.n	8002e06 <HAL_TIM_PWM_Start+0x3e>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	bf14      	ite	ne
 8002dfe:	2301      	movne	r3, #1
 8002e00:	2300      	moveq	r3, #0
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	e015      	b.n	8002e32 <HAL_TIM_PWM_Start+0x6a>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d109      	bne.n	8002e20 <HAL_TIM_PWM_Start+0x58>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	bf14      	ite	ne
 8002e18:	2301      	movne	r3, #1
 8002e1a:	2300      	moveq	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	e008      	b.n	8002e32 <HAL_TIM_PWM_Start+0x6a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	bf14      	ite	ne
 8002e2c:	2301      	movne	r3, #1
 8002e2e:	2300      	moveq	r3, #0
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e05e      	b.n	8002ef8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Start+0x82>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e48:	e013      	b.n	8002e72 <HAL_TIM_PWM_Start+0xaa>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_PWM_Start+0x92>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e58:	e00b      	b.n	8002e72 <HAL_TIM_PWM_Start+0xaa>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_PWM_Start+0xa2>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e68:	e003      	b.n	8002e72 <HAL_TIM_PWM_Start+0xaa>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2201      	movs	r2, #1
 8002e78:	6839      	ldr	r1, [r7, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fe14 	bl	8003aa8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1e      	ldr	r2, [pc, #120]	@ (8002f00 <HAL_TIM_PWM_Start+0x138>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d107      	bne.n	8002e9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a18      	ldr	r2, [pc, #96]	@ (8002f00 <HAL_TIM_PWM_Start+0x138>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d00e      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0xfa>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eac:	d009      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0xfa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a14      	ldr	r2, [pc, #80]	@ (8002f04 <HAL_TIM_PWM_Start+0x13c>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d004      	beq.n	8002ec2 <HAL_TIM_PWM_Start+0xfa>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a12      	ldr	r2, [pc, #72]	@ (8002f08 <HAL_TIM_PWM_Start+0x140>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d111      	bne.n	8002ee6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0307 	and.w	r3, r3, #7
 8002ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d010      	beq.n	8002ef6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0201 	orr.w	r2, r2, #1
 8002ee2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ee4:	e007      	b.n	8002ef6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	40012c00 	.word	0x40012c00
 8002f04:	40000400 	.word	0x40000400
 8002f08:	40000800 	.word	0x40000800

08002f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d020      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0202 	mvn.w	r2, #2
 8002f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fd fd26 	bl	80009a8 <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fd fc92 	bl	8000888 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 faaf 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d020      	beq.n	8002fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d01b      	beq.n	8002fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f06f 0204 	mvn.w	r2, #4
 8002f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7fd fd00 	bl	80009a8 <HAL_TIM_IC_CaptureCallback>
 8002fa8:	e005      	b.n	8002fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fd fc6c 	bl	8000888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa89 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d020      	beq.n	8003008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01b      	beq.n	8003008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f06f 0208 	mvn.w	r2, #8
 8002fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fcda 	bl	80009a8 <HAL_TIM_IC_CaptureCallback>
 8002ff4:	e005      	b.n	8003002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7fd fc46 	bl	8000888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fa63 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0310 	and.w	r3, r3, #16
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0310 	and.w	r3, r3, #16
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0210 	mvn.w	r2, #16
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2208      	movs	r2, #8
 800302a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fcb4 	bl	80009a8 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f7fd fc20 	bl	8000888 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 fa3d 	bl	80034c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00c      	beq.n	8003078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0201 	mvn.w	r2, #1
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa1f 	bl	80034b6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003088:	2b00      	cmp	r3, #0
 800308a:	d007      	beq.n	800309c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 ff0c 	bl	8003eb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00c      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d007      	beq.n	80030c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fd fcce 	bl	8000a5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00c      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f003 0320 	and.w	r3, r3, #32
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d007      	beq.n	80030e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f06f 0220 	mvn.w	r2, #32
 80030dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fd fca2 	bl	8000a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030e4:	bf00      	nop
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030f8:	2300      	movs	r3, #0
 80030fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003102:	2b01      	cmp	r3, #1
 8003104:	d101      	bne.n	800310a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003106:	2302      	movs	r3, #2
 8003108:	e048      	b.n	800319c <HAL_TIM_OC_ConfigChannel+0xb0>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b0c      	cmp	r3, #12
 8003116:	d839      	bhi.n	800318c <HAL_TIM_OC_ConfigChannel+0xa0>
 8003118:	a201      	add	r2, pc, #4	@ (adr r2, 8003120 <HAL_TIM_OC_ConfigChannel+0x34>)
 800311a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311e:	bf00      	nop
 8003120:	08003155 	.word	0x08003155
 8003124:	0800318d 	.word	0x0800318d
 8003128:	0800318d 	.word	0x0800318d
 800312c:	0800318d 	.word	0x0800318d
 8003130:	08003163 	.word	0x08003163
 8003134:	0800318d 	.word	0x0800318d
 8003138:	0800318d 	.word	0x0800318d
 800313c:	0800318d 	.word	0x0800318d
 8003140:	08003171 	.word	0x08003171
 8003144:	0800318d 	.word	0x0800318d
 8003148:	0800318d 	.word	0x0800318d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	0800317f 	.word	0x0800317f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68b9      	ldr	r1, [r7, #8]
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fa2c 	bl	80035b8 <TIM_OC1_SetConfig>
      break;
 8003160:	e017      	b.n	8003192 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	68b9      	ldr	r1, [r7, #8]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa8b 	bl	8003684 <TIM_OC2_SetConfig>
      break;
 800316e:	e010      	b.n	8003192 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	4618      	mov	r0, r3
 8003178:	f000 faee 	bl	8003758 <TIM_OC3_SetConfig>
      break;
 800317c:	e009      	b.n	8003192 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	4618      	mov	r0, r3
 8003186:	f000 fb51 	bl	800382c <TIM_OC4_SetConfig>
      break;
 800318a:	e002      	b.n	8003192 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	75fb      	strb	r3, [r7, #23]
      break;
 8003190:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800319a:	7dfb      	ldrb	r3, [r7, #23]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3718      	adds	r7, #24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	60b9      	str	r1, [r7, #8]
 80031ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d101      	bne.n	80031c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031be:	2302      	movs	r3, #2
 80031c0:	e0ae      	b.n	8003320 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b0c      	cmp	r3, #12
 80031ce:	f200 809f 	bhi.w	8003310 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031d2:	a201      	add	r2, pc, #4	@ (adr r2, 80031d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d8:	0800320d 	.word	0x0800320d
 80031dc:	08003311 	.word	0x08003311
 80031e0:	08003311 	.word	0x08003311
 80031e4:	08003311 	.word	0x08003311
 80031e8:	0800324d 	.word	0x0800324d
 80031ec:	08003311 	.word	0x08003311
 80031f0:	08003311 	.word	0x08003311
 80031f4:	08003311 	.word	0x08003311
 80031f8:	0800328f 	.word	0x0800328f
 80031fc:	08003311 	.word	0x08003311
 8003200:	08003311 	.word	0x08003311
 8003204:	08003311 	.word	0x08003311
 8003208:	080032cf 	.word	0x080032cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68b9      	ldr	r1, [r7, #8]
 8003212:	4618      	mov	r0, r3
 8003214:	f000 f9d0 	bl	80035b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699a      	ldr	r2, [r3, #24]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0208 	orr.w	r2, r2, #8
 8003226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0204 	bic.w	r2, r2, #4
 8003236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6999      	ldr	r1, [r3, #24]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	619a      	str	r2, [r3, #24]
      break;
 800324a:	e064      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fa16 	bl	8003684 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699a      	ldr	r2, [r3, #24]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003266:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003276:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6999      	ldr	r1, [r3, #24]
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	021a      	lsls	r2, r3, #8
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	619a      	str	r2, [r3, #24]
      break;
 800328c:	e043      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68b9      	ldr	r1, [r7, #8]
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fa5f 	bl	8003758 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	69da      	ldr	r2, [r3, #28]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f042 0208 	orr.w	r2, r2, #8
 80032a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	69da      	ldr	r2, [r3, #28]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0204 	bic.w	r2, r2, #4
 80032b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69d9      	ldr	r1, [r3, #28]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	691a      	ldr	r2, [r3, #16]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	61da      	str	r2, [r3, #28]
      break;
 80032cc:	e023      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68b9      	ldr	r1, [r7, #8]
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 faa9 	bl	800382c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	69da      	ldr	r2, [r3, #28]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	69da      	ldr	r2, [r3, #28]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	69d9      	ldr	r1, [r3, #28]
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	021a      	lsls	r2, r3, #8
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	61da      	str	r2, [r3, #28]
      break;
 800330e:	e002      	b.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	75fb      	strb	r3, [r7, #23]
      break;
 8003314:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800331e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_TIM_ConfigClockSource+0x1c>
 8003340:	2302      	movs	r3, #2
 8003342:	e0b4      	b.n	80034ae <HAL_TIM_ConfigClockSource+0x186>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003362:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800336a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800337c:	d03e      	beq.n	80033fc <HAL_TIM_ConfigClockSource+0xd4>
 800337e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003382:	f200 8087 	bhi.w	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800338a:	f000 8086 	beq.w	800349a <HAL_TIM_ConfigClockSource+0x172>
 800338e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003392:	d87f      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b70      	cmp	r3, #112	@ 0x70
 8003396:	d01a      	beq.n	80033ce <HAL_TIM_ConfigClockSource+0xa6>
 8003398:	2b70      	cmp	r3, #112	@ 0x70
 800339a:	d87b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 800339c:	2b60      	cmp	r3, #96	@ 0x60
 800339e:	d050      	beq.n	8003442 <HAL_TIM_ConfigClockSource+0x11a>
 80033a0:	2b60      	cmp	r3, #96	@ 0x60
 80033a2:	d877      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033a4:	2b50      	cmp	r3, #80	@ 0x50
 80033a6:	d03c      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0xfa>
 80033a8:	2b50      	cmp	r3, #80	@ 0x50
 80033aa:	d873      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033ac:	2b40      	cmp	r3, #64	@ 0x40
 80033ae:	d058      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0x13a>
 80033b0:	2b40      	cmp	r3, #64	@ 0x40
 80033b2:	d86f      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033b4:	2b30      	cmp	r3, #48	@ 0x30
 80033b6:	d064      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033b8:	2b30      	cmp	r3, #48	@ 0x30
 80033ba:	d86b      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033bc:	2b20      	cmp	r3, #32
 80033be:	d060      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033c0:	2b20      	cmp	r3, #32
 80033c2:	d867      	bhi.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d05c      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033c8:	2b10      	cmp	r3, #16
 80033ca:	d05a      	beq.n	8003482 <HAL_TIM_ConfigClockSource+0x15a>
 80033cc:	e062      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033de:	f000 fb44 	bl	8003a6a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033f0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	609a      	str	r2, [r3, #8]
      break;
 80033fa:	e04f      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800340c:	f000 fb2d 	bl	8003a6a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800341e:	609a      	str	r2, [r3, #8]
      break;
 8003420:	e03c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800342e:	461a      	mov	r2, r3
 8003430:	f000 faa4 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2150      	movs	r1, #80	@ 0x50
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fafb 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003440:	e02c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800344e:	461a      	mov	r2, r3
 8003450:	f000 fac2 	bl	80039d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2160      	movs	r1, #96	@ 0x60
 800345a:	4618      	mov	r0, r3
 800345c:	f000 faeb 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003460:	e01c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800346e:	461a      	mov	r2, r3
 8003470:	f000 fa84 	bl	800397c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2140      	movs	r1, #64	@ 0x40
 800347a:	4618      	mov	r0, r3
 800347c:	f000 fadb 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003480:	e00c      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4619      	mov	r1, r3
 800348c:	4610      	mov	r0, r2
 800348e:	f000 fad2 	bl	8003a36 <TIM_ITRx_SetConfig>
      break;
 8003492:	e003      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
      break;
 8003498:	e000      	b.n	800349c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800349a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bc80      	pop	{r7}
 80034c6:	4770      	bx	lr

080034c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a2f      	ldr	r2, [pc, #188]	@ (80035ac <TIM_Base_SetConfig+0xd0>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d00b      	beq.n	800350c <TIM_Base_SetConfig+0x30>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034fa:	d007      	beq.n	800350c <TIM_Base_SetConfig+0x30>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a2c      	ldr	r2, [pc, #176]	@ (80035b0 <TIM_Base_SetConfig+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d003      	beq.n	800350c <TIM_Base_SetConfig+0x30>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a2b      	ldr	r2, [pc, #172]	@ (80035b4 <TIM_Base_SetConfig+0xd8>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d108      	bne.n	800351e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a22      	ldr	r2, [pc, #136]	@ (80035ac <TIM_Base_SetConfig+0xd0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d00b      	beq.n	800353e <TIM_Base_SetConfig+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800352c:	d007      	beq.n	800353e <TIM_Base_SetConfig+0x62>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a1f      	ldr	r2, [pc, #124]	@ (80035b0 <TIM_Base_SetConfig+0xd4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d003      	beq.n	800353e <TIM_Base_SetConfig+0x62>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a1e      	ldr	r2, [pc, #120]	@ (80035b4 <TIM_Base_SetConfig+0xd8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d108      	bne.n	8003550 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003544:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	4313      	orrs	r3, r2
 800354e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	4313      	orrs	r3, r2
 800355c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a0d      	ldr	r2, [pc, #52]	@ (80035ac <TIM_Base_SetConfig+0xd0>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d103      	bne.n	8003584 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	2b00      	cmp	r3, #0
 8003594:	d005      	beq.n	80035a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	f023 0201 	bic.w	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	611a      	str	r2, [r3, #16]
  }
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr
 80035ac:	40012c00 	.word	0x40012c00
 80035b0:	40000400 	.word	0x40000400
 80035b4:	40000800 	.word	0x40000800

080035b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f023 0201 	bic.w	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 0302 	bic.w	r3, r3, #2
 8003600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a1c      	ldr	r2, [pc, #112]	@ (8003680 <TIM_OC1_SetConfig+0xc8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d10c      	bne.n	800362e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f023 0308 	bic.w	r3, r3, #8
 800361a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f023 0304 	bic.w	r3, r3, #4
 800362c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a13      	ldr	r2, [pc, #76]	@ (8003680 <TIM_OC1_SetConfig+0xc8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d111      	bne.n	800365a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	bc80      	pop	{r7}
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	40012c00 	.word	0x40012c00

08003684 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f023 0210 	bic.w	r2, r3, #16
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0320 	bic.w	r3, r3, #32
 80036ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a1d      	ldr	r2, [pc, #116]	@ (8003754 <TIM_OC2_SetConfig+0xd0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d10d      	bne.n	8003700 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	011b      	lsls	r3, r3, #4
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	4313      	orrs	r3, r2
 80036f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a14      	ldr	r2, [pc, #80]	@ (8003754 <TIM_OC2_SetConfig+0xd0>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d113      	bne.n	8003730 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800370e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	4313      	orrs	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	693a      	ldr	r2, [r7, #16]
 800372c:	4313      	orrs	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68fa      	ldr	r2, [r7, #12]
 800373a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	621a      	str	r2, [r3, #32]
}
 800374a:	bf00      	nop
 800374c:	371c      	adds	r7, #28
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr
 8003754:	40012c00 	.word	0x40012c00

08003758 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003758:	b480      	push	{r7}
 800375a:	b087      	sub	sp, #28
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f023 0303 	bic.w	r3, r3, #3
 800378e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80037a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003828 <TIM_OC3_SetConfig+0xd0>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10d      	bne.n	80037d2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a14      	ldr	r2, [pc, #80]	@ (8003828 <TIM_OC3_SetConfig+0xd0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d113      	bne.n	8003802 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	4313      	orrs	r3, r2
 8003800:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	621a      	str	r2, [r3, #32]
}
 800381c:	bf00      	nop
 800381e:	371c      	adds	r7, #28
 8003820:	46bd      	mov	sp, r7
 8003822:	bc80      	pop	{r7}
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40012c00 	.word	0x40012c00

0800382c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003876:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	4313      	orrs	r3, r2
 8003882:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a0f      	ldr	r2, [pc, #60]	@ (80038c4 <TIM_OC4_SetConfig+0x98>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d109      	bne.n	80038a0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003892:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	4313      	orrs	r3, r2
 800389e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr
 80038c4:	40012c00 	.word	0x40012c00

080038c8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 0201 	bic.w	r2, r3, #1
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <TIM_TI1_SetConfig+0xa8>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_TI1_SetConfig+0x46>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fc:	d007      	beq.n	800390e <TIM_TI1_SetConfig+0x46>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a1c      	ldr	r2, [pc, #112]	@ (8003974 <TIM_TI1_SetConfig+0xac>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_TI1_SetConfig+0x46>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <TIM_TI1_SetConfig+0xb0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <TIM_TI1_SetConfig+0x4a>
 800390e:	2301      	movs	r3, #1
 8003910:	e000      	b.n	8003914 <TIM_TI1_SetConfig+0x4c>
 8003912:	2300      	movs	r3, #0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d008      	beq.n	800392a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0303 	bic.w	r3, r3, #3
 800391e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	e003      	b.n	8003932 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f043 0301 	orr.w	r3, r3, #1
 8003930:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003938:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	011b      	lsls	r3, r3, #4
 800393e:	b2db      	uxtb	r3, r3
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	f023 030a 	bic.w	r3, r3, #10
 800394c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	f003 030a 	and.w	r3, r3, #10
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40000400 	.word	0x40000400
 8003978:	40000800 	.word	0x40000800

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039d8:	b480      	push	{r7}
 80039da:	b087      	sub	sp, #28
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	f023 0210 	bic.w	r2, r3, #16
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	031b      	lsls	r3, r3, #12
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a14:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	621a      	str	r2, [r3, #32]
}
 8003a2c:	bf00      	nop
 8003a2e:	371c      	adds	r7, #28
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
 8003a3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	f043 0307 	orr.w	r3, r3, #7
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	609a      	str	r2, [r3, #8]
}
 8003a60:	bf00      	nop
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bc80      	pop	{r7}
 8003a68:	4770      	bx	lr

08003a6a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b087      	sub	sp, #28
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a84:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	021a      	lsls	r2, r3, #8
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	431a      	orrs	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	609a      	str	r2, [r3, #8]
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bc80      	pop	{r7}
 8003aa6:	4770      	bx	lr

08003aa8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2201      	movs	r2, #1
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a1a      	ldr	r2, [r3, #32]
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	401a      	ands	r2, r3
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1a      	ldr	r2, [r3, #32]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f003 031f 	and.w	r3, r3, #31
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	621a      	str	r2, [r3, #32]
}
 8003ae6:	bf00      	nop
 8003ae8:	371c      	adds	r7, #28
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bc80      	pop	{r7}
 8003aee:	4770      	bx	lr

08003af0 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, const TIM_HallSensor_InitTypeDef *sConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e09a      	b.n	8003c3a <HAL_TIMEx_HallSensor_Init+0x14a>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d106      	bne.n	8003b1e <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f7fd fab9 	bl	8001090 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2202      	movs	r2, #2
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	4619      	mov	r1, r3
 8003b30:	4610      	mov	r0, r2
 8003b32:	f7ff fcd3 	bl	80034dc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6818      	ldr	r0, [r3, #0]
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	6819      	ldr	r1, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2203      	movs	r2, #3
 8003b44:	f7ff fec0 	bl	80038c8 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	699a      	ldr	r2, [r3, #24]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f022 020c 	bic.w	r2, r2, #12
 8003b56:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6999      	ldr	r1, [r3, #24]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685a      	ldr	r2, [r3, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003b78:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003b88:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b98:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0207 	bic.w	r2, r2, #7
 8003ba8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f042 0204 	orr.w	r2, r2, #4
 8003bb8:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8003bc2:	2370      	movs	r3, #112	@ 0x70
 8003bc4:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	627b      	str	r3, [r7, #36]	@ 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f107 020c 	add.w	r2, r7, #12
 8003be0:	4611      	mov	r1, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7ff fd4e 	bl	8003684 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685a      	ldr	r2, [r3, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003bf6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f042 0250 	orr.w	r2, r2, #80	@ 0x50
 8003c06:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3728      	adds	r7, #40	@ 0x28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <HAL_TIMEx_HallSensor_Start_IT>:
  * @brief  Starts the TIM Hall Sensor Interface in interrupt mode.
  * @param  htim TIM Hall Sensor Interface handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c52:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003c5a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c62:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003c6a:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE(htim->Instance));

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d108      	bne.n	8003c84 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c72:	7bbb      	ldrb	r3, [r7, #14]
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d105      	bne.n	8003c84 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003c78:	7b7b      	ldrb	r3, [r7, #13]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_TIMEx_HallSensor_Start_IT+0x40>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003c7e:	7b3b      	ldrb	r3, [r7, #12]
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d001      	beq.n	8003c88 <HAL_TIMEx_HallSensor_Start_IT+0x44>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e04d      	b.n	8003d24 <HAL_TIMEx_HallSensor_Start_IT+0xe0>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2202      	movs	r2, #2
 8003c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the capture compare Interrupts 1 event */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0202 	orr.w	r2, r2, #2
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Enable the Input Capture channel 1
  (in the Hall Sensor Interface the three possible channels that can be used are TIM_CHANNEL_1,
  TIM_CHANNEL_2 and TIM_CHANNEL_3) */
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f7ff fef1 	bl	8003aa8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <HAL_TIMEx_HallSensor_Start_IT+0xe8>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00e      	beq.n	8003cee <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd8:	d009      	beq.n	8003cee <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a14      	ldr	r2, [pc, #80]	@ (8003d30 <HAL_TIMEx_HallSensor_Start_IT+0xec>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d004      	beq.n	8003cee <HAL_TIMEx_HallSensor_Start_IT+0xaa>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <HAL_TIMEx_HallSensor_Start_IT+0xf0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d111      	bne.n	8003d12 <HAL_TIMEx_HallSensor_Start_IT+0xce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b06      	cmp	r3, #6
 8003cfe:	d010      	beq.n	8003d22 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    {
      __HAL_TIM_ENABLE(htim);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d10:	e007      	b.n	8003d22 <HAL_TIMEx_HallSensor_Start_IT+0xde>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f042 0201 	orr.w	r2, r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <HAL_TIMEx_ConfigCommutEvent_IT>:
  *            @arg TIM_COMMUTATION_SOFTWARE:  Commutation source is set by software using the COMG bit
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigCommutEvent_IT(TIM_HandleTypeDef *htim, uint32_t  InputTrigger,
                                                 uint32_t  CommutationSource)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_COMMUTATION_EVENT_INSTANCE(htim->Instance));
  assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(InputTrigger));

  __HAL_LOCK(htim);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d101      	bne.n	8003d52 <HAL_TIMEx_ConfigCommutEvent_IT+0x1a>
 8003d4e:	2302      	movs	r3, #2
 8003d50:	e04c      	b.n	8003dec <HAL_TIMEx_ConfigCommutEvent_IT+0xb4>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2201      	movs	r2, #1
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if ((InputTrigger == TIM_TS_ITR0) || (InputTrigger == TIM_TS_ITR1) ||
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d008      	beq.n	8003d72 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b10      	cmp	r3, #16
 8003d64:	d005      	beq.n	8003d72 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d002      	beq.n	8003d72 <HAL_TIMEx_ConfigCommutEvent_IT+0x3a>
      (InputTrigger == TIM_TS_ITR2) || (InputTrigger == TIM_TS_ITR3))
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b30      	cmp	r3, #48	@ 0x30
 8003d70:	d10f      	bne.n	8003d92 <HAL_TIMEx_ConfigCommutEvent_IT+0x5a>
  {
    /* Select the Input trigger */
    htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8003d80:	609a      	str	r2, [r3, #8]
    htim->Instance->SMCR |= InputTrigger;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6899      	ldr	r1, [r3, #8]
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	609a      	str	r2, [r3, #8]
  }

  /* Select the Capture Compare preload feature */
  htim->Instance->CR2 |= TIM_CR2_CCPC;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0201 	orr.w	r2, r2, #1
 8003da0:	605a      	str	r2, [r3, #4]
  /* Select the Commutation event source */
  htim->Instance->CR2 &= ~TIM_CR2_CCUS;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= CommutationSource;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	605a      	str	r2, [r3, #4]

  /* Disable Commutation DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_COM);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68da      	ldr	r2, [r3, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dd0:	60da      	str	r2, [r3, #12]

  /* Enable the Commutation Interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_COM);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68da      	ldr	r2, [r3, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f042 0220 	orr.w	r2, r2, #32
 8003de0:	60da      	str	r2, [r3, #12]

  __HAL_UNLOCK(htim);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr
	...

08003df8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d101      	bne.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e046      	b.n	8003e9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68fa      	ldr	r2, [r7, #12]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68fa      	ldr	r2, [r7, #12]
 8003e48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d00e      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e5c:	d009      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a12      	ldr	r2, [pc, #72]	@ (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d004      	beq.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a10      	ldr	r2, [pc, #64]	@ (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10c      	bne.n	8003e8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3714      	adds	r7, #20
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	40012c00 	.word	0x40012c00
 8003eac:	40000400 	.word	0x40000400
 8003eb0:	40000800 	.word	0x40000800

08003eb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bc80      	pop	{r7}
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_TIMEx_HallSensor_GetState>:
  * @brief  Return the TIM Hall Sensor interface handle state.
  * @param  htim TIM Hall Sensor handle
  * @retval HAL state
  */
HAL_TIM_StateTypeDef HAL_TIMEx_HallSensor_GetState(const TIM_HandleTypeDef *htim)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  return htim->State;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e042      	b.n	8003f78 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f7fd f9a8 	bl	800125c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2224      	movs	r2, #36	@ 0x24
 8003f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	68da      	ldr	r2, [r3, #12]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fdb7 	bl	8004a98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	691a      	ldr	r2, [r3, #16]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	695a      	ldr	r2, [r3, #20]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68da      	ldr	r2, [r3, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3708      	adds	r7, #8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08a      	sub	sp, #40	@ 0x28
 8003f84:	af02      	add	r7, sp, #8
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d175      	bne.n	800408c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_UART_Transmit+0x2c>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e06e      	b.n	800408e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2221      	movs	r2, #33	@ 0x21
 8003fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fbe:	f7fd fabf 	bl	8001540 <HAL_GetTick>
 8003fc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	88fa      	ldrh	r2, [r7, #6]
 8003fc8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	88fa      	ldrh	r2, [r7, #6]
 8003fce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fd8:	d108      	bne.n	8003fec <HAL_UART_Transmit+0x6c>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d104      	bne.n	8003fec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	61bb      	str	r3, [r7, #24]
 8003fea:	e003      	b.n	8003ff4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ff4:	e02e      	b.n	8004054 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2180      	movs	r1, #128	@ 0x80
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f000 fb1c 	bl	800463e <UART_WaitOnFlagUntilTimeout>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d005      	beq.n	8004018 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e03a      	b.n	800408e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10b      	bne.n	8004036 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	3302      	adds	r3, #2
 8004032:	61bb      	str	r3, [r7, #24]
 8004034:	e007      	b.n	8004046 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004040:	69fb      	ldr	r3, [r7, #28]
 8004042:	3301      	adds	r3, #1
 8004044:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800404a:	b29b      	uxth	r3, r3
 800404c:	3b01      	subs	r3, #1
 800404e:	b29a      	uxth	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1cb      	bne.n	8003ff6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	2200      	movs	r2, #0
 8004066:	2140      	movs	r1, #64	@ 0x40
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	f000 fae8 	bl	800463e <UART_WaitOnFlagUntilTimeout>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d005      	beq.n	8004080 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2220      	movs	r2, #32
 8004078:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e006      	b.n	800408e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e000      	b.n	800408e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
  }
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b084      	sub	sp, #16
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	4613      	mov	r3, r2
 80040a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d112      	bne.n	80040d6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d002      	beq.n	80040bc <HAL_UART_Receive_IT+0x26>
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e00b      	b.n	80040d8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	461a      	mov	r2, r3
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fb0f 	bl	80046f0 <UART_Start_Receive_IT>
 80040d2:	4603      	mov	r3, r0
 80040d4:	e000      	b.n	80040d8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3710      	adds	r7, #16
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b0ba      	sub	sp, #232	@ 0xe8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004106:	2300      	movs	r3, #0
 8004108:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800410c:	2300      	movs	r3, #0
 800410e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004116:	f003 030f 	and.w	r3, r3, #15
 800411a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800411e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10f      	bne.n	8004146 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800412a:	f003 0320 	and.w	r3, r3, #32
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_UART_IRQHandler+0x66>
 8004132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fbec 	bl	800491c <UART_Receive_IT>
      return;
 8004144:	e25b      	b.n	80045fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004146:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 80de 	beq.w	800430c <HAL_UART_IRQHandler+0x22c>
 8004150:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d106      	bne.n	800416a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004164:	2b00      	cmp	r3, #0
 8004166:	f000 80d1 	beq.w	800430c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800416a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00b      	beq.n	800418e <HAL_UART_IRQHandler+0xae>
 8004176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800417a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004186:	f043 0201 	orr.w	r2, r3, #1
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800418e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00b      	beq.n	80041b2 <HAL_UART_IRQHandler+0xd2>
 800419a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d005      	beq.n	80041b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f043 0202 	orr.w	r2, r3, #2
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80041b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <HAL_UART_IRQHandler+0xf6>
 80041be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041ce:	f043 0204 	orr.w	r2, r3, #4
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d011      	beq.n	8004206 <HAL_UART_IRQHandler+0x126>
 80041e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d105      	bne.n	80041fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d005      	beq.n	8004206 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041fe:	f043 0208 	orr.w	r2, r3, #8
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420a:	2b00      	cmp	r3, #0
 800420c:	f000 81f2 	beq.w	80045f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004214:	f003 0320 	and.w	r3, r3, #32
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_UART_IRQHandler+0x14e>
 800421c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004220:	f003 0320 	and.w	r3, r3, #32
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f000 fb77 	bl	800491c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004238:	2b00      	cmp	r3, #0
 800423a:	bf14      	ite	ne
 800423c:	2301      	movne	r3, #1
 800423e:	2300      	moveq	r3, #0
 8004240:	b2db      	uxtb	r3, r3
 8004242:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800424a:	f003 0308 	and.w	r3, r3, #8
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <HAL_UART_IRQHandler+0x17a>
 8004252:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004256:	2b00      	cmp	r3, #0
 8004258:	d04f      	beq.n	80042fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 fa81 	bl	8004762 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800426a:	2b00      	cmp	r3, #0
 800426c:	d041      	beq.n	80042f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3314      	adds	r3, #20
 8004274:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800427c:	e853 3f00 	ldrex	r3, [r3]
 8004280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004284:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004288:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800428c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3314      	adds	r3, #20
 8004296:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800429a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800429e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042aa:	e841 2300 	strex	r3, r2, [r1]
 80042ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1d9      	bne.n	800426e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d013      	beq.n	80042ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c6:	4a7e      	ldr	r2, [pc, #504]	@ (80044c0 <HAL_UART_IRQHandler+0x3e0>)
 80042c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fb08 	bl	80018e4 <HAL_DMA_Abort_IT>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d016      	beq.n	8004308 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042e4:	4610      	mov	r0, r2
 80042e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	e00e      	b.n	8004308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f993 	bl	8004616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	e00a      	b.n	8004308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f98f 	bl	8004616 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f8:	e006      	b.n	8004308 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f98b 	bl	8004616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004306:	e175      	b.n	80045f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004308:	bf00      	nop
    return;
 800430a:	e173      	b.n	80045f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	2b01      	cmp	r3, #1
 8004312:	f040 814f 	bne.w	80045b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431a:	f003 0310 	and.w	r3, r3, #16
 800431e:	2b00      	cmp	r3, #0
 8004320:	f000 8148 	beq.w	80045b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004328:	f003 0310 	and.w	r3, r3, #16
 800432c:	2b00      	cmp	r3, #0
 800432e:	f000 8141 	beq.w	80045b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004332:	2300      	movs	r3, #0
 8004334:	60bb      	str	r3, [r7, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	60bb      	str	r3, [r7, #8]
 8004346:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80b6 	beq.w	80044c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004364:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 8145 	beq.w	80045f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004372:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004376:	429a      	cmp	r2, r3
 8004378:	f080 813e 	bcs.w	80045f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004382:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	699b      	ldr	r3, [r3, #24]
 800438a:	2b20      	cmp	r3, #32
 800438c:	f000 8088 	beq.w	80044a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800439e:	e853 3f00 	ldrex	r3, [r3]
 80043a2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	330c      	adds	r3, #12
 80043b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80043bc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80043c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80043cc:	e841 2300 	strex	r3, r2, [r1]
 80043d0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80043d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1d9      	bne.n	8004390 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80043ec:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3314      	adds	r3, #20
 80043fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004400:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004404:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004408:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004412:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e1      	bne.n	80043dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	3314      	adds	r3, #20
 800441e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800442a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800442e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3314      	adds	r3, #20
 8004438:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800443c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800443e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004440:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004442:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004444:	e841 2300 	strex	r3, r2, [r1]
 8004448:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800444a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e3      	bne.n	8004418 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800446e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004470:	f023 0310 	bic.w	r3, r3, #16
 8004474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	330c      	adds	r3, #12
 800447e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004482:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004484:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004490:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e3      	bne.n	800445e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	4618      	mov	r0, r3
 800449c:	f7fd f9e6 	bl	800186c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2202      	movs	r2, #2
 80044a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8b6 	bl	8004628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044bc:	e09c      	b.n	80045f8 <HAL_UART_IRQHandler+0x518>
 80044be:	bf00      	nop
 80044c0:	08004827 	.word	0x08004827
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80044d8:	b29b      	uxth	r3, r3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 808e 	beq.w	80045fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8089 	beq.w	80045fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80044fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004500:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800450e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004510:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004514:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800451c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e3      	bne.n	80044ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	623b      	str	r3, [r7, #32]
   return(result);
 8004532:	6a3b      	ldr	r3, [r7, #32]
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	3314      	adds	r3, #20
 8004542:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004546:	633a      	str	r2, [r7, #48]	@ 0x30
 8004548:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800454c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e3      	bne.n	8004522 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2220      	movs	r2, #32
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	330c      	adds	r3, #12
 800456e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	e853 3f00 	ldrex	r3, [r3]
 8004576:	60fb      	str	r3, [r7, #12]
   return(result);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0310 	bic.w	r3, r3, #16
 800457e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800458c:	61fa      	str	r2, [r7, #28]
 800458e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004590:	69b9      	ldr	r1, [r7, #24]
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	e841 2300 	strex	r3, r2, [r1]
 8004598:	617b      	str	r3, [r7, #20]
   return(result);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d1e3      	bne.n	8004568 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2202      	movs	r2, #2
 80045a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80045aa:	4619      	mov	r1, r3
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f83b 	bl	8004628 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045b2:	e023      	b.n	80045fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80045b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d009      	beq.n	80045d4 <HAL_UART_IRQHandler+0x4f4>
 80045c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d003      	beq.n	80045d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f93e 	bl	800484e <UART_Transmit_IT>
    return;
 80045d2:	e014      	b.n	80045fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00e      	beq.n	80045fe <HAL_UART_IRQHandler+0x51e>
 80045e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f97d 	bl	80048ec <UART_EndTransmit_IT>
    return;
 80045f2:	e004      	b.n	80045fe <HAL_UART_IRQHandler+0x51e>
    return;
 80045f4:	bf00      	nop
 80045f6:	e002      	b.n	80045fe <HAL_UART_IRQHandler+0x51e>
      return;
 80045f8:	bf00      	nop
 80045fa:	e000      	b.n	80045fe <HAL_UART_IRQHandler+0x51e>
      return;
 80045fc:	bf00      	nop
  }
}
 80045fe:	37e8      	adds	r7, #232	@ 0xe8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr

08004616 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800461e:	bf00      	nop
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	bc80      	pop	{r7}
 8004626:	4770      	bx	lr

08004628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	460b      	mov	r3, r1
 8004632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004634:	bf00      	nop
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b086      	sub	sp, #24
 8004642:	af00      	add	r7, sp, #0
 8004644:	60f8      	str	r0, [r7, #12]
 8004646:	60b9      	str	r1, [r7, #8]
 8004648:	603b      	str	r3, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464e:	e03b      	b.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004650:	6a3b      	ldr	r3, [r7, #32]
 8004652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004656:	d037      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004658:	f7fc ff72 	bl	8001540 <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	6a3a      	ldr	r2, [r7, #32]
 8004664:	429a      	cmp	r2, r3
 8004666:	d302      	bcc.n	800466e <UART_WaitOnFlagUntilTimeout+0x30>
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e03a      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d023      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	2b80      	cmp	r3, #128	@ 0x80
 8004684:	d020      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	2b40      	cmp	r3, #64	@ 0x40
 800468a:	d01d      	beq.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b08      	cmp	r3, #8
 8004698:	d116      	bne.n	80046c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	617b      	str	r3, [r7, #20]
 80046ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f000 f856 	bl	8004762 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2208      	movs	r2, #8
 80046ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	e00f      	b.n	80046e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	4013      	ands	r3, r2
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	461a      	mov	r2, r3
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d0b4      	beq.n	8004650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	4613      	mov	r3, r2
 80046fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	88fa      	ldrh	r2, [r7, #6]
 800470e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2222      	movs	r2, #34	@ 0x22
 800471a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	68da      	ldr	r2, [r3, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004734:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f042 0220 	orr.w	r2, r2, #32
 8004754:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	bc80      	pop	{r7}
 8004760:	4770      	bx	lr

08004762 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004762:	b480      	push	{r7}
 8004764:	b095      	sub	sp, #84	@ 0x54
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800477a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004780:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	330c      	adds	r3, #12
 8004788:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800478a:	643a      	str	r2, [r7, #64]	@ 0x40
 800478c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004790:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e5      	bne.n	800476a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3314      	adds	r3, #20
 80047a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3314      	adds	r3, #20
 80047bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d119      	bne.n	800480e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f023 0310 	bic.w	r3, r3, #16
 80047f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047fa:	61ba      	str	r2, [r7, #24]
 80047fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6979      	ldr	r1, [r7, #20]
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	613b      	str	r3, [r7, #16]
   return(result);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800481c:	bf00      	nop
 800481e:	3754      	adds	r7, #84	@ 0x54
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004826:	b580      	push	{r7, lr}
 8004828:	b084      	sub	sp, #16
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004832:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f7ff fee8 	bl	8004616 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004846:	bf00      	nop
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b21      	cmp	r3, #33	@ 0x21
 8004860:	d13e      	bne.n	80048e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800486a:	d114      	bne.n	8004896 <UART_Transmit_IT+0x48>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d110      	bne.n	8004896 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6a1b      	ldr	r3, [r3, #32]
 8004878:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004888:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	1c9a      	adds	r2, r3, #2
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	621a      	str	r2, [r3, #32]
 8004894:	e008      	b.n	80048a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	1c59      	adds	r1, r3, #1
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	6211      	str	r1, [r2, #32]
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	3b01      	subs	r3, #1
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	4619      	mov	r1, r3
 80048b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10f      	bne.n	80048dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80048ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80048da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048dc:	2300      	movs	r3, #0
 80048de:	e000      	b.n	80048e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048e0:	2302      	movs	r3, #2
  }
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bc80      	pop	{r7}
 80048ea:	4770      	bx	lr

080048ec <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68da      	ldr	r2, [r3, #12]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004902:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f7ff fe79 	bl	8004604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	@ 0x30
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800492a:	b2db      	uxtb	r3, r3
 800492c:	2b22      	cmp	r3, #34	@ 0x22
 800492e:	f040 80ae 	bne.w	8004a8e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800493a:	d117      	bne.n	800496c <UART_Receive_IT+0x50>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d113      	bne.n	800496c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004944:	2300      	movs	r3, #0
 8004946:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	b29b      	uxth	r3, r3
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	b29a      	uxth	r2, r3
 800495c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	1c9a      	adds	r2, r3, #2
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	629a      	str	r2, [r3, #40]	@ 0x28
 800496a:	e026      	b.n	80049ba <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004970:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004972:	2300      	movs	r3, #0
 8004974:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800497e:	d007      	beq.n	8004990 <UART_Receive_IT+0x74>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10a      	bne.n	800499e <UART_Receive_IT+0x82>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d106      	bne.n	800499e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e008      	b.n	80049b0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049ae:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	4619      	mov	r1, r3
 80049c8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d15d      	bne.n	8004a8a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0220 	bic.w	r2, r2, #32
 80049dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	68da      	ldr	r2, [r3, #12]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695a      	ldr	r2, [r3, #20]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f022 0201 	bic.w	r2, r2, #1
 80049fc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d135      	bne.n	8004a80 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	330c      	adds	r3, #12
 8004a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	e853 3f00 	ldrex	r3, [r3]
 8004a28:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	f023 0310 	bic.w	r3, r3, #16
 8004a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	330c      	adds	r3, #12
 8004a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a3a:	623a      	str	r2, [r7, #32]
 8004a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a3e:	69f9      	ldr	r1, [r7, #28]
 8004a40:	6a3a      	ldr	r2, [r7, #32]
 8004a42:	e841 2300 	strex	r3, r2, [r1]
 8004a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e5      	bne.n	8004a1a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b10      	cmp	r3, #16
 8004a5a:	d10a      	bne.n	8004a72 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	60fb      	str	r3, [r7, #12]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a76:	4619      	mov	r1, r3
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f7ff fdd5 	bl	8004628 <HAL_UARTEx_RxEventCallback>
 8004a7e:	e002      	b.n	8004a86 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fb fced 	bl	8000460 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e002      	b.n	8004a90 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e000      	b.n	8004a90 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004a8e:	2302      	movs	r3, #2
  }
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3730      	adds	r7, #48	@ 0x30
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689a      	ldr	r2, [r3, #8]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	695b      	ldr	r3, [r3, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004ad2:	f023 030c 	bic.w	r3, r3, #12
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	68b9      	ldr	r1, [r7, #8]
 8004adc:	430b      	orrs	r3, r1
 8004ade:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a2c      	ldr	r2, [pc, #176]	@ (8004bac <UART_SetConfig+0x114>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d103      	bne.n	8004b08 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b00:	f7fd fde8 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	e002      	b.n	8004b0e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b08:	f7fd fdd0 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8004b0c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	009a      	lsls	r2, r3, #2
 8004b18:	441a      	add	r2, r3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b24:	4a22      	ldr	r2, [pc, #136]	@ (8004bb0 <UART_SetConfig+0x118>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	0119      	lsls	r1, r3, #4
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4613      	mov	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	4413      	add	r3, r2
 8004b36:	009a      	lsls	r2, r3, #2
 8004b38:	441a      	add	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b44:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb0 <UART_SetConfig+0x118>)
 8004b46:	fba3 0302 	umull	r0, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2064      	movs	r0, #100	@ 0x64
 8004b4e:	fb00 f303 	mul.w	r3, r0, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	@ 0x32
 8004b58:	4a15      	ldr	r2, [pc, #84]	@ (8004bb0 <UART_SetConfig+0x118>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b64:	4419      	add	r1, r3
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009a      	lsls	r2, r3, #2
 8004b70:	441a      	add	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb0 <UART_SetConfig+0x118>)
 8004b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8004b82:	095b      	lsrs	r3, r3, #5
 8004b84:	2064      	movs	r0, #100	@ 0x64
 8004b86:	fb00 f303 	mul.w	r3, r0, r3
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	011b      	lsls	r3, r3, #4
 8004b8e:	3332      	adds	r3, #50	@ 0x32
 8004b90:	4a07      	ldr	r2, [pc, #28]	@ (8004bb0 <UART_SetConfig+0x118>)
 8004b92:	fba2 2303 	umull	r2, r3, r2, r3
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	f003 020f 	and.w	r2, r3, #15
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ba4:	bf00      	nop
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	40013800 	.word	0x40013800
 8004bb0:	51eb851f 	.word	0x51eb851f

08004bb4 <memset>:
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	4402      	add	r2, r0
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d100      	bne.n	8004bbe <memset+0xa>
 8004bbc:	4770      	bx	lr
 8004bbe:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc2:	e7f9      	b.n	8004bb8 <memset+0x4>

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	4d0c      	ldr	r5, [pc, #48]	@ (8004bfc <__libc_init_array+0x38>)
 8004bca:	4c0d      	ldr	r4, [pc, #52]	@ (8004c00 <__libc_init_array+0x3c>)
 8004bcc:	1b64      	subs	r4, r4, r5
 8004bce:	10a4      	asrs	r4, r4, #2
 8004bd0:	42a6      	cmp	r6, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	f000 f81a 	bl	8004c0c <_init>
 8004bd8:	2600      	movs	r6, #0
 8004bda:	4d0a      	ldr	r5, [pc, #40]	@ (8004c04 <__libc_init_array+0x40>)
 8004bdc:	4c0a      	ldr	r4, [pc, #40]	@ (8004c08 <__libc_init_array+0x44>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	42a6      	cmp	r6, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bec:	4798      	blx	r3
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf6:	4798      	blx	r3
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	08004cb0 	.word	0x08004cb0
 8004c00:	08004cb0 	.word	0x08004cb0
 8004c04:	08004cb0 	.word	0x08004cb0
 8004c08:	08004cb4 	.word	0x08004cb4

08004c0c <_init>:
 8004c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c0e:	bf00      	nop
 8004c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c12:	bc08      	pop	{r3}
 8004c14:	469e      	mov	lr, r3
 8004c16:	4770      	bx	lr

08004c18 <_fini>:
 8004c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c1a:	bf00      	nop
 8004c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c1e:	bc08      	pop	{r3}
 8004c20:	469e      	mov	lr, r3
 8004c22:	4770      	bx	lr
