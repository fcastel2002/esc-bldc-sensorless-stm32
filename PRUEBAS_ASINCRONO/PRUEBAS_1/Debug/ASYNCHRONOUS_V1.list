
ASYNCHRONOUS_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e18  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c4  08008f28  08008f28  00009f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095ec  080095ec  0000b078  2**0
                  CONTENTS
  4 .ARM          00000008  080095ec  080095ec  0000a5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095f4  080095f4  0000b078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095f4  080095f4  0000a5f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095f8  080095f8  0000a5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  080095fc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c84  20000078  08009674  0000b078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000cfc  08009674  0000bcfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011169  00000000  00000000  0000b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cee  00000000  00000000  0001c20a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001eef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afc  00000000  00000000  0001fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019881  00000000  00000000  0002081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012d48  00000000  00000000  0003a09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c269  00000000  00000000  0004cde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d904e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004640  00000000  00000000  000d9094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000dd6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08008f10 	.word	0x08008f10

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08008f10 	.word	0x08008f10

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__aeabi_d2f>:
 8000910:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000914:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000918:	bf24      	itt	cs
 800091a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800091e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000922:	d90d      	bls.n	8000940 <__aeabi_d2f+0x30>
 8000924:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000928:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800092c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000930:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000934:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000938:	bf08      	it	eq
 800093a:	f020 0001 	biceq.w	r0, r0, #1
 800093e:	4770      	bx	lr
 8000940:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000944:	d121      	bne.n	800098a <__aeabi_d2f+0x7a>
 8000946:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800094a:	bfbc      	itt	lt
 800094c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000950:	4770      	bxlt	lr
 8000952:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000956:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800095a:	f1c2 0218 	rsb	r2, r2, #24
 800095e:	f1c2 0c20 	rsb	ip, r2, #32
 8000962:	fa10 f30c 	lsls.w	r3, r0, ip
 8000966:	fa20 f002 	lsr.w	r0, r0, r2
 800096a:	bf18      	it	ne
 800096c:	f040 0001 	orrne.w	r0, r0, #1
 8000970:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000974:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000978:	fa03 fc0c 	lsl.w	ip, r3, ip
 800097c:	ea40 000c 	orr.w	r0, r0, ip
 8000980:	fa23 f302 	lsr.w	r3, r3, r2
 8000984:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000988:	e7cc      	b.n	8000924 <__aeabi_d2f+0x14>
 800098a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098e:	d107      	bne.n	80009a0 <__aeabi_d2f+0x90>
 8000990:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000994:	bf1e      	ittt	ne
 8000996:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800099a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800099e:	4770      	bxne	lr
 80009a0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <__aeabi_frsub>:
 80009b0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009b4:	e002      	b.n	80009bc <__addsf3>
 80009b6:	bf00      	nop

080009b8 <__aeabi_fsub>:
 80009b8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009bc <__addsf3>:
 80009bc:	0042      	lsls	r2, r0, #1
 80009be:	bf1f      	itttt	ne
 80009c0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c4:	ea92 0f03 	teqne	r2, r3
 80009c8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009cc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009d0:	d06a      	beq.n	8000aa8 <__addsf3+0xec>
 80009d2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009da:	bfc1      	itttt	gt
 80009dc:	18d2      	addgt	r2, r2, r3
 80009de:	4041      	eorgt	r1, r0
 80009e0:	4048      	eorgt	r0, r1
 80009e2:	4041      	eorgt	r1, r0
 80009e4:	bfb8      	it	lt
 80009e6:	425b      	neglt	r3, r3
 80009e8:	2b19      	cmp	r3, #25
 80009ea:	bf88      	it	hi
 80009ec:	4770      	bxhi	lr
 80009ee:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009f2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009f6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009fa:	bf18      	it	ne
 80009fc:	4240      	negne	r0, r0
 80009fe:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a02:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a06:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a0a:	bf18      	it	ne
 8000a0c:	4249      	negne	r1, r1
 8000a0e:	ea92 0f03 	teq	r2, r3
 8000a12:	d03f      	beq.n	8000a94 <__addsf3+0xd8>
 8000a14:	f1a2 0201 	sub.w	r2, r2, #1
 8000a18:	fa41 fc03 	asr.w	ip, r1, r3
 8000a1c:	eb10 000c 	adds.w	r0, r0, ip
 8000a20:	f1c3 0320 	rsb	r3, r3, #32
 8000a24:	fa01 f103 	lsl.w	r1, r1, r3
 8000a28:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a2c:	d502      	bpl.n	8000a34 <__addsf3+0x78>
 8000a2e:	4249      	negs	r1, r1
 8000a30:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a34:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a38:	d313      	bcc.n	8000a62 <__addsf3+0xa6>
 8000a3a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a3e:	d306      	bcc.n	8000a4e <__addsf3+0x92>
 8000a40:	0840      	lsrs	r0, r0, #1
 8000a42:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a46:	f102 0201 	add.w	r2, r2, #1
 8000a4a:	2afe      	cmp	r2, #254	@ 0xfe
 8000a4c:	d251      	bcs.n	8000af2 <__addsf3+0x136>
 8000a4e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a56:	bf08      	it	eq
 8000a58:	f020 0001 	biceq.w	r0, r0, #1
 8000a5c:	ea40 0003 	orr.w	r0, r0, r3
 8000a60:	4770      	bx	lr
 8000a62:	0049      	lsls	r1, r1, #1
 8000a64:	eb40 0000 	adc.w	r0, r0, r0
 8000a68:	3a01      	subs	r2, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a70:	d2ed      	bcs.n	8000a4e <__addsf3+0x92>
 8000a72:	fab0 fc80 	clz	ip, r0
 8000a76:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a7a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a82:	bfaa      	itet	ge
 8000a84:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a88:	4252      	neglt	r2, r2
 8000a8a:	4318      	orrge	r0, r3
 8000a8c:	bfbc      	itt	lt
 8000a8e:	40d0      	lsrlt	r0, r2
 8000a90:	4318      	orrlt	r0, r3
 8000a92:	4770      	bx	lr
 8000a94:	f092 0f00 	teq	r2, #0
 8000a98:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a9c:	bf06      	itte	eq
 8000a9e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000aa2:	3201      	addeq	r2, #1
 8000aa4:	3b01      	subne	r3, #1
 8000aa6:	e7b5      	b.n	8000a14 <__addsf3+0x58>
 8000aa8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aac:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab6:	d021      	beq.n	8000afc <__addsf3+0x140>
 8000ab8:	ea92 0f03 	teq	r2, r3
 8000abc:	d004      	beq.n	8000ac8 <__addsf3+0x10c>
 8000abe:	f092 0f00 	teq	r2, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	4608      	moveq	r0, r1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea90 0f01 	teq	r0, r1
 8000acc:	bf1c      	itt	ne
 8000ace:	2000      	movne	r0, #0
 8000ad0:	4770      	bxne	lr
 8000ad2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ad6:	d104      	bne.n	8000ae2 <__addsf3+0x126>
 8000ad8:	0040      	lsls	r0, r0, #1
 8000ada:	bf28      	it	cs
 8000adc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ae0:	4770      	bx	lr
 8000ae2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ae6:	bf3c      	itt	cc
 8000ae8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000aec:	4770      	bxcc	lr
 8000aee:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000af2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000afa:	4770      	bx	lr
 8000afc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b00:	bf16      	itet	ne
 8000b02:	4608      	movne	r0, r1
 8000b04:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b08:	4601      	movne	r1, r0
 8000b0a:	0242      	lsls	r2, r0, #9
 8000b0c:	bf06      	itte	eq
 8000b0e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b12:	ea90 0f01 	teqeq	r0, r1
 8000b16:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b1a:	4770      	bx	lr

08000b1c <__aeabi_ui2f>:
 8000b1c:	f04f 0300 	mov.w	r3, #0
 8000b20:	e004      	b.n	8000b2c <__aeabi_i2f+0x8>
 8000b22:	bf00      	nop

08000b24 <__aeabi_i2f>:
 8000b24:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b28:	bf48      	it	mi
 8000b2a:	4240      	negmi	r0, r0
 8000b2c:	ea5f 0c00 	movs.w	ip, r0
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b38:	4601      	mov	r1, r0
 8000b3a:	f04f 0000 	mov.w	r0, #0
 8000b3e:	e01c      	b.n	8000b7a <__aeabi_l2f+0x2a>

08000b40 <__aeabi_ul2f>:
 8000b40:	ea50 0201 	orrs.w	r2, r0, r1
 8000b44:	bf08      	it	eq
 8000b46:	4770      	bxeq	lr
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e00a      	b.n	8000b64 <__aeabi_l2f+0x14>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_l2f>:
 8000b50:	ea50 0201 	orrs.w	r2, r0, r1
 8000b54:	bf08      	it	eq
 8000b56:	4770      	bxeq	lr
 8000b58:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b5c:	d502      	bpl.n	8000b64 <__aeabi_l2f+0x14>
 8000b5e:	4240      	negs	r0, r0
 8000b60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b64:	ea5f 0c01 	movs.w	ip, r1
 8000b68:	bf02      	ittt	eq
 8000b6a:	4684      	moveq	ip, r0
 8000b6c:	4601      	moveq	r1, r0
 8000b6e:	2000      	moveq	r0, #0
 8000b70:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b74:	bf08      	it	eq
 8000b76:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b7a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b7e:	fabc f28c 	clz	r2, ip
 8000b82:	3a08      	subs	r2, #8
 8000b84:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b88:	db10      	blt.n	8000bac <__aeabi_l2f+0x5c>
 8000b8a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8e:	4463      	add	r3, ip
 8000b90:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b94:	f1c2 0220 	rsb	r2, r2, #32
 8000b98:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b9c:	fa20 f202 	lsr.w	r2, r0, r2
 8000ba0:	eb43 0002 	adc.w	r0, r3, r2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f102 0220 	add.w	r2, r2, #32
 8000bb0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb4:	f1c2 0220 	rsb	r2, r2, #32
 8000bb8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bbc:	fa21 f202 	lsr.w	r2, r1, r2
 8000bc0:	eb43 0002 	adc.w	r0, r3, r2
 8000bc4:	bf08      	it	eq
 8000bc6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bca:	4770      	bx	lr

08000bcc <__aeabi_fmul>:
 8000bcc:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bd0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd4:	bf1e      	ittt	ne
 8000bd6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bda:	ea92 0f0c 	teqne	r2, ip
 8000bde:	ea93 0f0c 	teqne	r3, ip
 8000be2:	d06f      	beq.n	8000cc4 <__aeabi_fmul+0xf8>
 8000be4:	441a      	add	r2, r3
 8000be6:	ea80 0c01 	eor.w	ip, r0, r1
 8000bea:	0240      	lsls	r0, r0, #9
 8000bec:	bf18      	it	ne
 8000bee:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bf2:	d01e      	beq.n	8000c32 <__aeabi_fmul+0x66>
 8000bf4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bf8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bfc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c00:	fba0 3101 	umull	r3, r1, r0, r1
 8000c04:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000c08:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000c0c:	bf3e      	ittt	cc
 8000c0e:	0049      	lslcc	r1, r1, #1
 8000c10:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c14:	005b      	lslcc	r3, r3, #1
 8000c16:	ea40 0001 	orr.w	r0, r0, r1
 8000c1a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000c1e:	2afd      	cmp	r2, #253	@ 0xfd
 8000c20:	d81d      	bhi.n	8000c5e <__aeabi_fmul+0x92>
 8000c22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c26:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c2a:	bf08      	it	eq
 8000c2c:	f020 0001 	biceq.w	r0, r0, #1
 8000c30:	4770      	bx	lr
 8000c32:	f090 0f00 	teq	r0, #0
 8000c36:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c3a:	bf08      	it	eq
 8000c3c:	0249      	lsleq	r1, r1, #9
 8000c3e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c42:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c46:	3a7f      	subs	r2, #127	@ 0x7f
 8000c48:	bfc2      	ittt	gt
 8000c4a:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c4e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c52:	4770      	bxgt	lr
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	3a01      	subs	r2, #1
 8000c5e:	dc5d      	bgt.n	8000d1c <__aeabi_fmul+0x150>
 8000c60:	f112 0f19 	cmn.w	r2, #25
 8000c64:	bfdc      	itt	le
 8000c66:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c6a:	4770      	bxle	lr
 8000c6c:	f1c2 0200 	rsb	r2, r2, #0
 8000c70:	0041      	lsls	r1, r0, #1
 8000c72:	fa21 f102 	lsr.w	r1, r1, r2
 8000c76:	f1c2 0220 	rsb	r2, r2, #32
 8000c7a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c82:	f140 0000 	adc.w	r0, r0, #0
 8000c86:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c8a:	bf08      	it	eq
 8000c8c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c90:	4770      	bx	lr
 8000c92:	f092 0f00 	teq	r2, #0
 8000c96:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c9a:	bf02      	ittt	eq
 8000c9c:	0040      	lsleq	r0, r0, #1
 8000c9e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ca2:	3a01      	subeq	r2, #1
 8000ca4:	d0f9      	beq.n	8000c9a <__aeabi_fmul+0xce>
 8000ca6:	ea40 000c 	orr.w	r0, r0, ip
 8000caa:	f093 0f00 	teq	r3, #0
 8000cae:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000cb2:	bf02      	ittt	eq
 8000cb4:	0049      	lsleq	r1, r1, #1
 8000cb6:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000cba:	3b01      	subeq	r3, #1
 8000cbc:	d0f9      	beq.n	8000cb2 <__aeabi_fmul+0xe6>
 8000cbe:	ea41 010c 	orr.w	r1, r1, ip
 8000cc2:	e78f      	b.n	8000be4 <__aeabi_fmul+0x18>
 8000cc4:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc8:	ea92 0f0c 	teq	r2, ip
 8000ccc:	bf18      	it	ne
 8000cce:	ea93 0f0c 	teqne	r3, ip
 8000cd2:	d00a      	beq.n	8000cea <__aeabi_fmul+0x11e>
 8000cd4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cd8:	bf18      	it	ne
 8000cda:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cde:	d1d8      	bne.n	8000c92 <__aeabi_fmul+0xc6>
 8000ce0:	ea80 0001 	eor.w	r0, r0, r1
 8000ce4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f090 0f00 	teq	r0, #0
 8000cee:	bf17      	itett	ne
 8000cf0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	f091 0f00 	teqne	r1, #0
 8000cfa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cfe:	d014      	beq.n	8000d2a <__aeabi_fmul+0x15e>
 8000d00:	ea92 0f0c 	teq	r2, ip
 8000d04:	d101      	bne.n	8000d0a <__aeabi_fmul+0x13e>
 8000d06:	0242      	lsls	r2, r0, #9
 8000d08:	d10f      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d0a:	ea93 0f0c 	teq	r3, ip
 8000d0e:	d103      	bne.n	8000d18 <__aeabi_fmul+0x14c>
 8000d10:	024b      	lsls	r3, r1, #9
 8000d12:	bf18      	it	ne
 8000d14:	4608      	movne	r0, r1
 8000d16:	d108      	bne.n	8000d2a <__aeabi_fmul+0x15e>
 8000d18:	ea80 0001 	eor.w	r0, r0, r1
 8000d1c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000d20:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d24:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d28:	4770      	bx	lr
 8000d2a:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d2e:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fdiv>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d069      	beq.n	8000e20 <__aeabi_fdiv+0xec>
 8000d4c:	eba2 0203 	sub.w	r2, r2, r3
 8000d50:	ea80 0c01 	eor.w	ip, r0, r1
 8000d54:	0249      	lsls	r1, r1, #9
 8000d56:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d5a:	d037      	beq.n	8000dcc <__aeabi_fdiv+0x98>
 8000d5c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d60:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d64:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	bf38      	it	cc
 8000d70:	005b      	lslcc	r3, r3, #1
 8000d72:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d76:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	bf24      	itt	cs
 8000d7e:	1a5b      	subcs	r3, r3, r1
 8000d80:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d84:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d88:	bf24      	itt	cs
 8000d8a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d92:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d96:	bf24      	itt	cs
 8000d98:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000da0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000daa:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dae:	011b      	lsls	r3, r3, #4
 8000db0:	bf18      	it	ne
 8000db2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db6:	d1e0      	bne.n	8000d7a <__aeabi_fdiv+0x46>
 8000db8:	2afd      	cmp	r2, #253	@ 0xfd
 8000dba:	f63f af50 	bhi.w	8000c5e <__aeabi_fmul+0x92>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc4:	bf08      	it	eq
 8000dc6:	f020 0001 	biceq.w	r0, r0, #1
 8000dca:	4770      	bx	lr
 8000dcc:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dd0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd4:	327f      	adds	r2, #127	@ 0x7f
 8000dd6:	bfc2      	ittt	gt
 8000dd8:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000ddc:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de0:	4770      	bxgt	lr
 8000de2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de6:	f04f 0300 	mov.w	r3, #0
 8000dea:	3a01      	subs	r2, #1
 8000dec:	e737      	b.n	8000c5e <__aeabi_fmul+0x92>
 8000dee:	f092 0f00 	teq	r2, #0
 8000df2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000df6:	bf02      	ittt	eq
 8000df8:	0040      	lsleq	r0, r0, #1
 8000dfa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dfe:	3a01      	subeq	r2, #1
 8000e00:	d0f9      	beq.n	8000df6 <__aeabi_fdiv+0xc2>
 8000e02:	ea40 000c 	orr.w	r0, r0, ip
 8000e06:	f093 0f00 	teq	r3, #0
 8000e0a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e0e:	bf02      	ittt	eq
 8000e10:	0049      	lsleq	r1, r1, #1
 8000e12:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e16:	3b01      	subeq	r3, #1
 8000e18:	d0f9      	beq.n	8000e0e <__aeabi_fdiv+0xda>
 8000e1a:	ea41 010c 	orr.w	r1, r1, ip
 8000e1e:	e795      	b.n	8000d4c <__aeabi_fdiv+0x18>
 8000e20:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e24:	ea92 0f0c 	teq	r2, ip
 8000e28:	d108      	bne.n	8000e3c <__aeabi_fdiv+0x108>
 8000e2a:	0242      	lsls	r2, r0, #9
 8000e2c:	f47f af7d 	bne.w	8000d2a <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	f47f af70 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e776      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e3c:	ea93 0f0c 	teq	r3, ip
 8000e40:	d104      	bne.n	8000e4c <__aeabi_fdiv+0x118>
 8000e42:	024b      	lsls	r3, r1, #9
 8000e44:	f43f af4c 	beq.w	8000ce0 <__aeabi_fmul+0x114>
 8000e48:	4608      	mov	r0, r1
 8000e4a:	e76e      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1ca      	bne.n	8000dee <__aeabi_fdiv+0xba>
 8000e58:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e5c:	f47f af5c 	bne.w	8000d18 <__aeabi_fmul+0x14c>
 8000e60:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e64:	f47f af3c 	bne.w	8000ce0 <__aeabi_fmul+0x114>
 8000e68:	e75f      	b.n	8000d2a <__aeabi_fmul+0x15e>
 8000e6a:	bf00      	nop

08000e6c <__gesf2>:
 8000e6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000e70:	e006      	b.n	8000e80 <__cmpsf2+0x4>
 8000e72:	bf00      	nop

08000e74 <__lesf2>:
 8000e74:	f04f 0c01 	mov.w	ip, #1
 8000e78:	e002      	b.n	8000e80 <__cmpsf2+0x4>
 8000e7a:	bf00      	nop

08000e7c <__cmpsf2>:
 8000e7c:	f04f 0c01 	mov.w	ip, #1
 8000e80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e84:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e90:	bf18      	it	ne
 8000e92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e96:	d011      	beq.n	8000ebc <__cmpsf2+0x40>
 8000e98:	b001      	add	sp, #4
 8000e9a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9e:	bf18      	it	ne
 8000ea0:	ea90 0f01 	teqne	r0, r1
 8000ea4:	bf58      	it	pl
 8000ea6:	ebb2 0003 	subspl.w	r0, r2, r3
 8000eaa:	bf88      	it	hi
 8000eac:	17c8      	asrhi	r0, r1, #31
 8000eae:	bf38      	it	cc
 8000eb0:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb4:	bf18      	it	ne
 8000eb6:	f040 0001 	orrne.w	r0, r0, #1
 8000eba:	4770      	bx	lr
 8000ebc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ec0:	d102      	bne.n	8000ec8 <__cmpsf2+0x4c>
 8000ec2:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec6:	d105      	bne.n	8000ed4 <__cmpsf2+0x58>
 8000ec8:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ecc:	d1e4      	bne.n	8000e98 <__cmpsf2+0x1c>
 8000ece:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ed2:	d0e1      	beq.n	8000e98 <__cmpsf2+0x1c>
 8000ed4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__aeabi_cfrcmple>:
 8000edc:	4684      	mov	ip, r0
 8000ede:	4608      	mov	r0, r1
 8000ee0:	4661      	mov	r1, ip
 8000ee2:	e7ff      	b.n	8000ee4 <__aeabi_cfcmpeq>

08000ee4 <__aeabi_cfcmpeq>:
 8000ee4:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee6:	f7ff ffc9 	bl	8000e7c <__cmpsf2>
 8000eea:	2800      	cmp	r0, #0
 8000eec:	bf48      	it	mi
 8000eee:	f110 0f00 	cmnmi.w	r0, #0
 8000ef2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef4 <__aeabi_fcmpeq>:
 8000ef4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef8:	f7ff fff4 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000efc:	bf0c      	ite	eq
 8000efe:	2001      	moveq	r0, #1
 8000f00:	2000      	movne	r0, #0
 8000f02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f06:	bf00      	nop

08000f08 <__aeabi_fcmplt>:
 8000f08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f0c:	f7ff ffea 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f10:	bf34      	ite	cc
 8000f12:	2001      	movcc	r0, #1
 8000f14:	2000      	movcs	r0, #0
 8000f16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f1a:	bf00      	nop

08000f1c <__aeabi_fcmple>:
 8000f1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f20:	f7ff ffe0 	bl	8000ee4 <__aeabi_cfcmpeq>
 8000f24:	bf94      	ite	ls
 8000f26:	2001      	movls	r0, #1
 8000f28:	2000      	movhi	r0, #0
 8000f2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2e:	bf00      	nop

08000f30 <__aeabi_fcmpge>:
 8000f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f34:	f7ff ffd2 	bl	8000edc <__aeabi_cfrcmple>
 8000f38:	bf94      	ite	ls
 8000f3a:	2001      	movls	r0, #1
 8000f3c:	2000      	movhi	r0, #0
 8000f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f42:	bf00      	nop

08000f44 <__aeabi_fcmpgt>:
 8000f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f48:	f7ff ffc8 	bl	8000edc <__aeabi_cfrcmple>
 8000f4c:	bf34      	ite	cc
 8000f4e:	2001      	movcc	r0, #1
 8000f50:	2000      	movcs	r0, #0
 8000f52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f56:	bf00      	nop

08000f58 <__aeabi_f2iz>:
 8000f58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000f60:	d30f      	bcc.n	8000f82 <__aeabi_f2iz+0x2a>
 8000f62:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000f66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f6a:	d90d      	bls.n	8000f88 <__aeabi_f2iz+0x30>
 8000f6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f70:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f74:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000f78:	fa23 f002 	lsr.w	r0, r3, r2
 8000f7c:	bf18      	it	ne
 8000f7e:	4240      	negne	r0, r0
 8000f80:	4770      	bx	lr
 8000f82:	f04f 0000 	mov.w	r0, #0
 8000f86:	4770      	bx	lr
 8000f88:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_f2iz+0x3a>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	d105      	bne.n	8000f9e <__aeabi_f2iz+0x46>
 8000f92:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000f96:	bf08      	it	eq
 8000f98:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000f9c:	4770      	bx	lr
 8000f9e:	f04f 0000 	mov.w	r0, #0
 8000fa2:	4770      	bx	lr

08000fa4 <__aeabi_f2uiz>:
 8000fa4:	0042      	lsls	r2, r0, #1
 8000fa6:	d20e      	bcs.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fa8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fac:	d30b      	bcc.n	8000fc6 <__aeabi_f2uiz+0x22>
 8000fae:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb6:	d409      	bmi.n	8000fcc <__aeabi_f2uiz+0x28>
 8000fb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fbc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	f04f 0000 	mov.w	r0, #0
 8000fca:	4770      	bx	lr
 8000fcc:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fd0:	d101      	bne.n	8000fd6 <__aeabi_f2uiz+0x32>
 8000fd2:	0242      	lsls	r2, r0, #9
 8000fd4:	d102      	bne.n	8000fdc <__aeabi_f2uiz+0x38>
 8000fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8000fda:	4770      	bx	lr
 8000fdc:	f04f 0000 	mov.w	r0, #0
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <HAL_TIM_IC_CaptureCallback>:
 */


#include "main.h"
#include "motor_control.h"
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
		if(htim->Instance == TIM2 ){
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff4:	d131      	bne.n	800105a <HAL_TIM_IC_CaptureCallback+0x76>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff6:	b672      	cpsid	i
}
 8000ff8:	bf00      	nop
			__disable_irq();
			uint8_t channel = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]
			if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1 && float_W ) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	7f1b      	ldrb	r3, [r3, #28]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d10a      	bne.n	800101c <HAL_TIM_IC_CaptureCallback+0x38>
 8001006:	4b17      	ldr	r3, [pc, #92]	@ (8001064 <HAL_TIM_IC_CaptureCallback+0x80>)
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d006      	beq.n	800101c <HAL_TIM_IC_CaptureCallback+0x38>
				channel = 1;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
				zero_crossing(channel);
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	4618      	mov	r0, r3
 8001016:	f001 f903 	bl	8002220 <zero_crossing>
 800101a:	e01c      	b.n	8001056 <HAL_TIM_IC_CaptureCallback+0x72>
			}
			else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2 && float_U) {
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	7f1b      	ldrb	r3, [r3, #28]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d10a      	bne.n	800103a <HAL_TIM_IC_CaptureCallback+0x56>
 8001024:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <HAL_TIM_IC_CaptureCallback+0x84>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d006      	beq.n	800103a <HAL_TIM_IC_CaptureCallback+0x56>
				channel = 2;
 800102c:	2302      	movs	r3, #2
 800102e:	73fb      	strb	r3, [r7, #15]
				zero_crossing(channel);
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	4618      	mov	r0, r3
 8001034:	f001 f8f4 	bl	8002220 <zero_crossing>
 8001038:	e00d      	b.n	8001056 <HAL_TIM_IC_CaptureCallback+0x72>
			}
			else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3 && float_V) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7f1b      	ldrb	r3, [r3, #28]
 800103e:	2b04      	cmp	r3, #4
 8001040:	d109      	bne.n	8001056 <HAL_TIM_IC_CaptureCallback+0x72>
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_TIM_IC_CaptureCallback+0x88>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <HAL_TIM_IC_CaptureCallback+0x72>
				channel = 3;
 800104a:	2303      	movs	r3, #3
 800104c:	73fb      	strb	r3, [r7, #15]
				zero_crossing(channel);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4618      	mov	r0, r3
 8001052:	f001 f8e5 	bl	8002220 <zero_crossing>
  __ASM volatile ("cpsie i" : : : "memory");
 8001056:	b662      	cpsie	i
}
 8001058:	bf00      	nop
		if(htim->Instance == TIM1){
			//pwm_input(htim);
		}


}
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200002a3 	.word	0x200002a3
 8001068:	200002a4 	.word	0x200002a4
 800106c:	200002a5 	.word	0x200002a5

08001070 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) {
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d105      	bne.n	800108e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	7f1b      	ldrb	r3, [r3, #28]
 8001086:	2b04      	cmp	r3, #4
 8001088:	d101      	bne.n	800108e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	    //TIM3->CCER &= ~(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E);
		event_delay();
 800108a:	f002 f85f 	bl	800314c <event_delay>


	}
	if (htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a10      	ldr	r2, [pc, #64]	@ (80010d4 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d109      	bne.n	80010ac <HAL_TIM_OC_DelayElapsedCallback+0x3c>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	7f1b      	ldrb	r3, [r3, #28]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d105      	bne.n	80010ac <HAL_TIM_OC_DelayElapsedCallback+0x3c>
  __ASM volatile ("cpsid i" : : : "memory");
 80010a0:	b672      	cpsid	i
}
 80010a2:	bf00      	nop
		__disable_irq();
		pi_control();
 80010a4:	f001 fb88 	bl	80027b8 <pi_control>
  __ASM volatile ("cpsie i" : : : "memory");
 80010a8:	b662      	cpsie	i
}
 80010aa:	bf00      	nop
		__enable_irq();
	}
	if(htim->Instance == TIM4 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2){
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a08      	ldr	r2, [pc, #32]	@ (80010d4 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d109      	bne.n	80010ca <HAL_TIM_OC_DelayElapsedCallback+0x5a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	7f1b      	ldrb	r3, [r3, #28]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d105      	bne.n	80010ca <HAL_TIM_OC_DelayElapsedCallback+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80010be:	b672      	cpsid	i
}
 80010c0:	bf00      	nop
		__disable_irq();
		update_pwm_startup_foc();
 80010c2:	f001 fdef 	bl	8002ca4 <update_pwm_startup_foc>
  __ASM volatile ("cpsie i" : : : "memory");
 80010c6:	b662      	cpsie	i
}
 80010c8:	bf00      	nop
		__enable_irq();
	}


}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40000800 	.word	0x40000800

080010d8 <clearRxBuffer>:
volatile uint8_t running_cmd_ack = 0;

ConfigStatus executeCommand(CommandAction action, CommandParam param, char* value);
const char* configStatusToString(ConfigStatus status);

void clearRxBuffer(void) {
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
    memset(rx_buffer, 0, BUFFER_SIZE);
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <clearRxBuffer+0x18>)
 80010e2:	f006 f8c5 	bl	8007270 <memset>
    rx_index = 0;
 80010e6:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <clearRxBuffer+0x1c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	2000009c 	.word	0x2000009c
 80010f4:	20000094 	.word	0x20000094

080010f8 <processCommand>:

void processCommand(char *cmd) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b094      	sub	sp, #80	@ 0x50
 80010fc:	af02      	add	r7, sp, #8
 80010fe:	6078      	str	r0, [r7, #4]
	CommandStatus status = CMD_UNKNOWN;
 8001100:	2301      	movs	r3, #1
 8001102:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if(cmd[0] != ':'){
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b3a      	cmp	r3, #58	@ 0x3a
 800110c:	d003      	beq.n	8001116 <processCommand+0x1e>
		transmitirUART("ERROR: Invalid format\r\n");
 800110e:	4840      	ldr	r0, [pc, #256]	@ (8001210 <processCommand+0x118>)
 8001110:	f000 f984 	bl	800141c <transmitirUART>
		return;
 8001114:	e078      	b.n	8001208 <processCommand+0x110>

	char action_str[16];
	char param_str[16];
	char value_str[16];

	int parsed = sscanf(cmd, ":%[^:]:%[^:]:%s", action_str, param_str, value_str);
 8001116:	f107 011c 	add.w	r1, r7, #28
 800111a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	460b      	mov	r3, r1
 8001126:	493b      	ldr	r1, [pc, #236]	@ (8001214 <processCommand+0x11c>)
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f006 f83b 	bl	80071a4 <siscanf>
 800112e:	6438      	str	r0, [r7, #64]	@ 0x40

	if(parsed < 2 && (strcmp(action_str,"RUN")!=0 && strcmp(action_str,"STP{")!=0)){
 8001130:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001132:	2b01      	cmp	r3, #1
 8001134:	dc18      	bgt.n	8001168 <processCommand+0x70>
 8001136:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800113a:	4937      	ldr	r1, [pc, #220]	@ (8001218 <processCommand+0x120>)
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f807 	bl	8000150 <strcmp>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00f      	beq.n	8001168 <processCommand+0x70>
 8001148:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800114c:	4933      	ldr	r1, [pc, #204]	@ (800121c <processCommand+0x124>)
 800114e:	4618      	mov	r0, r3
 8001150:	f7fe fffe 	bl	8000150 <strcmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d006      	beq.n	8001168 <processCommand+0x70>
		transmitirUART("ERROR: Invalid command\r\n");
 800115a:	4831      	ldr	r0, [pc, #196]	@ (8001220 <processCommand+0x128>)
 800115c:	f000 f95e 	bl	800141c <transmitirUART>
		app_state = IDLE;
 8001160:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <processCommand+0x12c>)
 8001162:	2200      	movs	r2, #0
 8001164:	701a      	strb	r2, [r3, #0]
		return;
 8001166:	e04f      	b.n	8001208 <processCommand+0x110>
	}
	CommandAction action = parseAction(action_str);
 8001168:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800116c:	4618      	mov	r0, r3
 800116e:	f000 f915 	bl	800139c <parseAction>
 8001172:	4603      	mov	r3, r0
 8001174:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if(action == ACTION_UNKNOWN){
 8001178:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800117c:	2b03      	cmp	r3, #3
 800117e:	d106      	bne.n	800118e <processCommand+0x96>
		transmitirUART("ERROR: Unknown action\r\n");
 8001180:	4829      	ldr	r0, [pc, #164]	@ (8001228 <processCommand+0x130>)
 8001182:	f000 f94b 	bl	800141c <transmitirUART>
		app_state = IDLE;
 8001186:	4b27      	ldr	r3, [pc, #156]	@ (8001224 <processCommand+0x12c>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]

		return;
 800118c:	e03c      	b.n	8001208 <processCommand+0x110>
	}
	CommandParam param = parseParameter(param_str);
 800118e:	f107 031c 	add.w	r3, r7, #28
 8001192:	4618      	mov	r0, r3
 8001194:	f000 f8d8 	bl	8001348 <parseParameter>
 8001198:	4603      	mov	r3, r0
 800119a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if(param == PARAM_UNKNOWN && (action != ACTION_RUN && action != ACTION_STOP)){
 800119e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d10e      	bne.n	80011c4 <processCommand+0xcc>
 80011a6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	d00a      	beq.n	80011c4 <processCommand+0xcc>
 80011ae:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80011b2:	2b05      	cmp	r3, #5
 80011b4:	d006      	beq.n	80011c4 <processCommand+0xcc>
		transmitirUART("ERROR: Unknown parameter\r\n");
 80011b6:	481d      	ldr	r0, [pc, #116]	@ (800122c <processCommand+0x134>)
 80011b8:	f000 f930 	bl	800141c <transmitirUART>
		app_state = IDLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <processCommand+0x12c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]

		return;
 80011c2:	e021      	b.n	8001208 <processCommand+0x110>
	}
	ConfigStatus result = executeCommand(action, param, parsed == 3? value_str : NULL);
 80011c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d102      	bne.n	80011d0 <processCommand+0xd8>
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	e000      	b.n	80011d2 <processCommand+0xda>
 80011d0:	2300      	movs	r3, #0
 80011d2:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 80011d6:	f897 003f 	ldrb.w	r0, [r7, #63]	@ 0x3f
 80011da:	461a      	mov	r2, r3
 80011dc:	f000 f842 	bl	8001264 <executeCommand>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	if(action == ACTION_SET) {
 80011e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d10c      	bne.n	8001208 <processCommand+0x110>
		set_cmd_received_ack = 1;
 80011ee:	4b10      	ldr	r3, [pc, #64]	@ (8001230 <processCommand+0x138>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	701a      	strb	r2, [r3, #0]

		transmitirUART(configStatusToString(result),NULL);
 80011f4:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 f81b 	bl	8001234 <configStatusToString>
 80011fe:	4603      	mov	r3, r0
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f90a 	bl	800141c <transmitirUART>
	}



}
 8001208:	3748      	adds	r7, #72	@ 0x48
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	08008f28 	.word	0x08008f28
 8001214:	08008f40 	.word	0x08008f40
 8001218:	08008f50 	.word	0x08008f50
 800121c:	08008f54 	.word	0x08008f54
 8001220:	08008f5c 	.word	0x08008f5c
 8001224:	20000ba6 	.word	0x20000ba6
 8001228:	08008f78 	.word	0x08008f78
 800122c:	08008f90 	.word	0x08008f90
 8001230:	200000be 	.word	0x200000be

08001234 <configStatusToString>:
const char *configStatusToString(ConfigStatus status){
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
			[CONFIG_OK] = "CONFIG_OK\r\n",
			[CONFIG_ERROR_OVERLIMIT] = "CONFIG_ERROR_OL",
			[CONFIG_ERROR_UNDERLIMIT] = "CONFIG_ERROR_UL",
			[CONFIG_ERROR_NaN] = "CONFIG_ERROR_NaN",
	};
	if(status >= CONFIG_OK && status <= CONFIG_ERROR_NaN){
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	2b03      	cmp	r3, #3
 8001242:	d804      	bhi.n	800124e <configStatusToString+0x1a>
		return status_strings[status];
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4a05      	ldr	r2, [pc, #20]	@ (800125c <configStatusToString+0x28>)
 8001248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800124c:	e000      	b.n	8001250 <configStatusToString+0x1c>
	}
	return "CONFIG_UNKNOWN";
 800124e:	4b04      	ldr	r3, [pc, #16]	@ (8001260 <configStatusToString+0x2c>)
}
 8001250:	4618      	mov	r0, r3
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000000 	.word	0x20000000
 8001260:	08008fac 	.word	0x08008fac

08001264 <executeCommand>:
ConfigStatus executeCommand(CommandAction action, CommandParam param,  char* value){
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	603a      	str	r2, [r7, #0]
 800126e:	71fb      	strb	r3, [r7, #7]
 8001270:	460b      	mov	r3, r1
 8001272:	71bb      	strb	r3, [r7, #6]
	ConfigStatus result = CONFIG_OK;
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
	switch(param){
 8001278:	79bb      	ldrb	r3, [r7, #6]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d85b      	bhi.n	8001336 <executeCommand+0xd2>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <executeCommand+0x20>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	08001295 	.word	0x08001295
 8001288:	080012d9 	.word	0x080012d9
 800128c:	080012f5 	.word	0x080012f5
 8001290:	08001311 	.word	0x08001311
	case PARAM_PWM_FREQ:
		switch(action){
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d01c      	beq.n	80012d4 <executeCommand+0x70>
 800129a:	2b02      	cmp	r3, #2
 800129c:	dc46      	bgt.n	800132c <executeCommand+0xc8>
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d002      	beq.n	80012a8 <executeCommand+0x44>
 80012a2:	2b01      	cmp	r3, #1
 80012a4:	d00c      	beq.n	80012c0 <executeCommand+0x5c>
			break;
		case ACTION_RESET:
			break;

		}
		break;
 80012a6:	e041      	b.n	800132c <executeCommand+0xc8>
				uint16_t new_freq = atoi(value);
 80012a8:	6838      	ldr	r0, [r7, #0]
 80012aa:	f005 fef1 	bl	8007090 <atoi>
 80012ae:	4603      	mov	r3, r0
 80012b0:	817b      	strh	r3, [r7, #10]
				result = set_pwm_freq(new_freq);
 80012b2:	897b      	ldrh	r3, [r7, #10]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f000 f981 	bl	80015bc <set_pwm_freq>
 80012ba:	4603      	mov	r3, r0
 80012bc:	73fb      	strb	r3, [r7, #15]
			break;
 80012be:	e00a      	b.n	80012d6 <executeCommand+0x72>
				uint16_t act_freq = get_pwm_freq();
 80012c0:	f000 f972 	bl	80015a8 <get_pwm_freq>
 80012c4:	4603      	mov	r3, r0
 80012c6:	81bb      	strh	r3, [r7, #12]
				transmitirUART("PWM FREQ: %d Hz\r\n",act_freq);
 80012c8:	89bb      	ldrh	r3, [r7, #12]
 80012ca:	4619      	mov	r1, r3
 80012cc:	481c      	ldr	r0, [pc, #112]	@ (8001340 <executeCommand+0xdc>)
 80012ce:	f000 f8a5 	bl	800141c <transmitirUART>
			break;
 80012d2:	e000      	b.n	80012d6 <executeCommand+0x72>
			break;
 80012d4:	bf00      	nop
		break;
 80012d6:	e029      	b.n	800132c <executeCommand+0xc8>
		case PARAM_CURRENT_LIMIT:
			switch(action){
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d006      	beq.n	80012ec <executeCommand+0x88>
 80012de:	2b02      	cmp	r3, #2
 80012e0:	dc26      	bgt.n	8001330 <executeCommand+0xcc>
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <executeCommand+0x8c>
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d122      	bne.n	8001330 <executeCommand+0xcc>
			case ACTION_SET:
				break;
			case ACTION_GET:
				break;
 80012ea:	e002      	b.n	80012f2 <executeCommand+0x8e>
			case ACTION_RESET:
				break;
 80012ec:	bf00      	nop
 80012ee:	e01f      	b.n	8001330 <executeCommand+0xcc>
				break;
 80012f0:	bf00      	nop

			}
			break;
 80012f2:	e01d      	b.n	8001330 <executeCommand+0xcc>
		case PARAM_TEMP_LIMIT:
			switch(action){
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d006      	beq.n	8001308 <executeCommand+0xa4>
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	dc1a      	bgt.n	8001334 <executeCommand+0xd0>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <executeCommand+0xa8>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d116      	bne.n	8001334 <executeCommand+0xd0>
			case ACTION_SET:
				break;
			case ACTION_GET:
				break;
 8001306:	e002      	b.n	800130e <executeCommand+0xaa>
			case ACTION_RESET:
				break;
 8001308:	bf00      	nop
 800130a:	e013      	b.n	8001334 <executeCommand+0xd0>
				break;
 800130c:	bf00      	nop

			}
			break;
 800130e:	e011      	b.n	8001334 <executeCommand+0xd0>
			case PARAM_UNKNOWN:
				switch(action){
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b04      	cmp	r3, #4
 8001314:	d002      	beq.n	800131c <executeCommand+0xb8>
 8001316:	2b05      	cmp	r3, #5
 8001318:	d006      	beq.n	8001328 <executeCommand+0xc4>
					break;

				case ACTION_STOP:
					break;
				}
				break;
 800131a:	e00c      	b.n	8001336 <executeCommand+0xd2>
					running_cmd_ack =1;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <executeCommand+0xe0>)
 800131e:	2201      	movs	r2, #1
 8001320:	701a      	strb	r2, [r3, #0]
					foc_startup();
 8001322:	f001 fc75 	bl	8002c10 <foc_startup>
					break;
 8001326:	e000      	b.n	800132a <executeCommand+0xc6>
					break;
 8001328:	bf00      	nop
				break;
 800132a:	e004      	b.n	8001336 <executeCommand+0xd2>
		break;
 800132c:	bf00      	nop
 800132e:	e002      	b.n	8001336 <executeCommand+0xd2>
			break;
 8001330:	bf00      	nop
 8001332:	e000      	b.n	8001336 <executeCommand+0xd2>
			break;
 8001334:	bf00      	nop
	}
	return result;
 8001336:	7bfb      	ldrb	r3, [r7, #15]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	08008fbc 	.word	0x08008fbc
 8001344:	200000bf 	.word	0x200000bf

08001348 <parseParameter>:

CommandParam parseParameter(char *param_str){
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	if(strcmp(param_str, "PWM_FREQ") == 0) return PARAM_PWM_FREQ;
 8001350:	490f      	ldr	r1, [pc, #60]	@ (8001390 <parseParameter+0x48>)
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7fe fefc 	bl	8000150 <strcmp>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <parseParameter+0x1a>
 800135e:	2300      	movs	r3, #0
 8001360:	e012      	b.n	8001388 <parseParameter+0x40>
	if(strcmp(param_str, "CURRENT_LIMIT") == 0) return PARAM_CURRENT_LIMIT;
 8001362:	490c      	ldr	r1, [pc, #48]	@ (8001394 <parseParameter+0x4c>)
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7fe fef3 	bl	8000150 <strcmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d101      	bne.n	8001374 <parseParameter+0x2c>
 8001370:	2301      	movs	r3, #1
 8001372:	e009      	b.n	8001388 <parseParameter+0x40>
	if(strcmp(param_str, "TEMP_LIMIT") == 0) return PARAM_TEMP_LIMIT;
 8001374:	4908      	ldr	r1, [pc, #32]	@ (8001398 <parseParameter+0x50>)
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7fe feea 	bl	8000150 <strcmp>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <parseParameter+0x3e>
 8001382:	2302      	movs	r3, #2
 8001384:	e000      	b.n	8001388 <parseParameter+0x40>
	return PARAM_UNKNOWN;
 8001386:	2303      	movs	r3, #3

}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	08008fd0 	.word	0x08008fd0
 8001394:	08008fdc 	.word	0x08008fdc
 8001398:	08008fec 	.word	0x08008fec

0800139c <parseAction>:
CommandAction parseAction(char* action_str){
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if(strcmp( action_str, "SET") == 0) return ACTION_SET;
 80013a4:	4918      	ldr	r1, [pc, #96]	@ (8001408 <parseAction+0x6c>)
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7fe fed2 	bl	8000150 <strcmp>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <parseAction+0x1a>
 80013b2:	2300      	movs	r3, #0
 80013b4:	e024      	b.n	8001400 <parseAction+0x64>
	if(strcmp( action_str, "GET") == 0) return ACTION_GET;
 80013b6:	4915      	ldr	r1, [pc, #84]	@ (800140c <parseAction+0x70>)
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7fe fec9 	bl	8000150 <strcmp>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d101      	bne.n	80013c8 <parseAction+0x2c>
 80013c4:	2301      	movs	r3, #1
 80013c6:	e01b      	b.n	8001400 <parseAction+0x64>
	if(strcmp( action_str, "RESET") == 0) return ACTION_RESET;
 80013c8:	4911      	ldr	r1, [pc, #68]	@ (8001410 <parseAction+0x74>)
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7fe fec0 	bl	8000150 <strcmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <parseAction+0x3e>
 80013d6:	2302      	movs	r3, #2
 80013d8:	e012      	b.n	8001400 <parseAction+0x64>
	if(strcmp (action_str, "RUN") == 0) return ACTION_RUN;
 80013da:	490e      	ldr	r1, [pc, #56]	@ (8001414 <parseAction+0x78>)
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f7fe feb7 	bl	8000150 <strcmp>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d101      	bne.n	80013ec <parseAction+0x50>
 80013e8:	2304      	movs	r3, #4
 80013ea:	e009      	b.n	8001400 <parseAction+0x64>
	if(strcmp(action_str, "STOP") == 0) return ACTION_STOP;
 80013ec:	490a      	ldr	r1, [pc, #40]	@ (8001418 <parseAction+0x7c>)
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7fe feae 	bl	8000150 <strcmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <parseAction+0x62>
 80013fa:	2305      	movs	r3, #5
 80013fc:	e000      	b.n	8001400 <parseAction+0x64>
	return ACTION_UNKNOWN;
 80013fe:	2303      	movs	r3, #3
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	08008ff8 	.word	0x08008ff8
 800140c:	08008ffc 	.word	0x08008ffc
 8001410:	08009000 	.word	0x08009000
 8001414:	08008f50 	.word	0x08008f50
 8001418:	08009008 	.word	0x08009008

0800141c <transmitirUART>:
void transmitirUART(const char* formato, ...){
 800141c:	b40f      	push	{r0, r1, r2, r3}
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, formato);
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	607b      	str	r3, [r7, #4]
	static char buffer[64];
	vsnprintf(buffer, sizeof(buffer), formato, args);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	2140      	movs	r1, #64	@ 0x40
 8001430:	480e      	ldr	r0, [pc, #56]	@ (800146c <transmitirUART+0x50>)
 8001432:	f005 ff0f 	bl	8007254 <vsniprintf>


	while(dma_tx_busy);
 8001436:	bf00      	nop
 8001438:	4b0d      	ldr	r3, [pc, #52]	@ (8001470 <transmitirUART+0x54>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1fa      	bne.n	8001438 <transmitirUART+0x1c>
	dma_tx_busy = 1;
 8001442:	4b0b      	ldr	r3, [pc, #44]	@ (8001470 <transmitirUART+0x54>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart2, (uint8_t*)buffer, strlen(buffer));
 8001448:	4808      	ldr	r0, [pc, #32]	@ (800146c <transmitirUART+0x50>)
 800144a:	f7fe fe8b 	bl	8000164 <strlen>
 800144e:	4603      	mov	r3, r0
 8001450:	b29b      	uxth	r3, r3
 8001452:	461a      	mov	r2, r3
 8001454:	4905      	ldr	r1, [pc, #20]	@ (800146c <transmitirUART+0x50>)
 8001456:	4807      	ldr	r0, [pc, #28]	@ (8001474 <transmitirUART+0x58>)
 8001458:	f005 f8b7 	bl	80065ca <HAL_UART_Transmit_IT>
	va_end(args);


}
 800145c:	bf00      	nop
 800145e:	3708      	adds	r7, #8
 8001460:	46bd      	mov	sp, r7
 8001462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001466:	b004      	add	sp, #16
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	200000c0 	.word	0x200000c0
 8001470:	200000bc 	.word	0x200000bc
 8001474:	20000204 	.word	0x20000204

08001478 <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART2){
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a05      	ldr	r2, [pc, #20]	@ (800149c <HAL_UART_TxCpltCallback+0x24>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d102      	bne.n	8001490 <HAL_UART_TxCpltCallback+0x18>
		dma_tx_busy = 0;
 800148a:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <HAL_UART_TxCpltCallback+0x28>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	}
}
 8001490:	bf00      	nop
 8001492:	370c      	adds	r7, #12
 8001494:	46bd      	mov	sp, r7
 8001496:	bc80      	pop	{r7}
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40004400 	.word	0x40004400
 80014a0:	200000bc 	.word	0x200000bc

080014a4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a23      	ldr	r2, [pc, #140]	@ (8001540 <HAL_UART_RxCpltCallback+0x9c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d140      	bne.n	8001538 <HAL_UART_RxCpltCallback+0x94>
        if (rx_data[0] == '\r' || rx_data[0] == '\n') {
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <HAL_UART_RxCpltCallback+0xa0>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b0d      	cmp	r3, #13
 80014bc:	d003      	beq.n	80014c6 <HAL_UART_RxCpltCallback+0x22>
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <HAL_UART_RxCpltCallback+0xa0>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b0a      	cmp	r3, #10
 80014c4:	d113      	bne.n	80014ee <HAL_UART_RxCpltCallback+0x4a>
            if (rx_index > 0) { // Verificar que haya datos
 80014c6:	4b20      	ldr	r3, [pc, #128]	@ (8001548 <HAL_UART_RxCpltCallback+0xa4>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d02f      	beq.n	800152e <HAL_UART_RxCpltCallback+0x8a>
                rx_buffer[rx_index] = '\0';
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_UART_RxCpltCallback+0xa4>)
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b1d      	ldr	r3, [pc, #116]	@ (800154c <HAL_UART_RxCpltCallback+0xa8>)
 80014d6:	2100      	movs	r1, #0
 80014d8:	5499      	strb	r1, [r3, r2]
                cmd_received_ack = 1;
 80014da:	4b1d      	ldr	r3, [pc, #116]	@ (8001550 <HAL_UART_RxCpltCallback+0xac>)
 80014dc:	2201      	movs	r2, #1
 80014de:	701a      	strb	r2, [r3, #0]
                app_state = PROCESS_COMMAND;
 80014e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001554 <HAL_UART_RxCpltCallback+0xb0>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	701a      	strb	r2, [r3, #0]
                rx_index = 0;
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_UART_RxCpltCallback+0xa4>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	701a      	strb	r2, [r3, #0]
            if (rx_index > 0) { // Verificar que haya datos
 80014ec:	e01f      	b.n	800152e <HAL_UART_RxCpltCallback+0x8a>
            }
        } else {
            if (rx_index < BUFFER_SIZE - 1) {
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <HAL_UART_RxCpltCallback+0xa4>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b1e      	cmp	r3, #30
 80014f4:	d80b      	bhi.n	800150e <HAL_UART_RxCpltCallback+0x6a>
                rx_buffer[rx_index++] = rx_data[0];
 80014f6:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_UART_RxCpltCallback+0xa4>)
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	b2d1      	uxtb	r1, r2
 80014fe:	4a12      	ldr	r2, [pc, #72]	@ (8001548 <HAL_UART_RxCpltCallback+0xa4>)
 8001500:	7011      	strb	r1, [r2, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_UART_RxCpltCallback+0xa0>)
 8001506:	7819      	ldrb	r1, [r3, #0]
 8001508:	4b10      	ldr	r3, [pc, #64]	@ (800154c <HAL_UART_RxCpltCallback+0xa8>)
 800150a:	5499      	strb	r1, [r3, r2]
 800150c:	e00f      	b.n	800152e <HAL_UART_RxCpltCallback+0x8a>
            } else {
                // Manejo de overflow
                while(dma_tx_busy); // Esperar transmisión previa
 800150e:	bf00      	nop
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <HAL_UART_RxCpltCallback+0xb4>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1fa      	bne.n	8001510 <HAL_UART_RxCpltCallback+0x6c>
                dma_tx_busy = 1;
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <HAL_UART_RxCpltCallback+0xb4>)
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
                static const char overflow_msg[] = "ERROR: 0x00\r\n";
                HAL_UART_Transmit_IT(&huart2, (uint8_t*)overflow_msg, sizeof(overflow_msg)-1);
 8001520:	220d      	movs	r2, #13
 8001522:	490e      	ldr	r1, [pc, #56]	@ (800155c <HAL_UART_RxCpltCallback+0xb8>)
 8001524:	480e      	ldr	r0, [pc, #56]	@ (8001560 <HAL_UART_RxCpltCallback+0xbc>)
 8001526:	f005 f850 	bl	80065ca <HAL_UART_Transmit_IT>
                clearRxBuffer();
 800152a:	f7ff fdd5 	bl	80010d8 <clearRxBuffer>
            }
        }
        HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800152e:	2201      	movs	r2, #1
 8001530:	4904      	ldr	r1, [pc, #16]	@ (8001544 <HAL_UART_RxCpltCallback+0xa0>)
 8001532:	480b      	ldr	r0, [pc, #44]	@ (8001560 <HAL_UART_RxCpltCallback+0xbc>)
 8001534:	f005 f87e 	bl	8006634 <HAL_UART_Receive_IT>
    }
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40004400 	.word	0x40004400
 8001544:	20000098 	.word	0x20000098
 8001548:	20000094 	.word	0x20000094
 800154c:	2000009c 	.word	0x2000009c
 8001550:	200000bd 	.word	0x200000bd
 8001554:	20000ba6 	.word	0x20000ba6
 8001558:	200000bc 	.word	0x200000bc
 800155c:	0800905c 	.word	0x0800905c
 8001560:	20000204 	.word	0x20000204

08001564 <update_all_esc>:

	current_esc_params.crc32 = compute_crc32(&current_esc_params);

}

void update_all_esc(){
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
	uint32_t tim_arr = CPU_clock / (2 * current_esc_params.pwm_freq_hz);
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <update_all_esc+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <update_all_esc+0x38>)
 8001570:	8892      	ldrh	r2, [r2, #4]
 8001572:	0052      	lsls	r2, r2, #1
 8001574:	fbb3 f3f2 	udiv	r3, r3, r2
 8001578:	607b      	str	r3, [r7, #4]
	TIM1 -> PSC = 0;
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <update_all_esc+0x3c>)
 800157c:	2200      	movs	r2, #0
 800157e:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM1->ARR = tim_arr;
 8001580:	4a07      	ldr	r2, [pc, #28]	@ (80015a0 <update_all_esc+0x3c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	62d3      	str	r3, [r2, #44]	@ 0x2c

	esc_config_done = 1;
 8001586:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <update_all_esc+0x40>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	bc80      	pop	{r7}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	0800906c 	.word	0x0800906c
 800159c:	20000100 	.word	0x20000100
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	20000121 	.word	0x20000121

080015a8 <get_pwm_freq>:
						(uint32_t*)params, (sizeof(ESCparams) - sizeof(uint32_t)) /4 );

	return crc;
}

uint16_t get_pwm_freq(){
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
	return current_esc_params.pwm_freq_hz;
 80015ac:	4b02      	ldr	r3, [pc, #8]	@ (80015b8 <get_pwm_freq+0x10>)
 80015ae:	889b      	ldrh	r3, [r3, #4]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bc80      	pop	{r7}
 80015b6:	4770      	bx	lr
 80015b8:	20000100 	.word	0x20000100

080015bc <set_pwm_freq>:

ConfigStatus set_pwm_freq(uint16_t new_freq){
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]

	if(new_freq < ESC_min_pwm_freq) return CONFIG_ERROR_UNDERLIMIT;
 80015c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d201      	bcs.n	80015d4 <set_pwm_freq+0x18>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e00a      	b.n	80015ea <set_pwm_freq+0x2e>
	if(new_freq > ESC_max_pwm_freq) return CONFIG_ERROR_OVERLIMIT;
 80015d4:	f645 52c0 	movw	r2, #24000	@ 0x5dc0
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	4293      	cmp	r3, r2
 80015dc:	d901      	bls.n	80015e2 <set_pwm_freq+0x26>
 80015de:	2301      	movs	r3, #1
 80015e0:	e003      	b.n	80015ea <set_pwm_freq+0x2e>
	current_esc_params.pwm_freq_hz = new_freq;
 80015e2:	4a04      	ldr	r2, [pc, #16]	@ (80015f4 <set_pwm_freq+0x38>)
 80015e4:	88fb      	ldrh	r3, [r7, #6]
 80015e6:	8093      	strh	r3, [r2, #4]

	return CONFIG_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000100 	.word	0x20000100

080015f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015fc:	f002 f886 	bl	800370c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001600:	f000 f836 	bl	8001670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001604:	f000 faa6 	bl	8001b54 <MX_GPIO_Init>
  MX_DMA_Init();
 8001608:	f000 fa86 	bl	8001b18 <MX_DMA_Init>
  MX_TIM4_Init();
 800160c:	f000 f9c8 	bl	80019a0 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001610:	f000 fa58 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001614:	f000 f93e 	bl	8001894 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001618:	f000 f884 	bl	8001724 <MX_TIM1_Init>
  MX_CRC_Init();
 800161c:	f000 f86e 	bl	80016fc <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001626:	480f      	ldr	r0, [pc, #60]	@ (8001664 <main+0x6c>)
 8001628:	f002 fdb8 	bl	800419c <HAL_GPIO_WritePin>
  TIM1->PSC = 0;
 800162c:	4b0e      	ldr	r3, [pc, #56]	@ (8001668 <main+0x70>)
 800162e:	2200      	movs	r2, #0
 8001630:	629a      	str	r2, [r3, #40]	@ 0x28
  TIM2->PSC = 399;
 8001632:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001636:	f240 128f 	movw	r2, #399	@ 0x18f
 800163a:	629a      	str	r2, [r3, #40]	@ 0x28
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800163c:	2100      	movs	r1, #0
 800163e:	480b      	ldr	r0, [pc, #44]	@ (800166c <main+0x74>)
 8001640:	f003 fe16 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8001644:	2104      	movs	r1, #4
 8001646:	4809      	ldr	r0, [pc, #36]	@ (800166c <main+0x74>)
 8001648:	f003 fe12 	bl	8005270 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 800164c:	2108      	movs	r1, #8
 800164e:	4807      	ldr	r0, [pc, #28]	@ (800166c <main+0x74>)
 8001650:	f003 fe0e 	bl	8005270 <HAL_TIM_IC_Start_IT>

  motor_detection();
 8001654:	f000 ff84 	bl	8002560 <motor_detection>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  handleState();
 8001658:	f001 fc62 	bl	8002f20 <handleState>
	  check_motor_status();
 800165c:	f000 fffc 	bl	8002658 <check_motor_status>
	  handleState();
 8001660:	bf00      	nop
 8001662:	e7f9      	b.n	8001658 <main+0x60>
 8001664:	40011000 	.word	0x40011000
 8001668:	40012c00 	.word	0x40012c00
 800166c:	20000174 	.word	0x20000174

08001670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b090      	sub	sp, #64	@ 0x40
 8001674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001676:	f107 0318 	add.w	r3, r7, #24
 800167a:	2228      	movs	r2, #40	@ 0x28
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f005 fdf6 	bl	8007270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001684:	1d3b      	adds	r3, r7, #4
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001692:	2301      	movs	r3, #1
 8001694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001696:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800169a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800169c:	2300      	movs	r3, #0
 800169e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016a4:	2302      	movs	r3, #2
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80016ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80016b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016b4:	f107 0318 	add.w	r3, r7, #24
 80016b8:	4618      	mov	r0, r3
 80016ba:	f002 fd87 	bl	80041cc <HAL_RCC_OscConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016c4:	f000 faca 	bl	8001c5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c8:	230f      	movs	r3, #15
 80016ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016cc:	2302      	movs	r3, #2
 80016ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d0:	2300      	movs	r3, #0
 80016d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f002 fff4 	bl	80046d0 <HAL_RCC_ClockConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ee:	f000 fab5 	bl	8001c5c <Error_Handler>
  }
}
 80016f2:	bf00      	nop
 80016f4:	3740      	adds	r7, #64	@ 0x40
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <MX_CRC_Init+0x20>)
 8001702:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <MX_CRC_Init+0x24>)
 8001704:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	@ (800171c <MX_CRC_Init+0x20>)
 8001708:	f002 f993 	bl	8003a32 <HAL_CRC_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001712:	f000 faa3 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	20000124 	.word	0x20000124
 8001720:	40023000 	.word	0x40023000

08001724 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b096      	sub	sp, #88	@ 0x58
 8001728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800172a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	605a      	str	r2, [r3, #4]
 8001734:	609a      	str	r2, [r3, #8]
 8001736:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001738:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]
 8001750:	611a      	str	r2, [r3, #16]
 8001752:	615a      	str	r2, [r3, #20]
 8001754:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2220      	movs	r2, #32
 800175a:	2100      	movs	r1, #0
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fd87 	bl	8007270 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001762:	4b4a      	ldr	r3, [pc, #296]	@ (800188c <MX_TIM1_Init+0x168>)
 8001764:	4a4a      	ldr	r2, [pc, #296]	@ (8001890 <MX_TIM1_Init+0x16c>)
 8001766:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001768:	4b48      	ldr	r3, [pc, #288]	@ (800188c <MX_TIM1_Init+0x168>)
 800176a:	2200      	movs	r2, #0
 800176c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800176e:	4b47      	ldr	r3, [pc, #284]	@ (800188c <MX_TIM1_Init+0x168>)
 8001770:	2220      	movs	r2, #32
 8001772:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3000;
 8001774:	4b45      	ldr	r3, [pc, #276]	@ (800188c <MX_TIM1_Init+0x168>)
 8001776:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800177a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b43      	ldr	r3, [pc, #268]	@ (800188c <MX_TIM1_Init+0x168>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001782:	4b42      	ldr	r3, [pc, #264]	@ (800188c <MX_TIM1_Init+0x168>)
 8001784:	2200      	movs	r2, #0
 8001786:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001788:	4b40      	ldr	r3, [pc, #256]	@ (800188c <MX_TIM1_Init+0x168>)
 800178a:	2280      	movs	r2, #128	@ 0x80
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800178e:	483f      	ldr	r0, [pc, #252]	@ (800188c <MX_TIM1_Init+0x168>)
 8001790:	f003 f92c 	bl	80049ec <HAL_TIM_Base_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800179a:	f000 fa5f 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017a8:	4619      	mov	r1, r3
 80017aa:	4838      	ldr	r0, [pc, #224]	@ (800188c <MX_TIM1_Init+0x168>)
 80017ac:	f004 f916 	bl	80059dc <HAL_TIM_ConfigClockSource>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80017b6:	f000 fa51 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017ba:	4834      	ldr	r0, [pc, #208]	@ (800188c <MX_TIM1_Init+0x168>)
 80017bc:	f003 fc06 	bl	8004fcc <HAL_TIM_PWM_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80017c6:	f000 fa49 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ca:	2300      	movs	r3, #0
 80017cc:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017d6:	4619      	mov	r1, r3
 80017d8:	482c      	ldr	r0, [pc, #176]	@ (800188c <MX_TIM1_Init+0x168>)
 80017da:	f004 fde5 	bl	80063a8 <HAL_TIMEx_MasterConfigSynchronization>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80017e4:	f000 fa3a 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017e8:	2360      	movs	r3, #96	@ 0x60
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80017ec:	2300      	movs	r3, #0
 80017ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001800:	2300      	movs	r3, #0
 8001802:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	481f      	ldr	r0, [pc, #124]	@ (800188c <MX_TIM1_Init+0x168>)
 800180e:	f004 f823 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001818:	f000 fa20 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001820:	2204      	movs	r2, #4
 8001822:	4619      	mov	r1, r3
 8001824:	4819      	ldr	r0, [pc, #100]	@ (800188c <MX_TIM1_Init+0x168>)
 8001826:	f004 f817 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001830:	f000 fa14 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001834:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001838:	2208      	movs	r2, #8
 800183a:	4619      	mov	r1, r3
 800183c:	4813      	ldr	r0, [pc, #76]	@ (800188c <MX_TIM1_Init+0x168>)
 800183e:	f004 f80b 	bl	8005858 <HAL_TIM_PWM_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001848:	f000 fa08 	bl	8001c5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800185c:	2300      	movs	r3, #0
 800185e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001860:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	4619      	mov	r1, r3
 800186e:	4807      	ldr	r0, [pc, #28]	@ (800188c <MX_TIM1_Init+0x168>)
 8001870:	f004 fdf8 	bl	8006464 <HAL_TIMEx_ConfigBreakDeadTime>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800187a:	f000 f9ef 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800187e:	4803      	ldr	r0, [pc, #12]	@ (800188c <MX_TIM1_Init+0x168>)
 8001880:	f001 fddc 	bl	800343c <HAL_TIM_MspPostInit>

}
 8001884:	bf00      	nop
 8001886:	3758      	adds	r7, #88	@ 0x58
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	2000012c 	.word	0x2000012c
 8001890:	40012c00 	.word	0x40012c00

08001894 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08a      	sub	sp, #40	@ 0x28
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189a:	f107 0318 	add.w	r3, r7, #24
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a8:	f107 0310 	add.w	r3, r7, #16
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018b2:	463b      	mov	r3, r7
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	609a      	str	r2, [r3, #8]
 80018bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018be:	4b37      	ldr	r3, [pc, #220]	@ (800199c <MX_TIM2_Init+0x108>)
 80018c0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 809;
 80018c6:	4b35      	ldr	r3, [pc, #212]	@ (800199c <MX_TIM2_Init+0x108>)
 80018c8:	f240 3229 	movw	r2, #809	@ 0x329
 80018cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ce:	4b33      	ldr	r3, [pc, #204]	@ (800199c <MX_TIM2_Init+0x108>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80018d4:	4b31      	ldr	r3, [pc, #196]	@ (800199c <MX_TIM2_Init+0x108>)
 80018d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018dc:	4b2f      	ldr	r3, [pc, #188]	@ (800199c <MX_TIM2_Init+0x108>)
 80018de:	2200      	movs	r2, #0
 80018e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e2:	4b2e      	ldr	r3, [pc, #184]	@ (800199c <MX_TIM2_Init+0x108>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018e8:	482c      	ldr	r0, [pc, #176]	@ (800199c <MX_TIM2_Init+0x108>)
 80018ea:	f003 f87f 	bl	80049ec <HAL_TIM_Base_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80018f4:	f000 f9b2 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018fc:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018fe:	f107 0318 	add.w	r3, r7, #24
 8001902:	4619      	mov	r1, r3
 8001904:	4825      	ldr	r0, [pc, #148]	@ (800199c <MX_TIM2_Init+0x108>)
 8001906:	f004 f869 	bl	80059dc <HAL_TIM_ConfigClockSource>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001910:	f000 f9a4 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001914:	4821      	ldr	r0, [pc, #132]	@ (800199c <MX_TIM2_Init+0x108>)
 8001916:	f003 fc53 	bl	80051c0 <HAL_TIM_IC_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001920:	f000 f99c 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	481a      	ldr	r0, [pc, #104]	@ (800199c <MX_TIM2_Init+0x108>)
 8001934:	f004 fd38 	bl	80063a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800193e:	f000 f98d 	bl	8001c5c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001942:	2302      	movs	r3, #2
 8001944:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001946:	2301      	movs	r3, #1
 8001948:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800194a:	2300      	movs	r3, #0
 800194c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 800194e:	2302      	movs	r3, #2
 8001950:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001952:	463b      	mov	r3, r7
 8001954:	2200      	movs	r2, #0
 8001956:	4619      	mov	r1, r3
 8001958:	4810      	ldr	r0, [pc, #64]	@ (800199c <MX_TIM2_Init+0x108>)
 800195a:	f003 fee1 	bl	8005720 <HAL_TIM_IC_ConfigChannel>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001964:	f000 f97a 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	2204      	movs	r2, #4
 800196c:	4619      	mov	r1, r3
 800196e:	480b      	ldr	r0, [pc, #44]	@ (800199c <MX_TIM2_Init+0x108>)
 8001970:	f003 fed6 	bl	8005720 <HAL_TIM_IC_ConfigChannel>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM2_Init+0xea>
  {
    Error_Handler();
 800197a:	f000 f96f 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800197e:	463b      	mov	r3, r7
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	4805      	ldr	r0, [pc, #20]	@ (800199c <MX_TIM2_Init+0x108>)
 8001986:	f003 fecb 	bl	8005720 <HAL_TIM_IC_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM2_Init+0x100>
  {
    Error_Handler();
 8001990:	f000 f964 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001994:	bf00      	nop
 8001996:	3728      	adds	r7, #40	@ 0x28
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000174 	.word	0x20000174

080019a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08e      	sub	sp, #56	@ 0x38
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	605a      	str	r2, [r3, #4]
 80019b0:	609a      	str	r2, [r3, #8]
 80019b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b4:	f107 0320 	add.w	r3, r7, #32
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019be:	1d3b      	adds	r3, r7, #4
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
 80019cc:	615a      	str	r2, [r3, #20]
 80019ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */
  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80019d0:	4b3a      	ldr	r3, [pc, #232]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019d2:	4a3b      	ldr	r2, [pc, #236]	@ (8001ac0 <MX_TIM4_Init+0x120>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 80019d6:	4b39      	ldr	r3, [pc, #228]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019d8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80019dc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b37      	ldr	r3, [pc, #220]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80019e4:	4b35      	ldr	r3, [pc, #212]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019e6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80019ea:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ec:	4b33      	ldr	r3, [pc, #204]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f2:	4b32      	ldr	r3, [pc, #200]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80019f8:	4830      	ldr	r0, [pc, #192]	@ (8001abc <MX_TIM4_Init+0x11c>)
 80019fa:	f002 fff7 	bl	80049ec <HAL_TIM_Base_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001a04:	f000 f92a 	bl	8001c5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4829      	ldr	r0, [pc, #164]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a16:	f003 ffe1 	bl	80059dc <HAL_TIM_ConfigClockSource>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001a20:	f000 f91c 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001a24:	4825      	ldr	r0, [pc, #148]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a26:	f003 f8d7 	bl	8004bd8 <HAL_TIM_OC_Init>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001a30:	f000 f914 	bl	8001c5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a3c:	f107 0320 	add.w	r3, r7, #32
 8001a40:	4619      	mov	r1, r3
 8001a42:	481e      	ldr	r0, [pc, #120]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a44:	f004 fcb0 	bl	80063a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001a4e:	f000 f905 	bl	8001c5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2200      	movs	r2, #0
 8001a66:	4619      	mov	r1, r3
 8001a68:	4814      	ldr	r0, [pc, #80]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a6a:	f003 fdfd 	bl	8005668 <HAL_TIM_OC_ConfigChannel>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001a74:	f000 f8f2 	bl	8001c5c <Error_Handler>
  }
  __HAL_TIM_ENABLE_OCxPRELOAD(&htim4, TIM_CHANNEL_1);
 8001a78:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f042 0208 	orr.w	r2, r2, #8
 8001a86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480b      	ldr	r0, [pc, #44]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001a90:	f003 fdea 	bl	8005668 <HAL_TIM_OC_ConfigChannel>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 8001a9a:	f000 f8df 	bl	8001c5c <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2208      	movs	r2, #8
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	4805      	ldr	r0, [pc, #20]	@ (8001abc <MX_TIM4_Init+0x11c>)
 8001aa6:	f003 fddf 	bl	8005668 <HAL_TIM_OC_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8001ab0:	f000 f8d4 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ab4:	bf00      	nop
 8001ab6:	3738      	adds	r7, #56	@ 0x38
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200001bc 	.word	0x200001bc
 8001ac0:	40000800 	.word	0x40000800

08001ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <MX_USART2_UART_Init+0x50>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001afa:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_USART2_UART_Init+0x4c>)
 8001afc:	f004 fd15 	bl	800652a <HAL_UART_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b06:	f000 f8a9 	bl	8001c5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000204 	.word	0x20000204
 8001b14:	40004400 	.word	0x40004400

08001b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <MX_DMA_Init+0x38>)
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	4a0b      	ldr	r2, [pc, #44]	@ (8001b50 <MX_DMA_Init+0x38>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6153      	str	r3, [r2, #20]
 8001b2a:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <MX_DMA_Init+0x38>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001b36:	2200      	movs	r2, #0
 8001b38:	2100      	movs	r1, #0
 8001b3a:	2011      	movs	r0, #17
 8001b3c:	f001 ff43 	bl	80039c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001b40:	2011      	movs	r0, #17
 8001b42:	f001 ff5c 	bl	80039fe <HAL_NVIC_EnableIRQ>

}
 8001b46:	bf00      	nop
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 0310 	add.w	r3, r7, #16
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b68:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	4a37      	ldr	r2, [pc, #220]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b6e:	f043 0310 	orr.w	r3, r3, #16
 8001b72:	6193      	str	r3, [r2, #24]
 8001b74:	4b35      	ldr	r3, [pc, #212]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	f003 0310 	and.w	r3, r3, #16
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b80:	4b32      	ldr	r3, [pc, #200]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	4a31      	ldr	r2, [pc, #196]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b86:	f043 0320 	orr.w	r3, r3, #32
 8001b8a:	6193      	str	r3, [r2, #24]
 8001b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	f003 0320 	and.w	r3, r3, #32
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b98:	4b2c      	ldr	r3, [pc, #176]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	4a2b      	ldr	r2, [pc, #172]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001b9e:	f043 0304 	orr.w	r3, r3, #4
 8001ba2:	6193      	str	r3, [r2, #24]
 8001ba4:	4b29      	ldr	r3, [pc, #164]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b26      	ldr	r3, [pc, #152]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a25      	ldr	r2, [pc, #148]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001bb6:	f043 0308 	orr.w	r3, r3, #8
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b23      	ldr	r3, [pc, #140]	@ (8001c4c <MX_GPIO_Init+0xf8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0308 	and.w	r3, r3, #8
 8001bc4:	603b      	str	r3, [r7, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001bc8:	2200      	movs	r2, #0
 8001bca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bce:	4820      	ldr	r0, [pc, #128]	@ (8001c50 <MX_GPIO_Init+0xfc>)
 8001bd0:	f002 fae4 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_W_GPIO_Port, EN_W_Pin, GPIO_PIN_RESET);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2120      	movs	r1, #32
 8001bd8:	481e      	ldr	r0, [pc, #120]	@ (8001c54 <MX_GPIO_Init+0x100>)
 8001bda:	f002 fadf 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN_V_Pin|EN_U_Pin, GPIO_PIN_RESET);
 8001bde:	2200      	movs	r2, #0
 8001be0:	f242 0102 	movw	r1, #8194	@ 0x2002
 8001be4:	481c      	ldr	r0, [pc, #112]	@ (8001c58 <MX_GPIO_Init+0x104>)
 8001be6:	f002 fad9 	bl	800419c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001bea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001bfc:	f107 0310 	add.w	r3, r7, #16
 8001c00:	4619      	mov	r1, r3
 8001c02:	4813      	ldr	r0, [pc, #76]	@ (8001c50 <MX_GPIO_Init+0xfc>)
 8001c04:	f002 f946 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pin : EN_W_Pin */
  GPIO_InitStruct.Pin = EN_W_Pin;
 8001c08:	2320      	movs	r3, #32
 8001c0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2302      	movs	r3, #2
 8001c16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_W_GPIO_Port, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	480d      	ldr	r0, [pc, #52]	@ (8001c54 <MX_GPIO_Init+0x100>)
 8001c20:	f002 f938 	bl	8003e94 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN_V_Pin EN_U_Pin */
  GPIO_InitStruct.Pin = EN_V_Pin|EN_U_Pin;
 8001c24:	f242 0302 	movw	r3, #8194	@ 0x2002
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4806      	ldr	r0, [pc, #24]	@ (8001c58 <MX_GPIO_Init+0x104>)
 8001c3e:	f002 f929 	bl	8003e94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c42:	bf00      	nop
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40011000 	.word	0x40011000
 8001c54:	40010800 	.word	0x40010800
 8001c58:	40010c00 	.word	0x40010c00

08001c5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001c60:	b672      	cpsid	i
}
 8001c62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c64:	bf00      	nop
 8001c66:	e7fd      	b.n	8001c64 <Error_Handler+0x8>

08001c68 <safe_mod>:
#define SPEED_BUFFER_SIZE 5
static volatile uint16_t speed_buffer[SPEED_BUFFER_SIZE] = {0};
static volatile uint8_t speed_index = 0;
static volatile uint16_t filtered_speed = 0;

int8_t safe_mod(int8_t value, int8_t mod) {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	460a      	mov	r2, r1
 8001c72:	71fb      	strb	r3, [r7, #7]
 8001c74:	4613      	mov	r3, r2
 8001c76:	71bb      	strb	r3, [r7, #6]
    return (value % mod + mod) % mod;
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001c80:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c84:	fb01 f202 	mul.w	r2, r1, r2
 8001c88:	1a9a      	subs	r2, r3, r2
 8001c8a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c8e:	4413      	add	r3, r2
 8001c90:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8001c94:	fb93 f1f2 	sdiv	r1, r3, r2
 8001c98:	fb01 f202 	mul.w	r2, r1, r2
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	b25b      	sxtb	r3, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bc80      	pop	{r7}
 8001ca8:	4770      	bx	lr
	...

08001cac <commutation>:

void commutation(int8_t step) {
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]


	switch(step) {
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	f200 81f2 	bhi.w	80020a4 <commutation+0x3f8>
 8001cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <commutation+0x1c>)
 8001cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc6:	bf00      	nop
 8001cc8:	08001ced 	.word	0x08001ced
 8001ccc:	08001d71 	.word	0x08001d71
 8001cd0:	08001df1 	.word	0x08001df1
 8001cd4:	08001e75 	.word	0x08001e75
 8001cd8:	08001f15 	.word	0x08001f15
 8001cdc:	08001f99 	.word	0x08001f99
 8001ce0:	080020a5 	.word	0x080020a5
 8001ce4:	08002019 	.word	0x08002019
 8001ce8:	0800205b 	.word	0x0800205b

	case POS_UV:
		PWM_STOP();
 8001cec:	4b81      	ldr	r3, [pc, #516]	@ (8001ef4 <commutation+0x248>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001cf4:	4b7f      	ldr	r3, [pc, #508]	@ (8001ef4 <commutation+0x248>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8001cfc:	4b7d      	ldr	r3, [pc, #500]	@ (8001ef4 <commutation+0x248>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2200      	movs	r2, #0
 8001d02:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001d04:	4b7c      	ldr	r3, [pc, #496]	@ (8001ef8 <commutation+0x24c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	4b7b      	ldr	r3, [pc, #492]	@ (8001ef8 <commutation+0x24c>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 020a 	bic.w	r2, r2, #10
 8001d12:	621a      	str	r2, [r3, #32]
 8001d14:	4b78      	ldr	r3, [pc, #480]	@ (8001ef8 <commutation+0x24c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6a1a      	ldr	r2, [r3, #32]
 8001d1a:	4b77      	ldr	r3, [pc, #476]	@ (8001ef8 <commutation+0x24c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f042 0202 	orr.w	r2, r2, #2
 8001d22:	621a      	str	r2, [r3, #32]
		float_W = true;
 8001d24:	4b75      	ldr	r3, [pc, #468]	@ (8001efc <commutation+0x250>)
 8001d26:	2201      	movs	r2, #1
 8001d28:	701a      	strb	r2, [r3, #0]
		float_V = false;
 8001d2a:	4b75      	ldr	r3, [pc, #468]	@ (8001f00 <commutation+0x254>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	701a      	strb	r2, [r3, #0]
		float_U = false;
 8001d30:	4b74      	ldr	r3, [pc, #464]	@ (8001f04 <commutation+0x258>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]

		GPIOA->ODR &= ~EN_W;
 8001d36:	4b74      	ldr	r3, [pc, #464]	@ (8001f08 <commutation+0x25c>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a73      	ldr	r2, [pc, #460]	@ (8001f08 <commutation+0x25c>)
 8001d3c:	f023 0320 	bic.w	r3, r3, #32
 8001d40:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_U;
 8001d42:	4b72      	ldr	r3, [pc, #456]	@ (8001f0c <commutation+0x260>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	4a71      	ldr	r2, [pc, #452]	@ (8001f0c <commutation+0x260>)
 8001d48:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d4c:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_V;
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <commutation+0x260>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <commutation+0x260>)
 8001d54:	f043 0302 	orr.w	r3, r3, #2
 8001d58:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_U, pwmVal);
 8001d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001f10 <commutation+0x264>)
 8001d5c:	881b      	ldrh	r3, [r3, #0]
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b64      	ldr	r3, [pc, #400]	@ (8001ef4 <commutation+0x248>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, IN_V, 0);
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <commutation+0x248>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8001d6e:	e19a      	b.n	80020a6 <commutation+0x3fa>
	case POS_UW:
		PWM_STOP();
 8001d70:	4b60      	ldr	r3, [pc, #384]	@ (8001ef4 <commutation+0x248>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2200      	movs	r2, #0
 8001d76:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d78:	4b5e      	ldr	r3, [pc, #376]	@ (8001ef4 <commutation+0x248>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d80:	4b5c      	ldr	r3, [pc, #368]	@ (8001ef4 <commutation+0x248>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8001d88:	4b5b      	ldr	r3, [pc, #364]	@ (8001ef8 <commutation+0x24c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6a1a      	ldr	r2, [r3, #32]
 8001d8e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ef8 <commutation+0x24c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001d96:	621a      	str	r2, [r3, #32]
 8001d98:	4b57      	ldr	r3, [pc, #348]	@ (8001ef8 <commutation+0x24c>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b56      	ldr	r3, [pc, #344]	@ (8001ef8 <commutation+0x24c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a12      	ldr	r2, [r2, #32]
 8001da2:	621a      	str	r2, [r3, #32]
		float_W = false;
 8001da4:	4b55      	ldr	r3, [pc, #340]	@ (8001efc <commutation+0x250>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	701a      	strb	r2, [r3, #0]
		float_U = false;
 8001daa:	4b56      	ldr	r3, [pc, #344]	@ (8001f04 <commutation+0x258>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
		float_V = true;
 8001db0:	4b53      	ldr	r3, [pc, #332]	@ (8001f00 <commutation+0x254>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~EN_V;
 8001db6:	4b55      	ldr	r3, [pc, #340]	@ (8001f0c <commutation+0x260>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4a54      	ldr	r2, [pc, #336]	@ (8001f0c <commutation+0x260>)
 8001dbc:	f023 0302 	bic.w	r3, r3, #2
 8001dc0:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_U;
 8001dc2:	4b52      	ldr	r3, [pc, #328]	@ (8001f0c <commutation+0x260>)
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	4a51      	ldr	r2, [pc, #324]	@ (8001f0c <commutation+0x260>)
 8001dc8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001dcc:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR |=  EN_W;
 8001dce:	4b4e      	ldr	r3, [pc, #312]	@ (8001f08 <commutation+0x25c>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	4a4d      	ldr	r2, [pc, #308]	@ (8001f08 <commutation+0x25c>)
 8001dd4:	f043 0320 	orr.w	r3, r3, #32
 8001dd8:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_U, pwmVal);
 8001dda:	4b4d      	ldr	r3, [pc, #308]	@ (8001f10 <commutation+0x264>)
 8001ddc:	881b      	ldrh	r3, [r3, #0]
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	4b44      	ldr	r3, [pc, #272]	@ (8001ef4 <commutation+0x248>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, IN_W, 0);
 8001de6:	4b43      	ldr	r3, [pc, #268]	@ (8001ef4 <commutation+0x248>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2200      	movs	r2, #0
 8001dec:	63da      	str	r2, [r3, #60]	@ 0x3c
		break;
 8001dee:	e15a      	b.n	80020a6 <commutation+0x3fa>
	case POS_VW:
		PWM_STOP();
 8001df0:	4b40      	ldr	r3, [pc, #256]	@ (8001ef4 <commutation+0x248>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2200      	movs	r2, #0
 8001df6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001df8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <commutation+0x248>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e00:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef4 <commutation+0x248>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001e08:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef8 <commutation+0x24c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1a      	ldr	r2, [r3, #32]
 8001e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef8 <commutation+0x24c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e16:	621a      	str	r2, [r3, #32]
 8001e18:	4b37      	ldr	r3, [pc, #220]	@ (8001ef8 <commutation+0x24c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	6a1a      	ldr	r2, [r3, #32]
 8001e1e:	4b36      	ldr	r3, [pc, #216]	@ (8001ef8 <commutation+0x24c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0220 	orr.w	r2, r2, #32
 8001e26:	621a      	str	r2, [r3, #32]

		float_W = false;
 8001e28:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <commutation+0x250>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	701a      	strb	r2, [r3, #0]
		float_V = false;
 8001e2e:	4b34      	ldr	r3, [pc, #208]	@ (8001f00 <commutation+0x254>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
		float_U = true;
 8001e34:	4b33      	ldr	r3, [pc, #204]	@ (8001f04 <commutation+0x258>)
 8001e36:	2201      	movs	r2, #1
 8001e38:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~EN_U;
 8001e3a:	4b34      	ldr	r3, [pc, #208]	@ (8001f0c <commutation+0x260>)
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	4a33      	ldr	r2, [pc, #204]	@ (8001f0c <commutation+0x260>)
 8001e40:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001e44:	60d3      	str	r3, [r2, #12]

		GPIOA->ODR |=  EN_W;
 8001e46:	4b30      	ldr	r3, [pc, #192]	@ (8001f08 <commutation+0x25c>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	4a2f      	ldr	r2, [pc, #188]	@ (8001f08 <commutation+0x25c>)
 8001e4c:	f043 0320 	orr.w	r3, r3, #32
 8001e50:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_V;
 8001e52:	4b2e      	ldr	r3, [pc, #184]	@ (8001f0c <commutation+0x260>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	4a2d      	ldr	r2, [pc, #180]	@ (8001f0c <commutation+0x260>)
 8001e58:	f043 0302 	orr.w	r3, r3, #2
 8001e5c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_V, pwmVal);
 8001e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <commutation+0x264>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <commutation+0x248>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, IN_W, 0);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <commutation+0x248>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	63da      	str	r2, [r3, #60]	@ 0x3c

		break;
 8001e72:	e118      	b.n	80020a6 <commutation+0x3fa>
	case POS_VU:
		PWM_STOP();
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <commutation+0x248>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <commutation+0x248>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2200      	movs	r2, #0
 8001e82:	639a      	str	r2, [r3, #56]	@ 0x38
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <commutation+0x248>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef8 <commutation+0x24c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6a1a      	ldr	r2, [r3, #32]
 8001e92:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <commutation+0x24c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 020a 	bic.w	r2, r2, #10
 8001e9a:	621a      	str	r2, [r3, #32]
 8001e9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ef8 <commutation+0x24c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b15      	ldr	r3, [pc, #84]	@ (8001ef8 <commutation+0x24c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a12      	ldr	r2, [r2, #32]
 8001ea6:	621a      	str	r2, [r3, #32]

		float_W = true;
 8001ea8:	4b14      	ldr	r3, [pc, #80]	@ (8001efc <commutation+0x250>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
		float_V = false;
 8001eae:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <commutation+0x254>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	701a      	strb	r2, [r3, #0]
		float_U = false;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <commutation+0x258>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR |= EN_U;
 8001eba:	4b14      	ldr	r3, [pc, #80]	@ (8001f0c <commutation+0x260>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4a13      	ldr	r2, [pc, #76]	@ (8001f0c <commutation+0x260>)
 8001ec0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001ec4:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |=  EN_V;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <commutation+0x260>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <commutation+0x260>)
 8001ecc:	f043 0302 	orr.w	r3, r3, #2
 8001ed0:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR &= ~EN_W;
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f08 <commutation+0x25c>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <commutation+0x25c>)
 8001ed8:	f023 0320 	bic.w	r3, r3, #32
 8001edc:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_V, pwmVal);
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <commutation+0x264>)
 8001ee0:	881b      	ldrh	r3, [r3, #0]
 8001ee2:	b29a      	uxth	r2, r3
 8001ee4:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <commutation+0x248>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	639a      	str	r2, [r3, #56]	@ 0x38
		__HAL_TIM_SET_COMPARE(&htim1, IN_U, 0);
 8001eea:	4b02      	ldr	r3, [pc, #8]	@ (8001ef4 <commutation+0x248>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8001ef2:	e0d8      	b.n	80020a6 <commutation+0x3fa>
 8001ef4:	2000012c 	.word	0x2000012c
 8001ef8:	20000174 	.word	0x20000174
 8001efc:	200002a3 	.word	0x200002a3
 8001f00:	200002a5 	.word	0x200002a5
 8001f04:	200002a4 	.word	0x200002a4
 8001f08:	40010800 	.word	0x40010800
 8001f0c:	40010c00 	.word	0x40010c00
 8001f10:	200002a0 	.word	0x200002a0
	case POS_WU:
		PWM_STOP();
 8001f14:	4b66      	ldr	r3, [pc, #408]	@ (80020b0 <commutation+0x404>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	635a      	str	r2, [r3, #52]	@ 0x34
 8001f1c:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <commutation+0x404>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2200      	movs	r2, #0
 8001f22:	639a      	str	r2, [r3, #56]	@ 0x38
 8001f24:	4b62      	ldr	r3, [pc, #392]	@ (80020b0 <commutation+0x404>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001f2c:	4b61      	ldr	r3, [pc, #388]	@ (80020b4 <commutation+0x408>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a1a      	ldr	r2, [r3, #32]
 8001f32:	4b60      	ldr	r3, [pc, #384]	@ (80020b4 <commutation+0x408>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f3a:	621a      	str	r2, [r3, #32]
 8001f3c:	4b5d      	ldr	r3, [pc, #372]	@ (80020b4 <commutation+0x408>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6a1a      	ldr	r2, [r3, #32]
 8001f42:	4b5c      	ldr	r3, [pc, #368]	@ (80020b4 <commutation+0x408>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f4a:	621a      	str	r2, [r3, #32]

		float_W = false;
 8001f4c:	4b5a      	ldr	r3, [pc, #360]	@ (80020b8 <commutation+0x40c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
		float_U = false;
 8001f52:	4b5a      	ldr	r3, [pc, #360]	@ (80020bc <commutation+0x410>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]
		float_V = true;
 8001f58:	4b59      	ldr	r3, [pc, #356]	@ (80020c0 <commutation+0x414>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~EN_V;
 8001f5e:	4b59      	ldr	r3, [pc, #356]	@ (80020c4 <commutation+0x418>)
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	4a58      	ldr	r2, [pc, #352]	@ (80020c4 <commutation+0x418>)
 8001f64:	f023 0302 	bic.w	r3, r3, #2
 8001f68:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR |=  EN_W;
 8001f6a:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <commutation+0x41c>)
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4a56      	ldr	r2, [pc, #344]	@ (80020c8 <commutation+0x41c>)
 8001f70:	f043 0320 	orr.w	r3, r3, #32
 8001f74:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_U;
 8001f76:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <commutation+0x418>)
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4a52      	ldr	r2, [pc, #328]	@ (80020c4 <commutation+0x418>)
 8001f7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f80:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_W, pwmVal);
 8001f82:	4b52      	ldr	r3, [pc, #328]	@ (80020cc <commutation+0x420>)
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	4b49      	ldr	r3, [pc, #292]	@ (80020b0 <commutation+0x404>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, IN_U, 0);
 8001f8e:	4b48      	ldr	r3, [pc, #288]	@ (80020b0 <commutation+0x404>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	635a      	str	r2, [r3, #52]	@ 0x34
		break;
 8001f96:	e086      	b.n	80020a6 <commutation+0x3fa>
	case POS_WV:
		PWM_STOP();
 8001f98:	4b45      	ldr	r3, [pc, #276]	@ (80020b0 <commutation+0x404>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fa0:	4b43      	ldr	r3, [pc, #268]	@ (80020b0 <commutation+0x404>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fa8:	4b41      	ldr	r3, [pc, #260]	@ (80020b0 <commutation+0x404>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2200      	movs	r2, #0
 8001fae:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8001fb0:	4b40      	ldr	r3, [pc, #256]	@ (80020b4 <commutation+0x408>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a1a      	ldr	r2, [r3, #32]
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	@ (80020b4 <commutation+0x408>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80020b4 <commutation+0x408>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80020b4 <commutation+0x408>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a12      	ldr	r2, [r2, #32]
 8001fca:	621a      	str	r2, [r3, #32]

		float_W = false;
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	@ (80020b8 <commutation+0x40c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
		float_V = false;
 8001fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80020c0 <commutation+0x414>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
		float_U = true;
 8001fd8:	4b38      	ldr	r3, [pc, #224]	@ (80020bc <commutation+0x410>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
		GPIOB->ODR &= ~EN_U;
 8001fde:	4b39      	ldr	r3, [pc, #228]	@ (80020c4 <commutation+0x418>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	4a38      	ldr	r2, [pc, #224]	@ (80020c4 <commutation+0x418>)
 8001fe4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fe8:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR |=  EN_W;
 8001fea:	4b37      	ldr	r3, [pc, #220]	@ (80020c8 <commutation+0x41c>)
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4a36      	ldr	r2, [pc, #216]	@ (80020c8 <commutation+0x41c>)
 8001ff0:	f043 0320 	orr.w	r3, r3, #32
 8001ff4:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_V;
 8001ff6:	4b33      	ldr	r3, [pc, #204]	@ (80020c4 <commutation+0x418>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4a32      	ldr	r2, [pc, #200]	@ (80020c4 <commutation+0x418>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_W, pwmVal);
 8002002:	4b32      	ldr	r3, [pc, #200]	@ (80020cc <commutation+0x420>)
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29a      	uxth	r2, r3
 8002008:	4b29      	ldr	r3, [pc, #164]	@ (80020b0 <commutation+0x404>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, IN_V, 0);
 800200e:	4b28      	ldr	r3, [pc, #160]	@ (80020b0 <commutation+0x404>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002016:	e046      	b.n	80020a6 <commutation+0x3fa>

	case POS_INIT:
		GPIOB->ODR |= EN_U;
 8002018:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <commutation+0x418>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4a29      	ldr	r2, [pc, #164]	@ (80020c4 <commutation+0x418>)
 800201e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002022:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_V;
 8002024:	4b27      	ldr	r3, [pc, #156]	@ (80020c4 <commutation+0x418>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	4a26      	ldr	r2, [pc, #152]	@ (80020c4 <commutation+0x418>)
 800202a:	f043 0302 	orr.w	r3, r3, #2
 800202e:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR |= EN_W;
 8002030:	4b25      	ldr	r3, [pc, #148]	@ (80020c8 <commutation+0x41c>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	4a24      	ldr	r2, [pc, #144]	@ (80020c8 <commutation+0x41c>)
 8002036:	f043 0320 	orr.w	r3, r3, #32
 800203a:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_U, pwmVal);
 800203c:	4b23      	ldr	r3, [pc, #140]	@ (80020cc <commutation+0x420>)
 800203e:	881b      	ldrh	r3, [r3, #0]
 8002040:	b29a      	uxth	r2, r3
 8002042:	4b1b      	ldr	r3, [pc, #108]	@ (80020b0 <commutation+0x404>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, IN_W, 0);
 8002048:	4b19      	ldr	r3, [pc, #100]	@ (80020b0 <commutation+0x404>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, IN_V, 0);
 8002050:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <commutation+0x404>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 8002058:	e025      	b.n	80020a6 <commutation+0x3fa>
	case POS_SOUND:
		GPIOB->ODR |= EN_U;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <commutation+0x418>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <commutation+0x418>)
 8002060:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002064:	60d3      	str	r3, [r2, #12]
		GPIOB->ODR |= EN_V;
 8002066:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <commutation+0x418>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	4a16      	ldr	r2, [pc, #88]	@ (80020c4 <commutation+0x418>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	60d3      	str	r3, [r2, #12]
		GPIOA->ODR |= EN_W;
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <commutation+0x41c>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <commutation+0x41c>)
 8002078:	f043 0320 	orr.w	r3, r3, #32
 800207c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, IN_U, pwmVal);
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <commutation+0x420>)
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29a      	uxth	r2, r3
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <commutation+0x404>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim1, IN_W, pwmVal);
 800208a:	4b10      	ldr	r3, [pc, #64]	@ (80020cc <commutation+0x420>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	b29a      	uxth	r2, r3
 8002090:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <commutation+0x404>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	63da      	str	r2, [r3, #60]	@ 0x3c
		__HAL_TIM_SET_COMPARE(&htim1, IN_V, pwmVal);
 8002096:	4b0d      	ldr	r3, [pc, #52]	@ (80020cc <commutation+0x420>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	b29a      	uxth	r2, r3
 800209c:	4b04      	ldr	r3, [pc, #16]	@ (80020b0 <commutation+0x404>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	639a      	str	r2, [r3, #56]	@ 0x38
		break;
 80020a2:	e000      	b.n	80020a6 <commutation+0x3fa>
	default:
		break;
 80020a4:	bf00      	nop
	}
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	2000012c 	.word	0x2000012c
 80020b4:	20000174 	.word	0x20000174
 80020b8:	200002a3 	.word	0x200002a3
 80020bc:	200002a4 	.word	0x200002a4
 80020c0:	200002a5 	.word	0x200002a5
 80020c4:	40010c00 	.word	0x40010c00
 80020c8:	40010800 	.word	0x40010800
 80020cc:	200002a0 	.word	0x200002a0

080020d0 <update_all_motor_control>:



void update_all_motor_control(){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	max_limit_pwm = TIM1 -> ARR;
 80020d4:	4b24      	ldr	r3, [pc, #144]	@ (8002168 <update_all_motor_control+0x98>)
 80020d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020d8:	b29a      	uxth	r2, r3
 80020da:	4b24      	ldr	r3, [pc, #144]	@ (800216c <update_all_motor_control+0x9c>)
 80020dc:	801a      	strh	r2, [r3, #0]
	max_pwm = max_limit_pwm;
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <update_all_motor_control+0x9c>)
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	4b22      	ldr	r3, [pc, #136]	@ (8002170 <update_all_motor_control+0xa0>)
 80020e6:	801a      	strh	r2, [r3, #0]
	min_limit_pwm = max_limit_pwm * 0.05f;
 80020e8:	4b20      	ldr	r3, [pc, #128]	@ (800216c <update_all_motor_control+0x9c>)
 80020ea:	881b      	ldrh	r3, [r3, #0]
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe fd18 	bl	8000b24 <__aeabi_i2f>
 80020f4:	4603      	mov	r3, r0
 80020f6:	491f      	ldr	r1, [pc, #124]	@ (8002174 <update_all_motor_control+0xa4>)
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe fd67 	bl	8000bcc <__aeabi_fmul>
 80020fe:	4603      	mov	r3, r0
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe ff4f 	bl	8000fa4 <__aeabi_f2uiz>
 8002106:	4603      	mov	r3, r0
 8002108:	b29a      	uxth	r2, r3
 800210a:	4b1b      	ldr	r3, [pc, #108]	@ (8002178 <update_all_motor_control+0xa8>)
 800210c:	801a      	strh	r2, [r3, #0]
	pwm_speed_range_relation = (float)(max_limit_pwm - min_limit_pwm)/(float)SPEED_RANGE;
 800210e:	4b17      	ldr	r3, [pc, #92]	@ (800216c <update_all_motor_control+0x9c>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	b29b      	uxth	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	4b18      	ldr	r3, [pc, #96]	@ (8002178 <update_all_motor_control+0xa8>)
 8002118:	881b      	ldrh	r3, [r3, #0]
 800211a:	b29b      	uxth	r3, r3
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fd00 	bl	8000b24 <__aeabi_i2f>
 8002124:	4603      	mov	r3, r0
 8002126:	4915      	ldr	r1, [pc, #84]	@ (800217c <update_all_motor_control+0xac>)
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fe03 	bl	8000d34 <__aeabi_fdiv>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	4b13      	ldr	r3, [pc, #76]	@ (8002180 <update_all_motor_control+0xb0>)
 8002134:	601a      	str	r2, [r3, #0]
	speed_setpoint = max_limit_pwm *0.8f;
 8002136:	4b0d      	ldr	r3, [pc, #52]	@ (800216c <update_all_motor_control+0x9c>)
 8002138:	881b      	ldrh	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f7fe fcf1 	bl	8000b24 <__aeabi_i2f>
 8002142:	4603      	mov	r3, r0
 8002144:	490f      	ldr	r1, [pc, #60]	@ (8002184 <update_all_motor_control+0xb4>)
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fd40 	bl	8000bcc <__aeabi_fmul>
 800214c:	4603      	mov	r3, r0
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe ff28 	bl	8000fa4 <__aeabi_f2uiz>
 8002154:	4603      	mov	r3, r0
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b0b      	ldr	r3, [pc, #44]	@ (8002188 <update_all_motor_control+0xb8>)
 800215a:	801a      	strh	r2, [r3, #0]
	motor_control_config_done = 1;
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <update_all_motor_control+0xbc>)
 800215e:	2201      	movs	r2, #1
 8002160:	701a      	strb	r2, [r3, #0]


}
 8002162:	bf00      	nop
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40012c00 	.word	0x40012c00
 800216c:	20000296 	.word	0x20000296
 8002170:	200002ae 	.word	0x200002ae
 8002174:	3d4ccccd 	.word	0x3d4ccccd
 8002178:	20000298 	.word	0x20000298
 800217c:	467b4000 	.word	0x467b4000
 8002180:	2000029c 	.word	0x2000029c
 8002184:	3f4ccccd 	.word	0x3f4ccccd
 8002188:	200002a6 	.word	0x200002a6
 800218c:	200002ac 	.word	0x200002ac

08002190 <filtro_media_movil>:
uint16_t filtro_media_movil(uint16_t measurement){
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	80fb      	strh	r3, [r7, #6]
	int32_t new_speed = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
	speed_buffer[speed_index] = measurement;
 800219e:	4b1d      	ldr	r3, [pc, #116]	@ (8002214 <filtro_media_movil+0x84>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002218 <filtro_media_movil+0x88>)
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
	speed_index  = (speed_index + 1) % SPEED_BUFFER_SIZE;
 80021ae:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <filtro_media_movil+0x84>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	1c5a      	adds	r2, r3, #1
 80021b6:	4b19      	ldr	r3, [pc, #100]	@ (800221c <filtro_media_movil+0x8c>)
 80021b8:	fb83 1302 	smull	r1, r3, r3, r2
 80021bc:	1059      	asrs	r1, r3, #1
 80021be:	17d3      	asrs	r3, r2, #31
 80021c0:	1ac9      	subs	r1, r1, r3
 80021c2:	460b      	mov	r3, r1
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	1ad1      	subs	r1, r2, r3
 80021ca:	b2ca      	uxtb	r2, r1
 80021cc:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <filtro_media_movil+0x84>)
 80021ce:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < SPEED_BUFFER_SIZE; i++) {
 80021d0:	2300      	movs	r3, #0
 80021d2:	60bb      	str	r3, [r7, #8]
 80021d4:	e00b      	b.n	80021ee <filtro_media_movil+0x5e>
		new_speed += speed_buffer[i];
 80021d6:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <filtro_media_movil+0x88>)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021de:	b29b      	uxth	r3, r3
 80021e0:	461a      	mov	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < SPEED_BUFFER_SIZE; i++) {
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3301      	adds	r3, #1
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	ddf0      	ble.n	80021d6 <filtro_media_movil+0x46>
	}
	new_speed = new_speed/SPEED_BUFFER_SIZE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <filtro_media_movil+0x8c>)
 80021f8:	fb82 1203 	smull	r1, r2, r2, r3
 80021fc:	1052      	asrs	r2, r2, #1
 80021fe:	17db      	asrs	r3, r3, #31
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	60fb      	str	r3, [r7, #12]


	return (uint16_t)new_speed;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	b29b      	uxth	r3, r3
}
 8002208:	4618      	mov	r0, r3
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000316 	.word	0x20000316
 8002218:	2000030c 	.word	0x2000030c
 800221c:	66666667 	.word	0x66666667

08002220 <zero_crossing>:

void zero_crossing(uint8_t fase){
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]

	switch(fase){
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	2b03      	cmp	r3, #3
 800222e:	f000 8153 	beq.w	80024d8 <zero_crossing+0x2b8>
 8002232:	2b03      	cmp	r3, #3
 8002234:	f300 818a 	bgt.w	800254c <zero_crossing+0x32c>
 8002238:	2b01      	cmp	r3, #1
 800223a:	d003      	beq.n	8002244 <zero_crossing+0x24>
 800223c:	2b02      	cmp	r3, #2
 800223e:	f000 80f8 	beq.w	8002432 <zero_crossing+0x212>
					commutation(commutationStep);
		}
		break;
	}

}
 8002242:	e183      	b.n	800254c <zero_crossing+0x32c>
		if(app_state == RUNNING || app_state == CLOSEDLOOP){
 8002244:	4b95      	ldr	r3, [pc, #596]	@ (800249c <zero_crossing+0x27c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b05      	cmp	r3, #5
 800224c:	d004      	beq.n	8002258 <zero_crossing+0x38>
 800224e:	4b93      	ldr	r3, [pc, #588]	@ (800249c <zero_crossing+0x27c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b08      	cmp	r3, #8
 8002256:	d12e      	bne.n	80022b6 <zero_crossing+0x96>
			if (direction == 0) {
 8002258:	4b91      	ldr	r3, [pc, #580]	@ (80024a0 <zero_crossing+0x280>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d10f      	bne.n	8002282 <zero_crossing+0x62>
				commutationStep = safe_mod(commutationStep + 1, NUM_POS);
 8002262:	4b90      	ldr	r3, [pc, #576]	@ (80024a4 <zero_crossing+0x284>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b25b      	sxtb	r3, r3
 8002268:	b2db      	uxtb	r3, r3
 800226a:	3301      	adds	r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	b25b      	sxtb	r3, r3
 8002270:	2106      	movs	r1, #6
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fcf8 	bl	8001c68 <safe_mod>
 8002278:	4603      	mov	r3, r0
 800227a:	461a      	mov	r2, r3
 800227c:	4b89      	ldr	r3, [pc, #548]	@ (80024a4 <zero_crossing+0x284>)
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e00e      	b.n	80022a0 <zero_crossing+0x80>
				commutationStep = safe_mod(commutationStep - 1, NUM_POS);
 8002282:	4b88      	ldr	r3, [pc, #544]	@ (80024a4 <zero_crossing+0x284>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	b25b      	sxtb	r3, r3
 8002288:	b2db      	uxtb	r3, r3
 800228a:	3b01      	subs	r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	b25b      	sxtb	r3, r3
 8002290:	2106      	movs	r1, #6
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fce8 	bl	8001c68 <safe_mod>
 8002298:	4603      	mov	r3, r0
 800229a:	461a      	mov	r2, r3
 800229c:	4b81      	ldr	r3, [pc, #516]	@ (80024a4 <zero_crossing+0x284>)
 800229e:	701a      	strb	r2, [r3, #0]
			last_zc_timestamp = HAL_GetTick();
 80022a0:	f001 fa8c 	bl	80037bc <HAL_GetTick>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4a80      	ldr	r2, [pc, #512]	@ (80024a8 <zero_crossing+0x288>)
 80022a8:	6013      	str	r3, [r2, #0]
			commutation(commutationStep);
 80022aa:	4b7e      	ldr	r3, [pc, #504]	@ (80024a4 <zero_crossing+0x284>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fcfb 	bl	8001cac <commutation>
		if(app_state == RUNNING){
 80022b6:	4b79      	ldr	r3, [pc, #484]	@ (800249c <zero_crossing+0x27c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	2b05      	cmp	r3, #5
 80022be:	f040 8090 	bne.w	80023e2 <zero_crossing+0x1c2>
			uint32_t current_timestamp = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 80022c2:	2100      	movs	r1, #0
 80022c4:	4879      	ldr	r0, [pc, #484]	@ (80024ac <zero_crossing+0x28c>)
 80022c6:	f003 fc51 	bl	8005b6c <HAL_TIM_ReadCapturedValue>
 80022ca:	6138      	str	r0, [r7, #16]
			if(last_W_timestamp != 0){
 80022cc:	4b78      	ldr	r3, [pc, #480]	@ (80024b0 <zero_crossing+0x290>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 8083 	beq.w	80023dc <zero_crossing+0x1bc>
				uint32_t period = 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
				if(last_W_timestamp > current_timestamp){
 80022da:	4b75      	ldr	r3, [pc, #468]	@ (80024b0 <zero_crossing+0x290>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d208      	bcs.n	80022f6 <zero_crossing+0xd6>
					period = (0xFFFF - last_W_timestamp) + current_timestamp;
 80022e4:	4b72      	ldr	r3, [pc, #456]	@ (80024b0 <zero_crossing+0x290>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80022f0:	33ff      	adds	r3, #255	@ 0xff
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	e004      	b.n	8002300 <zero_crossing+0xe0>
					period = current_timestamp - last_W_timestamp;
 80022f6:	4b6e      	ldr	r3, [pc, #440]	@ (80024b0 <zero_crossing+0x290>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	61fb      	str	r3, [r7, #28]
				W_periods[W_period_idx] = period;
 8002300:	4b6c      	ldr	r3, [pc, #432]	@ (80024b4 <zero_crossing+0x294>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4a6c      	ldr	r2, [pc, #432]	@ (80024b8 <zero_crossing+0x298>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				W_period_idx = (W_period_idx + 1) % ZCP_TO_CHECK;
 800230e:	4b69      	ldr	r3, [pc, #420]	@ (80024b4 <zero_crossing+0x294>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	4b69      	ldr	r3, [pc, #420]	@ (80024bc <zero_crossing+0x29c>)
 8002316:	fb83 1302 	smull	r1, r3, r3, r2
 800231a:	1059      	asrs	r1, r3, #1
 800231c:	17d3      	asrs	r3, r2, #31
 800231e:	1ac9      	subs	r1, r1, r3
 8002320:	460b      	mov	r3, r1
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	440b      	add	r3, r1
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	1ad1      	subs	r1, r2, r3
 800232a:	b2ca      	uxtb	r2, r1
 800232c:	4b61      	ldr	r3, [pc, #388]	@ (80024b4 <zero_crossing+0x294>)
 800232e:	701a      	strb	r2, [r3, #0]
				if(valid_W_zcp < ZCP_TO_CHECK){
 8002330:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <zero_crossing+0x2a0>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b0b      	cmp	r3, #11
 8002336:	d806      	bhi.n	8002346 <zero_crossing+0x126>
					valid_W_zcp++;
 8002338:	4b61      	ldr	r3, [pc, #388]	@ (80024c0 <zero_crossing+0x2a0>)
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b2da      	uxtb	r2, r3
 8002340:	4b5f      	ldr	r3, [pc, #380]	@ (80024c0 <zero_crossing+0x2a0>)
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	e04a      	b.n	80023dc <zero_crossing+0x1bc>
					uint32_t avg_period = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	61bb      	str	r3, [r7, #24]
					uint8_t is_consistent = 1;
 800234a:	2301      	movs	r3, #1
 800234c:	75fb      	strb	r3, [r7, #23]
					for(uint8_t i = 0; i< ZCP_TO_CHECK;i++){
 800234e:	2300      	movs	r3, #0
 8002350:	75bb      	strb	r3, [r7, #22]
 8002352:	e009      	b.n	8002368 <zero_crossing+0x148>
						avg_period += W_periods[i];
 8002354:	7dbb      	ldrb	r3, [r7, #22]
 8002356:	4a58      	ldr	r2, [pc, #352]	@ (80024b8 <zero_crossing+0x298>)
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	4413      	add	r3, r2
 8002360:	61bb      	str	r3, [r7, #24]
					for(uint8_t i = 0; i< ZCP_TO_CHECK;i++){
 8002362:	7dbb      	ldrb	r3, [r7, #22]
 8002364:	3301      	adds	r3, #1
 8002366:	75bb      	strb	r3, [r7, #22]
 8002368:	7dbb      	ldrb	r3, [r7, #22]
 800236a:	2b0b      	cmp	r3, #11
 800236c:	d9f2      	bls.n	8002354 <zero_crossing+0x134>
					avg_period /= ZCP_TO_CHECK;
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4a54      	ldr	r2, [pc, #336]	@ (80024c4 <zero_crossing+0x2a4>)
 8002372:	fba2 2303 	umull	r2, r3, r2, r3
 8002376:	08db      	lsrs	r3, r3, #3
 8002378:	61bb      	str	r3, [r7, #24]
					if(avg_period > 500){
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002380:	d92c      	bls.n	80023dc <zero_crossing+0x1bc>
						for(uint8_t i = 0; i < ZCP_TO_CHECK; i++){
 8002382:	2300      	movs	r3, #0
 8002384:	757b      	strb	r3, [r7, #21]
 8002386:	e01d      	b.n	80023c4 <zero_crossing+0x1a4>
							uint32_t tolerance = avg_period * SPEED_TOLERANCE_PCT / 100;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	461a      	mov	r2, r3
 8002394:	4b4c      	ldr	r3, [pc, #304]	@ (80024c8 <zero_crossing+0x2a8>)
 8002396:	fba3 2302 	umull	r2, r3, r3, r2
 800239a:	095b      	lsrs	r3, r3, #5
 800239c:	60fb      	str	r3, [r7, #12]
							if(abs(W_periods[i] - avg_period)> tolerance){
 800239e:	7d7b      	ldrb	r3, [r7, #21]
 80023a0:	4a45      	ldr	r2, [pc, #276]	@ (80024b8 <zero_crossing+0x298>)
 80023a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	425b      	neglt	r3, r3
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d202      	bcs.n	80023be <zero_crossing+0x19e>
								is_consistent = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	75fb      	strb	r3, [r7, #23]
								break;
 80023bc:	e005      	b.n	80023ca <zero_crossing+0x1aa>
						for(uint8_t i = 0; i < ZCP_TO_CHECK; i++){
 80023be:	7d7b      	ldrb	r3, [r7, #21]
 80023c0:	3301      	adds	r3, #1
 80023c2:	757b      	strb	r3, [r7, #21]
 80023c4:	7d7b      	ldrb	r3, [r7, #21]
 80023c6:	2b0b      	cmp	r3, #11
 80023c8:	d9de      	bls.n	8002388 <zero_crossing+0x168>
						if(is_consistent){
 80023ca:	7dfb      	ldrb	r3, [r7, #23]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <zero_crossing+0x1bc>
							valid_W_zcp =0;
 80023d0:	4b3b      	ldr	r3, [pc, #236]	@ (80024c0 <zero_crossing+0x2a0>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
							consistent_zero_crossing = 1;
 80023d6:	4b3d      	ldr	r3, [pc, #244]	@ (80024cc <zero_crossing+0x2ac>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
			last_W_timestamp = current_timestamp;
 80023dc:	4a34      	ldr	r2, [pc, #208]	@ (80024b0 <zero_crossing+0x290>)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6013      	str	r3, [r2, #0]
		if((commutationStep == POS_UW || commutationStep == POS_WV)&& app_state == CLOSEDLOOP ){
 80023e2:	4b30      	ldr	r3, [pc, #192]	@ (80024a4 <zero_crossing+0x284>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	b25b      	sxtb	r3, r3
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d005      	beq.n	80023f8 <zero_crossing+0x1d8>
 80023ec:	4b2d      	ldr	r3, [pc, #180]	@ (80024a4 <zero_crossing+0x284>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b25b      	sxtb	r3, r3
 80023f2:	2b05      	cmp	r3, #5
 80023f4:	f040 80a5 	bne.w	8002542 <zero_crossing+0x322>
 80023f8:	4b28      	ldr	r3, [pc, #160]	@ (800249c <zero_crossing+0x27c>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b08      	cmp	r3, #8
 8002400:	f040 809f 	bne.w	8002542 <zero_crossing+0x322>
			diff_speed = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1) ;
 8002404:	2100      	movs	r1, #0
 8002406:	4829      	ldr	r0, [pc, #164]	@ (80024ac <zero_crossing+0x28c>)
 8002408:	f003 fbb0 	bl	8005b6c <HAL_TIM_ReadCapturedValue>
 800240c:	4603      	mov	r3, r0
 800240e:	461a      	mov	r2, r3
 8002410:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <zero_crossing+0x2b0>)
 8002412:	601a      	str	r2, [r3, #0]
				filtered_speed = filtro_media_movil(diff_speed);
 8002414:	4b2e      	ldr	r3, [pc, #184]	@ (80024d0 <zero_crossing+0x2b0>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	b29b      	uxth	r3, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff feb8 	bl	8002190 <filtro_media_movil>
 8002420:	4603      	mov	r3, r0
 8002422:	461a      	mov	r2, r3
 8002424:	4b2b      	ldr	r3, [pc, #172]	@ (80024d4 <zero_crossing+0x2b4>)
 8002426:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002428:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <zero_crossing+0x28c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2200      	movs	r2, #0
 800242e:	625a      	str	r2, [r3, #36]	@ 0x24
		break;
 8002430:	e087      	b.n	8002542 <zero_crossing+0x322>
		if(app_state == RUNNING || app_state == CLOSEDLOOP){
 8002432:	4b1a      	ldr	r3, [pc, #104]	@ (800249c <zero_crossing+0x27c>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b05      	cmp	r3, #5
 800243a:	d004      	beq.n	8002446 <zero_crossing+0x226>
 800243c:	4b17      	ldr	r3, [pc, #92]	@ (800249c <zero_crossing+0x27c>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b08      	cmp	r3, #8
 8002444:	d17f      	bne.n	8002546 <zero_crossing+0x326>
			if (direction == 0) {
 8002446:	4b16      	ldr	r3, [pc, #88]	@ (80024a0 <zero_crossing+0x280>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d10f      	bne.n	8002470 <zero_crossing+0x250>
				commutationStep = safe_mod(commutationStep + 1, NUM_POS);
 8002450:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <zero_crossing+0x284>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	b25b      	sxtb	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	b2db      	uxtb	r3, r3
 800245c:	b25b      	sxtb	r3, r3
 800245e:	2106      	movs	r1, #6
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fc01 	bl	8001c68 <safe_mod>
 8002466:	4603      	mov	r3, r0
 8002468:	461a      	mov	r2, r3
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <zero_crossing+0x284>)
 800246c:	701a      	strb	r2, [r3, #0]
 800246e:	e00e      	b.n	800248e <zero_crossing+0x26e>
				commutationStep = safe_mod(commutationStep - 1, NUM_POS);
 8002470:	4b0c      	ldr	r3, [pc, #48]	@ (80024a4 <zero_crossing+0x284>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	b25b      	sxtb	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	3b01      	subs	r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	b25b      	sxtb	r3, r3
 800247e:	2106      	movs	r1, #6
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fbf1 	bl	8001c68 <safe_mod>
 8002486:	4603      	mov	r3, r0
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <zero_crossing+0x284>)
 800248c:	701a      	strb	r2, [r3, #0]
					commutation(commutationStep);
 800248e:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <zero_crossing+0x284>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	b25b      	sxtb	r3, r3
 8002494:	4618      	mov	r0, r3
 8002496:	f7ff fc09 	bl	8001cac <commutation>
		break;
 800249a:	e054      	b.n	8002546 <zero_crossing+0x326>
 800249c:	20000ba6 	.word	0x20000ba6
 80024a0:	200002d0 	.word	0x200002d0
 80024a4:	200002a2 	.word	0x200002a2
 80024a8:	20000290 	.word	0x20000290
 80024ac:	20000174 	.word	0x20000174
 80024b0:	200002d4 	.word	0x200002d4
 80024b4:	20000308 	.word	0x20000308
 80024b8:	200002d8 	.word	0x200002d8
 80024bc:	2aaaaaab 	.word	0x2aaaaaab
 80024c0:	20000309 	.word	0x20000309
 80024c4:	aaaaaaab 	.word	0xaaaaaaab
 80024c8:	51eb851f 	.word	0x51eb851f
 80024cc:	200002ad 	.word	0x200002ad
 80024d0:	200002cc 	.word	0x200002cc
 80024d4:	20000318 	.word	0x20000318
		if(app_state == RUNNING || app_state == CLOSEDLOOP){
 80024d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002554 <zero_crossing+0x334>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d004      	beq.n	80024ec <zero_crossing+0x2cc>
 80024e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002554 <zero_crossing+0x334>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d12e      	bne.n	800254a <zero_crossing+0x32a>
			if (direction == 0) {
 80024ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002558 <zero_crossing+0x338>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10f      	bne.n	8002516 <zero_crossing+0x2f6>
				commutationStep = safe_mod(commutationStep + 1, NUM_POS);
 80024f6:	4b19      	ldr	r3, [pc, #100]	@ (800255c <zero_crossing+0x33c>)
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	b25b      	sxtb	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	3301      	adds	r3, #1
 8002500:	b2db      	uxtb	r3, r3
 8002502:	b25b      	sxtb	r3, r3
 8002504:	2106      	movs	r1, #6
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fbae 	bl	8001c68 <safe_mod>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	4b12      	ldr	r3, [pc, #72]	@ (800255c <zero_crossing+0x33c>)
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e00e      	b.n	8002534 <zero_crossing+0x314>
				commutationStep = safe_mod(commutationStep - 1, NUM_POS);
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <zero_crossing+0x33c>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	b25b      	sxtb	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b2db      	uxtb	r3, r3
 8002522:	b25b      	sxtb	r3, r3
 8002524:	2106      	movs	r1, #6
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fb9e 	bl	8001c68 <safe_mod>
 800252c:	4603      	mov	r3, r0
 800252e:	461a      	mov	r2, r3
 8002530:	4b0a      	ldr	r3, [pc, #40]	@ (800255c <zero_crossing+0x33c>)
 8002532:	701a      	strb	r2, [r3, #0]
					commutation(commutationStep);
 8002534:	4b09      	ldr	r3, [pc, #36]	@ (800255c <zero_crossing+0x33c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b25b      	sxtb	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	f7ff fbb6 	bl	8001cac <commutation>
		break;
 8002540:	e003      	b.n	800254a <zero_crossing+0x32a>
		break;
 8002542:	bf00      	nop
 8002544:	e002      	b.n	800254c <zero_crossing+0x32c>
		break;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <zero_crossing+0x32c>
		break;
 800254a:	bf00      	nop
}
 800254c:	bf00      	nop
 800254e:	3720      	adds	r7, #32
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20000ba6 	.word	0x20000ba6
 8002558:	200002d0 	.word	0x200002d0
 800255c:	200002a2 	.word	0x200002a2

08002560 <motor_detection>:

void motor_detection(){
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
	TIM1 -> PSC = 7;
 8002566:	4b38      	ldr	r3, [pc, #224]	@ (8002648 <motor_detection+0xe8>)
 8002568:	2207      	movs	r2, #7
 800256a:	629a      	str	r2, [r3, #40]	@ 0x28
	uint16_t arr_pwm = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	807b      	strh	r3, [r7, #2]
	arr_pwm = 1000;
 8002570:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002574:	807b      	strh	r3, [r7, #2]
	TIM1 -> ARR = arr_pwm;
 8002576:	4a34      	ldr	r2, [pc, #208]	@ (8002648 <motor_detection+0xe8>)
 8002578:	887b      	ldrh	r3, [r7, #2]
 800257a:	62d3      	str	r3, [r2, #44]	@ 0x2c
	pwmVal = arr_pwm * 0.3f;
 800257c:	887b      	ldrh	r3, [r7, #2]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fad0 	bl	8000b24 <__aeabi_i2f>
 8002584:	4603      	mov	r3, r0
 8002586:	4931      	ldr	r1, [pc, #196]	@ (800264c <motor_detection+0xec>)
 8002588:	4618      	mov	r0, r3
 800258a:	f7fe fb1f 	bl	8000bcc <__aeabi_fmul>
 800258e:	4603      	mov	r3, r0
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fd07 	bl	8000fa4 <__aeabi_f2uiz>
 8002596:	4603      	mov	r3, r0
 8002598:	b29a      	uxth	r2, r3
 800259a:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <motor_detection+0xf0>)
 800259c:	801a      	strh	r2, [r3, #0]
	uint8_t step = POS_UV;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
	for(int k = 0; k <3; k++){
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	e038      	b.n	800261a <motor_detection+0xba>
		PWM_STOP();
 80025a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002654 <motor_detection+0xf4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2200      	movs	r2, #0
 80025ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80025b0:	4b28      	ldr	r3, [pc, #160]	@ (8002654 <motor_detection+0xf4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2200      	movs	r2, #0
 80025b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80025b8:	4b26      	ldr	r3, [pc, #152]	@ (8002654 <motor_detection+0xf4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2200      	movs	r2, #0
 80025be:	63da      	str	r2, [r3, #60]	@ 0x3c
		HAL_Delay(60);
 80025c0:	203c      	movs	r0, #60	@ 0x3c
 80025c2:	f001 f905 	bl	80037d0 <HAL_Delay>
		PWM_INIT();
 80025c6:	2100      	movs	r1, #0
 80025c8:	4822      	ldr	r0, [pc, #136]	@ (8002654 <motor_detection+0xf4>)
 80025ca:	f002 fd57 	bl	800507c <HAL_TIM_PWM_Start>
 80025ce:	2104      	movs	r1, #4
 80025d0:	4820      	ldr	r0, [pc, #128]	@ (8002654 <motor_detection+0xf4>)
 80025d2:	f002 fd53 	bl	800507c <HAL_TIM_PWM_Start>
 80025d6:	2108      	movs	r1, #8
 80025d8:	481e      	ldr	r0, [pc, #120]	@ (8002654 <motor_detection+0xf4>)
 80025da:	f002 fd4f 	bl	800507c <HAL_TIM_PWM_Start>
		for (int i = 0; i < 140; i++){
 80025de:	2300      	movs	r3, #0
 80025e0:	607b      	str	r3, [r7, #4]
 80025e2:	e014      	b.n	800260e <motor_detection+0xae>
			commutation(step);
 80025e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fb5f 	bl	8001cac <commutation>
			step = safe_mod(step + 1, NUM_POS);
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	3301      	adds	r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	2106      	movs	r1, #6
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fb35 	bl	8001c68 <safe_mod>
 80025fe:	4603      	mov	r3, r0
 8002600:	73fb      	strb	r3, [r7, #15]

			HAL_Delay(1);
 8002602:	2001      	movs	r0, #1
 8002604:	f001 f8e4 	bl	80037d0 <HAL_Delay>
		for (int i = 0; i < 140; i++){
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3301      	adds	r3, #1
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b8b      	cmp	r3, #139	@ 0x8b
 8002612:	dde7      	ble.n	80025e4 <motor_detection+0x84>
	for(int k = 0; k <3; k++){
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	3301      	adds	r3, #1
 8002618:	60bb      	str	r3, [r7, #8]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b02      	cmp	r3, #2
 800261e:	ddc3      	ble.n	80025a8 <motor_detection+0x48>
		}

	}
	PWM_STOP();
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <motor_detection+0xf4>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2200      	movs	r2, #0
 8002626:	635a      	str	r2, [r3, #52]	@ 0x34
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <motor_detection+0xf4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2200      	movs	r2, #0
 800262e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002630:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <motor_detection+0xf4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2200      	movs	r2, #0
 8002636:	63da      	str	r2, [r3, #60]	@ 0x3c

	pwmVal = 0;
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <motor_detection+0xf0>)
 800263a:	2200      	movs	r2, #0
 800263c:	801a      	strh	r2, [r3, #0]
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40012c00 	.word	0x40012c00
 800264c:	3e99999a 	.word	0x3e99999a
 8002650:	200002a0 	.word	0x200002a0
 8002654:	2000012c 	.word	0x2000012c

08002658 <check_motor_status>:

void check_motor_status(){
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
	static uint32_t last_check_time = 0;
	static uint8_t stall_counter = 0;
	static uint8_t running_counter = 0;

	uint32_t current_time = HAL_GetTick();
 800265e:	f001 f8ad 	bl	80037bc <HAL_GetTick>
 8002662:	6078      	str	r0, [r7, #4]
	if(current_time - last_check_time >= STALL_CHECK_TIME_MS){
 8002664:	4b2a      	ldr	r3, [pc, #168]	@ (8002710 <check_motor_status+0xb8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b13      	cmp	r3, #19
 800266e:	d94a      	bls.n	8002706 <check_motor_status+0xae>
		last_check_time = current_time;
 8002670:	4a27      	ldr	r2, [pc, #156]	@ (8002710 <check_motor_status+0xb8>)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6013      	str	r3, [r2, #0]

		if(app_state == RUNNING || app_state == CLOSEDLOOP){
 8002676:	4b27      	ldr	r3, [pc, #156]	@ (8002714 <check_motor_status+0xbc>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b05      	cmp	r3, #5
 800267e:	d004      	beq.n	800268a <check_motor_status+0x32>
 8002680:	4b24      	ldr	r3, [pc, #144]	@ (8002714 <check_motor_status+0xbc>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b08      	cmp	r3, #8
 8002688:	d135      	bne.n	80026f6 <check_motor_status+0x9e>
			if(last_zc_timestamp > 0 && ((current_time - last_zc_timestamp)> TIMEOUT_MOTOR_STALL_MS)){
 800268a:	4b23      	ldr	r3, [pc, #140]	@ (8002718 <check_motor_status+0xc0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d017      	beq.n	80026c2 <check_motor_status+0x6a>
 8002692:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <check_motor_status+0xc0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 800269e:	d910      	bls.n	80026c2 <check_motor_status+0x6a>
				stall_counter ++;
 80026a0:	4b1e      	ldr	r3, [pc, #120]	@ (800271c <check_motor_status+0xc4>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b1c      	ldr	r3, [pc, #112]	@ (800271c <check_motor_status+0xc4>)
 80026aa:	701a      	strb	r2, [r3, #0]
				running_counter = 0;
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <check_motor_status+0xc8>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
				if(stall_counter >= 3){
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <check_motor_status+0xc4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d91c      	bls.n	80026f4 <check_motor_status+0x9c>
					motor_stalled = true;
 80026ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002724 <check_motor_status+0xcc>)
 80026bc:	2201      	movs	r2, #1
 80026be:	701a      	strb	r2, [r3, #0]
				if(stall_counter >= 3){
 80026c0:	e018      	b.n	80026f4 <check_motor_status+0x9c>
				}

			}else{
				running_counter++;
 80026c2:	4b17      	ldr	r3, [pc, #92]	@ (8002720 <check_motor_status+0xc8>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <check_motor_status+0xc8>)
 80026cc:	701a      	strb	r2, [r3, #0]
				stall_counter = 0;
 80026ce:	4b13      	ldr	r3, [pc, #76]	@ (800271c <check_motor_status+0xc4>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
				if(running_counter >= 2 && motor_stalled){
 80026d4:	4b12      	ldr	r3, [pc, #72]	@ (8002720 <check_motor_status+0xc8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d913      	bls.n	8002704 <check_motor_status+0xac>
 80026dc:	4b11      	ldr	r3, [pc, #68]	@ (8002724 <check_motor_status+0xcc>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00e      	beq.n	8002704 <check_motor_status+0xac>
					motor_stalled = false;
 80026e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002724 <check_motor_status+0xcc>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
					running_counter = 0;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002720 <check_motor_status+0xc8>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
			if(last_zc_timestamp > 0 && ((current_time - last_zc_timestamp)> TIMEOUT_MOTOR_STALL_MS)){
 80026f2:	e007      	b.n	8002704 <check_motor_status+0xac>
 80026f4:	e006      	b.n	8002704 <check_motor_status+0xac>
				}
			}
		}else{
			running_counter = 0;
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <check_motor_status+0xc8>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
			stall_counter = 0;
 80026fc:	4b07      	ldr	r3, [pc, #28]	@ (800271c <check_motor_status+0xc4>)
 80026fe:	2200      	movs	r2, #0
 8002700:	701a      	strb	r2, [r3, #0]

		}
	}
}
 8002702:	e000      	b.n	8002706 <check_motor_status+0xae>
			if(last_zc_timestamp > 0 && ((current_time - last_zc_timestamp)> TIMEOUT_MOTOR_STALL_MS)){
 8002704:	bf00      	nop
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2000031c 	.word	0x2000031c
 8002714:	20000ba6 	.word	0x20000ba6
 8002718:	20000290 	.word	0x20000290
 800271c:	20000320 	.word	0x20000320
 8002720:	20000321 	.word	0x20000321
 8002724:	20000294 	.word	0x20000294

08002728 <map_speed>:

static inline uint16_t map_speed(uint16_t raw_speed){
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
	if(raw_speed == 0){
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <map_speed+0x16>
		raw_speed = SPEED_MIN;
 8002738:	f244 2368 	movw	r3, #17000	@ 0x4268
 800273c:	80fb      	strh	r3, [r7, #6]
	}


	if (raw_speed > SPEED_MIN) {
 800273e:	88fb      	ldrh	r3, [r7, #6]
 8002740:	f244 2268 	movw	r2, #17000	@ 0x4268
 8002744:	4293      	cmp	r3, r2
 8002746:	d903      	bls.n	8002750 <map_speed+0x28>
		raw_speed = SPEED_MIN;
 8002748:	f244 2368 	movw	r3, #17000	@ 0x4268
 800274c:	80fb      	strh	r3, [r7, #6]
 800274e:	e006      	b.n	800275e <map_speed+0x36>
	}
	else if (raw_speed <SPEED_MAX) {
 8002750:	88fb      	ldrh	r3, [r7, #6]
 8002752:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8002756:	d202      	bcs.n	800275e <map_speed+0x36>
		raw_speed = SPEED_MAX;
 8002758:	f44f 7366 	mov.w	r3, #920	@ 0x398
 800275c:	80fb      	strh	r3, [r7, #6]
	}
	uint16_t mapped_speed  = (SPEED_MIN - raw_speed) * pwm_speed_range_relation + min_limit_pwm;
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	f5c3 4384 	rsb	r3, r3, #16896	@ 0x4200
 8002764:	3368      	adds	r3, #104	@ 0x68
 8002766:	4618      	mov	r0, r3
 8002768:	f7fe f9dc 	bl	8000b24 <__aeabi_i2f>
 800276c:	4602      	mov	r2, r0
 800276e:	4b0f      	ldr	r3, [pc, #60]	@ (80027ac <map_speed+0x84>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	4610      	mov	r0, r2
 8002776:	f7fe fa29 	bl	8000bcc <__aeabi_fmul>
 800277a:	4603      	mov	r3, r0
 800277c:	461c      	mov	r4, r3
 800277e:	4b0c      	ldr	r3, [pc, #48]	@ (80027b0 <map_speed+0x88>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe f9cd 	bl	8000b24 <__aeabi_i2f>
 800278a:	4603      	mov	r3, r0
 800278c:	4619      	mov	r1, r3
 800278e:	4620      	mov	r0, r4
 8002790:	f7fe f914 	bl	80009bc <__addsf3>
 8002794:	4603      	mov	r3, r0
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fc04 	bl	8000fa4 <__aeabi_f2uiz>
 800279c:	4603      	mov	r3, r0
 800279e:	81fb      	strh	r3, [r7, #14]
	return mapped_speed;
 80027a0:	89fb      	ldrh	r3, [r7, #14]

}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	2000029c 	.word	0x2000029c
 80027b0:	20000298 	.word	0x20000298
 80027b4:	00000000 	.word	0x00000000

080027b8 <pi_control>:

void pi_control(){
 80027b8:	b5b0      	push	{r4, r5, r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80027bc:	b672      	cpsid	i
}
 80027be:	bf00      	nop
	__disable_irq();
	speed_measure =  map_speed(filtered_speed);
 80027c0:	4b7f      	ldr	r3, [pc, #508]	@ (80029c0 <pi_control+0x208>)
 80027c2:	881b      	ldrh	r3, [r3, #0]
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ffae 	bl	8002728 <map_speed>
 80027cc:	4603      	mov	r3, r0
 80027ce:	461a      	mov	r2, r3
 80027d0:	4b7c      	ldr	r3, [pc, #496]	@ (80029c4 <pi_control+0x20c>)
 80027d2:	801a      	strh	r2, [r3, #0]
	if(app_state == CLOSEDLOOP){
 80027d4:	4b7c      	ldr	r3, [pc, #496]	@ (80029c8 <pi_control+0x210>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b08      	cmp	r3, #8
 80027dc:	f040 80e5 	bne.w	80029aa <pi_control+0x1f2>
		speed_error = speed_setpoint - speed_measure;
 80027e0:	4b7a      	ldr	r3, [pc, #488]	@ (80029cc <pi_control+0x214>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	461a      	mov	r2, r3
 80027e8:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <pi_control+0x20c>)
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	4a77      	ldr	r2, [pc, #476]	@ (80029d0 <pi_control+0x218>)
 80027f2:	6013      	str	r3, [r2, #0]
		speed_proportional = (KP * speed_error)/SCALE;
 80027f4:	4b76      	ldr	r3, [pc, #472]	@ (80029d0 <pi_control+0x218>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe f993 	bl	8000b24 <__aeabi_i2f>
 80027fe:	4603      	mov	r3, r0
 8002800:	4974      	ldr	r1, [pc, #464]	@ (80029d4 <pi_control+0x21c>)
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe f9e2 	bl	8000bcc <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	461a      	mov	r2, r3
 800280c:	4b72      	ldr	r3, [pc, #456]	@ (80029d8 <pi_control+0x220>)
 800280e:	601a      	str	r2, [r3, #0]
		speed_integral += KI * (speed_error+speed_prev_error)*dt;
 8002810:	4b6f      	ldr	r3, [pc, #444]	@ (80029d0 <pi_control+0x218>)
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	4b71      	ldr	r3, [pc, #452]	@ (80029dc <pi_control+0x224>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4413      	add	r3, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe f982 	bl	8000b24 <__aeabi_i2f>
 8002820:	4603      	mov	r3, r0
 8002822:	496f      	ldr	r1, [pc, #444]	@ (80029e0 <pi_control+0x228>)
 8002824:	4618      	mov	r0, r3
 8002826:	f7fe f9d1 	bl	8000bcc <__aeabi_fmul>
 800282a:	4603      	mov	r3, r0
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe05 	bl	800043c <__aeabi_f2d>
 8002832:	a361      	add	r3, pc, #388	@ (adr r3, 80029b8 <pi_control+0x200>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd fe58 	bl	80004ec <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4614      	mov	r4, r2
 8002842:	461d      	mov	r5, r3
 8002844:	4b67      	ldr	r3, [pc, #412]	@ (80029e4 <pi_control+0x22c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f7fd fdf7 	bl	800043c <__aeabi_f2d>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4620      	mov	r0, r4
 8002854:	4629      	mov	r1, r5
 8002856:	f7fd fc93 	bl	8000180 <__adddf3>
 800285a:	4602      	mov	r2, r0
 800285c:	460b      	mov	r3, r1
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	f7fe f855 	bl	8000910 <__aeabi_d2f>
 8002866:	4603      	mov	r3, r0
 8002868:	4a5e      	ldr	r2, [pc, #376]	@ (80029e4 <pi_control+0x22c>)
 800286a:	6013      	str	r3, [r2, #0]
		speed_prev_error = speed_error;
 800286c:	4b58      	ldr	r3, [pc, #352]	@ (80029d0 <pi_control+0x218>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5a      	ldr	r2, [pc, #360]	@ (80029dc <pi_control+0x224>)
 8002872:	6013      	str	r3, [r2, #0]
		if(max_limit_pwm > speed_proportional){
 8002874:	4b5c      	ldr	r3, [pc, #368]	@ (80029e8 <pi_control+0x230>)
 8002876:	881b      	ldrh	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe f952 	bl	8000b24 <__aeabi_i2f>
 8002880:	4602      	mov	r2, r0
 8002882:	4b55      	ldr	r3, [pc, #340]	@ (80029d8 <pi_control+0x220>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4619      	mov	r1, r3
 8002888:	4610      	mov	r0, r2
 800288a:	f7fe fb5b 	bl	8000f44 <__aeabi_fcmpgt>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d011      	beq.n	80028b8 <pi_control+0x100>
			max_speed_integral = (max_limit_pwm - speed_proportional);
 8002894:	4b54      	ldr	r3, [pc, #336]	@ (80029e8 <pi_control+0x230>)
 8002896:	881b      	ldrh	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	f7fe f942 	bl	8000b24 <__aeabi_i2f>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b4d      	ldr	r3, [pc, #308]	@ (80029d8 <pi_control+0x220>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f7fe f885 	bl	80009b8 <__aeabi_fsub>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b4e      	ldr	r3, [pc, #312]	@ (80029ec <pi_control+0x234>)
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	e003      	b.n	80028c0 <pi_control+0x108>
		}
		else{
			max_speed_integral = 0;
 80028b8:	4b4c      	ldr	r3, [pc, #304]	@ (80029ec <pi_control+0x234>)
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	601a      	str	r2, [r3, #0]
		}
		if (min_limit_pwm < speed_proportional) {
 80028c0:	4b4b      	ldr	r3, [pc, #300]	@ (80029f0 <pi_control+0x238>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fe f92c 	bl	8000b24 <__aeabi_i2f>
 80028cc:	4602      	mov	r2, r0
 80028ce:	4b42      	ldr	r3, [pc, #264]	@ (80029d8 <pi_control+0x220>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4610      	mov	r0, r2
 80028d6:	f7fe fb17 	bl	8000f08 <__aeabi_fcmplt>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d011      	beq.n	8002904 <pi_control+0x14c>
			min_speed_integral = (min_limit_pwm - speed_proportional);
 80028e0:	4b43      	ldr	r3, [pc, #268]	@ (80029f0 <pi_control+0x238>)
 80028e2:	881b      	ldrh	r3, [r3, #0]
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe f91c 	bl	8000b24 <__aeabi_i2f>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <pi_control+0x220>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4619      	mov	r1, r3
 80028f4:	4610      	mov	r0, r2
 80028f6:	f7fe f85f 	bl	80009b8 <__aeabi_fsub>
 80028fa:	4603      	mov	r3, r0
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b3d      	ldr	r3, [pc, #244]	@ (80029f4 <pi_control+0x23c>)
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	e003      	b.n	800290c <pi_control+0x154>
		} else {
			min_speed_integral = 0;
 8002904:	4b3b      	ldr	r3, [pc, #236]	@ (80029f4 <pi_control+0x23c>)
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
		}
		if (speed_integral > max_speed_integral) {
 800290c:	4b35      	ldr	r3, [pc, #212]	@ (80029e4 <pi_control+0x22c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a36      	ldr	r2, [pc, #216]	@ (80029ec <pi_control+0x234>)
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	4611      	mov	r1, r2
 8002916:	4618      	mov	r0, r3
 8002918:	f7fe fb14 	bl	8000f44 <__aeabi_fcmpgt>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d004      	beq.n	800292c <pi_control+0x174>
			speed_integral = max_speed_integral;
 8002922:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <pi_control+0x234>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <pi_control+0x22c>)
 8002928:	6013      	str	r3, [r2, #0]
 800292a:	e00e      	b.n	800294a <pi_control+0x192>
		}
		else if (speed_integral < min_speed_integral) {
 800292c:	4b2d      	ldr	r3, [pc, #180]	@ (80029e4 <pi_control+0x22c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a30      	ldr	r2, [pc, #192]	@ (80029f4 <pi_control+0x23c>)
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f7fe fae6 	bl	8000f08 <__aeabi_fcmplt>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d003      	beq.n	800294a <pi_control+0x192>
			speed_integral = min_speed_integral;
 8002942:	4b2c      	ldr	r3, [pc, #176]	@ (80029f4 <pi_control+0x23c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a27      	ldr	r2, [pc, #156]	@ (80029e4 <pi_control+0x22c>)
 8002948:	6013      	str	r3, [r2, #0]
		}
		speed_output = speed_proportional + speed_integral;
 800294a:	4b23      	ldr	r3, [pc, #140]	@ (80029d8 <pi_control+0x220>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a25      	ldr	r2, [pc, #148]	@ (80029e4 <pi_control+0x22c>)
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7fe f831 	bl	80009bc <__addsf3>
 800295a:	4603      	mov	r3, r0
 800295c:	4618      	mov	r0, r3
 800295e:	f7fe fafb 	bl	8000f58 <__aeabi_f2iz>
 8002962:	4603      	mov	r3, r0
 8002964:	4a24      	ldr	r2, [pc, #144]	@ (80029f8 <pi_control+0x240>)
 8002966:	6013      	str	r3, [r2, #0]
		if(speed_output < min_limit_pwm) speed_output = min_limit_pwm;
 8002968:	4b21      	ldr	r3, [pc, #132]	@ (80029f0 <pi_control+0x238>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	b29b      	uxth	r3, r3
 800296e:	461a      	mov	r2, r3
 8002970:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <pi_control+0x240>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	dd05      	ble.n	8002984 <pi_control+0x1cc>
 8002978:	4b1d      	ldr	r3, [pc, #116]	@ (80029f0 <pi_control+0x238>)
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	b29b      	uxth	r3, r3
 800297e:	461a      	mov	r2, r3
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <pi_control+0x240>)
 8002982:	601a      	str	r2, [r3, #0]
		if(speed_output > max_limit_pwm) speed_output = max_limit_pwm;
 8002984:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <pi_control+0x230>)
 8002986:	881b      	ldrh	r3, [r3, #0]
 8002988:	b29b      	uxth	r3, r3
 800298a:	461a      	mov	r2, r3
 800298c:	4b1a      	ldr	r3, [pc, #104]	@ (80029f8 <pi_control+0x240>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	429a      	cmp	r2, r3
 8002992:	da05      	bge.n	80029a0 <pi_control+0x1e8>
 8002994:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <pi_control+0x230>)
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	461a      	mov	r2, r3
 800299c:	4b16      	ldr	r3, [pc, #88]	@ (80029f8 <pi_control+0x240>)
 800299e:	601a      	str	r2, [r3, #0]
		pwmVal = (uint16_t)speed_output ;
 80029a0:	4b15      	ldr	r3, [pc, #84]	@ (80029f8 <pi_control+0x240>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	4b15      	ldr	r3, [pc, #84]	@ (80029fc <pi_control+0x244>)
 80029a8:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029aa:	b662      	cpsie	i
}
 80029ac:	bf00      	nop
	}
	__enable_irq();
}
 80029ae:	bf00      	nop
 80029b0:	bdb0      	pop	{r4, r5, r7, pc}
 80029b2:	bf00      	nop
 80029b4:	f3af 8000 	nop.w
 80029b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80029bc:	3f60624d 	.word	0x3f60624d
 80029c0:	20000318 	.word	0x20000318
 80029c4:	200002b0 	.word	0x200002b0
 80029c8:	20000ba6 	.word	0x20000ba6
 80029cc:	200002a6 	.word	0x200002a6
 80029d0:	200002b4 	.word	0x200002b4
 80029d4:	3fb33333 	.word	0x3fb33333
 80029d8:	200002c0 	.word	0x200002c0
 80029dc:	200002a8 	.word	0x200002a8
 80029e0:	3ecccccd 	.word	0x3ecccccd
 80029e4:	200002bc 	.word	0x200002bc
 80029e8:	20000296 	.word	0x20000296
 80029ec:	200002c4 	.word	0x200002c4
 80029f0:	20000298 	.word	0x20000298
 80029f4:	200002c8 	.word	0x200002c8
 80029f8:	200002b8 	.word	0x200002b8
 80029fc:	200002a0 	.word	0x200002a0

08002a00 <generate_sine_tables>:
uint16_t sin_table_W[SIN_TABLE_SIZE] = {0};


// Versión optimizada para precisión y performance
// Versión optimizada para rendimiento
void generate_sine_tables(uint16_t max_pwm) {
 8002a00:	b590      	push	{r4, r7, lr}
 8002a02:	b08b      	sub	sp, #44	@ 0x2c
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	4603      	mov	r3, r0
 8002a08:	80fb      	strh	r3, [r7, #6]
    const float amplitude = 0.36f;
 8002a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002bf8 <generate_sine_tables+0x1f8>)
 8002a0c:	623b      	str	r3, [r7, #32]
    const uint16_t min_pwm = (uint16_t)(0.05f * max_pwm);
 8002a0e:	88fb      	ldrh	r3, [r7, #6]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f7fe f887 	bl	8000b24 <__aeabi_i2f>
 8002a16:	4603      	mov	r3, r0
 8002a18:	4978      	ldr	r1, [pc, #480]	@ (8002bfc <generate_sine_tables+0x1fc>)
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fe f8d6 	bl	8000bcc <__aeabi_fmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fe fabe 	bl	8000fa4 <__aeabi_f2uiz>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	83fb      	strh	r3, [r7, #30]
    const float offset = amplitude + 0.05f;
 8002a2c:	4973      	ldr	r1, [pc, #460]	@ (8002bfc <generate_sine_tables+0x1fc>)
 8002a2e:	6a38      	ldr	r0, [r7, #32]
 8002a30:	f7fd ffc4 	bl	80009bc <__addsf3>
 8002a34:	4603      	mov	r3, r0
 8002a36:	61bb      	str	r3, [r7, #24]

    for(int i = 0; i < SIN_TABLE_SIZE; i++) {
 8002a38:	2300      	movs	r3, #0
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3c:	e0c3      	b.n	8002bc6 <generate_sine_tables+0x1c6>
        float angle = 2 * M_PI * i / SIN_TABLE_SIZE;
 8002a3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002a40:	f7fd fcea 	bl	8000418 <__aeabi_i2d>
 8002a44:	a366      	add	r3, pc, #408	@ (adr r3, 8002be0 <generate_sine_tables+0x1e0>)
 8002a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4a:	f7fd fd4f 	bl	80004ec <__aeabi_dmul>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	4610      	mov	r0, r2
 8002a54:	4619      	mov	r1, r3
 8002a56:	f04f 0200 	mov.w	r2, #0
 8002a5a:	4b69      	ldr	r3, [pc, #420]	@ (8002c00 <generate_sine_tables+0x200>)
 8002a5c:	f7fd fe70 	bl	8000740 <__aeabi_ddiv>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	f7fd ff52 	bl	8000910 <__aeabi_d2f>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	617b      	str	r3, [r7, #20]

        // Cálculo directo para las tres fases
        uint16_t pwm_u = (uint16_t)((float)(sinf(angle) * amplitude + offset) * max_pwm);
 8002a70:	6978      	ldr	r0, [r7, #20]
 8002a72:	f005 fc85 	bl	8008380 <sinf>
 8002a76:	4603      	mov	r3, r0
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe f8a6 	bl	8000bcc <__aeabi_fmul>
 8002a80:	4603      	mov	r3, r0
 8002a82:	69b9      	ldr	r1, [r7, #24]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd ff99 	bl	80009bc <__addsf3>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461c      	mov	r4, r3
 8002a8e:	88fb      	ldrh	r3, [r7, #6]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7fe f847 	bl	8000b24 <__aeabi_i2f>
 8002a96:	4603      	mov	r3, r0
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	f7fe f896 	bl	8000bcc <__aeabi_fmul>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe fa7e 	bl	8000fa4 <__aeabi_f2uiz>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	827b      	strh	r3, [r7, #18]
        uint16_t pwm_v = (uint16_t)((float)(sinf(angle + 2*M_PI/3) * amplitude + offset) * max_pwm);
 8002aac:	6978      	ldr	r0, [r7, #20]
 8002aae:	f7fd fcc5 	bl	800043c <__aeabi_f2d>
 8002ab2:	a34d      	add	r3, pc, #308	@ (adr r3, 8002be8 <generate_sine_tables+0x1e8>)
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f7fd fb62 	bl	8000180 <__adddf3>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7fd ff24 	bl	8000910 <__aeabi_d2f>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4618      	mov	r0, r3
 8002acc:	f005 fc58 	bl	8008380 <sinf>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	6a39      	ldr	r1, [r7, #32]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fe f879 	bl	8000bcc <__aeabi_fmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fd ff6c 	bl	80009bc <__addsf3>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461c      	mov	r4, r3
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe f81a 	bl	8000b24 <__aeabi_i2f>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4619      	mov	r1, r3
 8002af4:	4620      	mov	r0, r4
 8002af6:	f7fe f869 	bl	8000bcc <__aeabi_fmul>
 8002afa:	4603      	mov	r3, r0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7fe fa51 	bl	8000fa4 <__aeabi_f2uiz>
 8002b02:	4603      	mov	r3, r0
 8002b04:	823b      	strh	r3, [r7, #16]
        uint16_t pwm_w = (uint16_t)((float)(sinf(angle + 4*M_PI/3) * amplitude + offset) * max_pwm);
 8002b06:	6978      	ldr	r0, [r7, #20]
 8002b08:	f7fd fc98 	bl	800043c <__aeabi_f2d>
 8002b0c:	a338      	add	r3, pc, #224	@ (adr r3, 8002bf0 <generate_sine_tables+0x1f0>)
 8002b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b12:	f7fd fb35 	bl	8000180 <__adddf3>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f7fd fef7 	bl	8000910 <__aeabi_d2f>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f005 fc2b 	bl	8008380 <sinf>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6a39      	ldr	r1, [r7, #32]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe f84c 	bl	8000bcc <__aeabi_fmul>
 8002b34:	4603      	mov	r3, r0
 8002b36:	69b9      	ldr	r1, [r7, #24]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd ff3f 	bl	80009bc <__addsf3>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	461c      	mov	r4, r3
 8002b42:	88fb      	ldrh	r3, [r7, #6]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd ffed 	bl	8000b24 <__aeabi_i2f>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4620      	mov	r0, r4
 8002b50:	f7fe f83c 	bl	8000bcc <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fa24 	bl	8000fa4 <__aeabi_f2uiz>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	81fb      	strh	r3, [r7, #14]

        // Aplicar límites con operaciones eficientes
        sin_table_U[i] = pwm_u > max_pwm ? max_pwm : (pwm_u < min_pwm ? min_pwm : pwm_u);
 8002b60:	8a7a      	ldrh	r2, [r7, #18]
 8002b62:	88fb      	ldrh	r3, [r7, #6]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d806      	bhi.n	8002b76 <generate_sine_tables+0x176>
 8002b68:	8a7a      	ldrh	r2, [r7, #18]
 8002b6a:	8bfb      	ldrh	r3, [r7, #30]
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	bf38      	it	cc
 8002b70:	4613      	movcc	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	e000      	b.n	8002b78 <generate_sine_tables+0x178>
 8002b76:	88fb      	ldrh	r3, [r7, #6]
 8002b78:	4922      	ldr	r1, [pc, #136]	@ (8002c04 <generate_sine_tables+0x204>)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        sin_table_V[i] = pwm_v > max_pwm ? max_pwm : (pwm_v < min_pwm ? min_pwm : pwm_v);
 8002b80:	8a3a      	ldrh	r2, [r7, #16]
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d806      	bhi.n	8002b96 <generate_sine_tables+0x196>
 8002b88:	8a3a      	ldrh	r2, [r7, #16]
 8002b8a:	8bfb      	ldrh	r3, [r7, #30]
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	bf38      	it	cc
 8002b90:	4613      	movcc	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	e000      	b.n	8002b98 <generate_sine_tables+0x198>
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	491b      	ldr	r1, [pc, #108]	@ (8002c08 <generate_sine_tables+0x208>)
 8002b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b9c:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
        sin_table_W[i] = pwm_w > max_pwm ? max_pwm : (pwm_w < min_pwm ? min_pwm : pwm_w);
 8002ba0:	89fa      	ldrh	r2, [r7, #14]
 8002ba2:	88fb      	ldrh	r3, [r7, #6]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d806      	bhi.n	8002bb6 <generate_sine_tables+0x1b6>
 8002ba8:	89fa      	ldrh	r2, [r7, #14]
 8002baa:	8bfb      	ldrh	r3, [r7, #30]
 8002bac:	4293      	cmp	r3, r2
 8002bae:	bf38      	it	cc
 8002bb0:	4613      	movcc	r3, r2
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	e000      	b.n	8002bb8 <generate_sine_tables+0x1b8>
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	4914      	ldr	r1, [pc, #80]	@ (8002c0c <generate_sine_tables+0x20c>)
 8002bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bbc:	f821 3012 	strh.w	r3, [r1, r2, lsl #1]
    for(int i = 0; i < SIN_TABLE_SIZE; i++) {
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002bcc:	f6ff af37 	blt.w	8002a3e <generate_sine_tables+0x3e>
    }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	372c      	adds	r7, #44	@ 0x2c
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd90      	pop	{r4, r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	f3af 8000 	nop.w
 8002be0:	54442d18 	.word	0x54442d18
 8002be4:	401921fb 	.word	0x401921fb
 8002be8:	382d7365 	.word	0x382d7365
 8002bec:	4000c152 	.word	0x4000c152
 8002bf0:	382d7365 	.word	0x382d7365
 8002bf4:	4010c152 	.word	0x4010c152
 8002bf8:	3eb851ec 	.word	0x3eb851ec
 8002bfc:	3d4ccccd 	.word	0x3d4ccccd
 8002c00:	40768000 	.word	0x40768000
 8002c04:	20000324 	.word	0x20000324
 8002c08:	200005f4 	.word	0x200005f4
 8002c0c:	200008c4 	.word	0x200008c4

08002c10 <foc_startup>:
SineDriveController sine_ctrl = {
    .phase_step = 3,
    .modulation_index = 0.1f,  // Valor inicial bajo
    .timer_arr = 9999// Frecuencia inicial baja (~50 Hz)
};
void foc_startup(void){
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0

	generate_sine_tables(TIM1->ARR);
 8002c14:	4b1b      	ldr	r3, [pc, #108]	@ (8002c84 <foc_startup+0x74>)
 8002c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fef0 	bl	8002a00 <generate_sine_tables>
    // 2. Configurar timer para actualización PWM
    TIM4->PSC =  5 -1;
 8002c20:	4b19      	ldr	r3, [pc, #100]	@ (8002c88 <foc_startup+0x78>)
 8002c22:	2204      	movs	r2, #4
 8002c24:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = sine_ctrl.timer_arr;
 8002c26:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <foc_startup+0x7c>)
 8002c28:	895a      	ldrh	r2, [r3, #10]
 8002c2a:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <foc_startup+0x78>)
 8002c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM4->CCR2 = 26;           // Valor inicial del comparador
 8002c2e:	4b16      	ldr	r3, [pc, #88]	@ (8002c88 <foc_startup+0x78>)
 8002c30:	221a      	movs	r2, #26
 8002c32:	639a      	str	r2, [r3, #56]	@ 0x38
	app_state = FOC_STARTUP;
 8002c34:	4b16      	ldr	r3, [pc, #88]	@ (8002c90 <foc_startup+0x80>)
 8002c36:	2203      	movs	r2, #3
 8002c38:	701a      	strb	r2, [r3, #0]
	PWM_INIT();
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	4815      	ldr	r0, [pc, #84]	@ (8002c94 <foc_startup+0x84>)
 8002c3e:	f002 fa1d 	bl	800507c <HAL_TIM_PWM_Start>
 8002c42:	2104      	movs	r1, #4
 8002c44:	4813      	ldr	r0, [pc, #76]	@ (8002c94 <foc_startup+0x84>)
 8002c46:	f002 fa19 	bl	800507c <HAL_TIM_PWM_Start>
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	4811      	ldr	r0, [pc, #68]	@ (8002c94 <foc_startup+0x84>)
 8002c4e:	f002 fa15 	bl	800507c <HAL_TIM_PWM_Start>
	GPIOB->ODR |= EN_U;
 8002c52:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <foc_startup+0x88>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4a10      	ldr	r2, [pc, #64]	@ (8002c98 <foc_startup+0x88>)
 8002c58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c5c:	60d3      	str	r3, [r2, #12]
	GPIOB->ODR |= EN_V;
 8002c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c98 <foc_startup+0x88>)
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	4a0d      	ldr	r2, [pc, #52]	@ (8002c98 <foc_startup+0x88>)
 8002c64:	f043 0302 	orr.w	r3, r3, #2
 8002c68:	60d3      	str	r3, [r2, #12]
	GPIOA->ODR |= EN_W;
 8002c6a:	4b0c      	ldr	r3, [pc, #48]	@ (8002c9c <foc_startup+0x8c>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a0b      	ldr	r2, [pc, #44]	@ (8002c9c <foc_startup+0x8c>)
 8002c70:	f043 0320 	orr.w	r3, r3, #32
 8002c74:	60d3      	str	r3, [r2, #12]
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_2);
 8002c76:	2104      	movs	r1, #4
 8002c78:	4809      	ldr	r0, [pc, #36]	@ (8002ca0 <foc_startup+0x90>)
 8002c7a:	f002 f805 	bl	8004c88 <HAL_TIM_OC_Start_IT>

}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40012c00 	.word	0x40012c00
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	20000010 	.word	0x20000010
 8002c90:	20000ba6 	.word	0x20000ba6
 8002c94:	2000012c 	.word	0x2000012c
 8002c98:	40010c00 	.word	0x40010c00
 8002c9c:	40010800 	.word	0x40010800
 8002ca0:	200001bc 	.word	0x200001bc

08002ca4 <update_pwm_startup_foc>:

volatile uint16_t pwm_u =0;
volatile uint16_t pwm_v = 0;
volatile uint16_t pwm_w = 0;
void update_pwm_startup_foc() {
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
    // Actualización del contador de fase con protección contra overflow
    static uint16_t phase_counter = 0;
    static uint16_t it_count = 0;
    phase_counter += sine_ctrl.phase_step;
 8002caa:	4b59      	ldr	r3, [pc, #356]	@ (8002e10 <update_pwm_startup_foc+0x16c>)
 8002cac:	789b      	ldrb	r3, [r3, #2]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b58      	ldr	r3, [pc, #352]	@ (8002e14 <update_pwm_startup_foc+0x170>)
 8002cb2:	881b      	ldrh	r3, [r3, #0]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	4b56      	ldr	r3, [pc, #344]	@ (8002e14 <update_pwm_startup_foc+0x170>)
 8002cba:	801a      	strh	r2, [r3, #0]
    if(phase_counter >= SIN_TABLE_SIZE) {
 8002cbc:	4b55      	ldr	r3, [pc, #340]	@ (8002e14 <update_pwm_startup_foc+0x170>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8002cc4:	d306      	bcc.n	8002cd4 <update_pwm_startup_foc+0x30>
        phase_counter -= SIN_TABLE_SIZE;  // Más eficiente que módulo
 8002cc6:	4b53      	ldr	r3, [pc, #332]	@ (8002e14 <update_pwm_startup_foc+0x170>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	4b50      	ldr	r3, [pc, #320]	@ (8002e14 <update_pwm_startup_foc+0x170>)
 8002cd2:	801a      	strh	r2, [r3, #0]
    }
    it_count++;
 8002cd4:	4b50      	ldr	r3, [pc, #320]	@ (8002e18 <update_pwm_startup_foc+0x174>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8002e18 <update_pwm_startup_foc+0x174>)
 8002cde:	801a      	strh	r2, [r3, #0]
    if(it_count == 600){
 8002ce0:	4b4d      	ldr	r3, [pc, #308]	@ (8002e18 <update_pwm_startup_foc+0x174>)
 8002ce2:	881b      	ldrh	r3, [r3, #0]
 8002ce4:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002ce8:	d105      	bne.n	8002cf6 <update_pwm_startup_foc+0x52>
    	sine_ctrl.phase_step = 5;
 8002cea:	4b49      	ldr	r3, [pc, #292]	@ (8002e10 <update_pwm_startup_foc+0x16c>)
 8002cec:	2205      	movs	r2, #5
 8002cee:	709a      	strb	r2, [r3, #2]
    	TIM4->CCR2 =24;
 8002cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8002e1c <update_pwm_startup_foc+0x178>)
 8002cf2:	2218      	movs	r2, #24
 8002cf4:	639a      	str	r2, [r3, #56]	@ 0x38
    }

    if(it_count >=1300){
 8002cf6:	4b48      	ldr	r3, [pc, #288]	@ (8002e18 <update_pwm_startup_foc+0x174>)
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f240 5213 	movw	r2, #1299	@ 0x513
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d902      	bls.n	8002d08 <update_pwm_startup_foc+0x64>
    	executeTransition();
 8002d02:	f000 f8a1 	bl	8002e48 <executeTransition>
    	return;
 8002d06:	e07f      	b.n	8002e08 <update_pwm_startup_foc+0x164>
    }

    // Cálculo de índices con desplazamiento de 120°
    uint16_t idx_u = phase_counter;
 8002d08:	4b42      	ldr	r3, [pc, #264]	@ (8002e14 <update_pwm_startup_foc+0x170>)
 8002d0a:	881b      	ldrh	r3, [r3, #0]
 8002d0c:	80fb      	strh	r3, [r7, #6]
    uint16_t idx_v = (idx_u + SIN_TABLE_SIZE/3) % SIN_TABLE_SIZE;
 8002d0e:	88fb      	ldrh	r3, [r7, #6]
 8002d10:	3378      	adds	r3, #120	@ 0x78
 8002d12:	4a43      	ldr	r2, [pc, #268]	@ (8002e20 <update_pwm_startup_foc+0x17c>)
 8002d14:	fb82 1203 	smull	r1, r2, r2, r3
 8002d18:	441a      	add	r2, r3
 8002d1a:	1211      	asrs	r1, r2, #8
 8002d1c:	17da      	asrs	r2, r3, #31
 8002d1e:	1a8a      	subs	r2, r1, r2
 8002d20:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002d24:	fb01 f202 	mul.w	r2, r1, r2
 8002d28:	1a9a      	subs	r2, r3, r2
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80bb      	strh	r3, [r7, #4]
    uint16_t idx_w = (idx_u + 2*SIN_TABLE_SIZE/3) % SIN_TABLE_SIZE;
 8002d2e:	88fb      	ldrh	r3, [r7, #6]
 8002d30:	33f0      	adds	r3, #240	@ 0xf0
 8002d32:	4a3b      	ldr	r2, [pc, #236]	@ (8002e20 <update_pwm_startup_foc+0x17c>)
 8002d34:	fb82 1203 	smull	r1, r2, r2, r3
 8002d38:	441a      	add	r2, r3
 8002d3a:	1211      	asrs	r1, r2, #8
 8002d3c:	17da      	asrs	r2, r3, #31
 8002d3e:	1a8a      	subs	r2, r1, r2
 8002d40:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8002d44:	fb01 f202 	mul.w	r2, r1, r2
 8002d48:	1a9a      	subs	r2, r3, r2
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	807b      	strh	r3, [r7, #2]

    // Aplicación de modulación con suavizado
    static uint16_t prev_pwm[3] = {0};
    const uint8_t filter_coeff = 3;  // Factor de suavizado (1-5)
 8002d4e:	2303      	movs	r3, #3
 8002d50:	707b      	strb	r3, [r7, #1]

     pwm_u = (prev_pwm[0] * (filter_coeff-1) + sin_table_U[idx_u]) / filter_coeff;
 8002d52:	4b34      	ldr	r3, [pc, #208]	@ (8002e24 <update_pwm_startup_foc+0x180>)
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	461a      	mov	r2, r3
 8002d58:	787b      	ldrb	r3, [r7, #1]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	88fa      	ldrh	r2, [r7, #6]
 8002d62:	4931      	ldr	r1, [pc, #196]	@ (8002e28 <update_pwm_startup_foc+0x184>)
 8002d64:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002d68:	441a      	add	r2, r3
 8002d6a:	787b      	ldrb	r3, [r7, #1]
 8002d6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	4b2e      	ldr	r3, [pc, #184]	@ (8002e2c <update_pwm_startup_foc+0x188>)
 8002d74:	801a      	strh	r2, [r3, #0]
     pwm_v = (prev_pwm[1] * (filter_coeff-1) + sin_table_V[idx_v]) / filter_coeff;
 8002d76:	4b2b      	ldr	r3, [pc, #172]	@ (8002e24 <update_pwm_startup_foc+0x180>)
 8002d78:	885b      	ldrh	r3, [r3, #2]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	787b      	ldrb	r3, [r7, #1]
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	88ba      	ldrh	r2, [r7, #4]
 8002d86:	492a      	ldr	r1, [pc, #168]	@ (8002e30 <update_pwm_startup_foc+0x18c>)
 8002d88:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002d8c:	441a      	add	r2, r3
 8002d8e:	787b      	ldrb	r3, [r7, #1]
 8002d90:	fb92 f3f3 	sdiv	r3, r2, r3
 8002d94:	b29a      	uxth	r2, r3
 8002d96:	4b27      	ldr	r3, [pc, #156]	@ (8002e34 <update_pwm_startup_foc+0x190>)
 8002d98:	801a      	strh	r2, [r3, #0]
     pwm_w = (prev_pwm[2] * (filter_coeff-1) + sin_table_W[idx_w]) / filter_coeff;
 8002d9a:	4b22      	ldr	r3, [pc, #136]	@ (8002e24 <update_pwm_startup_foc+0x180>)
 8002d9c:	889b      	ldrh	r3, [r3, #4]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	787b      	ldrb	r3, [r7, #1]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	fb02 f303 	mul.w	r3, r2, r3
 8002da8:	887a      	ldrh	r2, [r7, #2]
 8002daa:	4923      	ldr	r1, [pc, #140]	@ (8002e38 <update_pwm_startup_foc+0x194>)
 8002dac:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8002db0:	441a      	add	r2, r3
 8002db2:	787b      	ldrb	r3, [r7, #1]
 8002db4:	fb92 f3f3 	sdiv	r3, r2, r3
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	4b20      	ldr	r3, [pc, #128]	@ (8002e3c <update_pwm_startup_foc+0x198>)
 8002dbc:	801a      	strh	r2, [r3, #0]

    // Actualizar PWM
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pwm_u);
 8002dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <update_pwm_startup_foc+0x188>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e40 <update_pwm_startup_foc+0x19c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, pwm_v);
 8002dca:	4b1a      	ldr	r3, [pc, #104]	@ (8002e34 <update_pwm_startup_foc+0x190>)
 8002dcc:	881b      	ldrh	r3, [r3, #0]
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8002e40 <update_pwm_startup_foc+0x19c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, pwm_w);
 8002dd6:	4b19      	ldr	r3, [pc, #100]	@ (8002e3c <update_pwm_startup_foc+0x198>)
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	4b18      	ldr	r3, [pc, #96]	@ (8002e40 <update_pwm_startup_foc+0x19c>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Guardar valores para siguiente iteración
    prev_pwm[0] = pwm_u;
 8002de2:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <update_pwm_startup_foc+0x188>)
 8002de4:	881b      	ldrh	r3, [r3, #0]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	4b0e      	ldr	r3, [pc, #56]	@ (8002e24 <update_pwm_startup_foc+0x180>)
 8002dea:	801a      	strh	r2, [r3, #0]
    prev_pwm[1] = pwm_v;
 8002dec:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <update_pwm_startup_foc+0x190>)
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	4b0c      	ldr	r3, [pc, #48]	@ (8002e24 <update_pwm_startup_foc+0x180>)
 8002df4:	805a      	strh	r2, [r3, #2]
    prev_pwm[2] = pwm_w;
 8002df6:	4b11      	ldr	r3, [pc, #68]	@ (8002e3c <update_pwm_startup_foc+0x198>)
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <update_pwm_startup_foc+0x180>)
 8002dfe:	809a      	strh	r2, [r3, #4]
    __HAL_TIM_SET_COUNTER(&htim4,0);
 8002e00:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <update_pwm_startup_foc+0x1a0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000010 	.word	0x20000010
 8002e14:	20000b9c 	.word	0x20000b9c
 8002e18:	20000b9e 	.word	0x20000b9e
 8002e1c:	40000800 	.word	0x40000800
 8002e20:	b60b60b7 	.word	0xb60b60b7
 8002e24:	20000ba0 	.word	0x20000ba0
 8002e28:	20000324 	.word	0x20000324
 8002e2c:	20000b96 	.word	0x20000b96
 8002e30:	200005f4 	.word	0x200005f4
 8002e34:	20000b98 	.word	0x20000b98
 8002e38:	200008c4 	.word	0x200008c4
 8002e3c:	20000b9a 	.word	0x20000b9a
 8002e40:	2000012c 	.word	0x2000012c
 8002e44:	200001bc 	.word	0x200001bc

08002e48 <executeTransition>:


void executeTransition(void) {
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
    // Configurar para six-step
    pwmVal = max_pwm * 0.3f;  // 30% duty cycle inicial
 8002e4c:	4b28      	ldr	r3, [pc, #160]	@ (8002ef0 <executeTransition+0xa8>)
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fd fe66 	bl	8000b24 <__aeabi_i2f>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	4926      	ldr	r1, [pc, #152]	@ (8002ef4 <executeTransition+0xac>)
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fd feb5 	bl	8000bcc <__aeabi_fmul>
 8002e62:	4603      	mov	r3, r0
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7fe f89d 	bl	8000fa4 <__aeabi_f2uiz>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <executeTransition+0xb0>)
 8002e70:	801a      	strh	r2, [r3, #0]

    // Desactivar salidas temporalmente
    GPIOB->ODR &= ~EN_U;
 8002e72:	4b22      	ldr	r3, [pc, #136]	@ (8002efc <executeTransition+0xb4>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <executeTransition+0xb4>)
 8002e78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e7c:	60d3      	str	r3, [r2, #12]
    GPIOB->ODR &= ~EN_V;
 8002e7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002efc <executeTransition+0xb4>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	4a1e      	ldr	r2, [pc, #120]	@ (8002efc <executeTransition+0xb4>)
 8002e84:	f023 0302 	bic.w	r3, r3, #2
 8002e88:	60d3      	str	r3, [r2, #12]
    GPIOA->ODR &= ~EN_W;
 8002e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f00 <executeTransition+0xb8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f00 <executeTransition+0xb8>)
 8002e90:	f023 0320 	bic.w	r3, r3, #32
 8002e94:	60d3      	str	r3, [r2, #12]

    // Detener PWM sinusoidal
    PWM_STOP();
 8002e96:	4b1b      	ldr	r3, [pc, #108]	@ (8002f04 <executeTransition+0xbc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9e:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <executeTransition+0xbc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	639a      	str	r2, [r3, #56]	@ 0x38
 8002ea6:	4b17      	ldr	r3, [pc, #92]	@ (8002f04 <executeTransition+0xbc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	63da      	str	r2, [r3, #60]	@ 0x3c

    // Inicializar configuración six-step
    PWM_INIT();
 8002eae:	2100      	movs	r1, #0
 8002eb0:	4814      	ldr	r0, [pc, #80]	@ (8002f04 <executeTransition+0xbc>)
 8002eb2:	f002 f8e3 	bl	800507c <HAL_TIM_PWM_Start>
 8002eb6:	2104      	movs	r1, #4
 8002eb8:	4812      	ldr	r0, [pc, #72]	@ (8002f04 <executeTransition+0xbc>)
 8002eba:	f002 f8df 	bl	800507c <HAL_TIM_PWM_Start>
 8002ebe:	2108      	movs	r1, #8
 8002ec0:	4810      	ldr	r0, [pc, #64]	@ (8002f04 <executeTransition+0xbc>)
 8002ec2:	f002 f8db 	bl	800507c <HAL_TIM_PWM_Start>

    // Configurar estado de las fases
    float_U = true;
 8002ec6:	4b10      	ldr	r3, [pc, #64]	@ (8002f08 <executeTransition+0xc0>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	701a      	strb	r2, [r3, #0]
    float_V = true;
 8002ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8002f0c <executeTransition+0xc4>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
    float_W = true;
 8002ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8002f10 <executeTransition+0xc8>)
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]

    // Cambiar estado de la aplicación
    app_state = RUNNING;
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <executeTransition+0xcc>)
 8002eda:	2205      	movs	r2, #5
 8002edc:	701a      	strb	r2, [r3, #0]

    // Detener timer de actualización sinusoidal
    HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002ede:	2104      	movs	r1, #4
 8002ee0:	480d      	ldr	r0, [pc, #52]	@ (8002f18 <executeTransition+0xd0>)
 8002ee2:	f001 ffc1 	bl	8004e68 <HAL_TIM_OC_Stop_IT>

    // Resetear variables
    ready_for_running = false;
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8002f1c <executeTransition+0xd4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	200002ae 	.word	0x200002ae
 8002ef4:	3e99999a 	.word	0x3e99999a
 8002ef8:	200002a0 	.word	0x200002a0
 8002efc:	40010c00 	.word	0x40010c00
 8002f00:	40010800 	.word	0x40010800
 8002f04:	2000012c 	.word	0x2000012c
 8002f08:	200002a4 	.word	0x200002a4
 8002f0c:	200002a5 	.word	0x200002a5
 8002f10:	200002a3 	.word	0x200002a3
 8002f14:	20000ba6 	.word	0x20000ba6
 8002f18:	200001bc 	.word	0x200001bc
 8002f1c:	20000b94 	.word	0x20000b94

08002f20 <handleState>:
 		{RUNNING, &eventFlag, 1},
		{STARTUP, &startup_flag, STARTUP_TIME_X},
 		{IDLE, NULL, 0}
 };

App_States_t handleState(void){
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	switch(app_state){
 8002f24:	4b7d      	ldr	r3, [pc, #500]	@ (800311c <handleState+0x1fc>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b0a      	cmp	r3, #10
 8002f2c:	f200 80f1 	bhi.w	8003112 <handleState+0x1f2>
 8002f30:	a201      	add	r2, pc, #4	@ (adr r2, 8002f38 <handleState+0x18>)
 8002f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f36:	bf00      	nop
 8002f38:	08002f65 	.word	0x08002f65
 8002f3c:	08002f91 	.word	0x08002f91
 8002f40:	08002fef 	.word	0x08002fef
 8002f44:	08003013 	.word	0x08003013
 8002f48:	08003047 	.word	0x08003047
 8002f4c:	08003025 	.word	0x08003025
 8002f50:	08003001 	.word	0x08003001
 8002f54:	080030b5 	.word	0x080030b5
 8002f58:	08003093 	.word	0x08003093
 8002f5c:	080030df 	.word	0x080030df
 8002f60:	080030f1 	.word	0x080030f1
	case IDLE:
		if(!__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE)){
 8002f64:	4b6e      	ldr	r3, [pc, #440]	@ (8003120 <handleState+0x200>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f040 80ca 	bne.w	8003108 <handleState+0x1e8>
			__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8002f74:	4b6a      	ldr	r3, [pc, #424]	@ (8003120 <handleState+0x200>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	4b69      	ldr	r3, [pc, #420]	@ (8003120 <handleState+0x200>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0220 	orr.w	r2, r2, #32
 8002f82:	60da      	str	r2, [r3, #12]
			HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8002f84:	2201      	movs	r2, #1
 8002f86:	4967      	ldr	r1, [pc, #412]	@ (8003124 <handleState+0x204>)
 8002f88:	4865      	ldr	r0, [pc, #404]	@ (8003120 <handleState+0x200>)
 8002f8a:	f003 fb53 	bl	8006634 <HAL_UART_Receive_IT>
		}
		break;
 8002f8e:	e0bb      	b.n	8003108 <handleState+0x1e8>

	case PROCESS_COMMAND:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8002f90:	4b63      	ldr	r3, [pc, #396]	@ (8003120 <handleState+0x200>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	4b62      	ldr	r3, [pc, #392]	@ (8003120 <handleState+0x200>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0220 	bic.w	r2, r2, #32
 8002f9e:	60da      	str	r2, [r3, #12]

		if(cmd_received_ack ){
 8002fa0:	4b61      	ldr	r3, [pc, #388]	@ (8003128 <handleState+0x208>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d01d      	beq.n	8002fe6 <handleState+0xc6>
			processCommand((char*) rx_buffer);
 8002faa:	4860      	ldr	r0, [pc, #384]	@ (800312c <handleState+0x20c>)
 8002fac:	f7fe f8a4 	bl	80010f8 <processCommand>
			if(!running_cmd_ack && !set_cmd_received_ack)app_state = IDLE;
 8002fb0:	4b5f      	ldr	r3, [pc, #380]	@ (8003130 <handleState+0x210>)
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d107      	bne.n	8002fca <handleState+0xaa>
 8002fba:	4b5e      	ldr	r3, [pc, #376]	@ (8003134 <handleState+0x214>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d102      	bne.n	8002fca <handleState+0xaa>
 8002fc4:	4b55      	ldr	r3, [pc, #340]	@ (800311c <handleState+0x1fc>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	701a      	strb	r2, [r3, #0]
			if(set_cmd_received_ack){
 8002fca:	4b5a      	ldr	r3, [pc, #360]	@ (8003134 <handleState+0x214>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d008      	beq.n	8002fe6 <handleState+0xc6>
				esc_config_done = 0;
 8002fd4:	4b58      	ldr	r3, [pc, #352]	@ (8003138 <handleState+0x218>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	701a      	strb	r2, [r3, #0]
				motor_control_config_done = 0;
 8002fda:	4b58      	ldr	r3, [pc, #352]	@ (800313c <handleState+0x21c>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
				app_state = CONFIG;
 8002fe0:	4b4e      	ldr	r3, [pc, #312]	@ (800311c <handleState+0x1fc>)
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	701a      	strb	r2, [r3, #0]

			}
		}
		cmd_received_ack = 0;
 8002fe6:	4b50      	ldr	r3, [pc, #320]	@ (8003128 <handleState+0x208>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
		break;
 8002fec:	e091      	b.n	8003112 <handleState+0x1f2>

	case STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8002fee:	4b4c      	ldr	r3, [pc, #304]	@ (8003120 <handleState+0x200>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8003120 <handleState+0x200>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0220 	bic.w	r2, r2, #32
 8002ffc:	60da      	str	r2, [r3, #12]
		break;
 8002ffe:	e088      	b.n	8003112 <handleState+0x1f2>
	case ALIGNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8003000:	4b47      	ldr	r3, [pc, #284]	@ (8003120 <handleState+0x200>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	4b46      	ldr	r3, [pc, #280]	@ (8003120 <handleState+0x200>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0220 	bic.w	r2, r2, #32
 800300e:	60da      	str	r2, [r3, #12]
		break;
 8003010:	e07f      	b.n	8003112 <handleState+0x1f2>
	case FOC_STARTUP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8003012:	4b43      	ldr	r3, [pc, #268]	@ (8003120 <handleState+0x200>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	4b41      	ldr	r3, [pc, #260]	@ (8003120 <handleState+0x200>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0220 	bic.w	r2, r2, #32
 8003020:	60da      	str	r2, [r3, #12]
		break;
 8003022:	e076      	b.n	8003112 <handleState+0x1f2>
	case RUNNING:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8003024:	4b3e      	ldr	r3, [pc, #248]	@ (8003120 <handleState+0x200>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	4b3d      	ldr	r3, [pc, #244]	@ (8003120 <handleState+0x200>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0220 	bic.w	r2, r2, #32
 8003032:	60da      	str	r2, [r3, #12]
		if(consistent_zero_crossing){
 8003034:	4b42      	ldr	r3, [pc, #264]	@ (8003140 <handleState+0x220>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d066      	beq.n	800310c <handleState+0x1ec>
			app_state = CLOSEDLOOP;
 800303e:	4b37      	ldr	r3, [pc, #220]	@ (800311c <handleState+0x1fc>)
 8003040:	2208      	movs	r2, #8
 8003042:	701a      	strb	r2, [r3, #0]
		}
		break;
 8003044:	e062      	b.n	800310c <handleState+0x1ec>
	case CONFIG:
		if(!esc_config_done && !motor_control_config_done)update_all_esc();
 8003046:	4b3c      	ldr	r3, [pc, #240]	@ (8003138 <handleState+0x218>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d106      	bne.n	800305e <handleState+0x13e>
 8003050:	4b3a      	ldr	r3, [pc, #232]	@ (800313c <handleState+0x21c>)
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <handleState+0x13e>
 800305a:	f7fe fa83 	bl	8001564 <update_all_esc>
		if(esc_config_done  && !motor_control_config_done)update_all_motor_control();
 800305e:	4b36      	ldr	r3, [pc, #216]	@ (8003138 <handleState+0x218>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <handleState+0x156>
 8003068:	4b34      	ldr	r3, [pc, #208]	@ (800313c <handleState+0x21c>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <handleState+0x156>
 8003072:	f7ff f82d 	bl	80020d0 <update_all_motor_control>
		if(esc_config_done && motor_control_config_done) app_state = IDLE;
 8003076:	4b30      	ldr	r3, [pc, #192]	@ (8003138 <handleState+0x218>)
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d047      	beq.n	8003110 <handleState+0x1f0>
 8003080:	4b2e      	ldr	r3, [pc, #184]	@ (800313c <handleState+0x21c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d042      	beq.n	8003110 <handleState+0x1f0>
 800308a:	4b24      	ldr	r3, [pc, #144]	@ (800311c <handleState+0x1fc>)
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]
		break;
 8003090:	e03e      	b.n	8003110 <handleState+0x1f0>
	case CLOSEDLOOP:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8003092:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <handleState+0x200>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	4b21      	ldr	r3, [pc, #132]	@ (8003120 <handleState+0x200>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0220 	bic.w	r2, r2, #32
 80030a0:	60da      	str	r2, [r3, #12]

		HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 80030a2:	2100      	movs	r1, #0
 80030a4:	4827      	ldr	r0, [pc, #156]	@ (8003144 <handleState+0x224>)
 80030a6:	f001 fdef 	bl	8004c88 <HAL_TIM_OC_Start_IT>
		__HAL_TIM_SET_COUNTER(&htim4, 0);
 80030aa:	4b26      	ldr	r3, [pc, #152]	@ (8003144 <handleState+0x224>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2200      	movs	r2, #0
 80030b0:	625a      	str	r2, [r3, #36]	@ 0x24
		//closedLoop();
		break;
 80030b2:	e02e      	b.n	8003112 <handleState+0x1f2>
	case READY:
		TIM4->PSC = 2;
 80030b4:	4b24      	ldr	r3, [pc, #144]	@ (8003148 <handleState+0x228>)
 80030b6:	2202      	movs	r2, #2
 80030b8:	629a      	str	r2, [r3, #40]	@ 0x28
		TIM4->ARR = 0xFFFF; //
 80030ba:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <handleState+0x228>)
 80030bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80030c0:	62da      	str	r2, [r3, #44]	@ 0x2c
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 48000); //output compare 1kHz
 80030c2:	4b20      	ldr	r3, [pc, #128]	@ (8003144 <handleState+0x224>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80030ca:	635a      	str	r2, [r3, #52]	@ 0x34

		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <handleState+0x200>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68da      	ldr	r2, [r3, #12]
 80030d2:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <handleState+0x200>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f022 0220 	bic.w	r2, r2, #32
 80030da:	60da      	str	r2, [r3, #12]

		break;
 80030dc:	e019      	b.n	8003112 <handleState+0x1f2>
	case STOPPED:
		__HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <handleState+0x200>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	68da      	ldr	r2, [r3, #12]
 80030e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <handleState+0x200>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0220 	bic.w	r2, r2, #32
 80030ec:	60da      	str	r2, [r3, #12]
		break;
 80030ee:	e010      	b.n	8003112 <handleState+0x1f2>

	case FINISH:
		// Asegúrate de que las interrupciones de UART estén habilitadas al finalizar
		__HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80030f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <handleState+0x200>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68da      	ldr	r2, [r3, #12]
 80030f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003120 <handleState+0x200>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0220 	orr.w	r2, r2, #32
 80030fe:	60da      	str	r2, [r3, #12]
		app_state = IDLE; // Vuelve al estado IDLE
 8003100:	4b06      	ldr	r3, [pc, #24]	@ (800311c <handleState+0x1fc>)
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]

		break;
 8003106:	e004      	b.n	8003112 <handleState+0x1f2>
		break;
 8003108:	bf00      	nop
 800310a:	e002      	b.n	8003112 <handleState+0x1f2>
		break;
 800310c:	bf00      	nop
 800310e:	e000      	b.n	8003112 <handleState+0x1f2>
		break;
 8003110:	bf00      	nop


	}
	return (app_state);
 8003112:	4b02      	ldr	r3, [pc, #8]	@ (800311c <handleState+0x1fc>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b2db      	uxtb	r3, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	20000ba6 	.word	0x20000ba6
 8003120:	20000204 	.word	0x20000204
 8003124:	20000098 	.word	0x20000098
 8003128:	200000bd 	.word	0x200000bd
 800312c:	2000009c 	.word	0x2000009c
 8003130:	200000bf 	.word	0x200000bf
 8003134:	200000be 	.word	0x200000be
 8003138:	20000121 	.word	0x20000121
 800313c:	200002ac 	.word	0x200002ac
 8003140:	200002ad 	.word	0x200002ad
 8003144:	200001bc 	.word	0x200001bc
 8003148:	40000800 	.word	0x40000800

0800314c <event_delay>:

void event_delay(void) {
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
	__HAL_TIM_DISABLE(&htim4);
 8003152:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <event_delay+0xfc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6a1a      	ldr	r2, [r3, #32]
 8003158:	f241 1311 	movw	r3, #4369	@ 0x1111
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10f      	bne.n	8003182 <event_delay+0x36>
 8003162:	4b39      	ldr	r3, [pc, #228]	@ (8003248 <event_delay+0xfc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a1a      	ldr	r2, [r3, #32]
 8003168:	f240 4344 	movw	r3, #1092	@ 0x444
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d107      	bne.n	8003182 <event_delay+0x36>
 8003172:	4b35      	ldr	r3, [pc, #212]	@ (8003248 <event_delay+0xfc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <event_delay+0xfc>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0201 	bic.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <event_delay+0xfc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Stop_IT(&htim4);
 800318a:	482f      	ldr	r0, [pc, #188]	@ (8003248 <event_delay+0xfc>)
 800318c:	f001 fcf6 	bl	8004b7c <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop(&htim4);
 8003190:	482d      	ldr	r0, [pc, #180]	@ (8003248 <event_delay+0xfc>)
 8003192:	f001 fc7a 	bl	8004a8a <HAL_TIM_Base_Stop>

	HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_3);
 8003196:	2108      	movs	r1, #8
 8003198:	482b      	ldr	r0, [pc, #172]	@ (8003248 <event_delay+0xfc>)
 800319a:	f001 fe65 	bl	8004e68 <HAL_TIM_OC_Stop_IT>
	for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 800319e:	2300      	movs	r3, #0
 80031a0:	607b      	str	r3, [r7, #4]
 80031a2:	e036      	b.n	8003212 <event_delay+0xc6>
		// Detener el temporizador y deshabilitar el contador
		if (eventTable[i].currentState == app_state) {
 80031a4:	4929      	ldr	r1, [pc, #164]	@ (800324c <event_delay+0x100>)
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	440b      	add	r3, r1
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	4b26      	ldr	r3, [pc, #152]	@ (8003250 <event_delay+0x104>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d126      	bne.n	800320c <event_delay+0xc0>
			if (eventTable[i].eventFlag != NULL) {
 80031be:	4923      	ldr	r1, [pc, #140]	@ (800324c <event_delay+0x100>)
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3304      	adds	r3, #4
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d022      	beq.n	800321a <event_delay+0xce>
				*(eventTable[i].eventFlag) = true;
 80031d4:	491d      	ldr	r1, [pc, #116]	@ (800324c <event_delay+0x100>)
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4613      	mov	r3, r2
 80031da:	005b      	lsls	r3, r3, #1
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3304      	adds	r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2201      	movs	r2, #1
 80031e8:	701a      	strb	r2, [r3, #0]
				__HAL_TIM_ENABLE(&htim4);
 80031ea:	4b17      	ldr	r3, [pc, #92]	@ (8003248 <event_delay+0xfc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <event_delay+0xfc>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f042 0201 	orr.w	r2, r2, #1
 80031f8:	601a      	str	r2, [r3, #0]
				__HAL_TIM_SET_COUNTER(&htim4, 0);
 80031fa:	4b13      	ldr	r3, [pc, #76]	@ (8003248 <event_delay+0xfc>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	@ 0x24

				HAL_TIM_OC_Stop_IT(&htim4, TIM_CHANNEL_3);
 8003202:	2108      	movs	r1, #8
 8003204:	4810      	ldr	r0, [pc, #64]	@ (8003248 <event_delay+0xfc>)
 8003206:	f001 fe2f 	bl	8004e68 <HAL_TIM_OC_Stop_IT>

				return;
 800320a:	e01a      	b.n	8003242 <event_delay+0xf6>
	for (int i = 0; i < NUM_TIMER_EVENTS; i++) {
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	3301      	adds	r3, #1
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b03      	cmp	r3, #3
 8003216:	d9c5      	bls.n	80031a4 <event_delay+0x58>
 8003218:	e000      	b.n	800321c <event_delay+0xd0>

			}
			break;
 800321a:	bf00      	nop

		}


	}
	__HAL_TIM_SET_COUNTER(&htim4, 0);
 800321c:	4b0a      	ldr	r3, [pc, #40]	@ (8003248 <event_delay+0xfc>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_TIM_Base_Start_IT(&htim4);
 8003224:	4808      	ldr	r0, [pc, #32]	@ (8003248 <event_delay+0xfc>)
 8003226:	f001 fc57 	bl	8004ad8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_3);
 800322a:	2108      	movs	r1, #8
 800322c:	4806      	ldr	r0, [pc, #24]	@ (8003248 <event_delay+0xfc>)
 800322e:	f001 fd2b 	bl	8004c88 <HAL_TIM_OC_Start_IT>
	__HAL_TIM_ENABLE(&htim4);
 8003232:	4b05      	ldr	r3, [pc, #20]	@ (8003248 <event_delay+0xfc>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b03      	ldr	r3, [pc, #12]	@ (8003248 <event_delay+0xfc>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 0201 	orr.w	r2, r2, #1
 8003240:	601a      	str	r2, [r3, #0]


}
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	200001bc 	.word	0x200001bc
 800324c:	08009070 	.word	0x08009070
 8003250:	20000ba6 	.word	0x20000ba6

08003254 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800325a:	4b15      	ldr	r3, [pc, #84]	@ (80032b0 <HAL_MspInit+0x5c>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	4a14      	ldr	r2, [pc, #80]	@ (80032b0 <HAL_MspInit+0x5c>)
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	6193      	str	r3, [r2, #24]
 8003266:	4b12      	ldr	r3, [pc, #72]	@ (80032b0 <HAL_MspInit+0x5c>)
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
 8003270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003272:	4b0f      	ldr	r3, [pc, #60]	@ (80032b0 <HAL_MspInit+0x5c>)
 8003274:	69db      	ldr	r3, [r3, #28]
 8003276:	4a0e      	ldr	r2, [pc, #56]	@ (80032b0 <HAL_MspInit+0x5c>)
 8003278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800327c:	61d3      	str	r3, [r2, #28]
 800327e:	4b0c      	ldr	r3, [pc, #48]	@ (80032b0 <HAL_MspInit+0x5c>)
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003286:	607b      	str	r3, [r7, #4]
 8003288:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800328a:	4b0a      	ldr	r3, [pc, #40]	@ (80032b4 <HAL_MspInit+0x60>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	4a04      	ldr	r2, [pc, #16]	@ (80032b4 <HAL_MspInit+0x60>)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bc80      	pop	{r7}
 80032ae:	4770      	bx	lr
 80032b0:	40021000 	.word	0x40021000
 80032b4:	40010000 	.word	0x40010000

080032b8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a09      	ldr	r2, [pc, #36]	@ (80032ec <HAL_CRC_MspInit+0x34>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d10b      	bne.n	80032e2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80032ca:	4b09      	ldr	r3, [pc, #36]	@ (80032f0 <HAL_CRC_MspInit+0x38>)
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	4a08      	ldr	r2, [pc, #32]	@ (80032f0 <HAL_CRC_MspInit+0x38>)
 80032d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032d4:	6153      	str	r3, [r2, #20]
 80032d6:	4b06      	ldr	r3, [pc, #24]	@ (80032f0 <HAL_CRC_MspInit+0x38>)
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 80032e2:	bf00      	nop
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bc80      	pop	{r7}
 80032ea:	4770      	bx	lr
 80032ec:	40023000 	.word	0x40023000
 80032f0:	40021000 	.word	0x40021000

080032f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08c      	sub	sp, #48	@ 0x30
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 031c 	add.w	r3, r7, #28
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a45      	ldr	r2, [pc, #276]	@ (8003424 <HAL_TIM_Base_MspInit+0x130>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d10c      	bne.n	800332e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003314:	4b44      	ldr	r3, [pc, #272]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4a43      	ldr	r2, [pc, #268]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 800331a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	4b41      	ldr	r3, [pc, #260]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800332c:	e075      	b.n	800341a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003336:	d157      	bne.n	80033e8 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003338:	4b3b      	ldr	r3, [pc, #236]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	4a3a      	ldr	r2, [pc, #232]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	61d3      	str	r3, [r2, #28]
 8003344:	4b38      	ldr	r3, [pc, #224]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003346:	69db      	ldr	r3, [r3, #28]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	617b      	str	r3, [r7, #20]
 800334e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003350:	4b35      	ldr	r3, [pc, #212]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	4a34      	ldr	r2, [pc, #208]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6193      	str	r3, [r2, #24]
 800335c:	4b32      	ldr	r3, [pc, #200]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 800335e:	699b      	ldr	r3, [r3, #24]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003368:	4b2f      	ldr	r3, [pc, #188]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	4a2e      	ldr	r2, [pc, #184]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 800336e:	f043 0308 	orr.w	r3, r3, #8
 8003372:	6193      	str	r3, [r2, #24]
 8003374:	4b2c      	ldr	r3, [pc, #176]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003380:	2303      	movs	r3, #3
 8003382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003384:	2300      	movs	r3, #0
 8003386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003388:	2301      	movs	r3, #1
 800338a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	4619      	mov	r1, r3
 8003392:	4826      	ldr	r0, [pc, #152]	@ (800342c <HAL_TIM_Base_MspInit+0x138>)
 8003394:	f000 fd7e 	bl	8003e94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003398:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800339e:	2300      	movs	r3, #0
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033a2:	2301      	movs	r3, #1
 80033a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a6:	f107 031c 	add.w	r3, r7, #28
 80033aa:	4619      	mov	r1, r3
 80033ac:	4820      	ldr	r0, [pc, #128]	@ (8003430 <HAL_TIM_Base_MspInit+0x13c>)
 80033ae:	f000 fd71 	bl	8003e94 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80033b2:	4b20      	ldr	r3, [pc, #128]	@ (8003434 <HAL_TIM_Base_MspInit+0x140>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033c2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80033c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80033ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033d0:	4a18      	ldr	r2, [pc, #96]	@ (8003434 <HAL_TIM_Base_MspInit+0x140>)
 80033d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033d4:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80033d6:	2200      	movs	r2, #0
 80033d8:	2100      	movs	r1, #0
 80033da:	201c      	movs	r0, #28
 80033dc:	f000 faf3 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80033e0:	201c      	movs	r0, #28
 80033e2:	f000 fb0c 	bl	80039fe <HAL_NVIC_EnableIRQ>
}
 80033e6:	e018      	b.n	800341a <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM4)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a12      	ldr	r2, [pc, #72]	@ (8003438 <HAL_TIM_Base_MspInit+0x144>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d113      	bne.n	800341a <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 80033f8:	f043 0304 	orr.w	r3, r3, #4
 80033fc:	61d3      	str	r3, [r2, #28]
 80033fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003428 <HAL_TIM_Base_MspInit+0x134>)
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 800340a:	2200      	movs	r2, #0
 800340c:	2101      	movs	r1, #1
 800340e:	201e      	movs	r0, #30
 8003410:	f000 fad9 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003414:	201e      	movs	r0, #30
 8003416:	f000 faf2 	bl	80039fe <HAL_NVIC_EnableIRQ>
}
 800341a:	bf00      	nop
 800341c:	3730      	adds	r7, #48	@ 0x30
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40012c00 	.word	0x40012c00
 8003428:	40021000 	.word	0x40021000
 800342c:	40010800 	.word	0x40010800
 8003430:	40010c00 	.word	0x40010c00
 8003434:	40010000 	.word	0x40010000
 8003438:	40000800 	.word	0x40000800

0800343c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b088      	sub	sp, #32
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003444:	f107 0310 	add.w	r3, r7, #16
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
 8003450:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a10      	ldr	r2, [pc, #64]	@ (8003498 <HAL_TIM_MspPostInit+0x5c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d118      	bne.n	800348e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800345c:	4b0f      	ldr	r3, [pc, #60]	@ (800349c <HAL_TIM_MspPostInit+0x60>)
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	4a0e      	ldr	r2, [pc, #56]	@ (800349c <HAL_TIM_MspPostInit+0x60>)
 8003462:	f043 0304 	orr.w	r3, r3, #4
 8003466:	6193      	str	r3, [r2, #24]
 8003468:	4b0c      	ldr	r3, [pc, #48]	@ (800349c <HAL_TIM_MspPostInit+0x60>)
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	60fb      	str	r3, [r7, #12]
 8003472:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = IN_U_Pin|IN_V_Pin|IN_W_Pin;
 8003474:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003478:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2302      	movs	r3, #2
 8003480:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003482:	f107 0310 	add.w	r3, r7, #16
 8003486:	4619      	mov	r1, r3
 8003488:	4805      	ldr	r0, [pc, #20]	@ (80034a0 <HAL_TIM_MspPostInit+0x64>)
 800348a:	f000 fd03 	bl	8003e94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800348e:	bf00      	nop
 8003490:	3720      	adds	r7, #32
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	40012c00 	.word	0x40012c00
 800349c:	40021000 	.word	0x40021000
 80034a0:	40010800 	.word	0x40010800

080034a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b088      	sub	sp, #32
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
 80034b6:	609a      	str	r2, [r3, #8]
 80034b8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a33      	ldr	r2, [pc, #204]	@ (800358c <HAL_UART_MspInit+0xe8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d15e      	bne.n	8003582 <HAL_UART_MspInit+0xde>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034c4:	4b32      	ldr	r3, [pc, #200]	@ (8003590 <HAL_UART_MspInit+0xec>)
 80034c6:	69db      	ldr	r3, [r3, #28]
 80034c8:	4a31      	ldr	r2, [pc, #196]	@ (8003590 <HAL_UART_MspInit+0xec>)
 80034ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ce:	61d3      	str	r3, [r2, #28]
 80034d0:	4b2f      	ldr	r3, [pc, #188]	@ (8003590 <HAL_UART_MspInit+0xec>)
 80034d2:	69db      	ldr	r3, [r3, #28]
 80034d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034dc:	4b2c      	ldr	r3, [pc, #176]	@ (8003590 <HAL_UART_MspInit+0xec>)
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	4a2b      	ldr	r2, [pc, #172]	@ (8003590 <HAL_UART_MspInit+0xec>)
 80034e2:	f043 0304 	orr.w	r3, r3, #4
 80034e6:	6193      	str	r3, [r2, #24]
 80034e8:	4b29      	ldr	r3, [pc, #164]	@ (8003590 <HAL_UART_MspInit+0xec>)
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	60bb      	str	r3, [r7, #8]
 80034f2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034f4:	2304      	movs	r3, #4
 80034f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034f8:	2302      	movs	r3, #2
 80034fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034fc:	2303      	movs	r3, #3
 80034fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003500:	f107 0310 	add.w	r3, r7, #16
 8003504:	4619      	mov	r1, r3
 8003506:	4823      	ldr	r0, [pc, #140]	@ (8003594 <HAL_UART_MspInit+0xf0>)
 8003508:	f000 fcc4 	bl	8003e94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800350c:	2308      	movs	r3, #8
 800350e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003514:	2302      	movs	r3, #2
 8003516:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003518:	f107 0310 	add.w	r3, r7, #16
 800351c:	4619      	mov	r1, r3
 800351e:	481d      	ldr	r0, [pc, #116]	@ (8003594 <HAL_UART_MspInit+0xf0>)
 8003520:	f000 fcb8 	bl	8003e94 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003524:	4b1c      	ldr	r3, [pc, #112]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 8003526:	4a1d      	ldr	r2, [pc, #116]	@ (800359c <HAL_UART_MspInit+0xf8>)
 8003528:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800352a:	4b1b      	ldr	r3, [pc, #108]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 800352c:	2210      	movs	r2, #16
 800352e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003530:	4b19      	ldr	r3, [pc, #100]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003536:	4b18      	ldr	r3, [pc, #96]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 8003538:	2280      	movs	r2, #128	@ 0x80
 800353a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800353c:	4b16      	ldr	r3, [pc, #88]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 800353e:	2200      	movs	r2, #0
 8003540:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003542:	4b15      	ldr	r3, [pc, #84]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 8003544:	2200      	movs	r2, #0
 8003546:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003548:	4b13      	ldr	r3, [pc, #76]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 800354a:	2200      	movs	r2, #0
 800354c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800354e:	4b12      	ldr	r3, [pc, #72]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 8003550:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003554:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003556:	4810      	ldr	r0, [pc, #64]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 8003558:	f000 fa88 	bl	8003a6c <HAL_DMA_Init>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8003562:	f7fe fb7b 	bl	8001c5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a0b      	ldr	r2, [pc, #44]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 800356a:	639a      	str	r2, [r3, #56]	@ 0x38
 800356c:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <HAL_UART_MspInit+0xf4>)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003572:	2200      	movs	r2, #0
 8003574:	2100      	movs	r1, #0
 8003576:	2026      	movs	r0, #38	@ 0x26
 8003578:	f000 fa25 	bl	80039c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800357c:	2026      	movs	r0, #38	@ 0x26
 800357e:	f000 fa3e 	bl	80039fe <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003582:	bf00      	nop
 8003584:	3720      	adds	r7, #32
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	40004400 	.word	0x40004400
 8003590:	40021000 	.word	0x40021000
 8003594:	40010800 	.word	0x40010800
 8003598:	2000024c 	.word	0x2000024c
 800359c:	40020080 	.word	0x40020080

080035a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80035a4:	bf00      	nop
 80035a6:	e7fd      	b.n	80035a4 <NMI_Handler+0x4>

080035a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <HardFault_Handler+0x4>

080035b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035b4:	bf00      	nop
 80035b6:	e7fd      	b.n	80035b4 <MemManage_Handler+0x4>

080035b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035bc:	bf00      	nop
 80035be:	e7fd      	b.n	80035bc <BusFault_Handler+0x4>

080035c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035c0:	b480      	push	{r7}
 80035c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <UsageFault_Handler+0x4>

080035c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	bc80      	pop	{r7}
 80035de:	4770      	bx	lr

080035e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035f0:	f000 f8d2 	bl	8003798 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035f4:	bf00      	nop
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80035fc:	4802      	ldr	r0, [pc, #8]	@ (8003608 <DMA1_Channel7_IRQHandler+0x10>)
 80035fe:	f000 fb43 	bl	8003c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	2000024c 	.word	0x2000024c

0800360c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003610:	4802      	ldr	r0, [pc, #8]	@ (800361c <TIM2_IRQHandler+0x10>)
 8003612:	f001 ff39 	bl	8005488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000174 	.word	0x20000174

08003620 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003624:	4802      	ldr	r0, [pc, #8]	@ (8003630 <TIM4_IRQHandler+0x10>)
 8003626:	f001 ff2f 	bl	8005488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	200001bc 	.word	0x200001bc

08003634 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003638:	4802      	ldr	r0, [pc, #8]	@ (8003644 <USART2_IRQHandler+0x10>)
 800363a:	f003 f821 	bl	8006680 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	20000204 	.word	0x20000204

08003648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003650:	4a14      	ldr	r2, [pc, #80]	@ (80036a4 <_sbrk+0x5c>)
 8003652:	4b15      	ldr	r3, [pc, #84]	@ (80036a8 <_sbrk+0x60>)
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800365c:	4b13      	ldr	r3, [pc, #76]	@ (80036ac <_sbrk+0x64>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d102      	bne.n	800366a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003664:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <_sbrk+0x64>)
 8003666:	4a12      	ldr	r2, [pc, #72]	@ (80036b0 <_sbrk+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800366a:	4b10      	ldr	r3, [pc, #64]	@ (80036ac <_sbrk+0x64>)
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4413      	add	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	d207      	bcs.n	8003688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003678:	f003 fe02 	bl	8007280 <__errno>
 800367c:	4603      	mov	r3, r0
 800367e:	220c      	movs	r2, #12
 8003680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	e009      	b.n	800369c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003688:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <_sbrk+0x64>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368e:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <_sbrk+0x64>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4413      	add	r3, r2
 8003696:	4a05      	ldr	r2, [pc, #20]	@ (80036ac <_sbrk+0x64>)
 8003698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800369a:	68fb      	ldr	r3, [r7, #12]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	20005000 	.word	0x20005000
 80036a8:	00000400 	.word	0x00000400
 80036ac:	20000bac 	.word	0x20000bac
 80036b0:	20000d00 	.word	0x20000d00

080036b4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b8:	bf00      	nop
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bc80      	pop	{r7}
 80036be:	4770      	bx	lr

080036c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80036c0:	f7ff fff8 	bl	80036b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036c4:	480b      	ldr	r0, [pc, #44]	@ (80036f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80036c6:	490c      	ldr	r1, [pc, #48]	@ (80036f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80036c8:	4a0c      	ldr	r2, [pc, #48]	@ (80036fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80036ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036cc:	e002      	b.n	80036d4 <LoopCopyDataInit>

080036ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036d2:	3304      	adds	r3, #4

080036d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036d8:	d3f9      	bcc.n	80036ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036da:	4a09      	ldr	r2, [pc, #36]	@ (8003700 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80036dc:	4c09      	ldr	r4, [pc, #36]	@ (8003704 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80036de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036e0:	e001      	b.n	80036e6 <LoopFillZerobss>

080036e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036e4:	3204      	adds	r2, #4

080036e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036e8:	d3fb      	bcc.n	80036e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ea:	f003 fdcf 	bl	800728c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ee:	f7fd ff83 	bl	80015f8 <main>
  bx lr
 80036f2:	4770      	bx	lr
  ldr r0, =_sdata
 80036f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80036fc:	080095fc 	.word	0x080095fc
  ldr r2, =_sbss
 8003700:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003704:	20000cfc 	.word	0x20000cfc

08003708 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003708:	e7fe      	b.n	8003708 <ADC1_2_IRQHandler>
	...

0800370c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <HAL_Init+0x28>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a07      	ldr	r2, [pc, #28]	@ (8003734 <HAL_Init+0x28>)
 8003716:	f043 0310 	orr.w	r3, r3, #16
 800371a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800371c:	2003      	movs	r0, #3
 800371e:	f000 f947 	bl	80039b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003722:	200f      	movs	r0, #15
 8003724:	f000 f808 	bl	8003738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003728:	f7ff fd94 	bl	8003254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40022000 	.word	0x40022000

08003738 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_InitTick+0x54>)
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b12      	ldr	r3, [pc, #72]	@ (8003790 <HAL_InitTick+0x58>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	4619      	mov	r1, r3
 800374a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800374e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003752:	fbb2 f3f3 	udiv	r3, r2, r3
 8003756:	4618      	mov	r0, r3
 8003758:	f000 f95f 	bl	8003a1a <HAL_SYSTICK_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e00e      	b.n	8003784 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2b0f      	cmp	r3, #15
 800376a:	d80a      	bhi.n	8003782 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800376c:	2200      	movs	r2, #0
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	f000 f927 	bl	80039c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003778:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <HAL_InitTick+0x5c>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000001c 	.word	0x2000001c
 8003790:	20000024 	.word	0x20000024
 8003794:	20000020 	.word	0x20000020

08003798 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800379c:	4b05      	ldr	r3, [pc, #20]	@ (80037b4 <HAL_IncTick+0x1c>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_IncTick+0x20>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	4a03      	ldr	r2, [pc, #12]	@ (80037b8 <HAL_IncTick+0x20>)
 80037aa:	6013      	str	r3, [r2, #0]
}
 80037ac:	bf00      	nop
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	20000024 	.word	0x20000024
 80037b8:	20000bb0 	.word	0x20000bb0

080037bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return uwTick;
 80037c0:	4b02      	ldr	r3, [pc, #8]	@ (80037cc <HAL_GetTick+0x10>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bc80      	pop	{r7}
 80037ca:	4770      	bx	lr
 80037cc:	20000bb0 	.word	0x20000bb0

080037d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037d8:	f7ff fff0 	bl	80037bc <HAL_GetTick>
 80037dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e8:	d005      	beq.n	80037f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <HAL_Delay+0x44>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	461a      	mov	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037f6:	bf00      	nop
 80037f8:	f7ff ffe0 	bl	80037bc <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	68fa      	ldr	r2, [r7, #12]
 8003804:	429a      	cmp	r2, r3
 8003806:	d8f7      	bhi.n	80037f8 <HAL_Delay+0x28>
  {
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3710      	adds	r7, #16
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	20000024 	.word	0x20000024

08003818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003828:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003834:	4013      	ands	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800384a:	4a04      	ldr	r2, [pc, #16]	@ (800385c <__NVIC_SetPriorityGrouping+0x44>)
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	60d3      	str	r3, [r2, #12]
}
 8003850:	bf00      	nop
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	e000ed00 	.word	0xe000ed00

08003860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003864:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <__NVIC_GetPriorityGrouping+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	0a1b      	lsrs	r3, r3, #8
 800386a:	f003 0307 	and.w	r3, r3, #7
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	e000ed00 	.word	0xe000ed00

0800387c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	4603      	mov	r3, r0
 8003884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388a:	2b00      	cmp	r3, #0
 800388c:	db0b      	blt.n	80038a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388e:	79fb      	ldrb	r3, [r7, #7]
 8003890:	f003 021f 	and.w	r2, r3, #31
 8003894:	4906      	ldr	r1, [pc, #24]	@ (80038b0 <__NVIC_EnableIRQ+0x34>)
 8003896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	2001      	movs	r0, #1
 800389e:	fa00 f202 	lsl.w	r2, r0, r2
 80038a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	@ (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	@ (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	@ 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3b01      	subs	r3, #1
 8003978:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800397c:	d301      	bcc.n	8003982 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800397e:	2301      	movs	r3, #1
 8003980:	e00f      	b.n	80039a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003982:	4a0a      	ldr	r2, [pc, #40]	@ (80039ac <SysTick_Config+0x40>)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3b01      	subs	r3, #1
 8003988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398a:	210f      	movs	r1, #15
 800398c:	f04f 30ff 	mov.w	r0, #4294967295
 8003990:	f7ff ff90 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003994:	4b05      	ldr	r3, [pc, #20]	@ (80039ac <SysTick_Config+0x40>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399a:	4b04      	ldr	r3, [pc, #16]	@ (80039ac <SysTick_Config+0x40>)
 800399c:	2207      	movs	r2, #7
 800399e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	e000e010 	.word	0xe000e010

080039b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7ff ff2d 	bl	8003818 <__NVIC_SetPriorityGrouping>
}
 80039be:	bf00      	nop
 80039c0:	3708      	adds	r7, #8
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b086      	sub	sp, #24
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	4603      	mov	r3, r0
 80039ce:	60b9      	str	r1, [r7, #8]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039d8:	f7ff ff42 	bl	8003860 <__NVIC_GetPriorityGrouping>
 80039dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	68b9      	ldr	r1, [r7, #8]
 80039e2:	6978      	ldr	r0, [r7, #20]
 80039e4:	f7ff ff90 	bl	8003908 <NVIC_EncodePriority>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039ee:	4611      	mov	r1, r2
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7ff ff5f 	bl	80038b4 <__NVIC_SetPriority>
}
 80039f6:	bf00      	nop
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b082      	sub	sp, #8
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	4603      	mov	r3, r0
 8003a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f7ff ff35 	bl	800387c <__NVIC_EnableIRQ>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b082      	sub	sp, #8
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7ff ffa2 	bl	800396c <SysTick_Config>
 8003a28:	4603      	mov	r3, r0
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3708      	adds	r7, #8
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e00e      	b.n	8003a62 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	795b      	ldrb	r3, [r3, #5]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff fc2f 	bl	80032b8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
	...

08003a6c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e043      	b.n	8003b0a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	461a      	mov	r2, r3
 8003a88:	4b22      	ldr	r3, [pc, #136]	@ (8003b14 <HAL_DMA_Init+0xa8>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	4a22      	ldr	r2, [pc, #136]	@ (8003b18 <HAL_DMA_Init+0xac>)
 8003a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a92:	091b      	lsrs	r3, r3, #4
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8003b1c <HAL_DMA_Init+0xb0>)
 8003a9e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003ab6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003aba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ad0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003adc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69db      	ldr	r3, [r3, #28]
 8003ae2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68fa      	ldr	r2, [r7, #12]
 8003af0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3714      	adds	r7, #20
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr
 8003b14:	bffdfff8 	.word	0xbffdfff8
 8003b18:	cccccccd 	.word	0xcccccccd
 8003b1c:	40020000 	.word	0x40020000

08003b20 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b02      	cmp	r3, #2
 8003b36:	d008      	beq.n	8003b4a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2204      	movs	r2, #4
 8003b3c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e020      	b.n	8003b8c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 020e 	bic.w	r2, r2, #14
 8003b58:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b72:	2101      	movs	r1, #1
 8003b74:	fa01 f202 	lsl.w	r2, r1, r2
 8003b78:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bc80      	pop	{r7}
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	2b02      	cmp	r3, #2
 8003bae:	d005      	beq.n	8003bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	73fb      	strb	r3, [r7, #15]
 8003bba:	e051      	b.n	8003c60 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 020e 	bic.w	r2, r2, #14
 8003bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a22      	ldr	r2, [pc, #136]	@ (8003c6c <HAL_DMA_Abort_IT+0xd4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d029      	beq.n	8003c3a <HAL_DMA_Abort_IT+0xa2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a21      	ldr	r2, [pc, #132]	@ (8003c70 <HAL_DMA_Abort_IT+0xd8>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x9e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c74 <HAL_DMA_Abort_IT+0xdc>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01a      	beq.n	8003c30 <HAL_DMA_Abort_IT+0x98>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c78 <HAL_DMA_Abort_IT+0xe0>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d012      	beq.n	8003c2a <HAL_DMA_Abort_IT+0x92>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <HAL_DMA_Abort_IT+0xe4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00a      	beq.n	8003c24 <HAL_DMA_Abort_IT+0x8c>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1b      	ldr	r2, [pc, #108]	@ (8003c80 <HAL_DMA_Abort_IT+0xe8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d102      	bne.n	8003c1e <HAL_DMA_Abort_IT+0x86>
 8003c18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003c1c:	e00e      	b.n	8003c3c <HAL_DMA_Abort_IT+0xa4>
 8003c1e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003c22:	e00b      	b.n	8003c3c <HAL_DMA_Abort_IT+0xa4>
 8003c24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003c28:	e008      	b.n	8003c3c <HAL_DMA_Abort_IT+0xa4>
 8003c2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003c2e:	e005      	b.n	8003c3c <HAL_DMA_Abort_IT+0xa4>
 8003c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c34:	e002      	b.n	8003c3c <HAL_DMA_Abort_IT+0xa4>
 8003c36:	2310      	movs	r3, #16
 8003c38:	e000      	b.n	8003c3c <HAL_DMA_Abort_IT+0xa4>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4a11      	ldr	r2, [pc, #68]	@ (8003c84 <HAL_DMA_Abort_IT+0xec>)
 8003c3e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
    } 
  }
  return status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40020008 	.word	0x40020008
 8003c70:	4002001c 	.word	0x4002001c
 8003c74:	40020030 	.word	0x40020030
 8003c78:	40020044 	.word	0x40020044
 8003c7c:	40020058 	.word	0x40020058
 8003c80:	4002006c 	.word	0x4002006c
 8003c84:	40020000 	.word	0x40020000

08003c88 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	2204      	movs	r2, #4
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d04f      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xc8>
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	f003 0304 	and.w	r3, r3, #4
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d04a      	beq.n	8003d50 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d107      	bne.n	8003cd8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f022 0204 	bic.w	r2, r2, #4
 8003cd6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a66      	ldr	r2, [pc, #408]	@ (8003e78 <HAL_DMA_IRQHandler+0x1f0>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d029      	beq.n	8003d36 <HAL_DMA_IRQHandler+0xae>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a65      	ldr	r2, [pc, #404]	@ (8003e7c <HAL_DMA_IRQHandler+0x1f4>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_IRQHandler+0xaa>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a63      	ldr	r2, [pc, #396]	@ (8003e80 <HAL_DMA_IRQHandler+0x1f8>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01a      	beq.n	8003d2c <HAL_DMA_IRQHandler+0xa4>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a62      	ldr	r2, [pc, #392]	@ (8003e84 <HAL_DMA_IRQHandler+0x1fc>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d012      	beq.n	8003d26 <HAL_DMA_IRQHandler+0x9e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a60      	ldr	r2, [pc, #384]	@ (8003e88 <HAL_DMA_IRQHandler+0x200>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d00a      	beq.n	8003d20 <HAL_DMA_IRQHandler+0x98>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003e8c <HAL_DMA_IRQHandler+0x204>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d102      	bne.n	8003d1a <HAL_DMA_IRQHandler+0x92>
 8003d14:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d18:	e00e      	b.n	8003d38 <HAL_DMA_IRQHandler+0xb0>
 8003d1a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003d1e:	e00b      	b.n	8003d38 <HAL_DMA_IRQHandler+0xb0>
 8003d20:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003d24:	e008      	b.n	8003d38 <HAL_DMA_IRQHandler+0xb0>
 8003d26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003d2a:	e005      	b.n	8003d38 <HAL_DMA_IRQHandler+0xb0>
 8003d2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003d30:	e002      	b.n	8003d38 <HAL_DMA_IRQHandler+0xb0>
 8003d32:	2340      	movs	r3, #64	@ 0x40
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_IRQHandler+0xb0>
 8003d36:	2304      	movs	r3, #4
 8003d38:	4a55      	ldr	r2, [pc, #340]	@ (8003e90 <HAL_DMA_IRQHandler+0x208>)
 8003d3a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 8094 	beq.w	8003e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d4e:	e08e      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	2202      	movs	r2, #2
 8003d56:	409a      	lsls	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d056      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x186>
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d051      	beq.n	8003e0e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 020a 	bic.w	r2, r2, #10
 8003d86:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a38      	ldr	r2, [pc, #224]	@ (8003e78 <HAL_DMA_IRQHandler+0x1f0>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d029      	beq.n	8003dee <HAL_DMA_IRQHandler+0x166>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a37      	ldr	r2, [pc, #220]	@ (8003e7c <HAL_DMA_IRQHandler+0x1f4>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d022      	beq.n	8003dea <HAL_DMA_IRQHandler+0x162>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a35      	ldr	r2, [pc, #212]	@ (8003e80 <HAL_DMA_IRQHandler+0x1f8>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d01a      	beq.n	8003de4 <HAL_DMA_IRQHandler+0x15c>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a34      	ldr	r2, [pc, #208]	@ (8003e84 <HAL_DMA_IRQHandler+0x1fc>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d012      	beq.n	8003dde <HAL_DMA_IRQHandler+0x156>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a32      	ldr	r2, [pc, #200]	@ (8003e88 <HAL_DMA_IRQHandler+0x200>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00a      	beq.n	8003dd8 <HAL_DMA_IRQHandler+0x150>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a31      	ldr	r2, [pc, #196]	@ (8003e8c <HAL_DMA_IRQHandler+0x204>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d102      	bne.n	8003dd2 <HAL_DMA_IRQHandler+0x14a>
 8003dcc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003dd0:	e00e      	b.n	8003df0 <HAL_DMA_IRQHandler+0x168>
 8003dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003dd6:	e00b      	b.n	8003df0 <HAL_DMA_IRQHandler+0x168>
 8003dd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ddc:	e008      	b.n	8003df0 <HAL_DMA_IRQHandler+0x168>
 8003dde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003de2:	e005      	b.n	8003df0 <HAL_DMA_IRQHandler+0x168>
 8003de4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003de8:	e002      	b.n	8003df0 <HAL_DMA_IRQHandler+0x168>
 8003dea:	2320      	movs	r3, #32
 8003dec:	e000      	b.n	8003df0 <HAL_DMA_IRQHandler+0x168>
 8003dee:	2302      	movs	r3, #2
 8003df0:	4a27      	ldr	r2, [pc, #156]	@ (8003e90 <HAL_DMA_IRQHandler+0x208>)
 8003df2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d034      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003e0c:	e02f      	b.n	8003e6e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2208      	movs	r2, #8
 8003e14:	409a      	lsls	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d028      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x1e8>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d023      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 020e 	bic.w	r2, r2, #14
 8003e36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	2101      	movs	r1, #1
 8003e42:	fa01 f202 	lsl.w	r2, r1, r2
 8003e46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d004      	beq.n	8003e70 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	4798      	blx	r3
    }
  }
  return;
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
}
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40020008 	.word	0x40020008
 8003e7c:	4002001c 	.word	0x4002001c
 8003e80:	40020030 	.word	0x40020030
 8003e84:	40020044 	.word	0x40020044
 8003e88:	40020058 	.word	0x40020058
 8003e8c:	4002006c 	.word	0x4002006c
 8003e90:	40020000 	.word	0x40020000

08003e94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b08b      	sub	sp, #44	@ 0x2c
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ea6:	e169      	b.n	800417c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	69fa      	ldr	r2, [r7, #28]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	f040 8158 	bne.w	8004176 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	4a9a      	ldr	r2, [pc, #616]	@ (8004134 <HAL_GPIO_Init+0x2a0>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d05e      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003ed0:	4a98      	ldr	r2, [pc, #608]	@ (8004134 <HAL_GPIO_Init+0x2a0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d875      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003ed6:	4a98      	ldr	r2, [pc, #608]	@ (8004138 <HAL_GPIO_Init+0x2a4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d058      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003edc:	4a96      	ldr	r2, [pc, #600]	@ (8004138 <HAL_GPIO_Init+0x2a4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d86f      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003ee2:	4a96      	ldr	r2, [pc, #600]	@ (800413c <HAL_GPIO_Init+0x2a8>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d052      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003ee8:	4a94      	ldr	r2, [pc, #592]	@ (800413c <HAL_GPIO_Init+0x2a8>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d869      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003eee:	4a94      	ldr	r2, [pc, #592]	@ (8004140 <HAL_GPIO_Init+0x2ac>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d04c      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003ef4:	4a92      	ldr	r2, [pc, #584]	@ (8004140 <HAL_GPIO_Init+0x2ac>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d863      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003efa:	4a92      	ldr	r2, [pc, #584]	@ (8004144 <HAL_GPIO_Init+0x2b0>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d046      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
 8003f00:	4a90      	ldr	r2, [pc, #576]	@ (8004144 <HAL_GPIO_Init+0x2b0>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d85d      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003f06:	2b12      	cmp	r3, #18
 8003f08:	d82a      	bhi.n	8003f60 <HAL_GPIO_Init+0xcc>
 8003f0a:	2b12      	cmp	r3, #18
 8003f0c:	d859      	bhi.n	8003fc2 <HAL_GPIO_Init+0x12e>
 8003f0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f14 <HAL_GPIO_Init+0x80>)
 8003f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f14:	08003f8f 	.word	0x08003f8f
 8003f18:	08003f69 	.word	0x08003f69
 8003f1c:	08003f7b 	.word	0x08003f7b
 8003f20:	08003fbd 	.word	0x08003fbd
 8003f24:	08003fc3 	.word	0x08003fc3
 8003f28:	08003fc3 	.word	0x08003fc3
 8003f2c:	08003fc3 	.word	0x08003fc3
 8003f30:	08003fc3 	.word	0x08003fc3
 8003f34:	08003fc3 	.word	0x08003fc3
 8003f38:	08003fc3 	.word	0x08003fc3
 8003f3c:	08003fc3 	.word	0x08003fc3
 8003f40:	08003fc3 	.word	0x08003fc3
 8003f44:	08003fc3 	.word	0x08003fc3
 8003f48:	08003fc3 	.word	0x08003fc3
 8003f4c:	08003fc3 	.word	0x08003fc3
 8003f50:	08003fc3 	.word	0x08003fc3
 8003f54:	08003fc3 	.word	0x08003fc3
 8003f58:	08003f71 	.word	0x08003f71
 8003f5c:	08003f85 	.word	0x08003f85
 8003f60:	4a79      	ldr	r2, [pc, #484]	@ (8004148 <HAL_GPIO_Init+0x2b4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f66:	e02c      	b.n	8003fc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	623b      	str	r3, [r7, #32]
          break;
 8003f6e:	e029      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	3304      	adds	r3, #4
 8003f76:	623b      	str	r3, [r7, #32]
          break;
 8003f78:	e024      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	623b      	str	r3, [r7, #32]
          break;
 8003f82:	e01f      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	623b      	str	r3, [r7, #32]
          break;
 8003f8c:	e01a      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d102      	bne.n	8003f9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f96:	2304      	movs	r3, #4
 8003f98:	623b      	str	r3, [r7, #32]
          break;
 8003f9a:	e013      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d105      	bne.n	8003fb0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fa4:	2308      	movs	r3, #8
 8003fa6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69fa      	ldr	r2, [r7, #28]
 8003fac:	611a      	str	r2, [r3, #16]
          break;
 8003fae:	e009      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003fb0:	2308      	movs	r3, #8
 8003fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	69fa      	ldr	r2, [r7, #28]
 8003fb8:	615a      	str	r2, [r3, #20]
          break;
 8003fba:	e003      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	623b      	str	r3, [r7, #32]
          break;
 8003fc0:	e000      	b.n	8003fc4 <HAL_GPIO_Init+0x130>
          break;
 8003fc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	2bff      	cmp	r3, #255	@ 0xff
 8003fc8:	d801      	bhi.n	8003fce <HAL_GPIO_Init+0x13a>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	e001      	b.n	8003fd2 <HAL_GPIO_Init+0x13e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3304      	adds	r3, #4
 8003fd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2bff      	cmp	r3, #255	@ 0xff
 8003fd8:	d802      	bhi.n	8003fe0 <HAL_GPIO_Init+0x14c>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	e002      	b.n	8003fe6 <HAL_GPIO_Init+0x152>
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	3b08      	subs	r3, #8
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	210f      	movs	r1, #15
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	401a      	ands	r2, r3
 8003ff8:	6a39      	ldr	r1, [r7, #32]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8004000:	431a      	orrs	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 80b1 	beq.w	8004176 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004014:	4b4d      	ldr	r3, [pc, #308]	@ (800414c <HAL_GPIO_Init+0x2b8>)
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4a4c      	ldr	r2, [pc, #304]	@ (800414c <HAL_GPIO_Init+0x2b8>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6193      	str	r3, [r2, #24]
 8004020:	4b4a      	ldr	r3, [pc, #296]	@ (800414c <HAL_GPIO_Init+0x2b8>)
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800402c:	4a48      	ldr	r2, [pc, #288]	@ (8004150 <HAL_GPIO_Init+0x2bc>)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	089b      	lsrs	r3, r3, #2
 8004032:	3302      	adds	r3, #2
 8004034:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004038:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800403a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	220f      	movs	r2, #15
 8004044:	fa02 f303 	lsl.w	r3, r2, r3
 8004048:	43db      	mvns	r3, r3
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	4013      	ands	r3, r2
 800404e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a40      	ldr	r2, [pc, #256]	@ (8004154 <HAL_GPIO_Init+0x2c0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <HAL_GPIO_Init+0x1ec>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a3f      	ldr	r2, [pc, #252]	@ (8004158 <HAL_GPIO_Init+0x2c4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d00d      	beq.n	800407c <HAL_GPIO_Init+0x1e8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a3e      	ldr	r2, [pc, #248]	@ (800415c <HAL_GPIO_Init+0x2c8>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d007      	beq.n	8004078 <HAL_GPIO_Init+0x1e4>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3d      	ldr	r2, [pc, #244]	@ (8004160 <HAL_GPIO_Init+0x2cc>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d101      	bne.n	8004074 <HAL_GPIO_Init+0x1e0>
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004074:	2304      	movs	r3, #4
 8004076:	e004      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004078:	2302      	movs	r3, #2
 800407a:	e002      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <HAL_GPIO_Init+0x1ee>
 8004080:	2300      	movs	r3, #0
 8004082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004084:	f002 0203 	and.w	r2, r2, #3
 8004088:	0092      	lsls	r2, r2, #2
 800408a:	4093      	lsls	r3, r2
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004092:	492f      	ldr	r1, [pc, #188]	@ (8004150 <HAL_GPIO_Init+0x2bc>)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d006      	beq.n	80040ba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040ac:	4b2d      	ldr	r3, [pc, #180]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	492c      	ldr	r1, [pc, #176]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	608b      	str	r3, [r1, #8]
 80040b8:	e006      	b.n	80040c8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	43db      	mvns	r3, r3
 80040c2:	4928      	ldr	r1, [pc, #160]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040c4:	4013      	ands	r3, r2
 80040c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d006      	beq.n	80040e2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040d4:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	4922      	ldr	r1, [pc, #136]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60cb      	str	r3, [r1, #12]
 80040e0:	e006      	b.n	80040f0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	491e      	ldr	r1, [pc, #120]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d006      	beq.n	800410a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040fc:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	4918      	ldr	r1, [pc, #96]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	4313      	orrs	r3, r2
 8004106:	604b      	str	r3, [r1, #4]
 8004108:	e006      	b.n	8004118 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800410a:	4b16      	ldr	r3, [pc, #88]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 800410c:	685a      	ldr	r2, [r3, #4]
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	43db      	mvns	r3, r3
 8004112:	4914      	ldr	r1, [pc, #80]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 8004114:	4013      	ands	r3, r2
 8004116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d021      	beq.n	8004168 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004124:	4b0f      	ldr	r3, [pc, #60]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	490e      	ldr	r1, [pc, #56]	@ (8004164 <HAL_GPIO_Init+0x2d0>)
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e021      	b.n	8004176 <HAL_GPIO_Init+0x2e2>
 8004132:	bf00      	nop
 8004134:	10320000 	.word	0x10320000
 8004138:	10310000 	.word	0x10310000
 800413c:	10220000 	.word	0x10220000
 8004140:	10210000 	.word	0x10210000
 8004144:	10120000 	.word	0x10120000
 8004148:	10110000 	.word	0x10110000
 800414c:	40021000 	.word	0x40021000
 8004150:	40010000 	.word	0x40010000
 8004154:	40010800 	.word	0x40010800
 8004158:	40010c00 	.word	0x40010c00
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <HAL_GPIO_Init+0x304>)
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	43db      	mvns	r3, r3
 8004170:	4909      	ldr	r1, [pc, #36]	@ (8004198 <HAL_GPIO_Init+0x304>)
 8004172:	4013      	ands	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004178:	3301      	adds	r3, #1
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	fa22 f303 	lsr.w	r3, r2, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	f47f ae8e 	bne.w	8003ea8 <HAL_GPIO_Init+0x14>
  }
}
 800418c:	bf00      	nop
 800418e:	bf00      	nop
 8004190:	372c      	adds	r7, #44	@ 0x2c
 8004192:	46bd      	mov	sp, r7
 8004194:	bc80      	pop	{r7}
 8004196:	4770      	bx	lr
 8004198:	40010400 	.word	0x40010400

0800419c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
 80041a8:	4613      	mov	r3, r2
 80041aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80041ac:	787b      	ldrb	r3, [r7, #1]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041b2:	887a      	ldrh	r2, [r7, #2]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80041b8:	e003      	b.n	80041c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	041a      	lsls	r2, r3, #16
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d101      	bne.n	80041de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e272      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f000 8087 	beq.w	80042fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ec:	4b92      	ldr	r3, [pc, #584]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f003 030c 	and.w	r3, r3, #12
 80041f4:	2b04      	cmp	r3, #4
 80041f6:	d00c      	beq.n	8004212 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041f8:	4b8f      	ldr	r3, [pc, #572]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f003 030c 	and.w	r3, r3, #12
 8004200:	2b08      	cmp	r3, #8
 8004202:	d112      	bne.n	800422a <HAL_RCC_OscConfig+0x5e>
 8004204:	4b8c      	ldr	r3, [pc, #560]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004210:	d10b      	bne.n	800422a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004212:	4b89      	ldr	r3, [pc, #548]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d06c      	beq.n	80042f8 <HAL_RCC_OscConfig+0x12c>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d168      	bne.n	80042f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e24c      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004232:	d106      	bne.n	8004242 <HAL_RCC_OscConfig+0x76>
 8004234:	4b80      	ldr	r3, [pc, #512]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a7f      	ldr	r2, [pc, #508]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800423a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800423e:	6013      	str	r3, [r2, #0]
 8004240:	e02e      	b.n	80042a0 <HAL_RCC_OscConfig+0xd4>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10c      	bne.n	8004264 <HAL_RCC_OscConfig+0x98>
 800424a:	4b7b      	ldr	r3, [pc, #492]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a7a      	ldr	r2, [pc, #488]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	4b78      	ldr	r3, [pc, #480]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800425c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004260:	6013      	str	r3, [r2, #0]
 8004262:	e01d      	b.n	80042a0 <HAL_RCC_OscConfig+0xd4>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800426c:	d10c      	bne.n	8004288 <HAL_RCC_OscConfig+0xbc>
 800426e:	4b72      	ldr	r3, [pc, #456]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a71      	ldr	r2, [pc, #452]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004278:	6013      	str	r3, [r2, #0]
 800427a:	4b6f      	ldr	r3, [pc, #444]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a6e      	ldr	r2, [pc, #440]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004284:	6013      	str	r3, [r2, #0]
 8004286:	e00b      	b.n	80042a0 <HAL_RCC_OscConfig+0xd4>
 8004288:	4b6b      	ldr	r3, [pc, #428]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4a6a      	ldr	r2, [pc, #424]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800428e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004292:	6013      	str	r3, [r2, #0]
 8004294:	4b68      	ldr	r3, [pc, #416]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a67      	ldr	r2, [pc, #412]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800429a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800429e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d013      	beq.n	80042d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7ff fa88 	bl	80037bc <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042b0:	f7ff fa84 	bl	80037bc <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b64      	cmp	r3, #100	@ 0x64
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e200      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0xe4>
 80042ce:	e014      	b.n	80042fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d0:	f7ff fa74 	bl	80037bc <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042d8:	f7ff fa70 	bl	80037bc <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b64      	cmp	r3, #100	@ 0x64
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e1ec      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ea:	4b53      	ldr	r3, [pc, #332]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x10c>
 80042f6:	e000      	b.n	80042fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d063      	beq.n	80043ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004306:	4b4c      	ldr	r3, [pc, #304]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	f003 030c 	and.w	r3, r3, #12
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004312:	4b49      	ldr	r3, [pc, #292]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b08      	cmp	r3, #8
 800431c:	d11c      	bne.n	8004358 <HAL_RCC_OscConfig+0x18c>
 800431e:	4b46      	ldr	r3, [pc, #280]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d116      	bne.n	8004358 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800432a:	4b43      	ldr	r3, [pc, #268]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0302 	and.w	r3, r3, #2
 8004332:	2b00      	cmp	r3, #0
 8004334:	d005      	beq.n	8004342 <HAL_RCC_OscConfig+0x176>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	2b01      	cmp	r3, #1
 800433c:	d001      	beq.n	8004342 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e1c0      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004342:	4b3d      	ldr	r3, [pc, #244]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	4939      	ldr	r1, [pc, #228]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004352:	4313      	orrs	r3, r2
 8004354:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004356:	e03a      	b.n	80043ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	691b      	ldr	r3, [r3, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d020      	beq.n	80043a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004360:	4b36      	ldr	r3, [pc, #216]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 8004362:	2201      	movs	r2, #1
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7ff fa29 	bl	80037bc <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436e:	f7ff fa25 	bl	80037bc <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e1a1      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004380:	4b2d      	ldr	r3, [pc, #180]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438c:	4b2a      	ldr	r3, [pc, #168]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	4927      	ldr	r1, [pc, #156]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 800439c:	4313      	orrs	r3, r2
 800439e:	600b      	str	r3, [r1, #0]
 80043a0:	e015      	b.n	80043ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a2:	4b26      	ldr	r3, [pc, #152]	@ (800443c <HAL_RCC_OscConfig+0x270>)
 80043a4:	2200      	movs	r2, #0
 80043a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a8:	f7ff fa08 	bl	80037bc <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b0:	f7ff fa04 	bl	80037bc <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e180      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043c2:	4b1d      	ldr	r3, [pc, #116]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d03a      	beq.n	8004450 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d019      	beq.n	8004416 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043e2:	4b17      	ldr	r3, [pc, #92]	@ (8004440 <HAL_RCC_OscConfig+0x274>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043e8:	f7ff f9e8 	bl	80037bc <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f0:	f7ff f9e4 	bl	80037bc <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e160      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004402:	4b0d      	ldr	r3, [pc, #52]	@ (8004438 <HAL_RCC_OscConfig+0x26c>)
 8004404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0f0      	beq.n	80043f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800440e:	2001      	movs	r0, #1
 8004410:	f000 face 	bl	80049b0 <RCC_Delay>
 8004414:	e01c      	b.n	8004450 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <HAL_RCC_OscConfig+0x274>)
 8004418:	2200      	movs	r2, #0
 800441a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800441c:	f7ff f9ce 	bl	80037bc <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004422:	e00f      	b.n	8004444 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004424:	f7ff f9ca 	bl	80037bc <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d908      	bls.n	8004444 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e146      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
 8004436:	bf00      	nop
 8004438:	40021000 	.word	0x40021000
 800443c:	42420000 	.word	0x42420000
 8004440:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004444:	4b92      	ldr	r3, [pc, #584]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e9      	bne.n	8004424 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80a6 	beq.w	80045aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2300      	movs	r3, #0
 8004460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004462:	4b8b      	ldr	r3, [pc, #556]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10d      	bne.n	800448a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800446e:	4b88      	ldr	r3, [pc, #544]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4a87      	ldr	r2, [pc, #540]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004474:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004478:	61d3      	str	r3, [r2, #28]
 800447a:	4b85      	ldr	r3, [pc, #532]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004486:	2301      	movs	r3, #1
 8004488:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448a:	4b82      	ldr	r3, [pc, #520]	@ (8004694 <HAL_RCC_OscConfig+0x4c8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004492:	2b00      	cmp	r3, #0
 8004494:	d118      	bne.n	80044c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004496:	4b7f      	ldr	r3, [pc, #508]	@ (8004694 <HAL_RCC_OscConfig+0x4c8>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7e      	ldr	r2, [pc, #504]	@ (8004694 <HAL_RCC_OscConfig+0x4c8>)
 800449c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044a2:	f7ff f98b 	bl	80037bc <HAL_GetTick>
 80044a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	e008      	b.n	80044bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044aa:	f7ff f987 	bl	80037bc <HAL_GetTick>
 80044ae:	4602      	mov	r2, r0
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	@ 0x64
 80044b6:	d901      	bls.n	80044bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e103      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044bc:	4b75      	ldr	r3, [pc, #468]	@ (8004694 <HAL_RCC_OscConfig+0x4c8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0f0      	beq.n	80044aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d106      	bne.n	80044de <HAL_RCC_OscConfig+0x312>
 80044d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a6e      	ldr	r2, [pc, #440]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	e02d      	b.n	800453a <HAL_RCC_OscConfig+0x36e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10c      	bne.n	8004500 <HAL_RCC_OscConfig+0x334>
 80044e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80044e8:	6a1b      	ldr	r3, [r3, #32]
 80044ea:	4a69      	ldr	r2, [pc, #420]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	f023 0301 	bic.w	r3, r3, #1
 80044f0:	6213      	str	r3, [r2, #32]
 80044f2:	4b67      	ldr	r3, [pc, #412]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a66      	ldr	r2, [pc, #408]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0304 	bic.w	r3, r3, #4
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	e01c      	b.n	800453a <HAL_RCC_OscConfig+0x36e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b05      	cmp	r3, #5
 8004506:	d10c      	bne.n	8004522 <HAL_RCC_OscConfig+0x356>
 8004508:	4b61      	ldr	r3, [pc, #388]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4a60      	ldr	r2, [pc, #384]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800450e:	f043 0304 	orr.w	r3, r3, #4
 8004512:	6213      	str	r3, [r2, #32]
 8004514:	4b5e      	ldr	r3, [pc, #376]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	4a5d      	ldr	r2, [pc, #372]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	6213      	str	r3, [r2, #32]
 8004520:	e00b      	b.n	800453a <HAL_RCC_OscConfig+0x36e>
 8004522:	4b5b      	ldr	r3, [pc, #364]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	4a5a      	ldr	r2, [pc, #360]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004528:	f023 0301 	bic.w	r3, r3, #1
 800452c:	6213      	str	r3, [r2, #32]
 800452e:	4b58      	ldr	r3, [pc, #352]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a57      	ldr	r2, [pc, #348]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f023 0304 	bic.w	r3, r3, #4
 8004538:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d015      	beq.n	800456e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004542:	f7ff f93b 	bl	80037bc <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004548:	e00a      	b.n	8004560 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800454a:	f7ff f937 	bl	80037bc <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004558:	4293      	cmp	r3, r2
 800455a:	d901      	bls.n	8004560 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e0b1      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004560:	4b4b      	ldr	r3, [pc, #300]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d0ee      	beq.n	800454a <HAL_RCC_OscConfig+0x37e>
 800456c:	e014      	b.n	8004598 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800456e:	f7ff f925 	bl	80037bc <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004574:	e00a      	b.n	800458c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004576:	f7ff f921 	bl	80037bc <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004584:	4293      	cmp	r3, r2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e09b      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800458c:	4b40      	ldr	r3, [pc, #256]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	f003 0302 	and.w	r3, r3, #2
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1ee      	bne.n	8004576 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004598:	7dfb      	ldrb	r3, [r7, #23]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d105      	bne.n	80045aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800459e:	4b3c      	ldr	r3, [pc, #240]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	4a3b      	ldr	r2, [pc, #236]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f000 8087 	beq.w	80046c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045b4:	4b36      	ldr	r3, [pc, #216]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d061      	beq.n	8004684 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d146      	bne.n	8004656 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c8:	4b33      	ldr	r3, [pc, #204]	@ (8004698 <HAL_RCC_OscConfig+0x4cc>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7ff f8f5 	bl	80037bc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d6:	f7ff f8f1 	bl	80037bc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e06d      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045e8:	4b29      	ldr	r3, [pc, #164]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1f0      	bne.n	80045d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045fc:	d108      	bne.n	8004610 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045fe:	4b24      	ldr	r3, [pc, #144]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	4921      	ldr	r1, [pc, #132]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004610:	4b1f      	ldr	r3, [pc, #124]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a19      	ldr	r1, [r3, #32]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	430b      	orrs	r3, r1
 8004622:	491b      	ldr	r1, [pc, #108]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004628:	4b1b      	ldr	r3, [pc, #108]	@ (8004698 <HAL_RCC_OscConfig+0x4cc>)
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462e:	f7ff f8c5 	bl	80037bc <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004636:	f7ff f8c1 	bl	80037bc <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e03d      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004648:	4b11      	ldr	r3, [pc, #68]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x46a>
 8004654:	e035      	b.n	80046c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b10      	ldr	r3, [pc, #64]	@ (8004698 <HAL_RCC_OscConfig+0x4cc>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800465c:	f7ff f8ae 	bl	80037bc <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7ff f8aa 	bl	80037bc <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e026      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004676:	4b06      	ldr	r3, [pc, #24]	@ (8004690 <HAL_RCC_OscConfig+0x4c4>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x498>
 8004682:	e01e      	b.n	80046c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e019      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
 8004690:	40021000 	.word	0x40021000
 8004694:	40007000 	.word	0x40007000
 8004698:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800469c:	4b0b      	ldr	r3, [pc, #44]	@ (80046cc <HAL_RCC_OscConfig+0x500>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1b      	ldr	r3, [r3, #32]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d106      	bne.n	80046be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e000      	b.n	80046c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40021000 	.word	0x40021000

080046d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0d0      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0307 	and.w	r3, r3, #7
 80046ec:	683a      	ldr	r2, [r7, #0]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d910      	bls.n	8004714 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f2:	4b67      	ldr	r3, [pc, #412]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f023 0207 	bic.w	r2, r3, #7
 80046fa:	4965      	ldr	r1, [pc, #404]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	4313      	orrs	r3, r2
 8004700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b63      	ldr	r3, [pc, #396]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0b8      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d020      	beq.n	8004762 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0304 	and.w	r3, r3, #4
 8004728:	2b00      	cmp	r3, #0
 800472a:	d005      	beq.n	8004738 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800472c:	4b59      	ldr	r3, [pc, #356]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a58      	ldr	r2, [pc, #352]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004736:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d005      	beq.n	8004750 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004744:	4b53      	ldr	r3, [pc, #332]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	4a52      	ldr	r2, [pc, #328]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800474a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800474e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004750:	4b50      	ldr	r3, [pc, #320]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	494d      	ldr	r1, [pc, #308]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	4313      	orrs	r3, r2
 8004760:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d040      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d107      	bne.n	8004786 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b47      	ldr	r3, [pc, #284]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d115      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e07f      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d107      	bne.n	800479e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800478e:	4b41      	ldr	r3, [pc, #260]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e073      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800479e:	4b3d      	ldr	r3, [pc, #244]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e06b      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ae:	4b39      	ldr	r3, [pc, #228]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f023 0203 	bic.w	r2, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	4936      	ldr	r1, [pc, #216]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047c0:	f7fe fffc 	bl	80037bc <HAL_GetTick>
 80047c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047c6:	e00a      	b.n	80047de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047c8:	f7fe fff8 	bl	80037bc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e053      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047de:	4b2d      	ldr	r3, [pc, #180]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f003 020c 	and.w	r2, r3, #12
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1eb      	bne.n	80047c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047f0:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0307 	and.w	r3, r3, #7
 80047f8:	683a      	ldr	r2, [r7, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d210      	bcs.n	8004820 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047fe:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f023 0207 	bic.w	r2, r3, #7
 8004806:	4922      	ldr	r1, [pc, #136]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	4313      	orrs	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <HAL_RCC_ClockConfig+0x1c0>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	429a      	cmp	r2, r3
 800481a:	d001      	beq.n	8004820 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e032      	b.n	8004886 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800482c:	4b19      	ldr	r3, [pc, #100]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	4916      	ldr	r1, [pc, #88]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0308 	and.w	r3, r3, #8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d009      	beq.n	800485e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800484a:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	00db      	lsls	r3, r3, #3
 8004858:	490e      	ldr	r1, [pc, #56]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 800485a:	4313      	orrs	r3, r2
 800485c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800485e:	f000 f821 	bl	80048a4 <HAL_RCC_GetSysClockFreq>
 8004862:	4602      	mov	r2, r0
 8004864:	4b0b      	ldr	r3, [pc, #44]	@ (8004894 <HAL_RCC_ClockConfig+0x1c4>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	091b      	lsrs	r3, r3, #4
 800486a:	f003 030f 	and.w	r3, r3, #15
 800486e:	490a      	ldr	r1, [pc, #40]	@ (8004898 <HAL_RCC_ClockConfig+0x1c8>)
 8004870:	5ccb      	ldrb	r3, [r1, r3]
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a09      	ldr	r2, [pc, #36]	@ (800489c <HAL_RCC_ClockConfig+0x1cc>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800487a:	4b09      	ldr	r3, [pc, #36]	@ (80048a0 <HAL_RCC_ClockConfig+0x1d0>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fe ff5a 	bl	8003738 <HAL_InitTick>

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40022000 	.word	0x40022000
 8004894:	40021000 	.word	0x40021000
 8004898:	080090a0 	.word	0x080090a0
 800489c:	2000001c 	.word	0x2000001c
 80048a0:	20000020 	.word	0x20000020

080048a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	2300      	movs	r3, #0
 80048b0:	60bb      	str	r3, [r7, #8]
 80048b2:	2300      	movs	r3, #0
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	2300      	movs	r3, #0
 80048b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80048be:	4b1e      	ldr	r3, [pc, #120]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x94>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 030c 	and.w	r3, r3, #12
 80048ca:	2b04      	cmp	r3, #4
 80048cc:	d002      	beq.n	80048d4 <HAL_RCC_GetSysClockFreq+0x30>
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d003      	beq.n	80048da <HAL_RCC_GetSysClockFreq+0x36>
 80048d2:	e027      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048d4:	4b19      	ldr	r3, [pc, #100]	@ (800493c <HAL_RCC_GetSysClockFreq+0x98>)
 80048d6:	613b      	str	r3, [r7, #16]
      break;
 80048d8:	e027      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	0c9b      	lsrs	r3, r3, #18
 80048de:	f003 030f 	and.w	r3, r3, #15
 80048e2:	4a17      	ldr	r2, [pc, #92]	@ (8004940 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048e4:	5cd3      	ldrb	r3, [r2, r3]
 80048e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d010      	beq.n	8004914 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048f2:	4b11      	ldr	r3, [pc, #68]	@ (8004938 <HAL_RCC_GetSysClockFreq+0x94>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	0c5b      	lsrs	r3, r3, #17
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	4a11      	ldr	r2, [pc, #68]	@ (8004944 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048fe:	5cd3      	ldrb	r3, [r2, r3]
 8004900:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a0d      	ldr	r2, [pc, #52]	@ (800493c <HAL_RCC_GetSysClockFreq+0x98>)
 8004906:	fb03 f202 	mul.w	r2, r3, r2
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e004      	b.n	800491e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a0c      	ldr	r2, [pc, #48]	@ (8004948 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004918:	fb02 f303 	mul.w	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	613b      	str	r3, [r7, #16]
      break;
 8004922:	e002      	b.n	800492a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004924:	4b05      	ldr	r3, [pc, #20]	@ (800493c <HAL_RCC_GetSysClockFreq+0x98>)
 8004926:	613b      	str	r3, [r7, #16]
      break;
 8004928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492a:	693b      	ldr	r3, [r7, #16]
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40021000 	.word	0x40021000
 800493c:	007a1200 	.word	0x007a1200
 8004940:	080090b8 	.word	0x080090b8
 8004944:	080090c8 	.word	0x080090c8
 8004948:	003d0900 	.word	0x003d0900

0800494c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004950:	4b02      	ldr	r3, [pc, #8]	@ (800495c <HAL_RCC_GetHCLKFreq+0x10>)
 8004952:	681b      	ldr	r3, [r3, #0]
}
 8004954:	4618      	mov	r0, r3
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	2000001c 	.word	0x2000001c

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004964:	f7ff fff2 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	@ (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	0a1b      	lsrs	r3, r3, #8
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	@ (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40021000 	.word	0x40021000
 8004984:	080090b0 	.word	0x080090b0

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800498c:	f7ff ffde 	bl	800494c <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	@ (80049a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	0adb      	lsrs	r3, r3, #11
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	@ (80049ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	080090b0 	.word	0x080090b0

080049b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80049b8:	4b0a      	ldr	r3, [pc, #40]	@ (80049e4 <RCC_Delay+0x34>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0a      	ldr	r2, [pc, #40]	@ (80049e8 <RCC_Delay+0x38>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	0a5b      	lsrs	r3, r3, #9
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	fb02 f303 	mul.w	r3, r2, r3
 80049ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049cc:	bf00      	nop
  }
  while (Delay --);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1e5a      	subs	r2, r3, #1
 80049d2:	60fa      	str	r2, [r7, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f9      	bne.n	80049cc <RCC_Delay+0x1c>
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	3714      	adds	r7, #20
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	2000001c 	.word	0x2000001c
 80049e8:	10624dd3 	.word	0x10624dd3

080049ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d101      	bne.n	80049fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e041      	b.n	8004a82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d106      	bne.n	8004a18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7fe fc6e 	bl	80032f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f001 f8fe 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}

08004a8a <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6a1a      	ldr	r2, [r3, #32]
 8004a98:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d10f      	bne.n	8004ac2 <HAL_TIM_Base_Stop+0x38>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a1a      	ldr	r2, [r3, #32]
 8004aa8:	f240 4344 	movw	r3, #1092	@ 0x444
 8004aac:	4013      	ands	r3, r2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d107      	bne.n	8004ac2 <HAL_TIM_Base_Stop+0x38>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f022 0201 	bic.w	r2, r2, #1
 8004ac0:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
	...

08004ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d001      	beq.n	8004af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e03a      	b.n	8004b66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f042 0201 	orr.w	r2, r2, #1
 8004b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	@ (8004b70 <HAL_TIM_Base_Start_IT+0x98>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d00e      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x58>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b1a:	d009      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x58>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d004      	beq.n	8004b30 <HAL_TIM_Base_Start_IT+0x58>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a13      	ldr	r2, [pc, #76]	@ (8004b78 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d111      	bne.n	8004b54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	689b      	ldr	r3, [r3, #8]
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b06      	cmp	r3, #6
 8004b40:	d010      	beq.n	8004b64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b52:	e007      	b.n	8004b64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bc80      	pop	{r7}
 8004b6e:	4770      	bx	lr
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	40000400 	.word	0x40000400
 8004b78:	40000800 	.word	0x40000800

08004b7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b083      	sub	sp, #12
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6a1a      	ldr	r2, [r3, #32]
 8004baa:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bae:	4013      	ands	r3, r2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d107      	bne.n	8004bc4 <HAL_TIM_Base_Stop_IT+0x48>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	370c      	adds	r7, #12
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bc80      	pop	{r7}
 8004bd6:	4770      	bx	lr

08004bd8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e041      	b.n	8004c6e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d106      	bne.n	8004c04 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f839 	bl	8004c76 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3304      	adds	r3, #4
 8004c14:	4619      	mov	r1, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	f001 f808 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}

08004c76 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004c76:	b480      	push	{r7}
 8004c78:	b083      	sub	sp, #12
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004c7e:	bf00      	nop
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bc80      	pop	{r7}
 8004c86:	4770      	bx	lr

08004c88 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c92:	2300      	movs	r3, #0
 8004c94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <HAL_TIM_OC_Start_IT+0x28>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	bf14      	ite	ne
 8004ca8:	2301      	movne	r3, #1
 8004caa:	2300      	moveq	r3, #0
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	e022      	b.n	8004cf6 <HAL_TIM_OC_Start_IT+0x6e>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	d109      	bne.n	8004cca <HAL_TIM_OC_Start_IT+0x42>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	e015      	b.n	8004cf6 <HAL_TIM_OC_Start_IT+0x6e>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d109      	bne.n	8004ce4 <HAL_TIM_OC_Start_IT+0x5c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	bf14      	ite	ne
 8004cdc:	2301      	movne	r3, #1
 8004cde:	2300      	moveq	r3, #0
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	e008      	b.n	8004cf6 <HAL_TIM_OC_Start_IT+0x6e>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	bf14      	ite	ne
 8004cf0:	2301      	movne	r3, #1
 8004cf2:	2300      	moveq	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <HAL_TIM_OC_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e0a9      	b.n	8004e52 <HAL_TIM_OC_Start_IT+0x1ca>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <HAL_TIM_OC_Start_IT+0x86>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2202      	movs	r2, #2
 8004d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d0c:	e013      	b.n	8004d36 <HAL_TIM_OC_Start_IT+0xae>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d104      	bne.n	8004d1e <HAL_TIM_OC_Start_IT+0x96>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d1c:	e00b      	b.n	8004d36 <HAL_TIM_OC_Start_IT+0xae>
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d104      	bne.n	8004d2e <HAL_TIM_OC_Start_IT+0xa6>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d2c:	e003      	b.n	8004d36 <HAL_TIM_OC_Start_IT+0xae>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  switch (Channel)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b0c      	cmp	r3, #12
 8004d3a:	d841      	bhi.n	8004dc0 <HAL_TIM_OC_Start_IT+0x138>
 8004d3c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d44 <HAL_TIM_OC_Start_IT+0xbc>)
 8004d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d42:	bf00      	nop
 8004d44:	08004d79 	.word	0x08004d79
 8004d48:	08004dc1 	.word	0x08004dc1
 8004d4c:	08004dc1 	.word	0x08004dc1
 8004d50:	08004dc1 	.word	0x08004dc1
 8004d54:	08004d8b 	.word	0x08004d8b
 8004d58:	08004dc1 	.word	0x08004dc1
 8004d5c:	08004dc1 	.word	0x08004dc1
 8004d60:	08004dc1 	.word	0x08004dc1
 8004d64:	08004d9d 	.word	0x08004d9d
 8004d68:	08004dc1 	.word	0x08004dc1
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004dc1 	.word	0x08004dc1
 8004d74:	08004daf 	.word	0x08004daf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f042 0202 	orr.w	r2, r2, #2
 8004d86:	60da      	str	r2, [r3, #12]
      break;
 8004d88:	e01d      	b.n	8004dc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0204 	orr.w	r2, r2, #4
 8004d98:	60da      	str	r2, [r3, #12]
      break;
 8004d9a:	e014      	b.n	8004dc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68da      	ldr	r2, [r3, #12]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0208 	orr.w	r2, r2, #8
 8004daa:	60da      	str	r2, [r3, #12]
      break;
 8004dac:	e00b      	b.n	8004dc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f042 0210 	orr.w	r2, r2, #16
 8004dbc:	60da      	str	r2, [r3, #12]
      break;
 8004dbe:	e002      	b.n	8004dc6 <HAL_TIM_OC_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d141      	bne.n	8004e50 <HAL_TIM_OC_Start_IT+0x1c8>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	6839      	ldr	r1, [r7, #0]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f001 fac2 	bl	800635e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1f      	ldr	r2, [pc, #124]	@ (8004e5c <HAL_TIM_OC_Start_IT+0x1d4>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d107      	bne.n	8004df4 <HAL_TIM_OC_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004df2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a18      	ldr	r2, [pc, #96]	@ (8004e5c <HAL_TIM_OC_Start_IT+0x1d4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00e      	beq.n	8004e1c <HAL_TIM_OC_Start_IT+0x194>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e06:	d009      	beq.n	8004e1c <HAL_TIM_OC_Start_IT+0x194>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a14      	ldr	r2, [pc, #80]	@ (8004e60 <HAL_TIM_OC_Start_IT+0x1d8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d004      	beq.n	8004e1c <HAL_TIM_OC_Start_IT+0x194>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a13      	ldr	r2, [pc, #76]	@ (8004e64 <HAL_TIM_OC_Start_IT+0x1dc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d111      	bne.n	8004e40 <HAL_TIM_OC_Start_IT+0x1b8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0307 	and.w	r3, r3, #7
 8004e26:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b06      	cmp	r3, #6
 8004e2c:	d010      	beq.n	8004e50 <HAL_TIM_OC_Start_IT+0x1c8>
      {
        __HAL_TIM_ENABLE(htim);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3e:	e007      	b.n	8004e50 <HAL_TIM_OC_Start_IT+0x1c8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0201 	orr.w	r2, r2, #1
 8004e4e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40012c00 	.word	0x40012c00
 8004e60:	40000400 	.word	0x40000400
 8004e64:	40000800 	.word	0x40000800

08004e68 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e72:	2300      	movs	r3, #0
 8004e74:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b0c      	cmp	r3, #12
 8004e7a:	d841      	bhi.n	8004f00 <HAL_TIM_OC_Stop_IT+0x98>
 8004e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <HAL_TIM_OC_Stop_IT+0x1c>)
 8004e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e82:	bf00      	nop
 8004e84:	08004eb9 	.word	0x08004eb9
 8004e88:	08004f01 	.word	0x08004f01
 8004e8c:	08004f01 	.word	0x08004f01
 8004e90:	08004f01 	.word	0x08004f01
 8004e94:	08004ecb 	.word	0x08004ecb
 8004e98:	08004f01 	.word	0x08004f01
 8004e9c:	08004f01 	.word	0x08004f01
 8004ea0:	08004f01 	.word	0x08004f01
 8004ea4:	08004edd 	.word	0x08004edd
 8004ea8:	08004f01 	.word	0x08004f01
 8004eac:	08004f01 	.word	0x08004f01
 8004eb0:	08004f01 	.word	0x08004f01
 8004eb4:	08004eef 	.word	0x08004eef
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0202 	bic.w	r2, r2, #2
 8004ec6:	60da      	str	r2, [r3, #12]
      break;
 8004ec8:	e01d      	b.n	8004f06 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68da      	ldr	r2, [r3, #12]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0204 	bic.w	r2, r2, #4
 8004ed8:	60da      	str	r2, [r3, #12]
      break;
 8004eda:	e014      	b.n	8004f06 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f022 0208 	bic.w	r2, r2, #8
 8004eea:	60da      	str	r2, [r3, #12]
      break;
 8004eec:	e00b      	b.n	8004f06 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0210 	bic.w	r2, r2, #16
 8004efc:	60da      	str	r2, [r3, #12]
      break;
 8004efe:	e002      	b.n	8004f06 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	73fb      	strb	r3, [r7, #15]
      break;
 8004f04:	bf00      	nop
  }

  if (status == HAL_OK)
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d157      	bne.n	8004fbc <HAL_TIM_OC_Stop_IT+0x154>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2200      	movs	r2, #0
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 fa22 	bl	800635e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc8 <HAL_TIM_OC_Stop_IT+0x160>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d117      	bne.n	8004f54 <HAL_TIM_OC_Stop_IT+0xec>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6a1a      	ldr	r2, [r3, #32]
 8004f2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10f      	bne.n	8004f54 <HAL_TIM_OC_Stop_IT+0xec>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6a1a      	ldr	r2, [r3, #32]
 8004f3a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f3e:	4013      	ands	r3, r2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d107      	bne.n	8004f54 <HAL_TIM_OC_Stop_IT+0xec>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f52:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	6a1a      	ldr	r2, [r3, #32]
 8004f5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10f      	bne.n	8004f84 <HAL_TIM_OC_Stop_IT+0x11c>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6a1a      	ldr	r2, [r3, #32]
 8004f6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f6e:	4013      	ands	r3, r2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d107      	bne.n	8004f84 <HAL_TIM_OC_Stop_IT+0x11c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0201 	bic.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d104      	bne.n	8004f94 <HAL_TIM_OC_Stop_IT+0x12c>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f92:	e013      	b.n	8004fbc <HAL_TIM_OC_Stop_IT+0x154>
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	2b04      	cmp	r3, #4
 8004f98:	d104      	bne.n	8004fa4 <HAL_TIM_OC_Stop_IT+0x13c>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fa2:	e00b      	b.n	8004fbc <HAL_TIM_OC_Stop_IT+0x154>
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b08      	cmp	r3, #8
 8004fa8:	d104      	bne.n	8004fb4 <HAL_TIM_OC_Stop_IT+0x14c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb2:	e003      	b.n	8004fbc <HAL_TIM_OC_Stop_IT+0x154>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00

08004fcc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d106      	bne.n	8004ff8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f839 	bl	800506a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3304      	adds	r3, #4
 8005008:	4619      	mov	r1, r3
 800500a:	4610      	mov	r0, r2
 800500c:	f000 fe0e 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800506a:	b480      	push	{r7}
 800506c:	b083      	sub	sp, #12
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005072:	bf00      	nop
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	bc80      	pop	{r7}
 800507a:	4770      	bx	lr

0800507c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d109      	bne.n	80050a0 <HAL_TIM_PWM_Start+0x24>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	bf14      	ite	ne
 8005098:	2301      	movne	r3, #1
 800509a:	2300      	moveq	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	e022      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d109      	bne.n	80050ba <HAL_TIM_PWM_Start+0x3e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	bf14      	ite	ne
 80050b2:	2301      	movne	r3, #1
 80050b4:	2300      	moveq	r3, #0
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	e015      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b08      	cmp	r3, #8
 80050be:	d109      	bne.n	80050d4 <HAL_TIM_PWM_Start+0x58>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	e008      	b.n	80050e6 <HAL_TIM_PWM_Start+0x6a>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d001      	beq.n	80050ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e05e      	b.n	80051ac <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d104      	bne.n	80050fe <HAL_TIM_PWM_Start+0x82>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050fc:	e013      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b04      	cmp	r3, #4
 8005102:	d104      	bne.n	800510e <HAL_TIM_PWM_Start+0x92>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510c:	e00b      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	2b08      	cmp	r3, #8
 8005112:	d104      	bne.n	800511e <HAL_TIM_PWM_Start+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511c:	e003      	b.n	8005126 <HAL_TIM_PWM_Start+0xaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2202      	movs	r2, #2
 8005122:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2201      	movs	r2, #1
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f001 f915 	bl	800635e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1e      	ldr	r2, [pc, #120]	@ (80051b4 <HAL_TIM_PWM_Start+0x138>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d107      	bne.n	800514e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800514c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a18      	ldr	r2, [pc, #96]	@ (80051b4 <HAL_TIM_PWM_Start+0x138>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIM_PWM_Start+0xfa>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005160:	d009      	beq.n	8005176 <HAL_TIM_PWM_Start+0xfa>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a14      	ldr	r2, [pc, #80]	@ (80051b8 <HAL_TIM_PWM_Start+0x13c>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIM_PWM_Start+0xfa>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a12      	ldr	r2, [pc, #72]	@ (80051bc <HAL_TIM_PWM_Start+0x140>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d111      	bne.n	800519a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d010      	beq.n	80051aa <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	e007      	b.n	80051aa <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40012c00 	.word	0x40012c00
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800

080051c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d101      	bne.n	80051d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e041      	b.n	8005256 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d106      	bne.n	80051ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f839 	bl	800525e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2202      	movs	r2, #2
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f000 fd14 	bl	8005c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3708      	adds	r7, #8
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}

0800525e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005266:	bf00      	nop
 8005268:	370c      	adds	r7, #12
 800526a:	46bd      	mov	sp, r7
 800526c:	bc80      	pop	{r7}
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_IC_Start_IT+0x1e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e013      	b.n	80052b6 <HAL_TIM_IC_Start_IT+0x46>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_IC_Start_IT+0x2e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800529a:	b2db      	uxtb	r3, r3
 800529c:	e00b      	b.n	80052b6 <HAL_TIM_IC_Start_IT+0x46>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_IC_Start_IT+0x3e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e003      	b.n	80052b6 <HAL_TIM_IC_Start_IT+0x46>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d104      	bne.n	80052c8 <HAL_TIM_IC_Start_IT+0x58>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	e013      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x80>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d104      	bne.n	80052d8 <HAL_TIM_IC_Start_IT+0x68>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e00b      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x80>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d104      	bne.n	80052e8 <HAL_TIM_IC_Start_IT+0x78>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	e003      	b.n	80052f0 <HAL_TIM_IC_Start_IT+0x80>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052f2:	7bbb      	ldrb	r3, [r7, #14]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d102      	bne.n	80052fe <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052f8:	7b7b      	ldrb	r3, [r7, #13]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d001      	beq.n	8005302 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e0b8      	b.n	8005474 <HAL_TIM_IC_Start_IT+0x204>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d104      	bne.n	8005312 <HAL_TIM_IC_Start_IT+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005310:	e013      	b.n	800533a <HAL_TIM_IC_Start_IT+0xca>
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b04      	cmp	r3, #4
 8005316:	d104      	bne.n	8005322 <HAL_TIM_IC_Start_IT+0xb2>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005320:	e00b      	b.n	800533a <HAL_TIM_IC_Start_IT+0xca>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b08      	cmp	r3, #8
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0xc2>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005330:	e003      	b.n	800533a <HAL_TIM_IC_Start_IT+0xca>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2202      	movs	r2, #2
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_TIM_IC_Start_IT+0xda>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005348:	e013      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x102>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b04      	cmp	r3, #4
 800534e:	d104      	bne.n	800535a <HAL_TIM_IC_Start_IT+0xea>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005358:	e00b      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x102>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b08      	cmp	r3, #8
 800535e:	d104      	bne.n	800536a <HAL_TIM_IC_Start_IT+0xfa>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005368:	e003      	b.n	8005372 <HAL_TIM_IC_Start_IT+0x102>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2202      	movs	r2, #2
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b0c      	cmp	r3, #12
 8005376:	d841      	bhi.n	80053fc <HAL_TIM_IC_Start_IT+0x18c>
 8005378:	a201      	add	r2, pc, #4	@ (adr r2, 8005380 <HAL_TIM_IC_Start_IT+0x110>)
 800537a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537e:	bf00      	nop
 8005380:	080053b5 	.word	0x080053b5
 8005384:	080053fd 	.word	0x080053fd
 8005388:	080053fd 	.word	0x080053fd
 800538c:	080053fd 	.word	0x080053fd
 8005390:	080053c7 	.word	0x080053c7
 8005394:	080053fd 	.word	0x080053fd
 8005398:	080053fd 	.word	0x080053fd
 800539c:	080053fd 	.word	0x080053fd
 80053a0:	080053d9 	.word	0x080053d9
 80053a4:	080053fd 	.word	0x080053fd
 80053a8:	080053fd 	.word	0x080053fd
 80053ac:	080053fd 	.word	0x080053fd
 80053b0:	080053eb 	.word	0x080053eb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0202 	orr.w	r2, r2, #2
 80053c2:	60da      	str	r2, [r3, #12]
      break;
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68da      	ldr	r2, [r3, #12]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0204 	orr.w	r2, r2, #4
 80053d4:	60da      	str	r2, [r3, #12]
      break;
 80053d6:	e014      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68da      	ldr	r2, [r3, #12]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f042 0208 	orr.w	r2, r2, #8
 80053e6:	60da      	str	r2, [r3, #12]
      break;
 80053e8:	e00b      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0210 	orr.w	r2, r2, #16
 80053f8:	60da      	str	r2, [r3, #12]
      break;
 80053fa:	e002      	b.n	8005402 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005400:	bf00      	nop
  }

  if (status == HAL_OK)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d134      	bne.n	8005472 <HAL_TIM_IC_Start_IT+0x202>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2201      	movs	r2, #1
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f000 ffa4 	bl	800635e <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a18      	ldr	r2, [pc, #96]	@ (800547c <HAL_TIM_IC_Start_IT+0x20c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00e      	beq.n	800543e <HAL_TIM_IC_Start_IT+0x1ce>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005428:	d009      	beq.n	800543e <HAL_TIM_IC_Start_IT+0x1ce>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a14      	ldr	r2, [pc, #80]	@ (8005480 <HAL_TIM_IC_Start_IT+0x210>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d004      	beq.n	800543e <HAL_TIM_IC_Start_IT+0x1ce>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a12      	ldr	r2, [pc, #72]	@ (8005484 <HAL_TIM_IC_Start_IT+0x214>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d111      	bne.n	8005462 <HAL_TIM_IC_Start_IT+0x1f2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f003 0307 	and.w	r3, r3, #7
 8005448:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b06      	cmp	r3, #6
 800544e:	d010      	beq.n	8005472 <HAL_TIM_IC_Start_IT+0x202>
      {
        __HAL_TIM_ENABLE(htim);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681a      	ldr	r2, [r3, #0]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0201 	orr.w	r2, r2, #1
 800545e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005460:	e007      	b.n	8005472 <HAL_TIM_IC_Start_IT+0x202>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f042 0201 	orr.w	r2, r2, #1
 8005470:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005472:	7bfb      	ldrb	r3, [r7, #15]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3710      	adds	r7, #16
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800

08005488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d020      	beq.n	80054ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01b      	beq.n	80054ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f06f 0202 	mvn.w	r2, #2
 80054bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2201      	movs	r2, #1
 80054c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fb fd86 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 80054d8:	e005      	b.n	80054e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7fb fdc8 	bl	8001070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fb90 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d020      	beq.n	8005538 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f003 0304 	and.w	r3, r3, #4
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d01b      	beq.n	8005538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f06f 0204 	mvn.w	r2, #4
 8005508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800551a:	2b00      	cmp	r3, #0
 800551c:	d003      	beq.n	8005526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb fd60 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 8005524:	e005      	b.n	8005532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f7fb fda2 	bl	8001070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 fb6a 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f003 0308 	and.w	r3, r3, #8
 800553e:	2b00      	cmp	r3, #0
 8005540:	d020      	beq.n	8005584 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 0308 	and.w	r3, r3, #8
 8005548:	2b00      	cmp	r3, #0
 800554a:	d01b      	beq.n	8005584 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0208 	mvn.w	r2, #8
 8005554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2204      	movs	r2, #4
 800555a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	69db      	ldr	r3, [r3, #28]
 8005562:	f003 0303 	and.w	r3, r3, #3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f7fb fd3a 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 8005570:	e005      	b.n	800557e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f7fb fd7c 	bl	8001070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fb44 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 0310 	and.w	r3, r3, #16
 800558a:	2b00      	cmp	r3, #0
 800558c:	d020      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b00      	cmp	r3, #0
 8005596:	d01b      	beq.n	80055d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f06f 0210 	mvn.w	r2, #16
 80055a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2208      	movs	r2, #8
 80055a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	69db      	ldr	r3, [r3, #28]
 80055ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f7fb fd14 	bl	8000fe4 <HAL_TIM_IC_CaptureCallback>
 80055bc:	e005      	b.n	80055ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7fb fd56 	bl	8001070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f000 fb1e 	bl	8005c06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00c      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d007      	beq.n	80055f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f06f 0201 	mvn.w	r2, #1
 80055ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fb00 	bl	8005bf4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00c      	beq.n	8005618 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 ff80 	bl	8006518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005628:	2b00      	cmp	r3, #0
 800562a:	d007      	beq.n	800563c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 faee 	bl	8005c18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00c      	beq.n	8005660 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0320 	and.w	r3, r3, #32
 800564c:	2b00      	cmp	r3, #0
 800564e:	d007      	beq.n	8005660 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0220 	mvn.w	r2, #32
 8005658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 ff53 	bl	8006506 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005660:	bf00      	nop
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005674:	2300      	movs	r3, #0
 8005676:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800567e:	2b01      	cmp	r3, #1
 8005680:	d101      	bne.n	8005686 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005682:	2302      	movs	r3, #2
 8005684:	e048      	b.n	8005718 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2201      	movs	r2, #1
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d839      	bhi.n	8005708 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005694:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569a:	bf00      	nop
 800569c:	080056d1 	.word	0x080056d1
 80056a0:	08005709 	.word	0x08005709
 80056a4:	08005709 	.word	0x08005709
 80056a8:	08005709 	.word	0x08005709
 80056ac:	080056df 	.word	0x080056df
 80056b0:	08005709 	.word	0x08005709
 80056b4:	08005709 	.word	0x08005709
 80056b8:	08005709 	.word	0x08005709
 80056bc:	080056ed 	.word	0x080056ed
 80056c0:	08005709 	.word	0x08005709
 80056c4:	08005709 	.word	0x08005709
 80056c8:	08005709 	.word	0x08005709
 80056cc:	080056fb 	.word	0x080056fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68b9      	ldr	r1, [r7, #8]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fb16 	bl	8005d08 <TIM_OC1_SetConfig>
      break;
 80056dc:	e017      	b.n	800570e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb75 	bl	8005dd4 <TIM_OC2_SetConfig>
      break;
 80056ea:	e010      	b.n	800570e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fbd8 	bl	8005ea8 <TIM_OC3_SetConfig>
      break;
 80056f8:	e009      	b.n	800570e <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68b9      	ldr	r1, [r7, #8]
 8005700:	4618      	mov	r0, r3
 8005702:	f000 fc3b 	bl	8005f7c <TIM_OC4_SetConfig>
      break;
 8005706:	e002      	b.n	800570e <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	75fb      	strb	r3, [r7, #23]
      break;
 800570c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005716:	7dfb      	ldrb	r3, [r7, #23]
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_TIM_IC_ConfigChannel+0x1e>
 800573a:	2302      	movs	r3, #2
 800573c:	e088      	b.n	8005850 <HAL_TIM_IC_ConfigChannel+0x130>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800575c:	f000 fc5c 	bl	8006018 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699a      	ldr	r2, [r3, #24]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 020c 	bic.w	r2, r2, #12
 800576e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	6999      	ldr	r1, [r3, #24]
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	689a      	ldr	r2, [r3, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	619a      	str	r2, [r3, #24]
 8005782:	e060      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b04      	cmp	r3, #4
 8005788:	d11c      	bne.n	80057c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800579a:	f000 fcc5 	bl	8006128 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	699a      	ldr	r2, [r3, #24]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80057ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6999      	ldr	r1, [r3, #24]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	021a      	lsls	r2, r3, #8
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	619a      	str	r2, [r3, #24]
 80057c2:	e040      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b08      	cmp	r3, #8
 80057c8:	d11b      	bne.n	8005802 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80057da:	f000 fd10 	bl	80061fe <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	69da      	ldr	r2, [r3, #28]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 020c 	bic.w	r2, r2, #12
 80057ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	69d9      	ldr	r1, [r3, #28]
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	689a      	ldr	r2, [r3, #8]
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	61da      	str	r2, [r3, #28]
 8005800:	e021      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d11c      	bne.n	8005842 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005818:	f000 fd2c 	bl	8006274 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 800582a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	69d9      	ldr	r1, [r3, #28]
 8005832:	68bb      	ldr	r3, [r7, #8]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	021a      	lsls	r2, r3, #8
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	61da      	str	r2, [r3, #28]
 8005840:	e001      	b.n	8005846 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800584e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3718      	adds	r7, #24
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005864:	2300      	movs	r3, #0
 8005866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800586e:	2b01      	cmp	r3, #1
 8005870:	d101      	bne.n	8005876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005872:	2302      	movs	r3, #2
 8005874:	e0ae      	b.n	80059d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b0c      	cmp	r3, #12
 8005882:	f200 809f 	bhi.w	80059c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005886:	a201      	add	r2, pc, #4	@ (adr r2, 800588c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588c:	080058c1 	.word	0x080058c1
 8005890:	080059c5 	.word	0x080059c5
 8005894:	080059c5 	.word	0x080059c5
 8005898:	080059c5 	.word	0x080059c5
 800589c:	08005901 	.word	0x08005901
 80058a0:	080059c5 	.word	0x080059c5
 80058a4:	080059c5 	.word	0x080059c5
 80058a8:	080059c5 	.word	0x080059c5
 80058ac:	08005943 	.word	0x08005943
 80058b0:	080059c5 	.word	0x080059c5
 80058b4:	080059c5 	.word	0x080059c5
 80058b8:	080059c5 	.word	0x080059c5
 80058bc:	08005983 	.word	0x08005983
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fa1e 	bl	8005d08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	699a      	ldr	r2, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0208 	orr.w	r2, r2, #8
 80058da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	699a      	ldr	r2, [r3, #24]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0204 	bic.w	r2, r2, #4
 80058ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	619a      	str	r2, [r3, #24]
      break;
 80058fe:	e064      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68b9      	ldr	r1, [r7, #8]
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fa64 	bl	8005dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800591a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699a      	ldr	r2, [r3, #24]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6999      	ldr	r1, [r3, #24]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	021a      	lsls	r2, r3, #8
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	430a      	orrs	r2, r1
 800593e:	619a      	str	r2, [r3, #24]
      break;
 8005940:	e043      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	4618      	mov	r0, r3
 800594a:	f000 faad 	bl	8005ea8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	69da      	ldr	r2, [r3, #28]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f042 0208 	orr.w	r2, r2, #8
 800595c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69da      	ldr	r2, [r3, #28]
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 0204 	bic.w	r2, r2, #4
 800596c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	69d9      	ldr	r1, [r3, #28]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	691a      	ldr	r2, [r3, #16]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	61da      	str	r2, [r3, #28]
      break;
 8005980:	e023      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68b9      	ldr	r1, [r7, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f000 faf7 	bl	8005f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69da      	ldr	r2, [r3, #28]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800599c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	69da      	ldr	r2, [r3, #28]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69d9      	ldr	r1, [r3, #28]
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	021a      	lsls	r2, r3, #8
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	61da      	str	r2, [r3, #28]
      break;
 80059c2:	e002      	b.n	80059ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	75fb      	strb	r3, [r7, #23]
      break;
 80059c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80059d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_TIM_ConfigClockSource+0x1c>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e0b4      	b.n	8005b62 <HAL_TIM_ConfigClockSource+0x186>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005a16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005a1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a30:	d03e      	beq.n	8005ab0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a36:	f200 8087 	bhi.w	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a3e:	f000 8086 	beq.w	8005b4e <HAL_TIM_ConfigClockSource+0x172>
 8005a42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a46:	d87f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a48:	2b70      	cmp	r3, #112	@ 0x70
 8005a4a:	d01a      	beq.n	8005a82 <HAL_TIM_ConfigClockSource+0xa6>
 8005a4c:	2b70      	cmp	r3, #112	@ 0x70
 8005a4e:	d87b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a50:	2b60      	cmp	r3, #96	@ 0x60
 8005a52:	d050      	beq.n	8005af6 <HAL_TIM_ConfigClockSource+0x11a>
 8005a54:	2b60      	cmp	r3, #96	@ 0x60
 8005a56:	d877      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b50      	cmp	r3, #80	@ 0x50
 8005a5a:	d03c      	beq.n	8005ad6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a5c:	2b50      	cmp	r3, #80	@ 0x50
 8005a5e:	d873      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b40      	cmp	r3, #64	@ 0x40
 8005a62:	d058      	beq.n	8005b16 <HAL_TIM_ConfigClockSource+0x13a>
 8005a64:	2b40      	cmp	r3, #64	@ 0x40
 8005a66:	d86f      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b30      	cmp	r3, #48	@ 0x30
 8005a6a:	d064      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a6c:	2b30      	cmp	r3, #48	@ 0x30
 8005a6e:	d86b      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d060      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a74:	2b20      	cmp	r3, #32
 8005a76:	d867      	bhi.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d05c      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b10      	cmp	r3, #16
 8005a7e:	d05a      	beq.n	8005b36 <HAL_TIM_ConfigClockSource+0x15a>
 8005a80:	e062      	b.n	8005b48 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005a92:	f000 fc45 	bl	8006320 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005aa4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	609a      	str	r2, [r3, #8]
      break;
 8005aae:	e04f      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ac0:	f000 fc2e 	bl	8006320 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ad2:	609a      	str	r2, [r3, #8]
      break;
 8005ad4:	e03c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	f000 faf2 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2150      	movs	r1, #80	@ 0x50
 8005aee:	4618      	mov	r0, r3
 8005af0:	f000 fbfc 	bl	80062ec <TIM_ITRx_SetConfig>
      break;
 8005af4:	e02c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b02:	461a      	mov	r2, r3
 8005b04:	f000 fb4c 	bl	80061a0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	2160      	movs	r1, #96	@ 0x60
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 fbec 	bl	80062ec <TIM_ITRx_SetConfig>
      break;
 8005b14:	e01c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b22:	461a      	mov	r2, r3
 8005b24:	f000 fad2 	bl	80060cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2140      	movs	r1, #64	@ 0x40
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f000 fbdc 	bl	80062ec <TIM_ITRx_SetConfig>
      break;
 8005b34:	e00c      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f000 fbd3 	bl	80062ec <TIM_ITRx_SetConfig>
      break;
 8005b46:	e003      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e000      	b.n	8005b50 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005b76:	2300      	movs	r3, #0
 8005b78:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	d831      	bhi.n	8005be4 <HAL_TIM_ReadCapturedValue+0x78>
 8005b80:	a201      	add	r2, pc, #4	@ (adr r2, 8005b88 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005be5 	.word	0x08005be5
 8005b90:	08005be5 	.word	0x08005be5
 8005b94:	08005be5 	.word	0x08005be5
 8005b98:	08005bc7 	.word	0x08005bc7
 8005b9c:	08005be5 	.word	0x08005be5
 8005ba0:	08005be5 	.word	0x08005be5
 8005ba4:	08005be5 	.word	0x08005be5
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005be5 	.word	0x08005be5
 8005bb0:	08005be5 	.word	0x08005be5
 8005bb4:	08005be5 	.word	0x08005be5
 8005bb8:	08005bdb 	.word	0x08005bdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bc2:	60fb      	str	r3, [r7, #12]

      break;
 8005bc4:	e00f      	b.n	8005be6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bcc:	60fb      	str	r3, [r7, #12]

      break;
 8005bce:	e00a      	b.n	8005be6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	60fb      	str	r3, [r7, #12]

      break;
 8005bd8:	e005      	b.n	8005be6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005be0:	60fb      	str	r3, [r7, #12]

      break;
 8005be2:	e000      	b.n	8005be6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005be4:	bf00      	nop
  }

  return tmpreg;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bc80      	pop	{r7}
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop

08005bf4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bc80      	pop	{r7}
 8005c04:	4770      	bx	lr

08005c06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b083      	sub	sp, #12
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c0e:	bf00      	nop
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr
	...

08005c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a2f      	ldr	r2, [pc, #188]	@ (8005cfc <TIM_Base_SetConfig+0xd0>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00b      	beq.n	8005c5c <TIM_Base_SetConfig+0x30>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c4a:	d007      	beq.n	8005c5c <TIM_Base_SetConfig+0x30>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a2c      	ldr	r2, [pc, #176]	@ (8005d00 <TIM_Base_SetConfig+0xd4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_Base_SetConfig+0x30>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a2b      	ldr	r2, [pc, #172]	@ (8005d04 <TIM_Base_SetConfig+0xd8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d108      	bne.n	8005c6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a22      	ldr	r2, [pc, #136]	@ (8005cfc <TIM_Base_SetConfig+0xd0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00b      	beq.n	8005c8e <TIM_Base_SetConfig+0x62>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c7c:	d007      	beq.n	8005c8e <TIM_Base_SetConfig+0x62>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a1f      	ldr	r2, [pc, #124]	@ (8005d00 <TIM_Base_SetConfig+0xd4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d003      	beq.n	8005c8e <TIM_Base_SetConfig+0x62>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <TIM_Base_SetConfig+0xd8>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d108      	bne.n	8005ca0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	689a      	ldr	r2, [r3, #8]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681a      	ldr	r2, [r3, #0]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8005cfc <TIM_Base_SetConfig+0xd0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d103      	bne.n	8005cd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691a      	ldr	r2, [r3, #16]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	691b      	ldr	r3, [r3, #16]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	f023 0201 	bic.w	r2, r3, #1
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	611a      	str	r2, [r3, #16]
  }
}
 8005cf2:	bf00      	nop
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bc80      	pop	{r7}
 8005cfa:	4770      	bx	lr
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40000400 	.word	0x40000400
 8005d04:	40000800 	.word	0x40000800

08005d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b087      	sub	sp, #28
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
 8005d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a1b      	ldr	r3, [r3, #32]
 8005d1c:	f023 0201 	bic.w	r2, r3, #1
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f023 0303 	bic.w	r3, r3, #3
 8005d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	f023 0302 	bic.w	r3, r3, #2
 8005d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005dd0 <TIM_OC1_SetConfig+0xc8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d10c      	bne.n	8005d7e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	f023 0308 	bic.w	r3, r3, #8
 8005d6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	697a      	ldr	r2, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	f023 0304 	bic.w	r3, r3, #4
 8005d7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a13      	ldr	r2, [pc, #76]	@ (8005dd0 <TIM_OC1_SetConfig+0xc8>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d111      	bne.n	8005daa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	695b      	ldr	r3, [r3, #20]
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685a      	ldr	r2, [r3, #4]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	621a      	str	r2, [r3, #32]
}
 8005dc4:	bf00      	nop
 8005dc6:	371c      	adds	r7, #28
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bc80      	pop	{r7}
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40012c00 	.word	0x40012c00

08005dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b087      	sub	sp, #28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f023 0210 	bic.w	r2, r3, #16
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	021b      	lsls	r3, r3, #8
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4313      	orrs	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f023 0320 	bic.w	r3, r3, #32
 8005e1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <TIM_OC2_SetConfig+0xd0>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d10d      	bne.n	8005e50 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	697a      	ldr	r2, [r7, #20]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a14      	ldr	r2, [pc, #80]	@ (8005ea4 <TIM_OC2_SetConfig+0xd0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d113      	bne.n	8005e80 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	695b      	ldr	r3, [r3, #20]
 8005e6c:	009b      	lsls	r3, r3, #2
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	621a      	str	r2, [r3, #32]
}
 8005e9a:	bf00      	nop
 8005e9c:	371c      	adds	r7, #28
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bc80      	pop	{r7}
 8005ea2:	4770      	bx	lr
 8005ea4:	40012c00 	.word	0x40012c00

08005ea8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b087      	sub	sp, #28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a1b      	ldr	r3, [r3, #32]
 8005ebc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	69db      	ldr	r3, [r3, #28]
 8005ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	021b      	lsls	r3, r3, #8
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1d      	ldr	r2, [pc, #116]	@ (8005f78 <TIM_OC3_SetConfig+0xd0>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10d      	bne.n	8005f22 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	021b      	lsls	r3, r3, #8
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a14      	ldr	r2, [pc, #80]	@ (8005f78 <TIM_OC3_SetConfig+0xd0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d113      	bne.n	8005f52 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	011b      	lsls	r3, r3, #4
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	693a      	ldr	r2, [r7, #16]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	621a      	str	r2, [r3, #32]
}
 8005f6c:	bf00      	nop
 8005f6e:	371c      	adds	r7, #28
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bc80      	pop	{r7}
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40012c00 	.word	0x40012c00

08005f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a1b      	ldr	r3, [r3, #32]
 8005f90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005faa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	021b      	lsls	r3, r3, #8
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	689b      	ldr	r3, [r3, #8]
 8005fcc:	031b      	lsls	r3, r3, #12
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8006014 <TIM_OC4_SetConfig+0x98>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d109      	bne.n	8005ff0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005fe2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	695b      	ldr	r3, [r3, #20]
 8005fe8:	019b      	lsls	r3, r3, #6
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	621a      	str	r2, [r3, #32]
}
 800600a:	bf00      	nop
 800600c:	371c      	adds	r7, #28
 800600e:	46bd      	mov	sp, r7
 8006010:	bc80      	pop	{r7}
 8006012:	4770      	bx	lr
 8006014:	40012c00 	.word	0x40012c00

08006018 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006018:	b480      	push	{r7}
 800601a:	b087      	sub	sp, #28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a1b      	ldr	r3, [r3, #32]
 8006030:	f023 0201 	bic.w	r2, r3, #1
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	4a1f      	ldr	r2, [pc, #124]	@ (80060c0 <TIM_TI1_SetConfig+0xa8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00b      	beq.n	800605e <TIM_TI1_SetConfig+0x46>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800604c:	d007      	beq.n	800605e <TIM_TI1_SetConfig+0x46>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	4a1c      	ldr	r2, [pc, #112]	@ (80060c4 <TIM_TI1_SetConfig+0xac>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d003      	beq.n	800605e <TIM_TI1_SetConfig+0x46>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4a1b      	ldr	r2, [pc, #108]	@ (80060c8 <TIM_TI1_SetConfig+0xb0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d101      	bne.n	8006062 <TIM_TI1_SetConfig+0x4a>
 800605e:	2301      	movs	r3, #1
 8006060:	e000      	b.n	8006064 <TIM_TI1_SetConfig+0x4c>
 8006062:	2300      	movs	r3, #0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f023 0303 	bic.w	r3, r3, #3
 800606e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4313      	orrs	r3, r2
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	e003      	b.n	8006082 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	f043 0301 	orr.w	r3, r3, #1
 8006080:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006088:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	b2db      	uxtb	r3, r3
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f023 030a 	bic.w	r3, r3, #10
 800609c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f003 030a 	and.w	r3, r3, #10
 80060a4:	693a      	ldr	r2, [r7, #16]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bc80      	pop	{r7}
 80060be:	4770      	bx	lr
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800

080060cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	f023 0201 	bic.w	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f023 030a 	bic.w	r3, r3, #10
 8006108:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	4313      	orrs	r3, r2
 8006110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	621a      	str	r2, [r3, #32]
}
 800611e:	bf00      	nop
 8006120:	371c      	adds	r7, #28
 8006122:	46bd      	mov	sp, r7
 8006124:	bc80      	pop	{r7}
 8006126:	4770      	bx	lr

08006128 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	f023 0210 	bic.w	r2, r3, #16
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	699b      	ldr	r3, [r3, #24]
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	021b      	lsls	r3, r3, #8
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	4313      	orrs	r3, r2
 800615e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006166:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	031b      	lsls	r3, r3, #12
 800616c:	b29b      	uxth	r3, r3
 800616e:	693a      	ldr	r2, [r7, #16]
 8006170:	4313      	orrs	r3, r2
 8006172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800617a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	4313      	orrs	r3, r2
 8006188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	621a      	str	r2, [r3, #32]
}
 8006196:	bf00      	nop
 8006198:	371c      	adds	r7, #28
 800619a:	46bd      	mov	sp, r7
 800619c:	bc80      	pop	{r7}
 800619e:	4770      	bx	lr

080061a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b087      	sub	sp, #28
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	60f8      	str	r0, [r7, #12]
 80061a8:	60b9      	str	r1, [r7, #8]
 80061aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	f023 0210 	bic.w	r2, r3, #16
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	699b      	ldr	r3, [r3, #24]
 80061c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80061ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	031b      	lsls	r3, r3, #12
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80061dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	693a      	ldr	r2, [r7, #16]
 80061ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	621a      	str	r2, [r3, #32]
}
 80061f4:	bf00      	nop
 80061f6:	371c      	adds	r7, #28
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bc80      	pop	{r7}
 80061fc:	4770      	bx	lr

080061fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80061fe:	b480      	push	{r7}
 8006200:	b087      	sub	sp, #28
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a1b      	ldr	r3, [r3, #32]
 8006210:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f023 0303 	bic.w	r3, r3, #3
 800622a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800623a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	b2db      	uxtb	r3, r3
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	4313      	orrs	r3, r2
 8006246:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800624e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr

08006274 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	607a      	str	r2, [r7, #4]
 8006280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	69db      	ldr	r3, [r3, #28]
 8006298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80062a0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	021b      	lsls	r3, r3, #8
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062b2:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	031b      	lsls	r3, r3, #12
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062c6:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	031b      	lsls	r3, r3, #12
 80062cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	bf00      	nop
 80062e4:	371c      	adds	r7, #28
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bc80      	pop	{r7}
 80062ea:	4770      	bx	lr

080062ec <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006304:	683a      	ldr	r2, [r7, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4313      	orrs	r3, r2
 800630a:	f043 0307 	orr.w	r3, r3, #7
 800630e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	609a      	str	r2, [r3, #8]
}
 8006316:	bf00      	nop
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	bc80      	pop	{r7}
 800631e:	4770      	bx	lr

08006320 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006320:	b480      	push	{r7}
 8006322:	b087      	sub	sp, #28
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
 800632c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800633a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	021a      	lsls	r2, r3, #8
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	431a      	orrs	r2, r3
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	4313      	orrs	r3, r2
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	4313      	orrs	r3, r2
 800634c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	609a      	str	r2, [r3, #8]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800635e:	b480      	push	{r7}
 8006360:	b087      	sub	sp, #28
 8006362:	af00      	add	r7, sp, #0
 8006364:	60f8      	str	r0, [r7, #12]
 8006366:	60b9      	str	r1, [r7, #8]
 8006368:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	f003 031f 	and.w	r3, r3, #31
 8006370:	2201      	movs	r2, #1
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	43db      	mvns	r3, r3
 8006380:	401a      	ands	r2, r3
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1a      	ldr	r2, [r3, #32]
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	f003 031f 	and.w	r3, r3, #31
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	fa01 f303 	lsl.w	r3, r1, r3
 8006396:	431a      	orrs	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	621a      	str	r2, [r3, #32]
}
 800639c:	bf00      	nop
 800639e:	371c      	adds	r7, #28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bc80      	pop	{r7}
 80063a4:	4770      	bx	lr
	...

080063a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d101      	bne.n	80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063bc:	2302      	movs	r3, #2
 80063be:	e046      	b.n	800644e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2202      	movs	r2, #2
 80063cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a16      	ldr	r2, [pc, #88]	@ (8006458 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800640c:	d009      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a12      	ldr	r2, [pc, #72]	@ (800645c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a10      	ldr	r2, [pc, #64]	@ (8006460 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d10c      	bne.n	800643c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006428:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	4313      	orrs	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3714      	adds	r7, #20
 8006452:	46bd      	mov	sp, r7
 8006454:	bc80      	pop	{r7}
 8006456:	4770      	bx	lr
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40000400 	.word	0x40000400
 8006460:	40000800 	.word	0x40000800

08006464 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800646e:	2300      	movs	r3, #0
 8006470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006478:	2b01      	cmp	r3, #1
 800647a:	d101      	bne.n	8006480 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800647c:	2302      	movs	r3, #2
 800647e:	e03d      	b.n	80064fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	691b      	ldr	r3, [r3, #16]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	69db      	ldr	r3, [r3, #28]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3714      	adds	r7, #20
 8006500:	46bd      	mov	sp, r7
 8006502:	bc80      	pop	{r7}
 8006504:	4770      	bx	lr

08006506 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	bc80      	pop	{r7}
 8006528:	4770      	bx	lr

0800652a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d101      	bne.n	800653c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e042      	b.n	80065c2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006542:	b2db      	uxtb	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d106      	bne.n	8006556 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fc ffa7 	bl	80034a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2224      	movs	r2, #36	@ 0x24
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800656c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 fd00 	bl	8006f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006582:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695a      	ldr	r2, [r3, #20]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006592:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68da      	ldr	r2, [r3, #12]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065a2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2220      	movs	r2, #32
 80065ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2220      	movs	r2, #32
 80065b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80065ca:	b480      	push	{r7}
 80065cc:	b085      	sub	sp, #20
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60f8      	str	r0, [r7, #12]
 80065d2:	60b9      	str	r1, [r7, #8]
 80065d4:	4613      	mov	r3, r2
 80065d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	2b20      	cmp	r3, #32
 80065e2:	d121      	bne.n	8006628 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d002      	beq.n	80065f0 <HAL_UART_Transmit_IT+0x26>
 80065ea:	88fb      	ldrh	r3, [r7, #6]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e01a      	b.n	800662a <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	88fa      	ldrh	r2, [r7, #6]
 80065fe:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	88fa      	ldrh	r2, [r7, #6]
 8006604:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2221      	movs	r2, #33	@ 0x21
 8006610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68da      	ldr	r2, [r3, #12]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006622:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006624:	2300      	movs	r3, #0
 8006626:	e000      	b.n	800662a <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8006628:	2302      	movs	r3, #2
  }
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	4613      	mov	r3, r2
 8006640:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b20      	cmp	r3, #32
 800664c:	d112      	bne.n	8006674 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_UART_Receive_IT+0x26>
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e00b      	b.n	8006676 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2200      	movs	r2, #0
 8006662:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006664:	88fb      	ldrh	r3, [r7, #6]
 8006666:	461a      	mov	r2, r3
 8006668:	68b9      	ldr	r1, [r7, #8]
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f000 faae 	bl	8006bcc <UART_Start_Receive_IT>
 8006670:	4603      	mov	r3, r0
 8006672:	e000      	b.n	8006676 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006674:	2302      	movs	r3, #2
  }
}
 8006676:	4618      	mov	r0, r3
 8006678:	3710      	adds	r7, #16
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b0ba      	sub	sp, #232	@ 0xe8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066b6:	f003 030f 	and.w	r3, r3, #15
 80066ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80066be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10f      	bne.n	80066e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d009      	beq.n	80066e6 <HAL_UART_IRQHandler+0x66>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fb8a 	bl	8006df8 <UART_Receive_IT>
      return;
 80066e4:	e25b      	b.n	8006b9e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f000 80de 	beq.w	80068ac <HAL_UART_IRQHandler+0x22c>
 80066f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f4:	f003 0301 	and.w	r3, r3, #1
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006700:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 80d1 	beq.w	80068ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	f003 0301 	and.w	r3, r3, #1
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_UART_IRQHandler+0xae>
 8006716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800671a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	f043 0201 	orr.w	r2, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006732:	f003 0304 	and.w	r3, r3, #4
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_UART_IRQHandler+0xd2>
 800673a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d005      	beq.n	8006752 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674a:	f043 0202 	orr.w	r2, r3, #2
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00b      	beq.n	8006776 <HAL_UART_IRQHandler+0xf6>
 800675e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800676e:	f043 0204 	orr.w	r2, r3, #4
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d011      	beq.n	80067a6 <HAL_UART_IRQHandler+0x126>
 8006782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800678e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679e:	f043 0208 	orr.w	r2, r3, #8
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 81f2 	beq.w	8006b94 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80067b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_UART_IRQHandler+0x14e>
 80067bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 fb15 	bl	8006df8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	695b      	ldr	r3, [r3, #20]
 80067d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067d8:	2b00      	cmp	r3, #0
 80067da:	bf14      	ite	ne
 80067dc:	2301      	movne	r3, #1
 80067de:	2300      	moveq	r3, #0
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d103      	bne.n	80067fa <HAL_UART_IRQHandler+0x17a>
 80067f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d04f      	beq.n	800689a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 fa1f 	bl	8006c3e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d041      	beq.n	8006892 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	3314      	adds	r3, #20
 8006814:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006818:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006824:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006828:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800682c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3314      	adds	r3, #20
 8006836:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800683a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800683e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006846:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006852:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1d9      	bne.n	800680e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800685e:	2b00      	cmp	r3, #0
 8006860:	d013      	beq.n	800688a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006866:	4a7e      	ldr	r2, [pc, #504]	@ (8006a60 <HAL_UART_IRQHandler+0x3e0>)
 8006868:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800686e:	4618      	mov	r0, r3
 8006870:	f7fd f992 	bl	8003b98 <HAL_DMA_Abort_IT>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800687e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006884:	4610      	mov	r0, r2
 8006886:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006888:	e00e      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f98a 	bl	8006ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006890:	e00a      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f986 	bl	8006ba4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	e006      	b.n	80068a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f982 	bl	8006ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80068a6:	e175      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a8:	bf00      	nop
    return;
 80068aa:	e173      	b.n	8006b94 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	f040 814f 	bne.w	8006b54 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068ba:	f003 0310 	and.w	r3, r3, #16
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 8148 	beq.w	8006b54 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80068c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8141 	beq.w	8006b54 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068d2:	2300      	movs	r3, #0
 80068d4:	60bb      	str	r3, [r7, #8]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	60bb      	str	r3, [r7, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 80b6 	beq.w	8006a64 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006904:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006908:	2b00      	cmp	r3, #0
 800690a:	f000 8145 	beq.w	8006b98 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006912:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006916:	429a      	cmp	r2, r3
 8006918:	f080 813e 	bcs.w	8006b98 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006922:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006928:	699b      	ldr	r3, [r3, #24]
 800692a:	2b20      	cmp	r3, #32
 800692c:	f000 8088 	beq.w	8006a40 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800693e:	e853 3f00 	ldrex	r3, [r3]
 8006942:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006946:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800694a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800694e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	330c      	adds	r3, #12
 8006958:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800695c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006960:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006968:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006974:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1d9      	bne.n	8006930 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3314      	adds	r3, #20
 8006982:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800698c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800698e:	f023 0301 	bic.w	r3, r3, #1
 8006992:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	3314      	adds	r3, #20
 800699c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069a0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069a8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e1      	bne.n	800697c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3314      	adds	r3, #20
 80069be:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3314      	adds	r3, #20
 80069d8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069dc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80069de:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80069e2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e3      	bne.n	80069b8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2220      	movs	r2, #32
 80069f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	330c      	adds	r3, #12
 8006a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a10:	f023 0310 	bic.w	r3, r3, #16
 8006a14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006a22:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006a24:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a28:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e3      	bne.n	80069fe <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fd f870 	bl	8003b20 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f8ad 	bl	8006bb6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a5c:	e09c      	b.n	8006b98 <HAL_UART_IRQHandler+0x518>
 8006a5e:	bf00      	nop
 8006a60:	08006d03 	.word	0x08006d03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f000 808e 	beq.w	8006b9c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a80:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f000 8089 	beq.w	8006b9c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	330c      	adds	r3, #12
 8006a90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a94:	e853 3f00 	ldrex	r3, [r3]
 8006a98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006aa0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006aae:	647a      	str	r2, [r7, #68]	@ 0x44
 8006ab0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ab4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e3      	bne.n	8006a8a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	3314      	adds	r3, #20
 8006ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	f023 0301 	bic.w	r3, r3, #1
 8006ad8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3314      	adds	r3, #20
 8006ae2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ae6:	633a      	str	r2, [r7, #48]	@ 0x30
 8006ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aee:	e841 2300 	strex	r3, r2, [r1]
 8006af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1e3      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0310 	bic.w	r3, r3, #16
 8006b1e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	330c      	adds	r3, #12
 8006b28:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006b2c:	61fa      	str	r2, [r7, #28]
 8006b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	69b9      	ldr	r1, [r7, #24]
 8006b32:	69fa      	ldr	r2, [r7, #28]
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	617b      	str	r3, [r7, #20]
   return(result);
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e3      	bne.n	8006b08 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b46:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 f832 	bl	8006bb6 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b52:	e023      	b.n	8006b9c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d009      	beq.n	8006b74 <HAL_UART_IRQHandler+0x4f4>
 8006b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d003      	beq.n	8006b74 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8dc 	bl	8006d2a <UART_Transmit_IT>
    return;
 8006b72:	e014      	b.n	8006b9e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00e      	beq.n	8006b9e <HAL_UART_IRQHandler+0x51e>
 8006b80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 f91b 	bl	8006dc8 <UART_EndTransmit_IT>
    return;
 8006b92:	e004      	b.n	8006b9e <HAL_UART_IRQHandler+0x51e>
    return;
 8006b94:	bf00      	nop
 8006b96:	e002      	b.n	8006b9e <HAL_UART_IRQHandler+0x51e>
      return;
 8006b98:	bf00      	nop
 8006b9a:	e000      	b.n	8006b9e <HAL_UART_IRQHandler+0x51e>
      return;
 8006b9c:	bf00      	nop
  }
}
 8006b9e:	37e8      	adds	r7, #232	@ 0xe8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	bc80      	pop	{r7}
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	460b      	mov	r3, r1
 8006bc0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	4613      	mov	r3, r2
 8006bd8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	88fa      	ldrh	r2, [r7, #6]
 8006be4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	88fa      	ldrh	r2, [r7, #6]
 8006bea:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2222      	movs	r2, #34	@ 0x22
 8006bf6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d007      	beq.n	8006c12 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68da      	ldr	r2, [r3, #12]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	695a      	ldr	r2, [r3, #20]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68da      	ldr	r2, [r3, #12]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f042 0220 	orr.w	r2, r2, #32
 8006c30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bc80      	pop	{r7}
 8006c3c:	4770      	bx	lr

08006c3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b095      	sub	sp, #84	@ 0x54
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c50:	e853 3f00 	ldrex	r3, [r3]
 8006c54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	330c      	adds	r3, #12
 8006c64:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006c66:	643a      	str	r2, [r7, #64]	@ 0x40
 8006c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c6e:	e841 2300 	strex	r3, r2, [r1]
 8006c72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1e5      	bne.n	8006c46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	3314      	adds	r3, #20
 8006c80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c82:	6a3b      	ldr	r3, [r7, #32]
 8006c84:	e853 3f00 	ldrex	r3, [r3]
 8006c88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c8a:	69fb      	ldr	r3, [r7, #28]
 8006c8c:	f023 0301 	bic.w	r3, r3, #1
 8006c90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3314      	adds	r3, #20
 8006c98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ca0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca2:	e841 2300 	strex	r3, r2, [r1]
 8006ca6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d1e5      	bne.n	8006c7a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d119      	bne.n	8006cea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	330c      	adds	r3, #12
 8006cbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	e853 3f00 	ldrex	r3, [r3]
 8006cc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	f023 0310 	bic.w	r3, r3, #16
 8006ccc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	330c      	adds	r3, #12
 8006cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cd6:	61ba      	str	r2, [r7, #24]
 8006cd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6979      	ldr	r1, [r7, #20]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e5      	bne.n	8006cb6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006cf8:	bf00      	nop
 8006cfa:	3754      	adds	r7, #84	@ 0x54
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bc80      	pop	{r7}
 8006d00:	4770      	bx	lr

08006d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b084      	sub	sp, #16
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f7ff ff41 	bl	8006ba4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d2a:	b480      	push	{r7}
 8006d2c:	b085      	sub	sp, #20
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b21      	cmp	r3, #33	@ 0x21
 8006d3c:	d13e      	bne.n	8006dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d46:	d114      	bne.n	8006d72 <UART_Transmit_IT+0x48>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d110      	bne.n	8006d72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6a1b      	ldr	r3, [r3, #32]
 8006d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	881b      	ldrh	r3, [r3, #0]
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	1c9a      	adds	r2, r3, #2
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	621a      	str	r2, [r3, #32]
 8006d70:	e008      	b.n	8006d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a1b      	ldr	r3, [r3, #32]
 8006d76:	1c59      	adds	r1, r3, #1
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	6211      	str	r1, [r2, #32]
 8006d7c:	781a      	ldrb	r2, [r3, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	3b01      	subs	r3, #1
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	4619      	mov	r1, r3
 8006d92:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10f      	bne.n	8006db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	68da      	ldr	r2, [r3, #12]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68da      	ldr	r2, [r3, #12]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	e000      	b.n	8006dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006dbc:	2302      	movs	r3, #2
  }
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3714      	adds	r7, #20
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bc80      	pop	{r7}
 8006dc6:	4770      	bx	lr

08006dc8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dde:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7fa fb45 	bl	8001478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3708      	adds	r7, #8
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08c      	sub	sp, #48	@ 0x30
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	2b22      	cmp	r3, #34	@ 0x22
 8006e0a:	f040 80ae 	bne.w	8006f6a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e16:	d117      	bne.n	8006e48 <UART_Receive_IT+0x50>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d113      	bne.n	8006e48 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e20:	2300      	movs	r3, #0
 8006e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e28:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e36:	b29a      	uxth	r2, r3
 8006e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	629a      	str	r2, [r3, #40]	@ 0x28
 8006e46:	e026      	b.n	8006e96 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e5a:	d007      	beq.n	8006e6c <UART_Receive_IT+0x74>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d10a      	bne.n	8006e7a <UART_Receive_IT+0x82>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d106      	bne.n	8006e7a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	b2da      	uxtb	r2, r3
 8006e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e008      	b.n	8006e8c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	b2db      	uxtb	r3, r3
 8006e82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e8a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	1c5a      	adds	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d15d      	bne.n	8006f66 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68da      	ldr	r2, [r3, #12]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f022 0220 	bic.w	r2, r2, #32
 8006eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68da      	ldr	r2, [r3, #12]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ec8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0201 	bic.w	r2, r2, #1
 8006ed8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d135      	bne.n	8006f5c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	613b      	str	r3, [r7, #16]
   return(result);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f023 0310 	bic.w	r3, r3, #16
 8006f0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f16:	623a      	str	r2, [r7, #32]
 8006f18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	69f9      	ldr	r1, [r7, #28]
 8006f1c:	6a3a      	ldr	r2, [r7, #32]
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e5      	bne.n	8006ef6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0310 	and.w	r3, r3, #16
 8006f34:	2b10      	cmp	r3, #16
 8006f36:	d10a      	bne.n	8006f4e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60fb      	str	r3, [r7, #12]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f7ff fe2e 	bl	8006bb6 <HAL_UARTEx_RxEventCallback>
 8006f5a:	e002      	b.n	8006f62 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fa faa1 	bl	80014a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006f62:	2300      	movs	r3, #0
 8006f64:	e002      	b.n	8006f6c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e000      	b.n	8006f6c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006f6a:	2302      	movs	r3, #2
  }
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3730      	adds	r7, #48	@ 0x30
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	430a      	orrs	r2, r1
 8006f90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006fae:	f023 030c 	bic.w	r3, r3, #12
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	6812      	ldr	r2, [r2, #0]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	430b      	orrs	r3, r1
 8006fba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	699a      	ldr	r2, [r3, #24]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8007088 <UART_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d103      	bne.n	8006fe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fd fcd4 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	e002      	b.n	8006fea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006fe4:	f7fd fcbc 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 8006fe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	4613      	mov	r3, r2
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	4413      	add	r3, r2
 8006ff2:	009a      	lsls	r2, r3, #2
 8006ff4:	441a      	add	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007000:	4a22      	ldr	r2, [pc, #136]	@ (800708c <UART_SetConfig+0x118>)
 8007002:	fba2 2303 	umull	r2, r3, r2, r3
 8007006:	095b      	lsrs	r3, r3, #5
 8007008:	0119      	lsls	r1, r3, #4
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	4613      	mov	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	009a      	lsls	r2, r3, #2
 8007014:	441a      	add	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007020:	4b1a      	ldr	r3, [pc, #104]	@ (800708c <UART_SetConfig+0x118>)
 8007022:	fba3 0302 	umull	r0, r3, r3, r2
 8007026:	095b      	lsrs	r3, r3, #5
 8007028:	2064      	movs	r0, #100	@ 0x64
 800702a:	fb00 f303 	mul.w	r3, r0, r3
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	011b      	lsls	r3, r3, #4
 8007032:	3332      	adds	r3, #50	@ 0x32
 8007034:	4a15      	ldr	r2, [pc, #84]	@ (800708c <UART_SetConfig+0x118>)
 8007036:	fba2 2303 	umull	r2, r3, r2, r3
 800703a:	095b      	lsrs	r3, r3, #5
 800703c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007040:	4419      	add	r1, r3
 8007042:	68fa      	ldr	r2, [r7, #12]
 8007044:	4613      	mov	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4413      	add	r3, r2
 800704a:	009a      	lsls	r2, r3, #2
 800704c:	441a      	add	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	fbb2 f2f3 	udiv	r2, r2, r3
 8007058:	4b0c      	ldr	r3, [pc, #48]	@ (800708c <UART_SetConfig+0x118>)
 800705a:	fba3 0302 	umull	r0, r3, r3, r2
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2064      	movs	r0, #100	@ 0x64
 8007062:	fb00 f303 	mul.w	r3, r0, r3
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	011b      	lsls	r3, r3, #4
 800706a:	3332      	adds	r3, #50	@ 0x32
 800706c:	4a07      	ldr	r2, [pc, #28]	@ (800708c <UART_SetConfig+0x118>)
 800706e:	fba2 2303 	umull	r2, r3, r2, r3
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	f003 020f 	and.w	r2, r3, #15
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	440a      	add	r2, r1
 800707e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007080:	bf00      	nop
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40013800 	.word	0x40013800
 800708c:	51eb851f 	.word	0x51eb851f

08007090 <atoi>:
 8007090:	220a      	movs	r2, #10
 8007092:	2100      	movs	r1, #0
 8007094:	f000 b87c 	b.w	8007190 <strtol>

08007098 <_strtol_l.constprop.0>:
 8007098:	2b24      	cmp	r3, #36	@ 0x24
 800709a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800709e:	4686      	mov	lr, r0
 80070a0:	4690      	mov	r8, r2
 80070a2:	d801      	bhi.n	80070a8 <_strtol_l.constprop.0+0x10>
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d106      	bne.n	80070b6 <_strtol_l.constprop.0+0x1e>
 80070a8:	f000 f8ea 	bl	8007280 <__errno>
 80070ac:	2316      	movs	r3, #22
 80070ae:	6003      	str	r3, [r0, #0]
 80070b0:	2000      	movs	r0, #0
 80070b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b6:	460d      	mov	r5, r1
 80070b8:	4833      	ldr	r0, [pc, #204]	@ (8007188 <_strtol_l.constprop.0+0xf0>)
 80070ba:	462a      	mov	r2, r5
 80070bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070c0:	5d06      	ldrb	r6, [r0, r4]
 80070c2:	f016 0608 	ands.w	r6, r6, #8
 80070c6:	d1f8      	bne.n	80070ba <_strtol_l.constprop.0+0x22>
 80070c8:	2c2d      	cmp	r4, #45	@ 0x2d
 80070ca:	d12d      	bne.n	8007128 <_strtol_l.constprop.0+0x90>
 80070cc:	2601      	movs	r6, #1
 80070ce:	782c      	ldrb	r4, [r5, #0]
 80070d0:	1c95      	adds	r5, r2, #2
 80070d2:	f033 0210 	bics.w	r2, r3, #16
 80070d6:	d109      	bne.n	80070ec <_strtol_l.constprop.0+0x54>
 80070d8:	2c30      	cmp	r4, #48	@ 0x30
 80070da:	d12a      	bne.n	8007132 <_strtol_l.constprop.0+0x9a>
 80070dc:	782a      	ldrb	r2, [r5, #0]
 80070de:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070e2:	2a58      	cmp	r2, #88	@ 0x58
 80070e4:	d125      	bne.n	8007132 <_strtol_l.constprop.0+0x9a>
 80070e6:	2310      	movs	r3, #16
 80070e8:	786c      	ldrb	r4, [r5, #1]
 80070ea:	3502      	adds	r5, #2
 80070ec:	2200      	movs	r2, #0
 80070ee:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80070f2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80070f6:	fbbc f9f3 	udiv	r9, ip, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	fb03 ca19 	mls	sl, r3, r9, ip
 8007100:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007104:	2f09      	cmp	r7, #9
 8007106:	d81b      	bhi.n	8007140 <_strtol_l.constprop.0+0xa8>
 8007108:	463c      	mov	r4, r7
 800710a:	42a3      	cmp	r3, r4
 800710c:	dd27      	ble.n	800715e <_strtol_l.constprop.0+0xc6>
 800710e:	1c57      	adds	r7, r2, #1
 8007110:	d007      	beq.n	8007122 <_strtol_l.constprop.0+0x8a>
 8007112:	4581      	cmp	r9, r0
 8007114:	d320      	bcc.n	8007158 <_strtol_l.constprop.0+0xc0>
 8007116:	d101      	bne.n	800711c <_strtol_l.constprop.0+0x84>
 8007118:	45a2      	cmp	sl, r4
 800711a:	db1d      	blt.n	8007158 <_strtol_l.constprop.0+0xc0>
 800711c:	2201      	movs	r2, #1
 800711e:	fb00 4003 	mla	r0, r0, r3, r4
 8007122:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007126:	e7eb      	b.n	8007100 <_strtol_l.constprop.0+0x68>
 8007128:	2c2b      	cmp	r4, #43	@ 0x2b
 800712a:	bf04      	itt	eq
 800712c:	782c      	ldrbeq	r4, [r5, #0]
 800712e:	1c95      	addeq	r5, r2, #2
 8007130:	e7cf      	b.n	80070d2 <_strtol_l.constprop.0+0x3a>
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1da      	bne.n	80070ec <_strtol_l.constprop.0+0x54>
 8007136:	2c30      	cmp	r4, #48	@ 0x30
 8007138:	bf0c      	ite	eq
 800713a:	2308      	moveq	r3, #8
 800713c:	230a      	movne	r3, #10
 800713e:	e7d5      	b.n	80070ec <_strtol_l.constprop.0+0x54>
 8007140:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007144:	2f19      	cmp	r7, #25
 8007146:	d801      	bhi.n	800714c <_strtol_l.constprop.0+0xb4>
 8007148:	3c37      	subs	r4, #55	@ 0x37
 800714a:	e7de      	b.n	800710a <_strtol_l.constprop.0+0x72>
 800714c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007150:	2f19      	cmp	r7, #25
 8007152:	d804      	bhi.n	800715e <_strtol_l.constprop.0+0xc6>
 8007154:	3c57      	subs	r4, #87	@ 0x57
 8007156:	e7d8      	b.n	800710a <_strtol_l.constprop.0+0x72>
 8007158:	f04f 32ff 	mov.w	r2, #4294967295
 800715c:	e7e1      	b.n	8007122 <_strtol_l.constprop.0+0x8a>
 800715e:	1c53      	adds	r3, r2, #1
 8007160:	d108      	bne.n	8007174 <_strtol_l.constprop.0+0xdc>
 8007162:	2322      	movs	r3, #34	@ 0x22
 8007164:	4660      	mov	r0, ip
 8007166:	f8ce 3000 	str.w	r3, [lr]
 800716a:	f1b8 0f00 	cmp.w	r8, #0
 800716e:	d0a0      	beq.n	80070b2 <_strtol_l.constprop.0+0x1a>
 8007170:	1e69      	subs	r1, r5, #1
 8007172:	e006      	b.n	8007182 <_strtol_l.constprop.0+0xea>
 8007174:	b106      	cbz	r6, 8007178 <_strtol_l.constprop.0+0xe0>
 8007176:	4240      	negs	r0, r0
 8007178:	f1b8 0f00 	cmp.w	r8, #0
 800717c:	d099      	beq.n	80070b2 <_strtol_l.constprop.0+0x1a>
 800717e:	2a00      	cmp	r2, #0
 8007180:	d1f6      	bne.n	8007170 <_strtol_l.constprop.0+0xd8>
 8007182:	f8c8 1000 	str.w	r1, [r8]
 8007186:	e794      	b.n	80070b2 <_strtol_l.constprop.0+0x1a>
 8007188:	080090cb 	.word	0x080090cb

0800718c <_strtol_r>:
 800718c:	f7ff bf84 	b.w	8007098 <_strtol_l.constprop.0>

08007190 <strtol>:
 8007190:	4613      	mov	r3, r2
 8007192:	460a      	mov	r2, r1
 8007194:	4601      	mov	r1, r0
 8007196:	4802      	ldr	r0, [pc, #8]	@ (80071a0 <strtol+0x10>)
 8007198:	6800      	ldr	r0, [r0, #0]
 800719a:	f7ff bf7d 	b.w	8007098 <_strtol_l.constprop.0>
 800719e:	bf00      	nop
 80071a0:	20000028 	.word	0x20000028

080071a4 <siscanf>:
 80071a4:	b40e      	push	{r1, r2, r3}
 80071a6:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80071aa:	b530      	push	{r4, r5, lr}
 80071ac:	b09c      	sub	sp, #112	@ 0x70
 80071ae:	ac1f      	add	r4, sp, #124	@ 0x7c
 80071b0:	f854 5b04 	ldr.w	r5, [r4], #4
 80071b4:	f8ad 2014 	strh.w	r2, [sp, #20]
 80071b8:	9002      	str	r0, [sp, #8]
 80071ba:	9006      	str	r0, [sp, #24]
 80071bc:	f7f8 ffd2 	bl	8000164 <strlen>
 80071c0:	4b0b      	ldr	r3, [pc, #44]	@ (80071f0 <siscanf+0x4c>)
 80071c2:	9003      	str	r0, [sp, #12]
 80071c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071c6:	2300      	movs	r3, #0
 80071c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071ca:	9314      	str	r3, [sp, #80]	@ 0x50
 80071cc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80071d0:	9007      	str	r0, [sp, #28]
 80071d2:	4808      	ldr	r0, [pc, #32]	@ (80071f4 <siscanf+0x50>)
 80071d4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071d8:	462a      	mov	r2, r5
 80071da:	4623      	mov	r3, r4
 80071dc:	a902      	add	r1, sp, #8
 80071de:	6800      	ldr	r0, [r0, #0]
 80071e0:	9401      	str	r4, [sp, #4]
 80071e2:	f000 fb1f 	bl	8007824 <__ssvfiscanf_r>
 80071e6:	b01c      	add	sp, #112	@ 0x70
 80071e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ec:	b003      	add	sp, #12
 80071ee:	4770      	bx	lr
 80071f0:	080071f9 	.word	0x080071f9
 80071f4:	20000028 	.word	0x20000028

080071f8 <__seofread>:
 80071f8:	2000      	movs	r0, #0
 80071fa:	4770      	bx	lr

080071fc <_vsniprintf_r>:
 80071fc:	b530      	push	{r4, r5, lr}
 80071fe:	4614      	mov	r4, r2
 8007200:	2c00      	cmp	r4, #0
 8007202:	4605      	mov	r5, r0
 8007204:	461a      	mov	r2, r3
 8007206:	b09b      	sub	sp, #108	@ 0x6c
 8007208:	da05      	bge.n	8007216 <_vsniprintf_r+0x1a>
 800720a:	238b      	movs	r3, #139	@ 0x8b
 800720c:	6003      	str	r3, [r0, #0]
 800720e:	f04f 30ff 	mov.w	r0, #4294967295
 8007212:	b01b      	add	sp, #108	@ 0x6c
 8007214:	bd30      	pop	{r4, r5, pc}
 8007216:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800721a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800721e:	bf0c      	ite	eq
 8007220:	4623      	moveq	r3, r4
 8007222:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007226:	9302      	str	r3, [sp, #8]
 8007228:	9305      	str	r3, [sp, #20]
 800722a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800722e:	9100      	str	r1, [sp, #0]
 8007230:	9104      	str	r1, [sp, #16]
 8007232:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007236:	4669      	mov	r1, sp
 8007238:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800723a:	f000 f99f 	bl	800757c <_svfiprintf_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	bfbc      	itt	lt
 8007242:	238b      	movlt	r3, #139	@ 0x8b
 8007244:	602b      	strlt	r3, [r5, #0]
 8007246:	2c00      	cmp	r4, #0
 8007248:	d0e3      	beq.n	8007212 <_vsniprintf_r+0x16>
 800724a:	2200      	movs	r2, #0
 800724c:	9b00      	ldr	r3, [sp, #0]
 800724e:	701a      	strb	r2, [r3, #0]
 8007250:	e7df      	b.n	8007212 <_vsniprintf_r+0x16>
	...

08007254 <vsniprintf>:
 8007254:	b507      	push	{r0, r1, r2, lr}
 8007256:	9300      	str	r3, [sp, #0]
 8007258:	4613      	mov	r3, r2
 800725a:	460a      	mov	r2, r1
 800725c:	4601      	mov	r1, r0
 800725e:	4803      	ldr	r0, [pc, #12]	@ (800726c <vsniprintf+0x18>)
 8007260:	6800      	ldr	r0, [r0, #0]
 8007262:	f7ff ffcb 	bl	80071fc <_vsniprintf_r>
 8007266:	b003      	add	sp, #12
 8007268:	f85d fb04 	ldr.w	pc, [sp], #4
 800726c:	20000028 	.word	0x20000028

08007270 <memset>:
 8007270:	4603      	mov	r3, r0
 8007272:	4402      	add	r2, r0
 8007274:	4293      	cmp	r3, r2
 8007276:	d100      	bne.n	800727a <memset+0xa>
 8007278:	4770      	bx	lr
 800727a:	f803 1b01 	strb.w	r1, [r3], #1
 800727e:	e7f9      	b.n	8007274 <memset+0x4>

08007280 <__errno>:
 8007280:	4b01      	ldr	r3, [pc, #4]	@ (8007288 <__errno+0x8>)
 8007282:	6818      	ldr	r0, [r3, #0]
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	20000028 	.word	0x20000028

0800728c <__libc_init_array>:
 800728c:	b570      	push	{r4, r5, r6, lr}
 800728e:	2600      	movs	r6, #0
 8007290:	4d0c      	ldr	r5, [pc, #48]	@ (80072c4 <__libc_init_array+0x38>)
 8007292:	4c0d      	ldr	r4, [pc, #52]	@ (80072c8 <__libc_init_array+0x3c>)
 8007294:	1b64      	subs	r4, r4, r5
 8007296:	10a4      	asrs	r4, r4, #2
 8007298:	42a6      	cmp	r6, r4
 800729a:	d109      	bne.n	80072b0 <__libc_init_array+0x24>
 800729c:	f001 fe38 	bl	8008f10 <_init>
 80072a0:	2600      	movs	r6, #0
 80072a2:	4d0a      	ldr	r5, [pc, #40]	@ (80072cc <__libc_init_array+0x40>)
 80072a4:	4c0a      	ldr	r4, [pc, #40]	@ (80072d0 <__libc_init_array+0x44>)
 80072a6:	1b64      	subs	r4, r4, r5
 80072a8:	10a4      	asrs	r4, r4, #2
 80072aa:	42a6      	cmp	r6, r4
 80072ac:	d105      	bne.n	80072ba <__libc_init_array+0x2e>
 80072ae:	bd70      	pop	{r4, r5, r6, pc}
 80072b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072b4:	4798      	blx	r3
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7ee      	b.n	8007298 <__libc_init_array+0xc>
 80072ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80072be:	4798      	blx	r3
 80072c0:	3601      	adds	r6, #1
 80072c2:	e7f2      	b.n	80072aa <__libc_init_array+0x1e>
 80072c4:	080095f4 	.word	0x080095f4
 80072c8:	080095f4 	.word	0x080095f4
 80072cc:	080095f4 	.word	0x080095f4
 80072d0:	080095f8 	.word	0x080095f8

080072d4 <__retarget_lock_acquire_recursive>:
 80072d4:	4770      	bx	lr

080072d6 <__retarget_lock_release_recursive>:
 80072d6:	4770      	bx	lr

080072d8 <_free_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	4605      	mov	r5, r0
 80072dc:	2900      	cmp	r1, #0
 80072de:	d040      	beq.n	8007362 <_free_r+0x8a>
 80072e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e4:	1f0c      	subs	r4, r1, #4
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfb8      	it	lt
 80072ea:	18e4      	addlt	r4, r4, r3
 80072ec:	f000 f8de 	bl	80074ac <__malloc_lock>
 80072f0:	4a1c      	ldr	r2, [pc, #112]	@ (8007364 <_free_r+0x8c>)
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	b933      	cbnz	r3, 8007304 <_free_r+0x2c>
 80072f6:	6063      	str	r3, [r4, #4]
 80072f8:	6014      	str	r4, [r2, #0]
 80072fa:	4628      	mov	r0, r5
 80072fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007300:	f000 b8da 	b.w	80074b8 <__malloc_unlock>
 8007304:	42a3      	cmp	r3, r4
 8007306:	d908      	bls.n	800731a <_free_r+0x42>
 8007308:	6820      	ldr	r0, [r4, #0]
 800730a:	1821      	adds	r1, r4, r0
 800730c:	428b      	cmp	r3, r1
 800730e:	bf01      	itttt	eq
 8007310:	6819      	ldreq	r1, [r3, #0]
 8007312:	685b      	ldreq	r3, [r3, #4]
 8007314:	1809      	addeq	r1, r1, r0
 8007316:	6021      	streq	r1, [r4, #0]
 8007318:	e7ed      	b.n	80072f6 <_free_r+0x1e>
 800731a:	461a      	mov	r2, r3
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	b10b      	cbz	r3, 8007324 <_free_r+0x4c>
 8007320:	42a3      	cmp	r3, r4
 8007322:	d9fa      	bls.n	800731a <_free_r+0x42>
 8007324:	6811      	ldr	r1, [r2, #0]
 8007326:	1850      	adds	r0, r2, r1
 8007328:	42a0      	cmp	r0, r4
 800732a:	d10b      	bne.n	8007344 <_free_r+0x6c>
 800732c:	6820      	ldr	r0, [r4, #0]
 800732e:	4401      	add	r1, r0
 8007330:	1850      	adds	r0, r2, r1
 8007332:	4283      	cmp	r3, r0
 8007334:	6011      	str	r1, [r2, #0]
 8007336:	d1e0      	bne.n	80072fa <_free_r+0x22>
 8007338:	6818      	ldr	r0, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	4408      	add	r0, r1
 800733e:	6010      	str	r0, [r2, #0]
 8007340:	6053      	str	r3, [r2, #4]
 8007342:	e7da      	b.n	80072fa <_free_r+0x22>
 8007344:	d902      	bls.n	800734c <_free_r+0x74>
 8007346:	230c      	movs	r3, #12
 8007348:	602b      	str	r3, [r5, #0]
 800734a:	e7d6      	b.n	80072fa <_free_r+0x22>
 800734c:	6820      	ldr	r0, [r4, #0]
 800734e:	1821      	adds	r1, r4, r0
 8007350:	428b      	cmp	r3, r1
 8007352:	bf01      	itttt	eq
 8007354:	6819      	ldreq	r1, [r3, #0]
 8007356:	685b      	ldreq	r3, [r3, #4]
 8007358:	1809      	addeq	r1, r1, r0
 800735a:	6021      	streq	r1, [r4, #0]
 800735c:	6063      	str	r3, [r4, #4]
 800735e:	6054      	str	r4, [r2, #4]
 8007360:	e7cb      	b.n	80072fa <_free_r+0x22>
 8007362:	bd38      	pop	{r3, r4, r5, pc}
 8007364:	20000cf8 	.word	0x20000cf8

08007368 <sbrk_aligned>:
 8007368:	b570      	push	{r4, r5, r6, lr}
 800736a:	4e0f      	ldr	r6, [pc, #60]	@ (80073a8 <sbrk_aligned+0x40>)
 800736c:	460c      	mov	r4, r1
 800736e:	6831      	ldr	r1, [r6, #0]
 8007370:	4605      	mov	r5, r0
 8007372:	b911      	cbnz	r1, 800737a <sbrk_aligned+0x12>
 8007374:	f000 ff32 	bl	80081dc <_sbrk_r>
 8007378:	6030      	str	r0, [r6, #0]
 800737a:	4621      	mov	r1, r4
 800737c:	4628      	mov	r0, r5
 800737e:	f000 ff2d 	bl	80081dc <_sbrk_r>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d103      	bne.n	800738e <sbrk_aligned+0x26>
 8007386:	f04f 34ff 	mov.w	r4, #4294967295
 800738a:	4620      	mov	r0, r4
 800738c:	bd70      	pop	{r4, r5, r6, pc}
 800738e:	1cc4      	adds	r4, r0, #3
 8007390:	f024 0403 	bic.w	r4, r4, #3
 8007394:	42a0      	cmp	r0, r4
 8007396:	d0f8      	beq.n	800738a <sbrk_aligned+0x22>
 8007398:	1a21      	subs	r1, r4, r0
 800739a:	4628      	mov	r0, r5
 800739c:	f000 ff1e 	bl	80081dc <_sbrk_r>
 80073a0:	3001      	adds	r0, #1
 80073a2:	d1f2      	bne.n	800738a <sbrk_aligned+0x22>
 80073a4:	e7ef      	b.n	8007386 <sbrk_aligned+0x1e>
 80073a6:	bf00      	nop
 80073a8:	20000cf4 	.word	0x20000cf4

080073ac <_malloc_r>:
 80073ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073b0:	1ccd      	adds	r5, r1, #3
 80073b2:	f025 0503 	bic.w	r5, r5, #3
 80073b6:	3508      	adds	r5, #8
 80073b8:	2d0c      	cmp	r5, #12
 80073ba:	bf38      	it	cc
 80073bc:	250c      	movcc	r5, #12
 80073be:	2d00      	cmp	r5, #0
 80073c0:	4606      	mov	r6, r0
 80073c2:	db01      	blt.n	80073c8 <_malloc_r+0x1c>
 80073c4:	42a9      	cmp	r1, r5
 80073c6:	d904      	bls.n	80073d2 <_malloc_r+0x26>
 80073c8:	230c      	movs	r3, #12
 80073ca:	6033      	str	r3, [r6, #0]
 80073cc:	2000      	movs	r0, #0
 80073ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80074a8 <_malloc_r+0xfc>
 80073d6:	f000 f869 	bl	80074ac <__malloc_lock>
 80073da:	f8d8 3000 	ldr.w	r3, [r8]
 80073de:	461c      	mov	r4, r3
 80073e0:	bb44      	cbnz	r4, 8007434 <_malloc_r+0x88>
 80073e2:	4629      	mov	r1, r5
 80073e4:	4630      	mov	r0, r6
 80073e6:	f7ff ffbf 	bl	8007368 <sbrk_aligned>
 80073ea:	1c43      	adds	r3, r0, #1
 80073ec:	4604      	mov	r4, r0
 80073ee:	d158      	bne.n	80074a2 <_malloc_r+0xf6>
 80073f0:	f8d8 4000 	ldr.w	r4, [r8]
 80073f4:	4627      	mov	r7, r4
 80073f6:	2f00      	cmp	r7, #0
 80073f8:	d143      	bne.n	8007482 <_malloc_r+0xd6>
 80073fa:	2c00      	cmp	r4, #0
 80073fc:	d04b      	beq.n	8007496 <_malloc_r+0xea>
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	4639      	mov	r1, r7
 8007402:	4630      	mov	r0, r6
 8007404:	eb04 0903 	add.w	r9, r4, r3
 8007408:	f000 fee8 	bl	80081dc <_sbrk_r>
 800740c:	4581      	cmp	r9, r0
 800740e:	d142      	bne.n	8007496 <_malloc_r+0xea>
 8007410:	6821      	ldr	r1, [r4, #0]
 8007412:	4630      	mov	r0, r6
 8007414:	1a6d      	subs	r5, r5, r1
 8007416:	4629      	mov	r1, r5
 8007418:	f7ff ffa6 	bl	8007368 <sbrk_aligned>
 800741c:	3001      	adds	r0, #1
 800741e:	d03a      	beq.n	8007496 <_malloc_r+0xea>
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	442b      	add	r3, r5
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	f8d8 3000 	ldr.w	r3, [r8]
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	bb62      	cbnz	r2, 8007488 <_malloc_r+0xdc>
 800742e:	f8c8 7000 	str.w	r7, [r8]
 8007432:	e00f      	b.n	8007454 <_malloc_r+0xa8>
 8007434:	6822      	ldr	r2, [r4, #0]
 8007436:	1b52      	subs	r2, r2, r5
 8007438:	d420      	bmi.n	800747c <_malloc_r+0xd0>
 800743a:	2a0b      	cmp	r2, #11
 800743c:	d917      	bls.n	800746e <_malloc_r+0xc2>
 800743e:	1961      	adds	r1, r4, r5
 8007440:	42a3      	cmp	r3, r4
 8007442:	6025      	str	r5, [r4, #0]
 8007444:	bf18      	it	ne
 8007446:	6059      	strne	r1, [r3, #4]
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	bf08      	it	eq
 800744c:	f8c8 1000 	streq.w	r1, [r8]
 8007450:	5162      	str	r2, [r4, r5]
 8007452:	604b      	str	r3, [r1, #4]
 8007454:	4630      	mov	r0, r6
 8007456:	f000 f82f 	bl	80074b8 <__malloc_unlock>
 800745a:	f104 000b 	add.w	r0, r4, #11
 800745e:	1d23      	adds	r3, r4, #4
 8007460:	f020 0007 	bic.w	r0, r0, #7
 8007464:	1ac2      	subs	r2, r0, r3
 8007466:	bf1c      	itt	ne
 8007468:	1a1b      	subne	r3, r3, r0
 800746a:	50a3      	strne	r3, [r4, r2]
 800746c:	e7af      	b.n	80073ce <_malloc_r+0x22>
 800746e:	6862      	ldr	r2, [r4, #4]
 8007470:	42a3      	cmp	r3, r4
 8007472:	bf0c      	ite	eq
 8007474:	f8c8 2000 	streq.w	r2, [r8]
 8007478:	605a      	strne	r2, [r3, #4]
 800747a:	e7eb      	b.n	8007454 <_malloc_r+0xa8>
 800747c:	4623      	mov	r3, r4
 800747e:	6864      	ldr	r4, [r4, #4]
 8007480:	e7ae      	b.n	80073e0 <_malloc_r+0x34>
 8007482:	463c      	mov	r4, r7
 8007484:	687f      	ldr	r7, [r7, #4]
 8007486:	e7b6      	b.n	80073f6 <_malloc_r+0x4a>
 8007488:	461a      	mov	r2, r3
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	42a3      	cmp	r3, r4
 800748e:	d1fb      	bne.n	8007488 <_malloc_r+0xdc>
 8007490:	2300      	movs	r3, #0
 8007492:	6053      	str	r3, [r2, #4]
 8007494:	e7de      	b.n	8007454 <_malloc_r+0xa8>
 8007496:	230c      	movs	r3, #12
 8007498:	4630      	mov	r0, r6
 800749a:	6033      	str	r3, [r6, #0]
 800749c:	f000 f80c 	bl	80074b8 <__malloc_unlock>
 80074a0:	e794      	b.n	80073cc <_malloc_r+0x20>
 80074a2:	6005      	str	r5, [r0, #0]
 80074a4:	e7d6      	b.n	8007454 <_malloc_r+0xa8>
 80074a6:	bf00      	nop
 80074a8:	20000cf8 	.word	0x20000cf8

080074ac <__malloc_lock>:
 80074ac:	4801      	ldr	r0, [pc, #4]	@ (80074b4 <__malloc_lock+0x8>)
 80074ae:	f7ff bf11 	b.w	80072d4 <__retarget_lock_acquire_recursive>
 80074b2:	bf00      	nop
 80074b4:	20000cf0 	.word	0x20000cf0

080074b8 <__malloc_unlock>:
 80074b8:	4801      	ldr	r0, [pc, #4]	@ (80074c0 <__malloc_unlock+0x8>)
 80074ba:	f7ff bf0c 	b.w	80072d6 <__retarget_lock_release_recursive>
 80074be:	bf00      	nop
 80074c0:	20000cf0 	.word	0x20000cf0

080074c4 <__ssputs_r>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	461f      	mov	r7, r3
 80074ca:	688e      	ldr	r6, [r1, #8]
 80074cc:	4682      	mov	sl, r0
 80074ce:	42be      	cmp	r6, r7
 80074d0:	460c      	mov	r4, r1
 80074d2:	4690      	mov	r8, r2
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	d82d      	bhi.n	8007534 <__ssputs_r+0x70>
 80074d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80074e0:	d026      	beq.n	8007530 <__ssputs_r+0x6c>
 80074e2:	6965      	ldr	r5, [r4, #20]
 80074e4:	6909      	ldr	r1, [r1, #16]
 80074e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074ea:	eba3 0901 	sub.w	r9, r3, r1
 80074ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80074f2:	1c7b      	adds	r3, r7, #1
 80074f4:	444b      	add	r3, r9
 80074f6:	106d      	asrs	r5, r5, #1
 80074f8:	429d      	cmp	r5, r3
 80074fa:	bf38      	it	cc
 80074fc:	461d      	movcc	r5, r3
 80074fe:	0553      	lsls	r3, r2, #21
 8007500:	d527      	bpl.n	8007552 <__ssputs_r+0x8e>
 8007502:	4629      	mov	r1, r5
 8007504:	f7ff ff52 	bl	80073ac <_malloc_r>
 8007508:	4606      	mov	r6, r0
 800750a:	b360      	cbz	r0, 8007566 <__ssputs_r+0xa2>
 800750c:	464a      	mov	r2, r9
 800750e:	6921      	ldr	r1, [r4, #16]
 8007510:	f000 fe82 	bl	8008218 <memcpy>
 8007514:	89a3      	ldrh	r3, [r4, #12]
 8007516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800751a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751e:	81a3      	strh	r3, [r4, #12]
 8007520:	6126      	str	r6, [r4, #16]
 8007522:	444e      	add	r6, r9
 8007524:	6026      	str	r6, [r4, #0]
 8007526:	463e      	mov	r6, r7
 8007528:	6165      	str	r5, [r4, #20]
 800752a:	eba5 0509 	sub.w	r5, r5, r9
 800752e:	60a5      	str	r5, [r4, #8]
 8007530:	42be      	cmp	r6, r7
 8007532:	d900      	bls.n	8007536 <__ssputs_r+0x72>
 8007534:	463e      	mov	r6, r7
 8007536:	4632      	mov	r2, r6
 8007538:	4641      	mov	r1, r8
 800753a:	6820      	ldr	r0, [r4, #0]
 800753c:	f000 fe33 	bl	80081a6 <memmove>
 8007540:	2000      	movs	r0, #0
 8007542:	68a3      	ldr	r3, [r4, #8]
 8007544:	1b9b      	subs	r3, r3, r6
 8007546:	60a3      	str	r3, [r4, #8]
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	4433      	add	r3, r6
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007552:	462a      	mov	r2, r5
 8007554:	f000 fe6e 	bl	8008234 <_realloc_r>
 8007558:	4606      	mov	r6, r0
 800755a:	2800      	cmp	r0, #0
 800755c:	d1e0      	bne.n	8007520 <__ssputs_r+0x5c>
 800755e:	4650      	mov	r0, sl
 8007560:	6921      	ldr	r1, [r4, #16]
 8007562:	f7ff feb9 	bl	80072d8 <_free_r>
 8007566:	230c      	movs	r3, #12
 8007568:	f8ca 3000 	str.w	r3, [sl]
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f04f 30ff 	mov.w	r0, #4294967295
 8007572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007576:	81a3      	strh	r3, [r4, #12]
 8007578:	e7e9      	b.n	800754e <__ssputs_r+0x8a>
	...

0800757c <_svfiprintf_r>:
 800757c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007580:	4698      	mov	r8, r3
 8007582:	898b      	ldrh	r3, [r1, #12]
 8007584:	4607      	mov	r7, r0
 8007586:	061b      	lsls	r3, r3, #24
 8007588:	460d      	mov	r5, r1
 800758a:	4614      	mov	r4, r2
 800758c:	b09d      	sub	sp, #116	@ 0x74
 800758e:	d510      	bpl.n	80075b2 <_svfiprintf_r+0x36>
 8007590:	690b      	ldr	r3, [r1, #16]
 8007592:	b973      	cbnz	r3, 80075b2 <_svfiprintf_r+0x36>
 8007594:	2140      	movs	r1, #64	@ 0x40
 8007596:	f7ff ff09 	bl	80073ac <_malloc_r>
 800759a:	6028      	str	r0, [r5, #0]
 800759c:	6128      	str	r0, [r5, #16]
 800759e:	b930      	cbnz	r0, 80075ae <_svfiprintf_r+0x32>
 80075a0:	230c      	movs	r3, #12
 80075a2:	603b      	str	r3, [r7, #0]
 80075a4:	f04f 30ff 	mov.w	r0, #4294967295
 80075a8:	b01d      	add	sp, #116	@ 0x74
 80075aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ae:	2340      	movs	r3, #64	@ 0x40
 80075b0:	616b      	str	r3, [r5, #20]
 80075b2:	2300      	movs	r3, #0
 80075b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80075b6:	2320      	movs	r3, #32
 80075b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075bc:	2330      	movs	r3, #48	@ 0x30
 80075be:	f04f 0901 	mov.w	r9, #1
 80075c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007760 <_svfiprintf_r+0x1e4>
 80075ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80075ce:	4623      	mov	r3, r4
 80075d0:	469a      	mov	sl, r3
 80075d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d6:	b10a      	cbz	r2, 80075dc <_svfiprintf_r+0x60>
 80075d8:	2a25      	cmp	r2, #37	@ 0x25
 80075da:	d1f9      	bne.n	80075d0 <_svfiprintf_r+0x54>
 80075dc:	ebba 0b04 	subs.w	fp, sl, r4
 80075e0:	d00b      	beq.n	80075fa <_svfiprintf_r+0x7e>
 80075e2:	465b      	mov	r3, fp
 80075e4:	4622      	mov	r2, r4
 80075e6:	4629      	mov	r1, r5
 80075e8:	4638      	mov	r0, r7
 80075ea:	f7ff ff6b 	bl	80074c4 <__ssputs_r>
 80075ee:	3001      	adds	r0, #1
 80075f0:	f000 80a7 	beq.w	8007742 <_svfiprintf_r+0x1c6>
 80075f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075f6:	445a      	add	r2, fp
 80075f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80075fa:	f89a 3000 	ldrb.w	r3, [sl]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f000 809f 	beq.w	8007742 <_svfiprintf_r+0x1c6>
 8007604:	2300      	movs	r3, #0
 8007606:	f04f 32ff 	mov.w	r2, #4294967295
 800760a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800760e:	f10a 0a01 	add.w	sl, sl, #1
 8007612:	9304      	str	r3, [sp, #16]
 8007614:	9307      	str	r3, [sp, #28]
 8007616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800761a:	931a      	str	r3, [sp, #104]	@ 0x68
 800761c:	4654      	mov	r4, sl
 800761e:	2205      	movs	r2, #5
 8007620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007624:	484e      	ldr	r0, [pc, #312]	@ (8007760 <_svfiprintf_r+0x1e4>)
 8007626:	f000 fde9 	bl	80081fc <memchr>
 800762a:	9a04      	ldr	r2, [sp, #16]
 800762c:	b9d8      	cbnz	r0, 8007666 <_svfiprintf_r+0xea>
 800762e:	06d0      	lsls	r0, r2, #27
 8007630:	bf44      	itt	mi
 8007632:	2320      	movmi	r3, #32
 8007634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007638:	0711      	lsls	r1, r2, #28
 800763a:	bf44      	itt	mi
 800763c:	232b      	movmi	r3, #43	@ 0x2b
 800763e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007642:	f89a 3000 	ldrb.w	r3, [sl]
 8007646:	2b2a      	cmp	r3, #42	@ 0x2a
 8007648:	d015      	beq.n	8007676 <_svfiprintf_r+0xfa>
 800764a:	4654      	mov	r4, sl
 800764c:	2000      	movs	r0, #0
 800764e:	f04f 0c0a 	mov.w	ip, #10
 8007652:	9a07      	ldr	r2, [sp, #28]
 8007654:	4621      	mov	r1, r4
 8007656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765a:	3b30      	subs	r3, #48	@ 0x30
 800765c:	2b09      	cmp	r3, #9
 800765e:	d94b      	bls.n	80076f8 <_svfiprintf_r+0x17c>
 8007660:	b1b0      	cbz	r0, 8007690 <_svfiprintf_r+0x114>
 8007662:	9207      	str	r2, [sp, #28]
 8007664:	e014      	b.n	8007690 <_svfiprintf_r+0x114>
 8007666:	eba0 0308 	sub.w	r3, r0, r8
 800766a:	fa09 f303 	lsl.w	r3, r9, r3
 800766e:	4313      	orrs	r3, r2
 8007670:	46a2      	mov	sl, r4
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	e7d2      	b.n	800761c <_svfiprintf_r+0xa0>
 8007676:	9b03      	ldr	r3, [sp, #12]
 8007678:	1d19      	adds	r1, r3, #4
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	9103      	str	r1, [sp, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	bfbb      	ittet	lt
 8007682:	425b      	neglt	r3, r3
 8007684:	f042 0202 	orrlt.w	r2, r2, #2
 8007688:	9307      	strge	r3, [sp, #28]
 800768a:	9307      	strlt	r3, [sp, #28]
 800768c:	bfb8      	it	lt
 800768e:	9204      	strlt	r2, [sp, #16]
 8007690:	7823      	ldrb	r3, [r4, #0]
 8007692:	2b2e      	cmp	r3, #46	@ 0x2e
 8007694:	d10a      	bne.n	80076ac <_svfiprintf_r+0x130>
 8007696:	7863      	ldrb	r3, [r4, #1]
 8007698:	2b2a      	cmp	r3, #42	@ 0x2a
 800769a:	d132      	bne.n	8007702 <_svfiprintf_r+0x186>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	3402      	adds	r4, #2
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	9203      	str	r2, [sp, #12]
 80076a6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076aa:	9305      	str	r3, [sp, #20]
 80076ac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007764 <_svfiprintf_r+0x1e8>
 80076b0:	2203      	movs	r2, #3
 80076b2:	4650      	mov	r0, sl
 80076b4:	7821      	ldrb	r1, [r4, #0]
 80076b6:	f000 fda1 	bl	80081fc <memchr>
 80076ba:	b138      	cbz	r0, 80076cc <_svfiprintf_r+0x150>
 80076bc:	2240      	movs	r2, #64	@ 0x40
 80076be:	9b04      	ldr	r3, [sp, #16]
 80076c0:	eba0 000a 	sub.w	r0, r0, sl
 80076c4:	4082      	lsls	r2, r0
 80076c6:	4313      	orrs	r3, r2
 80076c8:	3401      	adds	r4, #1
 80076ca:	9304      	str	r3, [sp, #16]
 80076cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d0:	2206      	movs	r2, #6
 80076d2:	4825      	ldr	r0, [pc, #148]	@ (8007768 <_svfiprintf_r+0x1ec>)
 80076d4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80076d8:	f000 fd90 	bl	80081fc <memchr>
 80076dc:	2800      	cmp	r0, #0
 80076de:	d036      	beq.n	800774e <_svfiprintf_r+0x1d2>
 80076e0:	4b22      	ldr	r3, [pc, #136]	@ (800776c <_svfiprintf_r+0x1f0>)
 80076e2:	bb1b      	cbnz	r3, 800772c <_svfiprintf_r+0x1b0>
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	3307      	adds	r3, #7
 80076e8:	f023 0307 	bic.w	r3, r3, #7
 80076ec:	3308      	adds	r3, #8
 80076ee:	9303      	str	r3, [sp, #12]
 80076f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076f2:	4433      	add	r3, r6
 80076f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076f6:	e76a      	b.n	80075ce <_svfiprintf_r+0x52>
 80076f8:	460c      	mov	r4, r1
 80076fa:	2001      	movs	r0, #1
 80076fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8007700:	e7a8      	b.n	8007654 <_svfiprintf_r+0xd8>
 8007702:	2300      	movs	r3, #0
 8007704:	f04f 0c0a 	mov.w	ip, #10
 8007708:	4619      	mov	r1, r3
 800770a:	3401      	adds	r4, #1
 800770c:	9305      	str	r3, [sp, #20]
 800770e:	4620      	mov	r0, r4
 8007710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007714:	3a30      	subs	r2, #48	@ 0x30
 8007716:	2a09      	cmp	r2, #9
 8007718:	d903      	bls.n	8007722 <_svfiprintf_r+0x1a6>
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0c6      	beq.n	80076ac <_svfiprintf_r+0x130>
 800771e:	9105      	str	r1, [sp, #20]
 8007720:	e7c4      	b.n	80076ac <_svfiprintf_r+0x130>
 8007722:	4604      	mov	r4, r0
 8007724:	2301      	movs	r3, #1
 8007726:	fb0c 2101 	mla	r1, ip, r1, r2
 800772a:	e7f0      	b.n	800770e <_svfiprintf_r+0x192>
 800772c:	ab03      	add	r3, sp, #12
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	462a      	mov	r2, r5
 8007732:	4638      	mov	r0, r7
 8007734:	4b0e      	ldr	r3, [pc, #56]	@ (8007770 <_svfiprintf_r+0x1f4>)
 8007736:	a904      	add	r1, sp, #16
 8007738:	f3af 8000 	nop.w
 800773c:	1c42      	adds	r2, r0, #1
 800773e:	4606      	mov	r6, r0
 8007740:	d1d6      	bne.n	80076f0 <_svfiprintf_r+0x174>
 8007742:	89ab      	ldrh	r3, [r5, #12]
 8007744:	065b      	lsls	r3, r3, #25
 8007746:	f53f af2d 	bmi.w	80075a4 <_svfiprintf_r+0x28>
 800774a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800774c:	e72c      	b.n	80075a8 <_svfiprintf_r+0x2c>
 800774e:	ab03      	add	r3, sp, #12
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	462a      	mov	r2, r5
 8007754:	4638      	mov	r0, r7
 8007756:	4b06      	ldr	r3, [pc, #24]	@ (8007770 <_svfiprintf_r+0x1f4>)
 8007758:	a904      	add	r1, sp, #16
 800775a:	f000 fa47 	bl	8007bec <_printf_i>
 800775e:	e7ed      	b.n	800773c <_svfiprintf_r+0x1c0>
 8007760:	080091cb 	.word	0x080091cb
 8007764:	080091d1 	.word	0x080091d1
 8007768:	080091d5 	.word	0x080091d5
 800776c:	00000000 	.word	0x00000000
 8007770:	080074c5 	.word	0x080074c5

08007774 <_sungetc_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	1c4b      	adds	r3, r1, #1
 8007778:	4614      	mov	r4, r2
 800777a:	d103      	bne.n	8007784 <_sungetc_r+0x10>
 800777c:	f04f 35ff 	mov.w	r5, #4294967295
 8007780:	4628      	mov	r0, r5
 8007782:	bd38      	pop	{r3, r4, r5, pc}
 8007784:	8993      	ldrh	r3, [r2, #12]
 8007786:	b2cd      	uxtb	r5, r1
 8007788:	f023 0320 	bic.w	r3, r3, #32
 800778c:	8193      	strh	r3, [r2, #12]
 800778e:	6853      	ldr	r3, [r2, #4]
 8007790:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007792:	b18a      	cbz	r2, 80077b8 <_sungetc_r+0x44>
 8007794:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8007796:	429a      	cmp	r2, r3
 8007798:	dd08      	ble.n	80077ac <_sungetc_r+0x38>
 800779a:	6823      	ldr	r3, [r4, #0]
 800779c:	1e5a      	subs	r2, r3, #1
 800779e:	6022      	str	r2, [r4, #0]
 80077a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	3301      	adds	r3, #1
 80077a8:	6063      	str	r3, [r4, #4]
 80077aa:	e7e9      	b.n	8007780 <_sungetc_r+0xc>
 80077ac:	4621      	mov	r1, r4
 80077ae:	f000 fcc2 	bl	8008136 <__submore>
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d0f1      	beq.n	800779a <_sungetc_r+0x26>
 80077b6:	e7e1      	b.n	800777c <_sungetc_r+0x8>
 80077b8:	6921      	ldr	r1, [r4, #16]
 80077ba:	6822      	ldr	r2, [r4, #0]
 80077bc:	b141      	cbz	r1, 80077d0 <_sungetc_r+0x5c>
 80077be:	4291      	cmp	r1, r2
 80077c0:	d206      	bcs.n	80077d0 <_sungetc_r+0x5c>
 80077c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80077c6:	42a9      	cmp	r1, r5
 80077c8:	d102      	bne.n	80077d0 <_sungetc_r+0x5c>
 80077ca:	3a01      	subs	r2, #1
 80077cc:	6022      	str	r2, [r4, #0]
 80077ce:	e7ea      	b.n	80077a6 <_sungetc_r+0x32>
 80077d0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80077d4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80077da:	2303      	movs	r3, #3
 80077dc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80077de:	4623      	mov	r3, r4
 80077e0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80077e4:	6023      	str	r3, [r4, #0]
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7de      	b.n	80077a8 <_sungetc_r+0x34>

080077ea <__ssrefill_r>:
 80077ea:	b510      	push	{r4, lr}
 80077ec:	460c      	mov	r4, r1
 80077ee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80077f0:	b169      	cbz	r1, 800780e <__ssrefill_r+0x24>
 80077f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80077f6:	4299      	cmp	r1, r3
 80077f8:	d001      	beq.n	80077fe <__ssrefill_r+0x14>
 80077fa:	f7ff fd6d 	bl	80072d8 <_free_r>
 80077fe:	2000      	movs	r0, #0
 8007800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007802:	6360      	str	r0, [r4, #52]	@ 0x34
 8007804:	6063      	str	r3, [r4, #4]
 8007806:	b113      	cbz	r3, 800780e <__ssrefill_r+0x24>
 8007808:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800780a:	6023      	str	r3, [r4, #0]
 800780c:	bd10      	pop	{r4, pc}
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	f04f 30ff 	mov.w	r0, #4294967295
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	2300      	movs	r3, #0
 8007818:	6063      	str	r3, [r4, #4]
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	f043 0320 	orr.w	r3, r3, #32
 8007820:	81a3      	strh	r3, [r4, #12]
 8007822:	e7f3      	b.n	800780c <__ssrefill_r+0x22>

08007824 <__ssvfiscanf_r>:
 8007824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007828:	460c      	mov	r4, r1
 800782a:	2100      	movs	r1, #0
 800782c:	4606      	mov	r6, r0
 800782e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8007832:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8007836:	49aa      	ldr	r1, [pc, #680]	@ (8007ae0 <__ssvfiscanf_r+0x2bc>)
 8007838:	f10d 0804 	add.w	r8, sp, #4
 800783c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800783e:	49a9      	ldr	r1, [pc, #676]	@ (8007ae4 <__ssvfiscanf_r+0x2c0>)
 8007840:	4fa9      	ldr	r7, [pc, #676]	@ (8007ae8 <__ssvfiscanf_r+0x2c4>)
 8007842:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007846:	91a1      	str	r1, [sp, #644]	@ 0x284
 8007848:	9300      	str	r3, [sp, #0]
 800784a:	7813      	ldrb	r3, [r2, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 8159 	beq.w	8007b04 <__ssvfiscanf_r+0x2e0>
 8007852:	5cf9      	ldrb	r1, [r7, r3]
 8007854:	1c55      	adds	r5, r2, #1
 8007856:	f011 0108 	ands.w	r1, r1, #8
 800785a:	d019      	beq.n	8007890 <__ssvfiscanf_r+0x6c>
 800785c:	6863      	ldr	r3, [r4, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	dd0f      	ble.n	8007882 <__ssvfiscanf_r+0x5e>
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	781a      	ldrb	r2, [r3, #0]
 8007866:	5cba      	ldrb	r2, [r7, r2]
 8007868:	0712      	lsls	r2, r2, #28
 800786a:	d401      	bmi.n	8007870 <__ssvfiscanf_r+0x4c>
 800786c:	462a      	mov	r2, r5
 800786e:	e7ec      	b.n	800784a <__ssvfiscanf_r+0x26>
 8007870:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007872:	3301      	adds	r3, #1
 8007874:	3201      	adds	r2, #1
 8007876:	9245      	str	r2, [sp, #276]	@ 0x114
 8007878:	6862      	ldr	r2, [r4, #4]
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	3a01      	subs	r2, #1
 800787e:	6062      	str	r2, [r4, #4]
 8007880:	e7ec      	b.n	800785c <__ssvfiscanf_r+0x38>
 8007882:	4621      	mov	r1, r4
 8007884:	4630      	mov	r0, r6
 8007886:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007888:	4798      	blx	r3
 800788a:	2800      	cmp	r0, #0
 800788c:	d0e9      	beq.n	8007862 <__ssvfiscanf_r+0x3e>
 800788e:	e7ed      	b.n	800786c <__ssvfiscanf_r+0x48>
 8007890:	2b25      	cmp	r3, #37	@ 0x25
 8007892:	d012      	beq.n	80078ba <__ssvfiscanf_r+0x96>
 8007894:	4699      	mov	r9, r3
 8007896:	6863      	ldr	r3, [r4, #4]
 8007898:	2b00      	cmp	r3, #0
 800789a:	f340 8094 	ble.w	80079c6 <__ssvfiscanf_r+0x1a2>
 800789e:	6822      	ldr	r2, [r4, #0]
 80078a0:	7813      	ldrb	r3, [r2, #0]
 80078a2:	454b      	cmp	r3, r9
 80078a4:	f040 812e 	bne.w	8007b04 <__ssvfiscanf_r+0x2e0>
 80078a8:	6863      	ldr	r3, [r4, #4]
 80078aa:	3201      	adds	r2, #1
 80078ac:	3b01      	subs	r3, #1
 80078ae:	6063      	str	r3, [r4, #4]
 80078b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80078b2:	6022      	str	r2, [r4, #0]
 80078b4:	3301      	adds	r3, #1
 80078b6:	9345      	str	r3, [sp, #276]	@ 0x114
 80078b8:	e7d8      	b.n	800786c <__ssvfiscanf_r+0x48>
 80078ba:	9141      	str	r1, [sp, #260]	@ 0x104
 80078bc:	9143      	str	r1, [sp, #268]	@ 0x10c
 80078be:	7853      	ldrb	r3, [r2, #1]
 80078c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80078c2:	bf04      	itt	eq
 80078c4:	2310      	moveq	r3, #16
 80078c6:	1c95      	addeq	r5, r2, #2
 80078c8:	f04f 020a 	mov.w	r2, #10
 80078cc:	bf08      	it	eq
 80078ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 80078d0:	46a9      	mov	r9, r5
 80078d2:	f819 1b01 	ldrb.w	r1, [r9], #1
 80078d6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80078da:	2b09      	cmp	r3, #9
 80078dc:	d91e      	bls.n	800791c <__ssvfiscanf_r+0xf8>
 80078de:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8007aec <__ssvfiscanf_r+0x2c8>
 80078e2:	2203      	movs	r2, #3
 80078e4:	4650      	mov	r0, sl
 80078e6:	f000 fc89 	bl	80081fc <memchr>
 80078ea:	b138      	cbz	r0, 80078fc <__ssvfiscanf_r+0xd8>
 80078ec:	2301      	movs	r3, #1
 80078ee:	464d      	mov	r5, r9
 80078f0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80078f2:	eba0 000a 	sub.w	r0, r0, sl
 80078f6:	4083      	lsls	r3, r0
 80078f8:	4313      	orrs	r3, r2
 80078fa:	9341      	str	r3, [sp, #260]	@ 0x104
 80078fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007900:	2b78      	cmp	r3, #120	@ 0x78
 8007902:	d806      	bhi.n	8007912 <__ssvfiscanf_r+0xee>
 8007904:	2b57      	cmp	r3, #87	@ 0x57
 8007906:	d810      	bhi.n	800792a <__ssvfiscanf_r+0x106>
 8007908:	2b25      	cmp	r3, #37	@ 0x25
 800790a:	d0c3      	beq.n	8007894 <__ssvfiscanf_r+0x70>
 800790c:	d856      	bhi.n	80079bc <__ssvfiscanf_r+0x198>
 800790e:	2b00      	cmp	r3, #0
 8007910:	d064      	beq.n	80079dc <__ssvfiscanf_r+0x1b8>
 8007912:	2303      	movs	r3, #3
 8007914:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007916:	230a      	movs	r3, #10
 8007918:	9342      	str	r3, [sp, #264]	@ 0x108
 800791a:	e077      	b.n	8007a0c <__ssvfiscanf_r+0x1e8>
 800791c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800791e:	464d      	mov	r5, r9
 8007920:	fb02 1103 	mla	r1, r2, r3, r1
 8007924:	3930      	subs	r1, #48	@ 0x30
 8007926:	9143      	str	r1, [sp, #268]	@ 0x10c
 8007928:	e7d2      	b.n	80078d0 <__ssvfiscanf_r+0xac>
 800792a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800792e:	2a20      	cmp	r2, #32
 8007930:	d8ef      	bhi.n	8007912 <__ssvfiscanf_r+0xee>
 8007932:	a101      	add	r1, pc, #4	@ (adr r1, 8007938 <__ssvfiscanf_r+0x114>)
 8007934:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007938:	080079eb 	.word	0x080079eb
 800793c:	08007913 	.word	0x08007913
 8007940:	08007913 	.word	0x08007913
 8007944:	08007a45 	.word	0x08007a45
 8007948:	08007913 	.word	0x08007913
 800794c:	08007913 	.word	0x08007913
 8007950:	08007913 	.word	0x08007913
 8007954:	08007913 	.word	0x08007913
 8007958:	08007913 	.word	0x08007913
 800795c:	08007913 	.word	0x08007913
 8007960:	08007913 	.word	0x08007913
 8007964:	08007a5b 	.word	0x08007a5b
 8007968:	08007a41 	.word	0x08007a41
 800796c:	080079c3 	.word	0x080079c3
 8007970:	080079c3 	.word	0x080079c3
 8007974:	080079c3 	.word	0x080079c3
 8007978:	08007913 	.word	0x08007913
 800797c:	080079fd 	.word	0x080079fd
 8007980:	08007913 	.word	0x08007913
 8007984:	08007913 	.word	0x08007913
 8007988:	08007913 	.word	0x08007913
 800798c:	08007913 	.word	0x08007913
 8007990:	08007a6b 	.word	0x08007a6b
 8007994:	08007a05 	.word	0x08007a05
 8007998:	080079e3 	.word	0x080079e3
 800799c:	08007913 	.word	0x08007913
 80079a0:	08007913 	.word	0x08007913
 80079a4:	08007a67 	.word	0x08007a67
 80079a8:	08007913 	.word	0x08007913
 80079ac:	08007a41 	.word	0x08007a41
 80079b0:	08007913 	.word	0x08007913
 80079b4:	08007913 	.word	0x08007913
 80079b8:	080079eb 	.word	0x080079eb
 80079bc:	3b45      	subs	r3, #69	@ 0x45
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d8a7      	bhi.n	8007912 <__ssvfiscanf_r+0xee>
 80079c2:	2305      	movs	r3, #5
 80079c4:	e021      	b.n	8007a0a <__ssvfiscanf_r+0x1e6>
 80079c6:	4621      	mov	r1, r4
 80079c8:	4630      	mov	r0, r6
 80079ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80079cc:	4798      	blx	r3
 80079ce:	2800      	cmp	r0, #0
 80079d0:	f43f af65 	beq.w	800789e <__ssvfiscanf_r+0x7a>
 80079d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80079d6:	2800      	cmp	r0, #0
 80079d8:	f040 808c 	bne.w	8007af4 <__ssvfiscanf_r+0x2d0>
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	e08c      	b.n	8007afc <__ssvfiscanf_r+0x2d8>
 80079e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80079e4:	f042 0220 	orr.w	r2, r2, #32
 80079e8:	9241      	str	r2, [sp, #260]	@ 0x104
 80079ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80079ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80079f2:	2210      	movs	r2, #16
 80079f4:	2b6e      	cmp	r3, #110	@ 0x6e
 80079f6:	9242      	str	r2, [sp, #264]	@ 0x108
 80079f8:	d902      	bls.n	8007a00 <__ssvfiscanf_r+0x1dc>
 80079fa:	e005      	b.n	8007a08 <__ssvfiscanf_r+0x1e4>
 80079fc:	2300      	movs	r3, #0
 80079fe:	9342      	str	r3, [sp, #264]	@ 0x108
 8007a00:	2303      	movs	r3, #3
 8007a02:	e002      	b.n	8007a0a <__ssvfiscanf_r+0x1e6>
 8007a04:	2308      	movs	r3, #8
 8007a06:	9342      	str	r3, [sp, #264]	@ 0x108
 8007a08:	2304      	movs	r3, #4
 8007a0a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007a0c:	6863      	ldr	r3, [r4, #4]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd39      	ble.n	8007a86 <__ssvfiscanf_r+0x262>
 8007a12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007a14:	0659      	lsls	r1, r3, #25
 8007a16:	d404      	bmi.n	8007a22 <__ssvfiscanf_r+0x1fe>
 8007a18:	6823      	ldr	r3, [r4, #0]
 8007a1a:	781a      	ldrb	r2, [r3, #0]
 8007a1c:	5cba      	ldrb	r2, [r7, r2]
 8007a1e:	0712      	lsls	r2, r2, #28
 8007a20:	d438      	bmi.n	8007a94 <__ssvfiscanf_r+0x270>
 8007a22:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	dc47      	bgt.n	8007ab8 <__ssvfiscanf_r+0x294>
 8007a28:	466b      	mov	r3, sp
 8007a2a:	4622      	mov	r2, r4
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	a941      	add	r1, sp, #260	@ 0x104
 8007a30:	f000 f9fc 	bl	8007e2c <_scanf_chars>
 8007a34:	2801      	cmp	r0, #1
 8007a36:	d065      	beq.n	8007b04 <__ssvfiscanf_r+0x2e0>
 8007a38:	2802      	cmp	r0, #2
 8007a3a:	f47f af17 	bne.w	800786c <__ssvfiscanf_r+0x48>
 8007a3e:	e7c9      	b.n	80079d4 <__ssvfiscanf_r+0x1b0>
 8007a40:	220a      	movs	r2, #10
 8007a42:	e7d7      	b.n	80079f4 <__ssvfiscanf_r+0x1d0>
 8007a44:	4629      	mov	r1, r5
 8007a46:	4640      	mov	r0, r8
 8007a48:	f000 fb3c 	bl	80080c4 <__sccl>
 8007a4c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007a4e:	4605      	mov	r5, r0
 8007a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a54:	9341      	str	r3, [sp, #260]	@ 0x104
 8007a56:	2301      	movs	r3, #1
 8007a58:	e7d7      	b.n	8007a0a <__ssvfiscanf_r+0x1e6>
 8007a5a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007a5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a60:	9341      	str	r3, [sp, #260]	@ 0x104
 8007a62:	2300      	movs	r3, #0
 8007a64:	e7d1      	b.n	8007a0a <__ssvfiscanf_r+0x1e6>
 8007a66:	2302      	movs	r3, #2
 8007a68:	e7cf      	b.n	8007a0a <__ssvfiscanf_r+0x1e6>
 8007a6a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007a6c:	06c3      	lsls	r3, r0, #27
 8007a6e:	f53f aefd 	bmi.w	800786c <__ssvfiscanf_r+0x48>
 8007a72:	9b00      	ldr	r3, [sp, #0]
 8007a74:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007a76:	1d19      	adds	r1, r3, #4
 8007a78:	9100      	str	r1, [sp, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	07c0      	lsls	r0, r0, #31
 8007a7e:	bf4c      	ite	mi
 8007a80:	801a      	strhmi	r2, [r3, #0]
 8007a82:	601a      	strpl	r2, [r3, #0]
 8007a84:	e6f2      	b.n	800786c <__ssvfiscanf_r+0x48>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007a8c:	4798      	blx	r3
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	d0bf      	beq.n	8007a12 <__ssvfiscanf_r+0x1ee>
 8007a92:	e79f      	b.n	80079d4 <__ssvfiscanf_r+0x1b0>
 8007a94:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007a96:	3201      	adds	r2, #1
 8007a98:	9245      	str	r2, [sp, #276]	@ 0x114
 8007a9a:	6862      	ldr	r2, [r4, #4]
 8007a9c:	3a01      	subs	r2, #1
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	6062      	str	r2, [r4, #4]
 8007aa2:	dd02      	ble.n	8007aaa <__ssvfiscanf_r+0x286>
 8007aa4:	3301      	adds	r3, #1
 8007aa6:	6023      	str	r3, [r4, #0]
 8007aa8:	e7b6      	b.n	8007a18 <__ssvfiscanf_r+0x1f4>
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4630      	mov	r0, r6
 8007aae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007ab0:	4798      	blx	r3
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d0b0      	beq.n	8007a18 <__ssvfiscanf_r+0x1f4>
 8007ab6:	e78d      	b.n	80079d4 <__ssvfiscanf_r+0x1b0>
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	dc06      	bgt.n	8007aca <__ssvfiscanf_r+0x2a6>
 8007abc:	466b      	mov	r3, sp
 8007abe:	4622      	mov	r2, r4
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	a941      	add	r1, sp, #260	@ 0x104
 8007ac4:	f000 fa0c 	bl	8007ee0 <_scanf_i>
 8007ac8:	e7b4      	b.n	8007a34 <__ssvfiscanf_r+0x210>
 8007aca:	4b09      	ldr	r3, [pc, #36]	@ (8007af0 <__ssvfiscanf_r+0x2cc>)
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f43f aecd 	beq.w	800786c <__ssvfiscanf_r+0x48>
 8007ad2:	466b      	mov	r3, sp
 8007ad4:	4622      	mov	r2, r4
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	a941      	add	r1, sp, #260	@ 0x104
 8007ada:	f3af 8000 	nop.w
 8007ade:	e7a9      	b.n	8007a34 <__ssvfiscanf_r+0x210>
 8007ae0:	08007775 	.word	0x08007775
 8007ae4:	080077eb 	.word	0x080077eb
 8007ae8:	080090cb 	.word	0x080090cb
 8007aec:	080091d1 	.word	0x080091d1
 8007af0:	00000000 	.word	0x00000000
 8007af4:	89a3      	ldrh	r3, [r4, #12]
 8007af6:	065b      	lsls	r3, r3, #25
 8007af8:	f53f af70 	bmi.w	80079dc <__ssvfiscanf_r+0x1b8>
 8007afc:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8007b00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b04:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007b06:	e7f9      	b.n	8007afc <__ssvfiscanf_r+0x2d8>

08007b08 <_printf_common>:
 8007b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b0c:	4616      	mov	r6, r2
 8007b0e:	4698      	mov	r8, r3
 8007b10:	688a      	ldr	r2, [r1, #8]
 8007b12:	690b      	ldr	r3, [r1, #16]
 8007b14:	4607      	mov	r7, r0
 8007b16:	4293      	cmp	r3, r2
 8007b18:	bfb8      	it	lt
 8007b1a:	4613      	movlt	r3, r2
 8007b1c:	6033      	str	r3, [r6, #0]
 8007b1e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007b22:	460c      	mov	r4, r1
 8007b24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007b28:	b10a      	cbz	r2, 8007b2e <_printf_common+0x26>
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	6033      	str	r3, [r6, #0]
 8007b2e:	6823      	ldr	r3, [r4, #0]
 8007b30:	0699      	lsls	r1, r3, #26
 8007b32:	bf42      	ittt	mi
 8007b34:	6833      	ldrmi	r3, [r6, #0]
 8007b36:	3302      	addmi	r3, #2
 8007b38:	6033      	strmi	r3, [r6, #0]
 8007b3a:	6825      	ldr	r5, [r4, #0]
 8007b3c:	f015 0506 	ands.w	r5, r5, #6
 8007b40:	d106      	bne.n	8007b50 <_printf_common+0x48>
 8007b42:	f104 0a19 	add.w	sl, r4, #25
 8007b46:	68e3      	ldr	r3, [r4, #12]
 8007b48:	6832      	ldr	r2, [r6, #0]
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	42ab      	cmp	r3, r5
 8007b4e:	dc2b      	bgt.n	8007ba8 <_printf_common+0xa0>
 8007b50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b54:	6822      	ldr	r2, [r4, #0]
 8007b56:	3b00      	subs	r3, #0
 8007b58:	bf18      	it	ne
 8007b5a:	2301      	movne	r3, #1
 8007b5c:	0692      	lsls	r2, r2, #26
 8007b5e:	d430      	bmi.n	8007bc2 <_printf_common+0xba>
 8007b60:	4641      	mov	r1, r8
 8007b62:	4638      	mov	r0, r7
 8007b64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b68:	47c8      	blx	r9
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	d023      	beq.n	8007bb6 <_printf_common+0xae>
 8007b6e:	6823      	ldr	r3, [r4, #0]
 8007b70:	6922      	ldr	r2, [r4, #16]
 8007b72:	f003 0306 	and.w	r3, r3, #6
 8007b76:	2b04      	cmp	r3, #4
 8007b78:	bf14      	ite	ne
 8007b7a:	2500      	movne	r5, #0
 8007b7c:	6833      	ldreq	r3, [r6, #0]
 8007b7e:	f04f 0600 	mov.w	r6, #0
 8007b82:	bf08      	it	eq
 8007b84:	68e5      	ldreq	r5, [r4, #12]
 8007b86:	f104 041a 	add.w	r4, r4, #26
 8007b8a:	bf08      	it	eq
 8007b8c:	1aed      	subeq	r5, r5, r3
 8007b8e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007b92:	bf08      	it	eq
 8007b94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	bfc4      	itt	gt
 8007b9c:	1a9b      	subgt	r3, r3, r2
 8007b9e:	18ed      	addgt	r5, r5, r3
 8007ba0:	42b5      	cmp	r5, r6
 8007ba2:	d11a      	bne.n	8007bda <_printf_common+0xd2>
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	e008      	b.n	8007bba <_printf_common+0xb2>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	4652      	mov	r2, sl
 8007bac:	4641      	mov	r1, r8
 8007bae:	4638      	mov	r0, r7
 8007bb0:	47c8      	blx	r9
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	d103      	bne.n	8007bbe <_printf_common+0xb6>
 8007bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	3501      	adds	r5, #1
 8007bc0:	e7c1      	b.n	8007b46 <_printf_common+0x3e>
 8007bc2:	2030      	movs	r0, #48	@ 0x30
 8007bc4:	18e1      	adds	r1, r4, r3
 8007bc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007bca:	1c5a      	adds	r2, r3, #1
 8007bcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007bd0:	4422      	add	r2, r4
 8007bd2:	3302      	adds	r3, #2
 8007bd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007bd8:	e7c2      	b.n	8007b60 <_printf_common+0x58>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4622      	mov	r2, r4
 8007bde:	4641      	mov	r1, r8
 8007be0:	4638      	mov	r0, r7
 8007be2:	47c8      	blx	r9
 8007be4:	3001      	adds	r0, #1
 8007be6:	d0e6      	beq.n	8007bb6 <_printf_common+0xae>
 8007be8:	3601      	adds	r6, #1
 8007bea:	e7d9      	b.n	8007ba0 <_printf_common+0x98>

08007bec <_printf_i>:
 8007bec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007bf0:	7e0f      	ldrb	r7, [r1, #24]
 8007bf2:	4691      	mov	r9, r2
 8007bf4:	2f78      	cmp	r7, #120	@ 0x78
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	469a      	mov	sl, r3
 8007bfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007bfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c02:	d807      	bhi.n	8007c14 <_printf_i+0x28>
 8007c04:	2f62      	cmp	r7, #98	@ 0x62
 8007c06:	d80a      	bhi.n	8007c1e <_printf_i+0x32>
 8007c08:	2f00      	cmp	r7, #0
 8007c0a:	f000 80d3 	beq.w	8007db4 <_printf_i+0x1c8>
 8007c0e:	2f58      	cmp	r7, #88	@ 0x58
 8007c10:	f000 80ba 	beq.w	8007d88 <_printf_i+0x19c>
 8007c14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007c1c:	e03a      	b.n	8007c94 <_printf_i+0xa8>
 8007c1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007c22:	2b15      	cmp	r3, #21
 8007c24:	d8f6      	bhi.n	8007c14 <_printf_i+0x28>
 8007c26:	a101      	add	r1, pc, #4	@ (adr r1, 8007c2c <_printf_i+0x40>)
 8007c28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c2c:	08007c85 	.word	0x08007c85
 8007c30:	08007c99 	.word	0x08007c99
 8007c34:	08007c15 	.word	0x08007c15
 8007c38:	08007c15 	.word	0x08007c15
 8007c3c:	08007c15 	.word	0x08007c15
 8007c40:	08007c15 	.word	0x08007c15
 8007c44:	08007c99 	.word	0x08007c99
 8007c48:	08007c15 	.word	0x08007c15
 8007c4c:	08007c15 	.word	0x08007c15
 8007c50:	08007c15 	.word	0x08007c15
 8007c54:	08007c15 	.word	0x08007c15
 8007c58:	08007d9b 	.word	0x08007d9b
 8007c5c:	08007cc3 	.word	0x08007cc3
 8007c60:	08007d55 	.word	0x08007d55
 8007c64:	08007c15 	.word	0x08007c15
 8007c68:	08007c15 	.word	0x08007c15
 8007c6c:	08007dbd 	.word	0x08007dbd
 8007c70:	08007c15 	.word	0x08007c15
 8007c74:	08007cc3 	.word	0x08007cc3
 8007c78:	08007c15 	.word	0x08007c15
 8007c7c:	08007c15 	.word	0x08007c15
 8007c80:	08007d5d 	.word	0x08007d5d
 8007c84:	6833      	ldr	r3, [r6, #0]
 8007c86:	1d1a      	adds	r2, r3, #4
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	6032      	str	r2, [r6, #0]
 8007c8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c94:	2301      	movs	r3, #1
 8007c96:	e09e      	b.n	8007dd6 <_printf_i+0x1ea>
 8007c98:	6833      	ldr	r3, [r6, #0]
 8007c9a:	6820      	ldr	r0, [r4, #0]
 8007c9c:	1d19      	adds	r1, r3, #4
 8007c9e:	6031      	str	r1, [r6, #0]
 8007ca0:	0606      	lsls	r6, r0, #24
 8007ca2:	d501      	bpl.n	8007ca8 <_printf_i+0xbc>
 8007ca4:	681d      	ldr	r5, [r3, #0]
 8007ca6:	e003      	b.n	8007cb0 <_printf_i+0xc4>
 8007ca8:	0645      	lsls	r5, r0, #25
 8007caa:	d5fb      	bpl.n	8007ca4 <_printf_i+0xb8>
 8007cac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007cb0:	2d00      	cmp	r5, #0
 8007cb2:	da03      	bge.n	8007cbc <_printf_i+0xd0>
 8007cb4:	232d      	movs	r3, #45	@ 0x2d
 8007cb6:	426d      	negs	r5, r5
 8007cb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cbc:	230a      	movs	r3, #10
 8007cbe:	4859      	ldr	r0, [pc, #356]	@ (8007e24 <_printf_i+0x238>)
 8007cc0:	e011      	b.n	8007ce6 <_printf_i+0xfa>
 8007cc2:	6821      	ldr	r1, [r4, #0]
 8007cc4:	6833      	ldr	r3, [r6, #0]
 8007cc6:	0608      	lsls	r0, r1, #24
 8007cc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ccc:	d402      	bmi.n	8007cd4 <_printf_i+0xe8>
 8007cce:	0649      	lsls	r1, r1, #25
 8007cd0:	bf48      	it	mi
 8007cd2:	b2ad      	uxthmi	r5, r5
 8007cd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007cd6:	6033      	str	r3, [r6, #0]
 8007cd8:	bf14      	ite	ne
 8007cda:	230a      	movne	r3, #10
 8007cdc:	2308      	moveq	r3, #8
 8007cde:	4851      	ldr	r0, [pc, #324]	@ (8007e24 <_printf_i+0x238>)
 8007ce0:	2100      	movs	r1, #0
 8007ce2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007ce6:	6866      	ldr	r6, [r4, #4]
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	bfa8      	it	ge
 8007cec:	6821      	ldrge	r1, [r4, #0]
 8007cee:	60a6      	str	r6, [r4, #8]
 8007cf0:	bfa4      	itt	ge
 8007cf2:	f021 0104 	bicge.w	r1, r1, #4
 8007cf6:	6021      	strge	r1, [r4, #0]
 8007cf8:	b90d      	cbnz	r5, 8007cfe <_printf_i+0x112>
 8007cfa:	2e00      	cmp	r6, #0
 8007cfc:	d04b      	beq.n	8007d96 <_printf_i+0x1aa>
 8007cfe:	4616      	mov	r6, r2
 8007d00:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d04:	fb03 5711 	mls	r7, r3, r1, r5
 8007d08:	5dc7      	ldrb	r7, [r0, r7]
 8007d0a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d0e:	462f      	mov	r7, r5
 8007d10:	42bb      	cmp	r3, r7
 8007d12:	460d      	mov	r5, r1
 8007d14:	d9f4      	bls.n	8007d00 <_printf_i+0x114>
 8007d16:	2b08      	cmp	r3, #8
 8007d18:	d10b      	bne.n	8007d32 <_printf_i+0x146>
 8007d1a:	6823      	ldr	r3, [r4, #0]
 8007d1c:	07df      	lsls	r7, r3, #31
 8007d1e:	d508      	bpl.n	8007d32 <_printf_i+0x146>
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	6861      	ldr	r1, [r4, #4]
 8007d24:	4299      	cmp	r1, r3
 8007d26:	bfde      	ittt	le
 8007d28:	2330      	movle	r3, #48	@ 0x30
 8007d2a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d2e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d32:	1b92      	subs	r2, r2, r6
 8007d34:	6122      	str	r2, [r4, #16]
 8007d36:	464b      	mov	r3, r9
 8007d38:	4621      	mov	r1, r4
 8007d3a:	4640      	mov	r0, r8
 8007d3c:	f8cd a000 	str.w	sl, [sp]
 8007d40:	aa03      	add	r2, sp, #12
 8007d42:	f7ff fee1 	bl	8007b08 <_printf_common>
 8007d46:	3001      	adds	r0, #1
 8007d48:	d14a      	bne.n	8007de0 <_printf_i+0x1f4>
 8007d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d4e:	b004      	add	sp, #16
 8007d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	f043 0320 	orr.w	r3, r3, #32
 8007d5a:	6023      	str	r3, [r4, #0]
 8007d5c:	2778      	movs	r7, #120	@ 0x78
 8007d5e:	4832      	ldr	r0, [pc, #200]	@ (8007e28 <_printf_i+0x23c>)
 8007d60:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d64:	6823      	ldr	r3, [r4, #0]
 8007d66:	6831      	ldr	r1, [r6, #0]
 8007d68:	061f      	lsls	r7, r3, #24
 8007d6a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d6e:	d402      	bmi.n	8007d76 <_printf_i+0x18a>
 8007d70:	065f      	lsls	r7, r3, #25
 8007d72:	bf48      	it	mi
 8007d74:	b2ad      	uxthmi	r5, r5
 8007d76:	6031      	str	r1, [r6, #0]
 8007d78:	07d9      	lsls	r1, r3, #31
 8007d7a:	bf44      	itt	mi
 8007d7c:	f043 0320 	orrmi.w	r3, r3, #32
 8007d80:	6023      	strmi	r3, [r4, #0]
 8007d82:	b11d      	cbz	r5, 8007d8c <_printf_i+0x1a0>
 8007d84:	2310      	movs	r3, #16
 8007d86:	e7ab      	b.n	8007ce0 <_printf_i+0xf4>
 8007d88:	4826      	ldr	r0, [pc, #152]	@ (8007e24 <_printf_i+0x238>)
 8007d8a:	e7e9      	b.n	8007d60 <_printf_i+0x174>
 8007d8c:	6823      	ldr	r3, [r4, #0]
 8007d8e:	f023 0320 	bic.w	r3, r3, #32
 8007d92:	6023      	str	r3, [r4, #0]
 8007d94:	e7f6      	b.n	8007d84 <_printf_i+0x198>
 8007d96:	4616      	mov	r6, r2
 8007d98:	e7bd      	b.n	8007d16 <_printf_i+0x12a>
 8007d9a:	6833      	ldr	r3, [r6, #0]
 8007d9c:	6825      	ldr	r5, [r4, #0]
 8007d9e:	1d18      	adds	r0, r3, #4
 8007da0:	6961      	ldr	r1, [r4, #20]
 8007da2:	6030      	str	r0, [r6, #0]
 8007da4:	062e      	lsls	r6, r5, #24
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	d501      	bpl.n	8007dae <_printf_i+0x1c2>
 8007daa:	6019      	str	r1, [r3, #0]
 8007dac:	e002      	b.n	8007db4 <_printf_i+0x1c8>
 8007dae:	0668      	lsls	r0, r5, #25
 8007db0:	d5fb      	bpl.n	8007daa <_printf_i+0x1be>
 8007db2:	8019      	strh	r1, [r3, #0]
 8007db4:	2300      	movs	r3, #0
 8007db6:	4616      	mov	r6, r2
 8007db8:	6123      	str	r3, [r4, #16]
 8007dba:	e7bc      	b.n	8007d36 <_printf_i+0x14a>
 8007dbc:	6833      	ldr	r3, [r6, #0]
 8007dbe:	2100      	movs	r1, #0
 8007dc0:	1d1a      	adds	r2, r3, #4
 8007dc2:	6032      	str	r2, [r6, #0]
 8007dc4:	681e      	ldr	r6, [r3, #0]
 8007dc6:	6862      	ldr	r2, [r4, #4]
 8007dc8:	4630      	mov	r0, r6
 8007dca:	f000 fa17 	bl	80081fc <memchr>
 8007dce:	b108      	cbz	r0, 8007dd4 <_printf_i+0x1e8>
 8007dd0:	1b80      	subs	r0, r0, r6
 8007dd2:	6060      	str	r0, [r4, #4]
 8007dd4:	6863      	ldr	r3, [r4, #4]
 8007dd6:	6123      	str	r3, [r4, #16]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dde:	e7aa      	b.n	8007d36 <_printf_i+0x14a>
 8007de0:	4632      	mov	r2, r6
 8007de2:	4649      	mov	r1, r9
 8007de4:	4640      	mov	r0, r8
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	47d0      	blx	sl
 8007dea:	3001      	adds	r0, #1
 8007dec:	d0ad      	beq.n	8007d4a <_printf_i+0x15e>
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	079b      	lsls	r3, r3, #30
 8007df2:	d413      	bmi.n	8007e1c <_printf_i+0x230>
 8007df4:	68e0      	ldr	r0, [r4, #12]
 8007df6:	9b03      	ldr	r3, [sp, #12]
 8007df8:	4298      	cmp	r0, r3
 8007dfa:	bfb8      	it	lt
 8007dfc:	4618      	movlt	r0, r3
 8007dfe:	e7a6      	b.n	8007d4e <_printf_i+0x162>
 8007e00:	2301      	movs	r3, #1
 8007e02:	4632      	mov	r2, r6
 8007e04:	4649      	mov	r1, r9
 8007e06:	4640      	mov	r0, r8
 8007e08:	47d0      	blx	sl
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d09d      	beq.n	8007d4a <_printf_i+0x15e>
 8007e0e:	3501      	adds	r5, #1
 8007e10:	68e3      	ldr	r3, [r4, #12]
 8007e12:	9903      	ldr	r1, [sp, #12]
 8007e14:	1a5b      	subs	r3, r3, r1
 8007e16:	42ab      	cmp	r3, r5
 8007e18:	dcf2      	bgt.n	8007e00 <_printf_i+0x214>
 8007e1a:	e7eb      	b.n	8007df4 <_printf_i+0x208>
 8007e1c:	2500      	movs	r5, #0
 8007e1e:	f104 0619 	add.w	r6, r4, #25
 8007e22:	e7f5      	b.n	8007e10 <_printf_i+0x224>
 8007e24:	080091dc 	.word	0x080091dc
 8007e28:	080091ed 	.word	0x080091ed

08007e2c <_scanf_chars>:
 8007e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e30:	4615      	mov	r5, r2
 8007e32:	688a      	ldr	r2, [r1, #8]
 8007e34:	4680      	mov	r8, r0
 8007e36:	460c      	mov	r4, r1
 8007e38:	b932      	cbnz	r2, 8007e48 <_scanf_chars+0x1c>
 8007e3a:	698a      	ldr	r2, [r1, #24]
 8007e3c:	2a00      	cmp	r2, #0
 8007e3e:	bf14      	ite	ne
 8007e40:	f04f 32ff 	movne.w	r2, #4294967295
 8007e44:	2201      	moveq	r2, #1
 8007e46:	608a      	str	r2, [r1, #8]
 8007e48:	2700      	movs	r7, #0
 8007e4a:	6822      	ldr	r2, [r4, #0]
 8007e4c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007edc <_scanf_chars+0xb0>
 8007e50:	06d1      	lsls	r1, r2, #27
 8007e52:	bf5f      	itttt	pl
 8007e54:	681a      	ldrpl	r2, [r3, #0]
 8007e56:	1d11      	addpl	r1, r2, #4
 8007e58:	6019      	strpl	r1, [r3, #0]
 8007e5a:	6816      	ldrpl	r6, [r2, #0]
 8007e5c:	69a0      	ldr	r0, [r4, #24]
 8007e5e:	b188      	cbz	r0, 8007e84 <_scanf_chars+0x58>
 8007e60:	2801      	cmp	r0, #1
 8007e62:	d107      	bne.n	8007e74 <_scanf_chars+0x48>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	781a      	ldrb	r2, [r3, #0]
 8007e68:	6963      	ldr	r3, [r4, #20]
 8007e6a:	5c9b      	ldrb	r3, [r3, r2]
 8007e6c:	b953      	cbnz	r3, 8007e84 <_scanf_chars+0x58>
 8007e6e:	2f00      	cmp	r7, #0
 8007e70:	d031      	beq.n	8007ed6 <_scanf_chars+0xaa>
 8007e72:	e022      	b.n	8007eba <_scanf_chars+0x8e>
 8007e74:	2802      	cmp	r0, #2
 8007e76:	d120      	bne.n	8007eba <_scanf_chars+0x8e>
 8007e78:	682b      	ldr	r3, [r5, #0]
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007e80:	071b      	lsls	r3, r3, #28
 8007e82:	d41a      	bmi.n	8007eba <_scanf_chars+0x8e>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	3701      	adds	r7, #1
 8007e88:	06da      	lsls	r2, r3, #27
 8007e8a:	bf5e      	ittt	pl
 8007e8c:	682b      	ldrpl	r3, [r5, #0]
 8007e8e:	781b      	ldrbpl	r3, [r3, #0]
 8007e90:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007e94:	682a      	ldr	r2, [r5, #0]
 8007e96:	686b      	ldr	r3, [r5, #4]
 8007e98:	3201      	adds	r2, #1
 8007e9a:	602a      	str	r2, [r5, #0]
 8007e9c:	68a2      	ldr	r2, [r4, #8]
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	3a01      	subs	r2, #1
 8007ea2:	606b      	str	r3, [r5, #4]
 8007ea4:	60a2      	str	r2, [r4, #8]
 8007ea6:	b142      	cbz	r2, 8007eba <_scanf_chars+0x8e>
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	dcd7      	bgt.n	8007e5c <_scanf_chars+0x30>
 8007eac:	4629      	mov	r1, r5
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007eb4:	4798      	blx	r3
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d0d0      	beq.n	8007e5c <_scanf_chars+0x30>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	f013 0310 	ands.w	r3, r3, #16
 8007ec0:	d105      	bne.n	8007ece <_scanf_chars+0xa2>
 8007ec2:	68e2      	ldr	r2, [r4, #12]
 8007ec4:	3201      	adds	r2, #1
 8007ec6:	60e2      	str	r2, [r4, #12]
 8007ec8:	69a2      	ldr	r2, [r4, #24]
 8007eca:	b102      	cbz	r2, 8007ece <_scanf_chars+0xa2>
 8007ecc:	7033      	strb	r3, [r6, #0]
 8007ece:	2000      	movs	r0, #0
 8007ed0:	6923      	ldr	r3, [r4, #16]
 8007ed2:	443b      	add	r3, r7
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007eda:	bf00      	nop
 8007edc:	080090cb 	.word	0x080090cb

08007ee0 <_scanf_i>:
 8007ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	4698      	mov	r8, r3
 8007ee8:	4b72      	ldr	r3, [pc, #456]	@ (80080b4 <_scanf_i+0x1d4>)
 8007eea:	b087      	sub	sp, #28
 8007eec:	4682      	mov	sl, r0
 8007eee:	4616      	mov	r6, r2
 8007ef0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ef4:	ab03      	add	r3, sp, #12
 8007ef6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007efa:	4b6f      	ldr	r3, [pc, #444]	@ (80080b8 <_scanf_i+0x1d8>)
 8007efc:	69a1      	ldr	r1, [r4, #24]
 8007efe:	4a6f      	ldr	r2, [pc, #444]	@ (80080bc <_scanf_i+0x1dc>)
 8007f00:	4627      	mov	r7, r4
 8007f02:	2903      	cmp	r1, #3
 8007f04:	bf08      	it	eq
 8007f06:	461a      	moveq	r2, r3
 8007f08:	68a3      	ldr	r3, [r4, #8]
 8007f0a:	9201      	str	r2, [sp, #4]
 8007f0c:	1e5a      	subs	r2, r3, #1
 8007f0e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007f12:	bf81      	itttt	hi
 8007f14:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007f18:	eb03 0905 	addhi.w	r9, r3, r5
 8007f1c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007f20:	60a3      	strhi	r3, [r4, #8]
 8007f22:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007f26:	bf98      	it	ls
 8007f28:	f04f 0900 	movls.w	r9, #0
 8007f2c:	463d      	mov	r5, r7
 8007f2e:	f04f 0b00 	mov.w	fp, #0
 8007f32:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	6831      	ldr	r1, [r6, #0]
 8007f3a:	ab03      	add	r3, sp, #12
 8007f3c:	2202      	movs	r2, #2
 8007f3e:	7809      	ldrb	r1, [r1, #0]
 8007f40:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007f44:	f000 f95a 	bl	80081fc <memchr>
 8007f48:	b328      	cbz	r0, 8007f96 <_scanf_i+0xb6>
 8007f4a:	f1bb 0f01 	cmp.w	fp, #1
 8007f4e:	d159      	bne.n	8008004 <_scanf_i+0x124>
 8007f50:	6862      	ldr	r2, [r4, #4]
 8007f52:	b92a      	cbnz	r2, 8007f60 <_scanf_i+0x80>
 8007f54:	2108      	movs	r1, #8
 8007f56:	6822      	ldr	r2, [r4, #0]
 8007f58:	6061      	str	r1, [r4, #4]
 8007f5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f5e:	6022      	str	r2, [r4, #0]
 8007f60:	6822      	ldr	r2, [r4, #0]
 8007f62:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007f66:	6022      	str	r2, [r4, #0]
 8007f68:	68a2      	ldr	r2, [r4, #8]
 8007f6a:	1e51      	subs	r1, r2, #1
 8007f6c:	60a1      	str	r1, [r4, #8]
 8007f6e:	b192      	cbz	r2, 8007f96 <_scanf_i+0xb6>
 8007f70:	6832      	ldr	r2, [r6, #0]
 8007f72:	1c51      	adds	r1, r2, #1
 8007f74:	6031      	str	r1, [r6, #0]
 8007f76:	7812      	ldrb	r2, [r2, #0]
 8007f78:	f805 2b01 	strb.w	r2, [r5], #1
 8007f7c:	6872      	ldr	r2, [r6, #4]
 8007f7e:	3a01      	subs	r2, #1
 8007f80:	2a00      	cmp	r2, #0
 8007f82:	6072      	str	r2, [r6, #4]
 8007f84:	dc07      	bgt.n	8007f96 <_scanf_i+0xb6>
 8007f86:	4631      	mov	r1, r6
 8007f88:	4650      	mov	r0, sl
 8007f8a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007f8e:	4790      	blx	r2
 8007f90:	2800      	cmp	r0, #0
 8007f92:	f040 8085 	bne.w	80080a0 <_scanf_i+0x1c0>
 8007f96:	f10b 0b01 	add.w	fp, fp, #1
 8007f9a:	f1bb 0f03 	cmp.w	fp, #3
 8007f9e:	d1cb      	bne.n	8007f38 <_scanf_i+0x58>
 8007fa0:	6863      	ldr	r3, [r4, #4]
 8007fa2:	b90b      	cbnz	r3, 8007fa8 <_scanf_i+0xc8>
 8007fa4:	230a      	movs	r3, #10
 8007fa6:	6063      	str	r3, [r4, #4]
 8007fa8:	6863      	ldr	r3, [r4, #4]
 8007faa:	4945      	ldr	r1, [pc, #276]	@ (80080c0 <_scanf_i+0x1e0>)
 8007fac:	6960      	ldr	r0, [r4, #20]
 8007fae:	1ac9      	subs	r1, r1, r3
 8007fb0:	f000 f888 	bl	80080c4 <__sccl>
 8007fb4:	f04f 0b00 	mov.w	fp, #0
 8007fb8:	68a3      	ldr	r3, [r4, #8]
 8007fba:	6822      	ldr	r2, [r4, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d03d      	beq.n	800803c <_scanf_i+0x15c>
 8007fc0:	6831      	ldr	r1, [r6, #0]
 8007fc2:	6960      	ldr	r0, [r4, #20]
 8007fc4:	f891 c000 	ldrb.w	ip, [r1]
 8007fc8:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d035      	beq.n	800803c <_scanf_i+0x15c>
 8007fd0:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007fd4:	d124      	bne.n	8008020 <_scanf_i+0x140>
 8007fd6:	0510      	lsls	r0, r2, #20
 8007fd8:	d522      	bpl.n	8008020 <_scanf_i+0x140>
 8007fda:	f10b 0b01 	add.w	fp, fp, #1
 8007fde:	f1b9 0f00 	cmp.w	r9, #0
 8007fe2:	d003      	beq.n	8007fec <_scanf_i+0x10c>
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	f109 39ff 	add.w	r9, r9, #4294967295
 8007fea:	60a3      	str	r3, [r4, #8]
 8007fec:	6873      	ldr	r3, [r6, #4]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	6073      	str	r3, [r6, #4]
 8007ff4:	dd1b      	ble.n	800802e <_scanf_i+0x14e>
 8007ff6:	6833      	ldr	r3, [r6, #0]
 8007ff8:	3301      	adds	r3, #1
 8007ffa:	6033      	str	r3, [r6, #0]
 8007ffc:	68a3      	ldr	r3, [r4, #8]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	60a3      	str	r3, [r4, #8]
 8008002:	e7d9      	b.n	8007fb8 <_scanf_i+0xd8>
 8008004:	f1bb 0f02 	cmp.w	fp, #2
 8008008:	d1ae      	bne.n	8007f68 <_scanf_i+0x88>
 800800a:	6822      	ldr	r2, [r4, #0]
 800800c:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008010:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8008014:	d1bf      	bne.n	8007f96 <_scanf_i+0xb6>
 8008016:	2110      	movs	r1, #16
 8008018:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800801c:	6061      	str	r1, [r4, #4]
 800801e:	e7a2      	b.n	8007f66 <_scanf_i+0x86>
 8008020:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8008024:	6022      	str	r2, [r4, #0]
 8008026:	780b      	ldrb	r3, [r1, #0]
 8008028:	f805 3b01 	strb.w	r3, [r5], #1
 800802c:	e7de      	b.n	8007fec <_scanf_i+0x10c>
 800802e:	4631      	mov	r1, r6
 8008030:	4650      	mov	r0, sl
 8008032:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008036:	4798      	blx	r3
 8008038:	2800      	cmp	r0, #0
 800803a:	d0df      	beq.n	8007ffc <_scanf_i+0x11c>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	05d9      	lsls	r1, r3, #23
 8008040:	d50d      	bpl.n	800805e <_scanf_i+0x17e>
 8008042:	42bd      	cmp	r5, r7
 8008044:	d909      	bls.n	800805a <_scanf_i+0x17a>
 8008046:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800804a:	4632      	mov	r2, r6
 800804c:	4650      	mov	r0, sl
 800804e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008052:	f105 39ff 	add.w	r9, r5, #4294967295
 8008056:	4798      	blx	r3
 8008058:	464d      	mov	r5, r9
 800805a:	42bd      	cmp	r5, r7
 800805c:	d028      	beq.n	80080b0 <_scanf_i+0x1d0>
 800805e:	6822      	ldr	r2, [r4, #0]
 8008060:	f012 0210 	ands.w	r2, r2, #16
 8008064:	d113      	bne.n	800808e <_scanf_i+0x1ae>
 8008066:	702a      	strb	r2, [r5, #0]
 8008068:	4639      	mov	r1, r7
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	4650      	mov	r0, sl
 800806e:	9e01      	ldr	r6, [sp, #4]
 8008070:	47b0      	blx	r6
 8008072:	f8d8 3000 	ldr.w	r3, [r8]
 8008076:	6821      	ldr	r1, [r4, #0]
 8008078:	1d1a      	adds	r2, r3, #4
 800807a:	f8c8 2000 	str.w	r2, [r8]
 800807e:	f011 0f20 	tst.w	r1, #32
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	d00f      	beq.n	80080a6 <_scanf_i+0x1c6>
 8008086:	6018      	str	r0, [r3, #0]
 8008088:	68e3      	ldr	r3, [r4, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60e3      	str	r3, [r4, #12]
 800808e:	2000      	movs	r0, #0
 8008090:	6923      	ldr	r3, [r4, #16]
 8008092:	1bed      	subs	r5, r5, r7
 8008094:	445d      	add	r5, fp
 8008096:	442b      	add	r3, r5
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	b007      	add	sp, #28
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	f04f 0b00 	mov.w	fp, #0
 80080a4:	e7ca      	b.n	800803c <_scanf_i+0x15c>
 80080a6:	07ca      	lsls	r2, r1, #31
 80080a8:	bf4c      	ite	mi
 80080aa:	8018      	strhmi	r0, [r3, #0]
 80080ac:	6018      	strpl	r0, [r3, #0]
 80080ae:	e7eb      	b.n	8008088 <_scanf_i+0x1a8>
 80080b0:	2001      	movs	r0, #1
 80080b2:	e7f2      	b.n	800809a <_scanf_i+0x1ba>
 80080b4:	08009050 	.word	0x08009050
 80080b8:	0800718d 	.word	0x0800718d
 80080bc:	0800836d 	.word	0x0800836d
 80080c0:	0800920e 	.word	0x0800920e

080080c4 <__sccl>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	780b      	ldrb	r3, [r1, #0]
 80080c8:	4604      	mov	r4, r0
 80080ca:	2b5e      	cmp	r3, #94	@ 0x5e
 80080cc:	bf0b      	itete	eq
 80080ce:	784b      	ldrbeq	r3, [r1, #1]
 80080d0:	1c4a      	addne	r2, r1, #1
 80080d2:	1c8a      	addeq	r2, r1, #2
 80080d4:	2100      	movne	r1, #0
 80080d6:	bf08      	it	eq
 80080d8:	2101      	moveq	r1, #1
 80080da:	3801      	subs	r0, #1
 80080dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80080e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80080e4:	42a8      	cmp	r0, r5
 80080e6:	d1fb      	bne.n	80080e0 <__sccl+0x1c>
 80080e8:	b90b      	cbnz	r3, 80080ee <__sccl+0x2a>
 80080ea:	1e50      	subs	r0, r2, #1
 80080ec:	bd70      	pop	{r4, r5, r6, pc}
 80080ee:	f081 0101 	eor.w	r1, r1, #1
 80080f2:	4610      	mov	r0, r2
 80080f4:	54e1      	strb	r1, [r4, r3]
 80080f6:	4602      	mov	r2, r0
 80080f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080fc:	2d2d      	cmp	r5, #45	@ 0x2d
 80080fe:	d005      	beq.n	800810c <__sccl+0x48>
 8008100:	2d5d      	cmp	r5, #93	@ 0x5d
 8008102:	d016      	beq.n	8008132 <__sccl+0x6e>
 8008104:	2d00      	cmp	r5, #0
 8008106:	d0f1      	beq.n	80080ec <__sccl+0x28>
 8008108:	462b      	mov	r3, r5
 800810a:	e7f2      	b.n	80080f2 <__sccl+0x2e>
 800810c:	7846      	ldrb	r6, [r0, #1]
 800810e:	2e5d      	cmp	r6, #93	@ 0x5d
 8008110:	d0fa      	beq.n	8008108 <__sccl+0x44>
 8008112:	42b3      	cmp	r3, r6
 8008114:	dcf8      	bgt.n	8008108 <__sccl+0x44>
 8008116:	461a      	mov	r2, r3
 8008118:	3002      	adds	r0, #2
 800811a:	3201      	adds	r2, #1
 800811c:	4296      	cmp	r6, r2
 800811e:	54a1      	strb	r1, [r4, r2]
 8008120:	dcfb      	bgt.n	800811a <__sccl+0x56>
 8008122:	1af2      	subs	r2, r6, r3
 8008124:	3a01      	subs	r2, #1
 8008126:	42b3      	cmp	r3, r6
 8008128:	bfa8      	it	ge
 800812a:	2200      	movge	r2, #0
 800812c:	1c5d      	adds	r5, r3, #1
 800812e:	18ab      	adds	r3, r5, r2
 8008130:	e7e1      	b.n	80080f6 <__sccl+0x32>
 8008132:	4610      	mov	r0, r2
 8008134:	e7da      	b.n	80080ec <__sccl+0x28>

08008136 <__submore>:
 8008136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800813a:	460c      	mov	r4, r1
 800813c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800813e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008142:	4299      	cmp	r1, r3
 8008144:	d11b      	bne.n	800817e <__submore+0x48>
 8008146:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800814a:	f7ff f92f 	bl	80073ac <_malloc_r>
 800814e:	b918      	cbnz	r0, 8008158 <__submore+0x22>
 8008150:	f04f 30ff 	mov.w	r0, #4294967295
 8008154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008158:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800815c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800815e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8008162:	6360      	str	r0, [r4, #52]	@ 0x34
 8008164:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8008168:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800816c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8008170:	7043      	strb	r3, [r0, #1]
 8008172:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8008176:	7003      	strb	r3, [r0, #0]
 8008178:	6020      	str	r0, [r4, #0]
 800817a:	2000      	movs	r0, #0
 800817c:	e7ea      	b.n	8008154 <__submore+0x1e>
 800817e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8008180:	0077      	lsls	r7, r6, #1
 8008182:	463a      	mov	r2, r7
 8008184:	f000 f856 	bl	8008234 <_realloc_r>
 8008188:	4605      	mov	r5, r0
 800818a:	2800      	cmp	r0, #0
 800818c:	d0e0      	beq.n	8008150 <__submore+0x1a>
 800818e:	eb00 0806 	add.w	r8, r0, r6
 8008192:	4601      	mov	r1, r0
 8008194:	4632      	mov	r2, r6
 8008196:	4640      	mov	r0, r8
 8008198:	f000 f83e 	bl	8008218 <memcpy>
 800819c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80081a0:	f8c4 8000 	str.w	r8, [r4]
 80081a4:	e7e9      	b.n	800817a <__submore+0x44>

080081a6 <memmove>:
 80081a6:	4288      	cmp	r0, r1
 80081a8:	b510      	push	{r4, lr}
 80081aa:	eb01 0402 	add.w	r4, r1, r2
 80081ae:	d902      	bls.n	80081b6 <memmove+0x10>
 80081b0:	4284      	cmp	r4, r0
 80081b2:	4623      	mov	r3, r4
 80081b4:	d807      	bhi.n	80081c6 <memmove+0x20>
 80081b6:	1e43      	subs	r3, r0, #1
 80081b8:	42a1      	cmp	r1, r4
 80081ba:	d008      	beq.n	80081ce <memmove+0x28>
 80081bc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081c0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081c4:	e7f8      	b.n	80081b8 <memmove+0x12>
 80081c6:	4601      	mov	r1, r0
 80081c8:	4402      	add	r2, r0
 80081ca:	428a      	cmp	r2, r1
 80081cc:	d100      	bne.n	80081d0 <memmove+0x2a>
 80081ce:	bd10      	pop	{r4, pc}
 80081d0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081d4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081d8:	e7f7      	b.n	80081ca <memmove+0x24>
	...

080081dc <_sbrk_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	2300      	movs	r3, #0
 80081e0:	4d05      	ldr	r5, [pc, #20]	@ (80081f8 <_sbrk_r+0x1c>)
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7fb fa2e 	bl	8003648 <_sbrk>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_sbrk_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_sbrk_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20000cec 	.word	0x20000cec

080081fc <memchr>:
 80081fc:	4603      	mov	r3, r0
 80081fe:	b510      	push	{r4, lr}
 8008200:	b2c9      	uxtb	r1, r1
 8008202:	4402      	add	r2, r0
 8008204:	4293      	cmp	r3, r2
 8008206:	4618      	mov	r0, r3
 8008208:	d101      	bne.n	800820e <memchr+0x12>
 800820a:	2000      	movs	r0, #0
 800820c:	e003      	b.n	8008216 <memchr+0x1a>
 800820e:	7804      	ldrb	r4, [r0, #0]
 8008210:	3301      	adds	r3, #1
 8008212:	428c      	cmp	r4, r1
 8008214:	d1f6      	bne.n	8008204 <memchr+0x8>
 8008216:	bd10      	pop	{r4, pc}

08008218 <memcpy>:
 8008218:	440a      	add	r2, r1
 800821a:	4291      	cmp	r1, r2
 800821c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008220:	d100      	bne.n	8008224 <memcpy+0xc>
 8008222:	4770      	bx	lr
 8008224:	b510      	push	{r4, lr}
 8008226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800822a:	4291      	cmp	r1, r2
 800822c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008230:	d1f9      	bne.n	8008226 <memcpy+0xe>
 8008232:	bd10      	pop	{r4, pc}

08008234 <_realloc_r>:
 8008234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008238:	4680      	mov	r8, r0
 800823a:	4615      	mov	r5, r2
 800823c:	460c      	mov	r4, r1
 800823e:	b921      	cbnz	r1, 800824a <_realloc_r+0x16>
 8008240:	4611      	mov	r1, r2
 8008242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	f7ff b8b1 	b.w	80073ac <_malloc_r>
 800824a:	b92a      	cbnz	r2, 8008258 <_realloc_r+0x24>
 800824c:	f7ff f844 	bl	80072d8 <_free_r>
 8008250:	2400      	movs	r4, #0
 8008252:	4620      	mov	r0, r4
 8008254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008258:	f000 f88a 	bl	8008370 <_malloc_usable_size_r>
 800825c:	4285      	cmp	r5, r0
 800825e:	4606      	mov	r6, r0
 8008260:	d802      	bhi.n	8008268 <_realloc_r+0x34>
 8008262:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008266:	d8f4      	bhi.n	8008252 <_realloc_r+0x1e>
 8008268:	4629      	mov	r1, r5
 800826a:	4640      	mov	r0, r8
 800826c:	f7ff f89e 	bl	80073ac <_malloc_r>
 8008270:	4607      	mov	r7, r0
 8008272:	2800      	cmp	r0, #0
 8008274:	d0ec      	beq.n	8008250 <_realloc_r+0x1c>
 8008276:	42b5      	cmp	r5, r6
 8008278:	462a      	mov	r2, r5
 800827a:	4621      	mov	r1, r4
 800827c:	bf28      	it	cs
 800827e:	4632      	movcs	r2, r6
 8008280:	f7ff ffca 	bl	8008218 <memcpy>
 8008284:	4621      	mov	r1, r4
 8008286:	4640      	mov	r0, r8
 8008288:	f7ff f826 	bl	80072d8 <_free_r>
 800828c:	463c      	mov	r4, r7
 800828e:	e7e0      	b.n	8008252 <_realloc_r+0x1e>

08008290 <_strtoul_l.constprop.0>:
 8008290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008294:	4686      	mov	lr, r0
 8008296:	460d      	mov	r5, r1
 8008298:	4e33      	ldr	r6, [pc, #204]	@ (8008368 <_strtoul_l.constprop.0+0xd8>)
 800829a:	4628      	mov	r0, r5
 800829c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082a0:	5d37      	ldrb	r7, [r6, r4]
 80082a2:	f017 0708 	ands.w	r7, r7, #8
 80082a6:	d1f8      	bne.n	800829a <_strtoul_l.constprop.0+0xa>
 80082a8:	2c2d      	cmp	r4, #45	@ 0x2d
 80082aa:	d12f      	bne.n	800830c <_strtoul_l.constprop.0+0x7c>
 80082ac:	2701      	movs	r7, #1
 80082ae:	782c      	ldrb	r4, [r5, #0]
 80082b0:	1c85      	adds	r5, r0, #2
 80082b2:	f033 0010 	bics.w	r0, r3, #16
 80082b6:	d109      	bne.n	80082cc <_strtoul_l.constprop.0+0x3c>
 80082b8:	2c30      	cmp	r4, #48	@ 0x30
 80082ba:	d12c      	bne.n	8008316 <_strtoul_l.constprop.0+0x86>
 80082bc:	7828      	ldrb	r0, [r5, #0]
 80082be:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80082c2:	2858      	cmp	r0, #88	@ 0x58
 80082c4:	d127      	bne.n	8008316 <_strtoul_l.constprop.0+0x86>
 80082c6:	2310      	movs	r3, #16
 80082c8:	786c      	ldrb	r4, [r5, #1]
 80082ca:	3502      	adds	r5, #2
 80082cc:	f04f 38ff 	mov.w	r8, #4294967295
 80082d0:	fbb8 f8f3 	udiv	r8, r8, r3
 80082d4:	2600      	movs	r6, #0
 80082d6:	fb03 f908 	mul.w	r9, r3, r8
 80082da:	4630      	mov	r0, r6
 80082dc:	ea6f 0909 	mvn.w	r9, r9
 80082e0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80082e4:	f1bc 0f09 	cmp.w	ip, #9
 80082e8:	d81c      	bhi.n	8008324 <_strtoul_l.constprop.0+0x94>
 80082ea:	4664      	mov	r4, ip
 80082ec:	42a3      	cmp	r3, r4
 80082ee:	dd2a      	ble.n	8008346 <_strtoul_l.constprop.0+0xb6>
 80082f0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80082f4:	d007      	beq.n	8008306 <_strtoul_l.constprop.0+0x76>
 80082f6:	4580      	cmp	r8, r0
 80082f8:	d322      	bcc.n	8008340 <_strtoul_l.constprop.0+0xb0>
 80082fa:	d101      	bne.n	8008300 <_strtoul_l.constprop.0+0x70>
 80082fc:	45a1      	cmp	r9, r4
 80082fe:	db1f      	blt.n	8008340 <_strtoul_l.constprop.0+0xb0>
 8008300:	2601      	movs	r6, #1
 8008302:	fb00 4003 	mla	r0, r0, r3, r4
 8008306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800830a:	e7e9      	b.n	80082e0 <_strtoul_l.constprop.0+0x50>
 800830c:	2c2b      	cmp	r4, #43	@ 0x2b
 800830e:	bf04      	itt	eq
 8008310:	782c      	ldrbeq	r4, [r5, #0]
 8008312:	1c85      	addeq	r5, r0, #2
 8008314:	e7cd      	b.n	80082b2 <_strtoul_l.constprop.0+0x22>
 8008316:	2b00      	cmp	r3, #0
 8008318:	d1d8      	bne.n	80082cc <_strtoul_l.constprop.0+0x3c>
 800831a:	2c30      	cmp	r4, #48	@ 0x30
 800831c:	bf0c      	ite	eq
 800831e:	2308      	moveq	r3, #8
 8008320:	230a      	movne	r3, #10
 8008322:	e7d3      	b.n	80082cc <_strtoul_l.constprop.0+0x3c>
 8008324:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008328:	f1bc 0f19 	cmp.w	ip, #25
 800832c:	d801      	bhi.n	8008332 <_strtoul_l.constprop.0+0xa2>
 800832e:	3c37      	subs	r4, #55	@ 0x37
 8008330:	e7dc      	b.n	80082ec <_strtoul_l.constprop.0+0x5c>
 8008332:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8008336:	f1bc 0f19 	cmp.w	ip, #25
 800833a:	d804      	bhi.n	8008346 <_strtoul_l.constprop.0+0xb6>
 800833c:	3c57      	subs	r4, #87	@ 0x57
 800833e:	e7d5      	b.n	80082ec <_strtoul_l.constprop.0+0x5c>
 8008340:	f04f 36ff 	mov.w	r6, #4294967295
 8008344:	e7df      	b.n	8008306 <_strtoul_l.constprop.0+0x76>
 8008346:	1c73      	adds	r3, r6, #1
 8008348:	d106      	bne.n	8008358 <_strtoul_l.constprop.0+0xc8>
 800834a:	2322      	movs	r3, #34	@ 0x22
 800834c:	4630      	mov	r0, r6
 800834e:	f8ce 3000 	str.w	r3, [lr]
 8008352:	b932      	cbnz	r2, 8008362 <_strtoul_l.constprop.0+0xd2>
 8008354:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008358:	b107      	cbz	r7, 800835c <_strtoul_l.constprop.0+0xcc>
 800835a:	4240      	negs	r0, r0
 800835c:	2a00      	cmp	r2, #0
 800835e:	d0f9      	beq.n	8008354 <_strtoul_l.constprop.0+0xc4>
 8008360:	b106      	cbz	r6, 8008364 <_strtoul_l.constprop.0+0xd4>
 8008362:	1e69      	subs	r1, r5, #1
 8008364:	6011      	str	r1, [r2, #0]
 8008366:	e7f5      	b.n	8008354 <_strtoul_l.constprop.0+0xc4>
 8008368:	080090cb 	.word	0x080090cb

0800836c <_strtoul_r>:
 800836c:	f7ff bf90 	b.w	8008290 <_strtoul_l.constprop.0>

08008370 <_malloc_usable_size_r>:
 8008370:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008374:	1f18      	subs	r0, r3, #4
 8008376:	2b00      	cmp	r3, #0
 8008378:	bfbc      	itt	lt
 800837a:	580b      	ldrlt	r3, [r1, r0]
 800837c:	18c0      	addlt	r0, r0, r3
 800837e:	4770      	bx	lr

08008380 <sinf>:
 8008380:	b507      	push	{r0, r1, r2, lr}
 8008382:	4a1b      	ldr	r2, [pc, #108]	@ (80083f0 <sinf+0x70>)
 8008384:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8008388:	4293      	cmp	r3, r2
 800838a:	4601      	mov	r1, r0
 800838c:	d806      	bhi.n	800839c <sinf+0x1c>
 800838e:	2200      	movs	r2, #0
 8008390:	2100      	movs	r1, #0
 8008392:	b003      	add	sp, #12
 8008394:	f85d eb04 	ldr.w	lr, [sp], #4
 8008398:	f000 b8ac 	b.w	80084f4 <__kernel_sinf>
 800839c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80083a0:	d304      	bcc.n	80083ac <sinf+0x2c>
 80083a2:	f7f8 fb09 	bl	80009b8 <__aeabi_fsub>
 80083a6:	b003      	add	sp, #12
 80083a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80083ac:	4669      	mov	r1, sp
 80083ae:	f000 f917 	bl	80085e0 <__ieee754_rem_pio2f>
 80083b2:	f000 0003 	and.w	r0, r0, #3
 80083b6:	2801      	cmp	r0, #1
 80083b8:	d008      	beq.n	80083cc <sinf+0x4c>
 80083ba:	2802      	cmp	r0, #2
 80083bc:	d00b      	beq.n	80083d6 <sinf+0x56>
 80083be:	b990      	cbnz	r0, 80083e6 <sinf+0x66>
 80083c0:	2201      	movs	r2, #1
 80083c2:	9901      	ldr	r1, [sp, #4]
 80083c4:	9800      	ldr	r0, [sp, #0]
 80083c6:	f000 f895 	bl	80084f4 <__kernel_sinf>
 80083ca:	e7ec      	b.n	80083a6 <sinf+0x26>
 80083cc:	9901      	ldr	r1, [sp, #4]
 80083ce:	9800      	ldr	r0, [sp, #0]
 80083d0:	f000 f810 	bl	80083f4 <__kernel_cosf>
 80083d4:	e7e7      	b.n	80083a6 <sinf+0x26>
 80083d6:	2201      	movs	r2, #1
 80083d8:	9901      	ldr	r1, [sp, #4]
 80083da:	9800      	ldr	r0, [sp, #0]
 80083dc:	f000 f88a 	bl	80084f4 <__kernel_sinf>
 80083e0:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 80083e4:	e7df      	b.n	80083a6 <sinf+0x26>
 80083e6:	9901      	ldr	r1, [sp, #4]
 80083e8:	9800      	ldr	r0, [sp, #0]
 80083ea:	f000 f803 	bl	80083f4 <__kernel_cosf>
 80083ee:	e7f7      	b.n	80083e0 <sinf+0x60>
 80083f0:	3f490fd8 	.word	0x3f490fd8

080083f4 <__kernel_cosf>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80083fc:	f1b5 5f48 	cmp.w	r5, #838860800	@ 0x32000000
 8008400:	4606      	mov	r6, r0
 8008402:	4688      	mov	r8, r1
 8008404:	d203      	bcs.n	800840e <__kernel_cosf+0x1a>
 8008406:	f7f8 fda7 	bl	8000f58 <__aeabi_f2iz>
 800840a:	2800      	cmp	r0, #0
 800840c:	d05c      	beq.n	80084c8 <__kernel_cosf+0xd4>
 800840e:	4631      	mov	r1, r6
 8008410:	4630      	mov	r0, r6
 8008412:	f7f8 fbdb 	bl	8000bcc <__aeabi_fmul>
 8008416:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800841a:	4604      	mov	r4, r0
 800841c:	f7f8 fbd6 	bl	8000bcc <__aeabi_fmul>
 8008420:	492b      	ldr	r1, [pc, #172]	@ (80084d0 <__kernel_cosf+0xdc>)
 8008422:	4607      	mov	r7, r0
 8008424:	4620      	mov	r0, r4
 8008426:	f7f8 fbd1 	bl	8000bcc <__aeabi_fmul>
 800842a:	492a      	ldr	r1, [pc, #168]	@ (80084d4 <__kernel_cosf+0xe0>)
 800842c:	f7f8 fac6 	bl	80009bc <__addsf3>
 8008430:	4621      	mov	r1, r4
 8008432:	f7f8 fbcb 	bl	8000bcc <__aeabi_fmul>
 8008436:	4928      	ldr	r1, [pc, #160]	@ (80084d8 <__kernel_cosf+0xe4>)
 8008438:	f7f8 fabe 	bl	80009b8 <__aeabi_fsub>
 800843c:	4621      	mov	r1, r4
 800843e:	f7f8 fbc5 	bl	8000bcc <__aeabi_fmul>
 8008442:	4926      	ldr	r1, [pc, #152]	@ (80084dc <__kernel_cosf+0xe8>)
 8008444:	f7f8 faba 	bl	80009bc <__addsf3>
 8008448:	4621      	mov	r1, r4
 800844a:	f7f8 fbbf 	bl	8000bcc <__aeabi_fmul>
 800844e:	4924      	ldr	r1, [pc, #144]	@ (80084e0 <__kernel_cosf+0xec>)
 8008450:	f7f8 fab2 	bl	80009b8 <__aeabi_fsub>
 8008454:	4621      	mov	r1, r4
 8008456:	f7f8 fbb9 	bl	8000bcc <__aeabi_fmul>
 800845a:	4922      	ldr	r1, [pc, #136]	@ (80084e4 <__kernel_cosf+0xf0>)
 800845c:	f7f8 faae 	bl	80009bc <__addsf3>
 8008460:	4621      	mov	r1, r4
 8008462:	f7f8 fbb3 	bl	8000bcc <__aeabi_fmul>
 8008466:	4621      	mov	r1, r4
 8008468:	f7f8 fbb0 	bl	8000bcc <__aeabi_fmul>
 800846c:	4641      	mov	r1, r8
 800846e:	4604      	mov	r4, r0
 8008470:	4630      	mov	r0, r6
 8008472:	f7f8 fbab 	bl	8000bcc <__aeabi_fmul>
 8008476:	4601      	mov	r1, r0
 8008478:	4620      	mov	r0, r4
 800847a:	f7f8 fa9d 	bl	80009b8 <__aeabi_fsub>
 800847e:	4b1a      	ldr	r3, [pc, #104]	@ (80084e8 <__kernel_cosf+0xf4>)
 8008480:	4604      	mov	r4, r0
 8008482:	429d      	cmp	r5, r3
 8008484:	d80a      	bhi.n	800849c <__kernel_cosf+0xa8>
 8008486:	4601      	mov	r1, r0
 8008488:	4638      	mov	r0, r7
 800848a:	f7f8 fa95 	bl	80009b8 <__aeabi_fsub>
 800848e:	4601      	mov	r1, r0
 8008490:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008494:	f7f8 fa90 	bl	80009b8 <__aeabi_fsub>
 8008498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800849c:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <__kernel_cosf+0xf8>)
 800849e:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80084a2:	429d      	cmp	r5, r3
 80084a4:	bf8c      	ite	hi
 80084a6:	4d12      	ldrhi	r5, [pc, #72]	@ (80084f0 <__kernel_cosf+0xfc>)
 80084a8:	f105 457f 	addls.w	r5, r5, #4278190080	@ 0xff000000
 80084ac:	4629      	mov	r1, r5
 80084ae:	f7f8 fa83 	bl	80009b8 <__aeabi_fsub>
 80084b2:	4629      	mov	r1, r5
 80084b4:	4606      	mov	r6, r0
 80084b6:	4638      	mov	r0, r7
 80084b8:	f7f8 fa7e 	bl	80009b8 <__aeabi_fsub>
 80084bc:	4621      	mov	r1, r4
 80084be:	f7f8 fa7b 	bl	80009b8 <__aeabi_fsub>
 80084c2:	4601      	mov	r1, r0
 80084c4:	4630      	mov	r0, r6
 80084c6:	e7e5      	b.n	8008494 <__kernel_cosf+0xa0>
 80084c8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80084cc:	e7e4      	b.n	8008498 <__kernel_cosf+0xa4>
 80084ce:	bf00      	nop
 80084d0:	ad47d74e 	.word	0xad47d74e
 80084d4:	310f74f6 	.word	0x310f74f6
 80084d8:	3493f27c 	.word	0x3493f27c
 80084dc:	37d00d01 	.word	0x37d00d01
 80084e0:	3ab60b61 	.word	0x3ab60b61
 80084e4:	3d2aaaab 	.word	0x3d2aaaab
 80084e8:	3e999999 	.word	0x3e999999
 80084ec:	3f480000 	.word	0x3f480000
 80084f0:	3e900000 	.word	0x3e900000

080084f4 <__kernel_sinf>:
 80084f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084f8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 80084fc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8008500:	4604      	mov	r4, r0
 8008502:	460f      	mov	r7, r1
 8008504:	4691      	mov	r9, r2
 8008506:	d203      	bcs.n	8008510 <__kernel_sinf+0x1c>
 8008508:	f7f8 fd26 	bl	8000f58 <__aeabi_f2iz>
 800850c:	2800      	cmp	r0, #0
 800850e:	d035      	beq.n	800857c <__kernel_sinf+0x88>
 8008510:	4621      	mov	r1, r4
 8008512:	4620      	mov	r0, r4
 8008514:	f7f8 fb5a 	bl	8000bcc <__aeabi_fmul>
 8008518:	4605      	mov	r5, r0
 800851a:	4601      	mov	r1, r0
 800851c:	4620      	mov	r0, r4
 800851e:	f7f8 fb55 	bl	8000bcc <__aeabi_fmul>
 8008522:	4929      	ldr	r1, [pc, #164]	@ (80085c8 <__kernel_sinf+0xd4>)
 8008524:	4606      	mov	r6, r0
 8008526:	4628      	mov	r0, r5
 8008528:	f7f8 fb50 	bl	8000bcc <__aeabi_fmul>
 800852c:	4927      	ldr	r1, [pc, #156]	@ (80085cc <__kernel_sinf+0xd8>)
 800852e:	f7f8 fa43 	bl	80009b8 <__aeabi_fsub>
 8008532:	4629      	mov	r1, r5
 8008534:	f7f8 fb4a 	bl	8000bcc <__aeabi_fmul>
 8008538:	4925      	ldr	r1, [pc, #148]	@ (80085d0 <__kernel_sinf+0xdc>)
 800853a:	f7f8 fa3f 	bl	80009bc <__addsf3>
 800853e:	4629      	mov	r1, r5
 8008540:	f7f8 fb44 	bl	8000bcc <__aeabi_fmul>
 8008544:	4923      	ldr	r1, [pc, #140]	@ (80085d4 <__kernel_sinf+0xe0>)
 8008546:	f7f8 fa37 	bl	80009b8 <__aeabi_fsub>
 800854a:	4629      	mov	r1, r5
 800854c:	f7f8 fb3e 	bl	8000bcc <__aeabi_fmul>
 8008550:	4921      	ldr	r1, [pc, #132]	@ (80085d8 <__kernel_sinf+0xe4>)
 8008552:	f7f8 fa33 	bl	80009bc <__addsf3>
 8008556:	4680      	mov	r8, r0
 8008558:	f1b9 0f00 	cmp.w	r9, #0
 800855c:	d111      	bne.n	8008582 <__kernel_sinf+0x8e>
 800855e:	4601      	mov	r1, r0
 8008560:	4628      	mov	r0, r5
 8008562:	f7f8 fb33 	bl	8000bcc <__aeabi_fmul>
 8008566:	491d      	ldr	r1, [pc, #116]	@ (80085dc <__kernel_sinf+0xe8>)
 8008568:	f7f8 fa26 	bl	80009b8 <__aeabi_fsub>
 800856c:	4631      	mov	r1, r6
 800856e:	f7f8 fb2d 	bl	8000bcc <__aeabi_fmul>
 8008572:	4601      	mov	r1, r0
 8008574:	4620      	mov	r0, r4
 8008576:	f7f8 fa21 	bl	80009bc <__addsf3>
 800857a:	4604      	mov	r4, r0
 800857c:	4620      	mov	r0, r4
 800857e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008582:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008586:	4638      	mov	r0, r7
 8008588:	f7f8 fb20 	bl	8000bcc <__aeabi_fmul>
 800858c:	4641      	mov	r1, r8
 800858e:	4681      	mov	r9, r0
 8008590:	4630      	mov	r0, r6
 8008592:	f7f8 fb1b 	bl	8000bcc <__aeabi_fmul>
 8008596:	4601      	mov	r1, r0
 8008598:	4648      	mov	r0, r9
 800859a:	f7f8 fa0d 	bl	80009b8 <__aeabi_fsub>
 800859e:	4629      	mov	r1, r5
 80085a0:	f7f8 fb14 	bl	8000bcc <__aeabi_fmul>
 80085a4:	4639      	mov	r1, r7
 80085a6:	f7f8 fa07 	bl	80009b8 <__aeabi_fsub>
 80085aa:	490c      	ldr	r1, [pc, #48]	@ (80085dc <__kernel_sinf+0xe8>)
 80085ac:	4605      	mov	r5, r0
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7f8 fb0c 	bl	8000bcc <__aeabi_fmul>
 80085b4:	4601      	mov	r1, r0
 80085b6:	4628      	mov	r0, r5
 80085b8:	f7f8 fa00 	bl	80009bc <__addsf3>
 80085bc:	4601      	mov	r1, r0
 80085be:	4620      	mov	r0, r4
 80085c0:	f7f8 f9fa 	bl	80009b8 <__aeabi_fsub>
 80085c4:	e7d9      	b.n	800857a <__kernel_sinf+0x86>
 80085c6:	bf00      	nop
 80085c8:	2f2ec9d3 	.word	0x2f2ec9d3
 80085cc:	32d72f34 	.word	0x32d72f34
 80085d0:	3638ef1b 	.word	0x3638ef1b
 80085d4:	39500d01 	.word	0x39500d01
 80085d8:	3c088889 	.word	0x3c088889
 80085dc:	3e2aaaab 	.word	0x3e2aaaab

080085e0 <__ieee754_rem_pio2f>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	4aa4      	ldr	r2, [pc, #656]	@ (8008878 <__ieee754_rem_pio2f+0x298>)
 80085e6:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80085ea:	4590      	cmp	r8, r2
 80085ec:	460c      	mov	r4, r1
 80085ee:	4682      	mov	sl, r0
 80085f0:	b087      	sub	sp, #28
 80085f2:	d804      	bhi.n	80085fe <__ieee754_rem_pio2f+0x1e>
 80085f4:	2300      	movs	r3, #0
 80085f6:	6008      	str	r0, [r1, #0]
 80085f8:	604b      	str	r3, [r1, #4]
 80085fa:	2500      	movs	r5, #0
 80085fc:	e01d      	b.n	800863a <__ieee754_rem_pio2f+0x5a>
 80085fe:	4a9f      	ldr	r2, [pc, #636]	@ (800887c <__ieee754_rem_pio2f+0x29c>)
 8008600:	4590      	cmp	r8, r2
 8008602:	d84f      	bhi.n	80086a4 <__ieee754_rem_pio2f+0xc4>
 8008604:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8008608:	2800      	cmp	r0, #0
 800860a:	499d      	ldr	r1, [pc, #628]	@ (8008880 <__ieee754_rem_pio2f+0x2a0>)
 800860c:	4f9d      	ldr	r7, [pc, #628]	@ (8008884 <__ieee754_rem_pio2f+0x2a4>)
 800860e:	f025 050f 	bic.w	r5, r5, #15
 8008612:	dd24      	ble.n	800865e <__ieee754_rem_pio2f+0x7e>
 8008614:	f7f8 f9d0 	bl	80009b8 <__aeabi_fsub>
 8008618:	42bd      	cmp	r5, r7
 800861a:	4606      	mov	r6, r0
 800861c:	d011      	beq.n	8008642 <__ieee754_rem_pio2f+0x62>
 800861e:	499a      	ldr	r1, [pc, #616]	@ (8008888 <__ieee754_rem_pio2f+0x2a8>)
 8008620:	f7f8 f9ca 	bl	80009b8 <__aeabi_fsub>
 8008624:	4601      	mov	r1, r0
 8008626:	4605      	mov	r5, r0
 8008628:	4630      	mov	r0, r6
 800862a:	f7f8 f9c5 	bl	80009b8 <__aeabi_fsub>
 800862e:	4996      	ldr	r1, [pc, #600]	@ (8008888 <__ieee754_rem_pio2f+0x2a8>)
 8008630:	f7f8 f9c2 	bl	80009b8 <__aeabi_fsub>
 8008634:	6025      	str	r5, [r4, #0]
 8008636:	2501      	movs	r5, #1
 8008638:	6060      	str	r0, [r4, #4]
 800863a:	4628      	mov	r0, r5
 800863c:	b007      	add	sp, #28
 800863e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008642:	4992      	ldr	r1, [pc, #584]	@ (800888c <__ieee754_rem_pio2f+0x2ac>)
 8008644:	f7f8 f9b8 	bl	80009b8 <__aeabi_fsub>
 8008648:	4991      	ldr	r1, [pc, #580]	@ (8008890 <__ieee754_rem_pio2f+0x2b0>)
 800864a:	4606      	mov	r6, r0
 800864c:	f7f8 f9b4 	bl	80009b8 <__aeabi_fsub>
 8008650:	4601      	mov	r1, r0
 8008652:	4605      	mov	r5, r0
 8008654:	4630      	mov	r0, r6
 8008656:	f7f8 f9af 	bl	80009b8 <__aeabi_fsub>
 800865a:	498d      	ldr	r1, [pc, #564]	@ (8008890 <__ieee754_rem_pio2f+0x2b0>)
 800865c:	e7e8      	b.n	8008630 <__ieee754_rem_pio2f+0x50>
 800865e:	f7f8 f9ad 	bl	80009bc <__addsf3>
 8008662:	42bd      	cmp	r5, r7
 8008664:	4606      	mov	r6, r0
 8008666:	d00f      	beq.n	8008688 <__ieee754_rem_pio2f+0xa8>
 8008668:	4987      	ldr	r1, [pc, #540]	@ (8008888 <__ieee754_rem_pio2f+0x2a8>)
 800866a:	f7f8 f9a7 	bl	80009bc <__addsf3>
 800866e:	4601      	mov	r1, r0
 8008670:	4605      	mov	r5, r0
 8008672:	4630      	mov	r0, r6
 8008674:	f7f8 f9a0 	bl	80009b8 <__aeabi_fsub>
 8008678:	4983      	ldr	r1, [pc, #524]	@ (8008888 <__ieee754_rem_pio2f+0x2a8>)
 800867a:	f7f8 f99f 	bl	80009bc <__addsf3>
 800867e:	6025      	str	r5, [r4, #0]
 8008680:	6060      	str	r0, [r4, #4]
 8008682:	f04f 35ff 	mov.w	r5, #4294967295
 8008686:	e7d8      	b.n	800863a <__ieee754_rem_pio2f+0x5a>
 8008688:	4980      	ldr	r1, [pc, #512]	@ (800888c <__ieee754_rem_pio2f+0x2ac>)
 800868a:	f7f8 f997 	bl	80009bc <__addsf3>
 800868e:	4980      	ldr	r1, [pc, #512]	@ (8008890 <__ieee754_rem_pio2f+0x2b0>)
 8008690:	4606      	mov	r6, r0
 8008692:	f7f8 f993 	bl	80009bc <__addsf3>
 8008696:	4601      	mov	r1, r0
 8008698:	4605      	mov	r5, r0
 800869a:	4630      	mov	r0, r6
 800869c:	f7f8 f98c 	bl	80009b8 <__aeabi_fsub>
 80086a0:	497b      	ldr	r1, [pc, #492]	@ (8008890 <__ieee754_rem_pio2f+0x2b0>)
 80086a2:	e7ea      	b.n	800867a <__ieee754_rem_pio2f+0x9a>
 80086a4:	4a7b      	ldr	r2, [pc, #492]	@ (8008894 <__ieee754_rem_pio2f+0x2b4>)
 80086a6:	4590      	cmp	r8, r2
 80086a8:	f200 8095 	bhi.w	80087d6 <__ieee754_rem_pio2f+0x1f6>
 80086ac:	f000 f8fe 	bl	80088ac <fabsf>
 80086b0:	4979      	ldr	r1, [pc, #484]	@ (8008898 <__ieee754_rem_pio2f+0x2b8>)
 80086b2:	4606      	mov	r6, r0
 80086b4:	f7f8 fa8a 	bl	8000bcc <__aeabi_fmul>
 80086b8:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80086bc:	f7f8 f97e 	bl	80009bc <__addsf3>
 80086c0:	f7f8 fc4a 	bl	8000f58 <__aeabi_f2iz>
 80086c4:	4605      	mov	r5, r0
 80086c6:	f7f8 fa2d 	bl	8000b24 <__aeabi_i2f>
 80086ca:	496d      	ldr	r1, [pc, #436]	@ (8008880 <__ieee754_rem_pio2f+0x2a0>)
 80086cc:	4681      	mov	r9, r0
 80086ce:	f7f8 fa7d 	bl	8000bcc <__aeabi_fmul>
 80086d2:	4601      	mov	r1, r0
 80086d4:	4630      	mov	r0, r6
 80086d6:	f7f8 f96f 	bl	80009b8 <__aeabi_fsub>
 80086da:	496b      	ldr	r1, [pc, #428]	@ (8008888 <__ieee754_rem_pio2f+0x2a8>)
 80086dc:	4607      	mov	r7, r0
 80086de:	4648      	mov	r0, r9
 80086e0:	f7f8 fa74 	bl	8000bcc <__aeabi_fmul>
 80086e4:	2d1f      	cmp	r5, #31
 80086e6:	4606      	mov	r6, r0
 80086e8:	dc0e      	bgt.n	8008708 <__ieee754_rem_pio2f+0x128>
 80086ea:	4a6c      	ldr	r2, [pc, #432]	@ (800889c <__ieee754_rem_pio2f+0x2bc>)
 80086ec:	1e69      	subs	r1, r5, #1
 80086ee:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 80086f2:	f02a 4300 	bic.w	r3, sl, #2147483648	@ 0x80000000
 80086f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d004      	beq.n	8008708 <__ieee754_rem_pio2f+0x128>
 80086fe:	4631      	mov	r1, r6
 8008700:	4638      	mov	r0, r7
 8008702:	f7f8 f959 	bl	80009b8 <__aeabi_fsub>
 8008706:	e00b      	b.n	8008720 <__ieee754_rem_pio2f+0x140>
 8008708:	4631      	mov	r1, r6
 800870a:	4638      	mov	r0, r7
 800870c:	f7f8 f954 	bl	80009b8 <__aeabi_fsub>
 8008710:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008714:	ebc3 53d8 	rsb	r3, r3, r8, lsr #23
 8008718:	2b08      	cmp	r3, #8
 800871a:	ea4f 5be8 	mov.w	fp, r8, asr #23
 800871e:	dc01      	bgt.n	8008724 <__ieee754_rem_pio2f+0x144>
 8008720:	6020      	str	r0, [r4, #0]
 8008722:	e026      	b.n	8008772 <__ieee754_rem_pio2f+0x192>
 8008724:	4959      	ldr	r1, [pc, #356]	@ (800888c <__ieee754_rem_pio2f+0x2ac>)
 8008726:	4648      	mov	r0, r9
 8008728:	f7f8 fa50 	bl	8000bcc <__aeabi_fmul>
 800872c:	4606      	mov	r6, r0
 800872e:	4601      	mov	r1, r0
 8008730:	4638      	mov	r0, r7
 8008732:	f7f8 f941 	bl	80009b8 <__aeabi_fsub>
 8008736:	4601      	mov	r1, r0
 8008738:	4680      	mov	r8, r0
 800873a:	4638      	mov	r0, r7
 800873c:	f7f8 f93c 	bl	80009b8 <__aeabi_fsub>
 8008740:	4631      	mov	r1, r6
 8008742:	f7f8 f939 	bl	80009b8 <__aeabi_fsub>
 8008746:	4606      	mov	r6, r0
 8008748:	4951      	ldr	r1, [pc, #324]	@ (8008890 <__ieee754_rem_pio2f+0x2b0>)
 800874a:	4648      	mov	r0, r9
 800874c:	f7f8 fa3e 	bl	8000bcc <__aeabi_fmul>
 8008750:	4631      	mov	r1, r6
 8008752:	f7f8 f931 	bl	80009b8 <__aeabi_fsub>
 8008756:	4601      	mov	r1, r0
 8008758:	4606      	mov	r6, r0
 800875a:	4640      	mov	r0, r8
 800875c:	f7f8 f92c 	bl	80009b8 <__aeabi_fsub>
 8008760:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8008764:	ebab 0b03 	sub.w	fp, fp, r3
 8008768:	f1bb 0f19 	cmp.w	fp, #25
 800876c:	dc18      	bgt.n	80087a0 <__ieee754_rem_pio2f+0x1c0>
 800876e:	4647      	mov	r7, r8
 8008770:	6020      	str	r0, [r4, #0]
 8008772:	f8d4 8000 	ldr.w	r8, [r4]
 8008776:	4638      	mov	r0, r7
 8008778:	4641      	mov	r1, r8
 800877a:	f7f8 f91d 	bl	80009b8 <__aeabi_fsub>
 800877e:	4631      	mov	r1, r6
 8008780:	f7f8 f91a 	bl	80009b8 <__aeabi_fsub>
 8008784:	f1ba 0f00 	cmp.w	sl, #0
 8008788:	6060      	str	r0, [r4, #4]
 800878a:	f6bf af56 	bge.w	800863a <__ieee754_rem_pio2f+0x5a>
 800878e:	f108 4800 	add.w	r8, r8, #2147483648	@ 0x80000000
 8008792:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008796:	f8c4 8000 	str.w	r8, [r4]
 800879a:	6060      	str	r0, [r4, #4]
 800879c:	426d      	negs	r5, r5
 800879e:	e74c      	b.n	800863a <__ieee754_rem_pio2f+0x5a>
 80087a0:	493f      	ldr	r1, [pc, #252]	@ (80088a0 <__ieee754_rem_pio2f+0x2c0>)
 80087a2:	4648      	mov	r0, r9
 80087a4:	f7f8 fa12 	bl	8000bcc <__aeabi_fmul>
 80087a8:	4606      	mov	r6, r0
 80087aa:	4601      	mov	r1, r0
 80087ac:	4640      	mov	r0, r8
 80087ae:	f7f8 f903 	bl	80009b8 <__aeabi_fsub>
 80087b2:	4601      	mov	r1, r0
 80087b4:	4607      	mov	r7, r0
 80087b6:	4640      	mov	r0, r8
 80087b8:	f7f8 f8fe 	bl	80009b8 <__aeabi_fsub>
 80087bc:	4631      	mov	r1, r6
 80087be:	f7f8 f8fb 	bl	80009b8 <__aeabi_fsub>
 80087c2:	4606      	mov	r6, r0
 80087c4:	4937      	ldr	r1, [pc, #220]	@ (80088a4 <__ieee754_rem_pio2f+0x2c4>)
 80087c6:	4648      	mov	r0, r9
 80087c8:	f7f8 fa00 	bl	8000bcc <__aeabi_fmul>
 80087cc:	4631      	mov	r1, r6
 80087ce:	f7f8 f8f3 	bl	80009b8 <__aeabi_fsub>
 80087d2:	4606      	mov	r6, r0
 80087d4:	e793      	b.n	80086fe <__ieee754_rem_pio2f+0x11e>
 80087d6:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80087da:	d305      	bcc.n	80087e8 <__ieee754_rem_pio2f+0x208>
 80087dc:	4601      	mov	r1, r0
 80087de:	f7f8 f8eb 	bl	80009b8 <__aeabi_fsub>
 80087e2:	6060      	str	r0, [r4, #4]
 80087e4:	6020      	str	r0, [r4, #0]
 80087e6:	e708      	b.n	80085fa <__ieee754_rem_pio2f+0x1a>
 80087e8:	ea4f 56e8 	mov.w	r6, r8, asr #23
 80087ec:	3e86      	subs	r6, #134	@ 0x86
 80087ee:	eba8 58c6 	sub.w	r8, r8, r6, lsl #23
 80087f2:	4640      	mov	r0, r8
 80087f4:	f7f8 fbb0 	bl	8000f58 <__aeabi_f2iz>
 80087f8:	f7f8 f994 	bl	8000b24 <__aeabi_i2f>
 80087fc:	4601      	mov	r1, r0
 80087fe:	9003      	str	r0, [sp, #12]
 8008800:	4640      	mov	r0, r8
 8008802:	f7f8 f8d9 	bl	80009b8 <__aeabi_fsub>
 8008806:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 800880a:	f7f8 f9df 	bl	8000bcc <__aeabi_fmul>
 800880e:	4607      	mov	r7, r0
 8008810:	f7f8 fba2 	bl	8000f58 <__aeabi_f2iz>
 8008814:	f7f8 f986 	bl	8000b24 <__aeabi_i2f>
 8008818:	4601      	mov	r1, r0
 800881a:	9004      	str	r0, [sp, #16]
 800881c:	4605      	mov	r5, r0
 800881e:	4638      	mov	r0, r7
 8008820:	f7f8 f8ca 	bl	80009b8 <__aeabi_fsub>
 8008824:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008828:	f7f8 f9d0 	bl	8000bcc <__aeabi_fmul>
 800882c:	2100      	movs	r1, #0
 800882e:	9005      	str	r0, [sp, #20]
 8008830:	f7f8 fb60 	bl	8000ef4 <__aeabi_fcmpeq>
 8008834:	b1f0      	cbz	r0, 8008874 <__ieee754_rem_pio2f+0x294>
 8008836:	2100      	movs	r1, #0
 8008838:	4628      	mov	r0, r5
 800883a:	f7f8 fb5b 	bl	8000ef4 <__aeabi_fcmpeq>
 800883e:	2800      	cmp	r0, #0
 8008840:	bf14      	ite	ne
 8008842:	2301      	movne	r3, #1
 8008844:	2302      	moveq	r3, #2
 8008846:	4a18      	ldr	r2, [pc, #96]	@ (80088a8 <__ieee754_rem_pio2f+0x2c8>)
 8008848:	4621      	mov	r1, r4
 800884a:	9201      	str	r2, [sp, #4]
 800884c:	2202      	movs	r2, #2
 800884e:	a803      	add	r0, sp, #12
 8008850:	9200      	str	r2, [sp, #0]
 8008852:	4632      	mov	r2, r6
 8008854:	f000 f82e 	bl	80088b4 <__kernel_rem_pio2f>
 8008858:	f1ba 0f00 	cmp.w	sl, #0
 800885c:	4605      	mov	r5, r0
 800885e:	f6bf aeec 	bge.w	800863a <__ieee754_rem_pio2f+0x5a>
 8008862:	6823      	ldr	r3, [r4, #0]
 8008864:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	6863      	ldr	r3, [r4, #4]
 800886c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	e793      	b.n	800879c <__ieee754_rem_pio2f+0x1bc>
 8008874:	2303      	movs	r3, #3
 8008876:	e7e6      	b.n	8008846 <__ieee754_rem_pio2f+0x266>
 8008878:	3f490fd8 	.word	0x3f490fd8
 800887c:	4016cbe3 	.word	0x4016cbe3
 8008880:	3fc90f80 	.word	0x3fc90f80
 8008884:	3fc90fd0 	.word	0x3fc90fd0
 8008888:	37354443 	.word	0x37354443
 800888c:	37354400 	.word	0x37354400
 8008890:	2e85a308 	.word	0x2e85a308
 8008894:	43490f80 	.word	0x43490f80
 8008898:	3f22f984 	.word	0x3f22f984
 800889c:	0800921c 	.word	0x0800921c
 80088a0:	2e85a300 	.word	0x2e85a300
 80088a4:	248d3132 	.word	0x248d3132
 80088a8:	0800929c 	.word	0x0800929c

080088ac <fabsf>:
 80088ac:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80088b0:	4770      	bx	lr
	...

080088b4 <__kernel_rem_pio2f>:
 80088b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b8:	b0db      	sub	sp, #364	@ 0x16c
 80088ba:	9202      	str	r2, [sp, #8]
 80088bc:	9304      	str	r3, [sp, #16]
 80088be:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80088c0:	4bad      	ldr	r3, [pc, #692]	@ (8008b78 <__kernel_rem_pio2f+0x2c4>)
 80088c2:	9005      	str	r0, [sp, #20]
 80088c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c8:	9100      	str	r1, [sp, #0]
 80088ca:	9301      	str	r3, [sp, #4]
 80088cc:	9b04      	ldr	r3, [sp, #16]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	9b02      	ldr	r3, [sp, #8]
 80088d4:	1d1a      	adds	r2, r3, #4
 80088d6:	f2c0 8099 	blt.w	8008a0c <__kernel_rem_pio2f+0x158>
 80088da:	1edc      	subs	r4, r3, #3
 80088dc:	bf48      	it	mi
 80088de:	1d1c      	addmi	r4, r3, #4
 80088e0:	10e4      	asrs	r4, r4, #3
 80088e2:	2500      	movs	r5, #0
 80088e4:	f04f 0b00 	mov.w	fp, #0
 80088e8:	1c67      	adds	r7, r4, #1
 80088ea:	00fb      	lsls	r3, r7, #3
 80088ec:	9306      	str	r3, [sp, #24]
 80088ee:	9b02      	ldr	r3, [sp, #8]
 80088f0:	9a03      	ldr	r2, [sp, #12]
 80088f2:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 80088f6:	9b01      	ldr	r3, [sp, #4]
 80088f8:	eba4 0802 	sub.w	r8, r4, r2
 80088fc:	eb03 0902 	add.w	r9, r3, r2
 8008900:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8008902:	ae1e      	add	r6, sp, #120	@ 0x78
 8008904:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8008908:	454d      	cmp	r5, r9
 800890a:	f340 8081 	ble.w	8008a10 <__kernel_rem_pio2f+0x15c>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	ab1e      	add	r3, sp, #120	@ 0x78
 8008912:	eb03 0582 	add.w	r5, r3, r2, lsl #2
 8008916:	f04f 0900 	mov.w	r9, #0
 800891a:	2300      	movs	r3, #0
 800891c:	f50d 7b8c 	add.w	fp, sp, #280	@ 0x118
 8008920:	9a01      	ldr	r2, [sp, #4]
 8008922:	4591      	cmp	r9, r2
 8008924:	f340 809c 	ble.w	8008a60 <__kernel_rem_pio2f+0x1ac>
 8008928:	4613      	mov	r3, r2
 800892a:	aa0a      	add	r2, sp, #40	@ 0x28
 800892c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008930:	9308      	str	r3, [sp, #32]
 8008932:	9b65      	ldr	r3, [sp, #404]	@ 0x194
 8008934:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8008938:	9c01      	ldr	r4, [sp, #4]
 800893a:	9307      	str	r3, [sp, #28]
 800893c:	f10d 0828 	add.w	r8, sp, #40	@ 0x28
 8008940:	4646      	mov	r6, r8
 8008942:	4625      	mov	r5, r4
 8008944:	f04f 4987 	mov.w	r9, #1132462080	@ 0x43800000
 8008948:	ab5a      	add	r3, sp, #360	@ 0x168
 800894a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800894e:	f853 bc50 	ldr.w	fp, [r3, #-80]
 8008952:	f50d 7a8c 	add.w	sl, sp, #280	@ 0x118
 8008956:	2d00      	cmp	r5, #0
 8008958:	f300 8087 	bgt.w	8008a6a <__kernel_rem_pio2f+0x1b6>
 800895c:	4639      	mov	r1, r7
 800895e:	4658      	mov	r0, fp
 8008960:	f000 fa48 	bl	8008df4 <scalbnf>
 8008964:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8008968:	4605      	mov	r5, r0
 800896a:	f7f8 f92f 	bl	8000bcc <__aeabi_fmul>
 800896e:	f000 fa8d 	bl	8008e8c <floorf>
 8008972:	f04f 4182 	mov.w	r1, #1090519040	@ 0x41000000
 8008976:	f7f8 f929 	bl	8000bcc <__aeabi_fmul>
 800897a:	4601      	mov	r1, r0
 800897c:	4628      	mov	r0, r5
 800897e:	f7f8 f81b 	bl	80009b8 <__aeabi_fsub>
 8008982:	4605      	mov	r5, r0
 8008984:	f7f8 fae8 	bl	8000f58 <__aeabi_f2iz>
 8008988:	4606      	mov	r6, r0
 800898a:	f7f8 f8cb 	bl	8000b24 <__aeabi_i2f>
 800898e:	4601      	mov	r1, r0
 8008990:	4628      	mov	r0, r5
 8008992:	f7f8 f811 	bl	80009b8 <__aeabi_fsub>
 8008996:	2f00      	cmp	r7, #0
 8008998:	4681      	mov	r9, r0
 800899a:	f340 8083 	ble.w	8008aa4 <__kernel_rem_pio2f+0x1f0>
 800899e:	1e62      	subs	r2, r4, #1
 80089a0:	ab0a      	add	r3, sp, #40	@ 0x28
 80089a2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80089a6:	f1c7 0108 	rsb	r1, r7, #8
 80089aa:	fa45 f301 	asr.w	r3, r5, r1
 80089ae:	441e      	add	r6, r3
 80089b0:	408b      	lsls	r3, r1
 80089b2:	1aed      	subs	r5, r5, r3
 80089b4:	ab0a      	add	r3, sp, #40	@ 0x28
 80089b6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80089ba:	f1c7 0307 	rsb	r3, r7, #7
 80089be:	411d      	asrs	r5, r3
 80089c0:	2d00      	cmp	r5, #0
 80089c2:	dd7c      	ble.n	8008abe <__kernel_rem_pio2f+0x20a>
 80089c4:	2200      	movs	r2, #0
 80089c6:	4692      	mov	sl, r2
 80089c8:	3601      	adds	r6, #1
 80089ca:	4294      	cmp	r4, r2
 80089cc:	f300 80ac 	bgt.w	8008b28 <__kernel_rem_pio2f+0x274>
 80089d0:	2f00      	cmp	r7, #0
 80089d2:	dd05      	ble.n	80089e0 <__kernel_rem_pio2f+0x12c>
 80089d4:	2f01      	cmp	r7, #1
 80089d6:	f000 80b8 	beq.w	8008b4a <__kernel_rem_pio2f+0x296>
 80089da:	2f02      	cmp	r7, #2
 80089dc:	f000 80bf 	beq.w	8008b5e <__kernel_rem_pio2f+0x2aa>
 80089e0:	2d02      	cmp	r5, #2
 80089e2:	d16c      	bne.n	8008abe <__kernel_rem_pio2f+0x20a>
 80089e4:	4649      	mov	r1, r9
 80089e6:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80089ea:	f7f7 ffe5 	bl	80009b8 <__aeabi_fsub>
 80089ee:	4681      	mov	r9, r0
 80089f0:	f1ba 0f00 	cmp.w	sl, #0
 80089f4:	d063      	beq.n	8008abe <__kernel_rem_pio2f+0x20a>
 80089f6:	4639      	mov	r1, r7
 80089f8:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80089fc:	f000 f9fa 	bl	8008df4 <scalbnf>
 8008a00:	4601      	mov	r1, r0
 8008a02:	4648      	mov	r0, r9
 8008a04:	f7f7 ffd8 	bl	80009b8 <__aeabi_fsub>
 8008a08:	4681      	mov	r9, r0
 8008a0a:	e058      	b.n	8008abe <__kernel_rem_pio2f+0x20a>
 8008a0c:	2400      	movs	r4, #0
 8008a0e:	e768      	b.n	80088e2 <__kernel_rem_pio2f+0x2e>
 8008a10:	eb18 0f05 	cmn.w	r8, r5
 8008a14:	d407      	bmi.n	8008a26 <__kernel_rem_pio2f+0x172>
 8008a16:	f85a 0025 	ldr.w	r0, [sl, r5, lsl #2]
 8008a1a:	f7f8 f883 	bl	8000b24 <__aeabi_i2f>
 8008a1e:	f846 0b04 	str.w	r0, [r6], #4
 8008a22:	3501      	adds	r5, #1
 8008a24:	e770      	b.n	8008908 <__kernel_rem_pio2f+0x54>
 8008a26:	4658      	mov	r0, fp
 8008a28:	e7f9      	b.n	8008a1e <__kernel_rem_pio2f+0x16a>
 8008a2a:	9307      	str	r3, [sp, #28]
 8008a2c:	9b05      	ldr	r3, [sp, #20]
 8008a2e:	f8da 1000 	ldr.w	r1, [sl]
 8008a32:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008a36:	f7f8 f8c9 	bl	8000bcc <__aeabi_fmul>
 8008a3a:	4601      	mov	r1, r0
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7f7 ffbd 	bl	80009bc <__addsf3>
 8008a42:	4606      	mov	r6, r0
 8008a44:	9b07      	ldr	r3, [sp, #28]
 8008a46:	f108 0801 	add.w	r8, r8, #1
 8008a4a:	9a03      	ldr	r2, [sp, #12]
 8008a4c:	f1aa 0a04 	sub.w	sl, sl, #4
 8008a50:	4590      	cmp	r8, r2
 8008a52:	ddea      	ble.n	8008a2a <__kernel_rem_pio2f+0x176>
 8008a54:	f84b 6b04 	str.w	r6, [fp], #4
 8008a58:	f109 0901 	add.w	r9, r9, #1
 8008a5c:	3504      	adds	r5, #4
 8008a5e:	e75f      	b.n	8008920 <__kernel_rem_pio2f+0x6c>
 8008a60:	46aa      	mov	sl, r5
 8008a62:	461e      	mov	r6, r3
 8008a64:	f04f 0800 	mov.w	r8, #0
 8008a68:	e7ef      	b.n	8008a4a <__kernel_rem_pio2f+0x196>
 8008a6a:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8008a6e:	4658      	mov	r0, fp
 8008a70:	f7f8 f8ac 	bl	8000bcc <__aeabi_fmul>
 8008a74:	f7f8 fa70 	bl	8000f58 <__aeabi_f2iz>
 8008a78:	f7f8 f854 	bl	8000b24 <__aeabi_i2f>
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008a80:	f7f8 f8a4 	bl	8000bcc <__aeabi_fmul>
 8008a84:	4601      	mov	r1, r0
 8008a86:	4658      	mov	r0, fp
 8008a88:	f7f7 ff96 	bl	80009b8 <__aeabi_fsub>
 8008a8c:	f7f8 fa64 	bl	8000f58 <__aeabi_f2iz>
 8008a90:	3d01      	subs	r5, #1
 8008a92:	f846 0b04 	str.w	r0, [r6], #4
 8008a96:	f85a 1025 	ldr.w	r1, [sl, r5, lsl #2]
 8008a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a9c:	f7f7 ff8e 	bl	80009bc <__addsf3>
 8008aa0:	4683      	mov	fp, r0
 8008aa2:	e758      	b.n	8008956 <__kernel_rem_pio2f+0xa2>
 8008aa4:	d105      	bne.n	8008ab2 <__kernel_rem_pio2f+0x1fe>
 8008aa6:	1e63      	subs	r3, r4, #1
 8008aa8:	aa0a      	add	r2, sp, #40	@ 0x28
 8008aaa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 8008aae:	11ed      	asrs	r5, r5, #7
 8008ab0:	e786      	b.n	80089c0 <__kernel_rem_pio2f+0x10c>
 8008ab2:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8008ab6:	f7f8 fa3b 	bl	8000f30 <__aeabi_fcmpge>
 8008aba:	4605      	mov	r5, r0
 8008abc:	bb90      	cbnz	r0, 8008b24 <__kernel_rem_pio2f+0x270>
 8008abe:	2100      	movs	r1, #0
 8008ac0:	4648      	mov	r0, r9
 8008ac2:	f7f8 fa17 	bl	8000ef4 <__aeabi_fcmpeq>
 8008ac6:	2800      	cmp	r0, #0
 8008ac8:	f000 8090 	beq.w	8008bec <__kernel_rem_pio2f+0x338>
 8008acc:	2200      	movs	r2, #0
 8008ace:	1e63      	subs	r3, r4, #1
 8008ad0:	9901      	ldr	r1, [sp, #4]
 8008ad2:	428b      	cmp	r3, r1
 8008ad4:	da4a      	bge.n	8008b6c <__kernel_rem_pio2f+0x2b8>
 8008ad6:	2a00      	cmp	r2, #0
 8008ad8:	d076      	beq.n	8008bc8 <__kernel_rem_pio2f+0x314>
 8008ada:	3c01      	subs	r4, #1
 8008adc:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ade:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008ae2:	3f08      	subs	r7, #8
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d0f8      	beq.n	8008ada <__kernel_rem_pio2f+0x226>
 8008ae8:	4639      	mov	r1, r7
 8008aea:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8008aee:	f000 f981 	bl	8008df4 <scalbnf>
 8008af2:	46a2      	mov	sl, r4
 8008af4:	4607      	mov	r7, r0
 8008af6:	f04f 596e 	mov.w	r9, #998244352	@ 0x3b800000
 8008afa:	f50d 788c 	add.w	r8, sp, #280	@ 0x118
 8008afe:	f1ba 0f00 	cmp.w	sl, #0
 8008b02:	f280 80a1 	bge.w	8008c48 <__kernel_rem_pio2f+0x394>
 8008b06:	4627      	mov	r7, r4
 8008b08:	2200      	movs	r2, #0
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	f2c0 80cb 	blt.w	8008ca6 <__kernel_rem_pio2f+0x3f2>
 8008b10:	a946      	add	r1, sp, #280	@ 0x118
 8008b12:	4690      	mov	r8, r2
 8008b14:	f04f 0a00 	mov.w	sl, #0
 8008b18:	4b18      	ldr	r3, [pc, #96]	@ (8008b7c <__kernel_rem_pio2f+0x2c8>)
 8008b1a:	eb01 0b87 	add.w	fp, r1, r7, lsl #2
 8008b1e:	eba4 0907 	sub.w	r9, r4, r7
 8008b22:	e0b4      	b.n	8008c8e <__kernel_rem_pio2f+0x3da>
 8008b24:	2502      	movs	r5, #2
 8008b26:	e74d      	b.n	80089c4 <__kernel_rem_pio2f+0x110>
 8008b28:	f858 3b04 	ldr.w	r3, [r8], #4
 8008b2c:	f1ba 0f00 	cmp.w	sl, #0
 8008b30:	d108      	bne.n	8008b44 <__kernel_rem_pio2f+0x290>
 8008b32:	b123      	cbz	r3, 8008b3e <__kernel_rem_pio2f+0x28a>
 8008b34:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008b38:	f848 3c04 	str.w	r3, [r8, #-4]
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	469a      	mov	sl, r3
 8008b40:	3201      	adds	r2, #1
 8008b42:	e742      	b.n	80089ca <__kernel_rem_pio2f+0x116>
 8008b44:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8008b48:	e7f6      	b.n	8008b38 <__kernel_rem_pio2f+0x284>
 8008b4a:	1e62      	subs	r2, r4, #1
 8008b4c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b56:	a90a      	add	r1, sp, #40	@ 0x28
 8008b58:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008b5c:	e740      	b.n	80089e0 <__kernel_rem_pio2f+0x12c>
 8008b5e:	1e62      	subs	r2, r4, #1
 8008b60:	ab0a      	add	r3, sp, #40	@ 0x28
 8008b62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008b6a:	e7f4      	b.n	8008b56 <__kernel_rem_pio2f+0x2a2>
 8008b6c:	a90a      	add	r1, sp, #40	@ 0x28
 8008b6e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008b72:	3b01      	subs	r3, #1
 8008b74:	430a      	orrs	r2, r1
 8008b76:	e7ab      	b.n	8008ad0 <__kernel_rem_pio2f+0x21c>
 8008b78:	080095e0 	.word	0x080095e0
 8008b7c:	080095b4 	.word	0x080095b4
 8008b80:	3301      	adds	r3, #1
 8008b82:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008b86:	2900      	cmp	r1, #0
 8008b88:	d0fa      	beq.n	8008b80 <__kernel_rem_pio2f+0x2cc>
 8008b8a:	9a04      	ldr	r2, [sp, #16]
 8008b8c:	a91e      	add	r1, sp, #120	@ 0x78
 8008b8e:	18a2      	adds	r2, r4, r2
 8008b90:	1c66      	adds	r6, r4, #1
 8008b92:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8008b96:	441c      	add	r4, r3
 8008b98:	f50d 798c 	add.w	r9, sp, #280	@ 0x118
 8008b9c:	42b4      	cmp	r4, r6
 8008b9e:	f6ff aecd 	blt.w	800893c <__kernel_rem_pio2f+0x88>
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	46ab      	mov	fp, r5
 8008ba6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008baa:	f7f7 ffbb 	bl	8000b24 <__aeabi_i2f>
 8008bae:	f04f 0a00 	mov.w	sl, #0
 8008bb2:	f04f 0800 	mov.w	r8, #0
 8008bb6:	6028      	str	r0, [r5, #0]
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	459a      	cmp	sl, r3
 8008bbc:	dd07      	ble.n	8008bce <__kernel_rem_pio2f+0x31a>
 8008bbe:	f849 8026 	str.w	r8, [r9, r6, lsl #2]
 8008bc2:	3504      	adds	r5, #4
 8008bc4:	3601      	adds	r6, #1
 8008bc6:	e7e9      	b.n	8008b9c <__kernel_rem_pio2f+0x2e8>
 8008bc8:	2301      	movs	r3, #1
 8008bca:	9a08      	ldr	r2, [sp, #32]
 8008bcc:	e7d9      	b.n	8008b82 <__kernel_rem_pio2f+0x2ce>
 8008bce:	9b05      	ldr	r3, [sp, #20]
 8008bd0:	f85b 0904 	ldr.w	r0, [fp], #-4
 8008bd4:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8008bd8:	f7f7 fff8 	bl	8000bcc <__aeabi_fmul>
 8008bdc:	4601      	mov	r1, r0
 8008bde:	4640      	mov	r0, r8
 8008be0:	f7f7 feec 	bl	80009bc <__addsf3>
 8008be4:	f10a 0a01 	add.w	sl, sl, #1
 8008be8:	4680      	mov	r8, r0
 8008bea:	e7e5      	b.n	8008bb8 <__kernel_rem_pio2f+0x304>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	9a02      	ldr	r2, [sp, #8]
 8008bf0:	4648      	mov	r0, r9
 8008bf2:	1a99      	subs	r1, r3, r2
 8008bf4:	f000 f8fe 	bl	8008df4 <scalbnf>
 8008bf8:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	f7f8 f997 	bl	8000f30 <__aeabi_fcmpge>
 8008c02:	b1f8      	cbz	r0, 8008c44 <__kernel_rem_pio2f+0x390>
 8008c04:	f04f 516e 	mov.w	r1, #998244352	@ 0x3b800000
 8008c08:	4640      	mov	r0, r8
 8008c0a:	f7f7 ffdf 	bl	8000bcc <__aeabi_fmul>
 8008c0e:	f7f8 f9a3 	bl	8000f58 <__aeabi_f2iz>
 8008c12:	f7f7 ff87 	bl	8000b24 <__aeabi_i2f>
 8008c16:	f04f 4187 	mov.w	r1, #1132462080	@ 0x43800000
 8008c1a:	4681      	mov	r9, r0
 8008c1c:	f7f7 ffd6 	bl	8000bcc <__aeabi_fmul>
 8008c20:	4601      	mov	r1, r0
 8008c22:	4640      	mov	r0, r8
 8008c24:	f7f7 fec8 	bl	80009b8 <__aeabi_fsub>
 8008c28:	f7f8 f996 	bl	8000f58 <__aeabi_f2iz>
 8008c2c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c32:	4648      	mov	r0, r9
 8008c34:	3401      	adds	r4, #1
 8008c36:	3708      	adds	r7, #8
 8008c38:	f7f8 f98e 	bl	8000f58 <__aeabi_f2iz>
 8008c3c:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008c42:	e751      	b.n	8008ae8 <__kernel_rem_pio2f+0x234>
 8008c44:	4640      	mov	r0, r8
 8008c46:	e7f7      	b.n	8008c38 <__kernel_rem_pio2f+0x384>
 8008c48:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c4a:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8008c4e:	f7f7 ff69 	bl	8000b24 <__aeabi_i2f>
 8008c52:	4639      	mov	r1, r7
 8008c54:	f7f7 ffba 	bl	8000bcc <__aeabi_fmul>
 8008c58:	4649      	mov	r1, r9
 8008c5a:	f848 002a 	str.w	r0, [r8, sl, lsl #2]
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7f7 ffb4 	bl	8000bcc <__aeabi_fmul>
 8008c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c68:	4607      	mov	r7, r0
 8008c6a:	e748      	b.n	8008afe <__kernel_rem_pio2f+0x24a>
 8008c6c:	f853 0b04 	ldr.w	r0, [r3], #4
 8008c70:	f85b 1b04 	ldr.w	r1, [fp], #4
 8008c74:	9203      	str	r2, [sp, #12]
 8008c76:	9302      	str	r3, [sp, #8]
 8008c78:	f7f7 ffa8 	bl	8000bcc <__aeabi_fmul>
 8008c7c:	4601      	mov	r1, r0
 8008c7e:	4640      	mov	r0, r8
 8008c80:	f7f7 fe9c 	bl	80009bc <__addsf3>
 8008c84:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008c88:	4680      	mov	r8, r0
 8008c8a:	f10a 0a01 	add.w	sl, sl, #1
 8008c8e:	9901      	ldr	r1, [sp, #4]
 8008c90:	458a      	cmp	sl, r1
 8008c92:	dc01      	bgt.n	8008c98 <__kernel_rem_pio2f+0x3e4>
 8008c94:	45d1      	cmp	r9, sl
 8008c96:	dae9      	bge.n	8008c6c <__kernel_rem_pio2f+0x3b8>
 8008c98:	ab5a      	add	r3, sp, #360	@ 0x168
 8008c9a:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8008c9e:	f849 8ca0 	str.w	r8, [r9, #-160]
 8008ca2:	3f01      	subs	r7, #1
 8008ca4:	e731      	b.n	8008b0a <__kernel_rem_pio2f+0x256>
 8008ca6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	dc07      	bgt.n	8008cbc <__kernel_rem_pio2f+0x408>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dc4e      	bgt.n	8008d4e <__kernel_rem_pio2f+0x49a>
 8008cb0:	d02e      	beq.n	8008d10 <__kernel_rem_pio2f+0x45c>
 8008cb2:	f006 0007 	and.w	r0, r6, #7
 8008cb6:	b05b      	add	sp, #364	@ 0x16c
 8008cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d1f7      	bne.n	8008cb2 <__kernel_rem_pio2f+0x3fe>
 8008cc2:	f10d 0bc8 	add.w	fp, sp, #200	@ 0xc8
 8008cc6:	eb0b 0784 	add.w	r7, fp, r4, lsl #2
 8008cca:	46b8      	mov	r8, r7
 8008ccc:	46a2      	mov	sl, r4
 8008cce:	f1ba 0f00 	cmp.w	sl, #0
 8008cd2:	dc49      	bgt.n	8008d68 <__kernel_rem_pio2f+0x4b4>
 8008cd4:	46a1      	mov	r9, r4
 8008cd6:	f1b9 0f01 	cmp.w	r9, #1
 8008cda:	dc60      	bgt.n	8008d9e <__kernel_rem_pio2f+0x4ea>
 8008cdc:	2000      	movs	r0, #0
 8008cde:	2c01      	cmp	r4, #1
 8008ce0:	dc76      	bgt.n	8008dd0 <__kernel_rem_pio2f+0x51c>
 8008ce2:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8008ce4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8008ce6:	2d00      	cmp	r5, #0
 8008ce8:	d178      	bne.n	8008ddc <__kernel_rem_pio2f+0x528>
 8008cea:	9900      	ldr	r1, [sp, #0]
 8008cec:	600a      	str	r2, [r1, #0]
 8008cee:	460a      	mov	r2, r1
 8008cf0:	604b      	str	r3, [r1, #4]
 8008cf2:	6090      	str	r0, [r2, #8]
 8008cf4:	e7dd      	b.n	8008cb2 <__kernel_rem_pio2f+0x3fe>
 8008cf6:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
 8008cfa:	f7f7 fe5f 	bl	80009bc <__addsf3>
 8008cfe:	3c01      	subs	r4, #1
 8008d00:	2c00      	cmp	r4, #0
 8008d02:	daf8      	bge.n	8008cf6 <__kernel_rem_pio2f+0x442>
 8008d04:	b10d      	cbz	r5, 8008d0a <__kernel_rem_pio2f+0x456>
 8008d06:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008d0a:	9b00      	ldr	r3, [sp, #0]
 8008d0c:	6018      	str	r0, [r3, #0]
 8008d0e:	e7d0      	b.n	8008cb2 <__kernel_rem_pio2f+0x3fe>
 8008d10:	2000      	movs	r0, #0
 8008d12:	af32      	add	r7, sp, #200	@ 0xc8
 8008d14:	e7f4      	b.n	8008d00 <__kernel_rem_pio2f+0x44c>
 8008d16:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 8008d1a:	f7f7 fe4f 	bl	80009bc <__addsf3>
 8008d1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d22:	f1b8 0f00 	cmp.w	r8, #0
 8008d26:	daf6      	bge.n	8008d16 <__kernel_rem_pio2f+0x462>
 8008d28:	b1ad      	cbz	r5, 8008d56 <__kernel_rem_pio2f+0x4a2>
 8008d2a:	f100 4300 	add.w	r3, r0, #2147483648	@ 0x80000000
 8008d2e:	9a00      	ldr	r2, [sp, #0]
 8008d30:	4601      	mov	r1, r0
 8008d32:	6013      	str	r3, [r2, #0]
 8008d34:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 8008d36:	f7f7 fe3f 	bl	80009b8 <__aeabi_fsub>
 8008d3a:	f04f 0801 	mov.w	r8, #1
 8008d3e:	4544      	cmp	r4, r8
 8008d40:	da0b      	bge.n	8008d5a <__kernel_rem_pio2f+0x4a6>
 8008d42:	b10d      	cbz	r5, 8008d48 <__kernel_rem_pio2f+0x494>
 8008d44:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008d48:	9b00      	ldr	r3, [sp, #0]
 8008d4a:	6058      	str	r0, [r3, #4]
 8008d4c:	e7b1      	b.n	8008cb2 <__kernel_rem_pio2f+0x3fe>
 8008d4e:	46a0      	mov	r8, r4
 8008d50:	2000      	movs	r0, #0
 8008d52:	af32      	add	r7, sp, #200	@ 0xc8
 8008d54:	e7e5      	b.n	8008d22 <__kernel_rem_pio2f+0x46e>
 8008d56:	4603      	mov	r3, r0
 8008d58:	e7e9      	b.n	8008d2e <__kernel_rem_pio2f+0x47a>
 8008d5a:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8008d5e:	f7f7 fe2d 	bl	80009bc <__addsf3>
 8008d62:	f108 0801 	add.w	r8, r8, #1
 8008d66:	e7ea      	b.n	8008d3e <__kernel_rem_pio2f+0x48a>
 8008d68:	f8d8 3000 	ldr.w	r3, [r8]
 8008d6c:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008d70:	4619      	mov	r1, r3
 8008d72:	4610      	mov	r0, r2
 8008d74:	9302      	str	r3, [sp, #8]
 8008d76:	9201      	str	r2, [sp, #4]
 8008d78:	f7f7 fe20 	bl	80009bc <__addsf3>
 8008d7c:	9a01      	ldr	r2, [sp, #4]
 8008d7e:	4601      	mov	r1, r0
 8008d80:	4681      	mov	r9, r0
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7f7 fe18 	bl	80009b8 <__aeabi_fsub>
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d8e:	4619      	mov	r1, r3
 8008d90:	f7f7 fe14 	bl	80009bc <__addsf3>
 8008d94:	f848 0904 	str.w	r0, [r8], #-4
 8008d98:	f8c8 9000 	str.w	r9, [r8]
 8008d9c:	e797      	b.n	8008cce <__kernel_rem_pio2f+0x41a>
 8008d9e:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8008da2:	f8d7 a000 	ldr.w	sl, [r7]
 8008da6:	4618      	mov	r0, r3
 8008da8:	4651      	mov	r1, sl
 8008daa:	9301      	str	r3, [sp, #4]
 8008dac:	f7f7 fe06 	bl	80009bc <__addsf3>
 8008db0:	9b01      	ldr	r3, [sp, #4]
 8008db2:	4601      	mov	r1, r0
 8008db4:	4680      	mov	r8, r0
 8008db6:	4618      	mov	r0, r3
 8008db8:	f7f7 fdfe 	bl	80009b8 <__aeabi_fsub>
 8008dbc:	4651      	mov	r1, sl
 8008dbe:	f7f7 fdfd 	bl	80009bc <__addsf3>
 8008dc2:	f847 0904 	str.w	r0, [r7], #-4
 8008dc6:	f109 39ff 	add.w	r9, r9, #4294967295
 8008dca:	f8c7 8000 	str.w	r8, [r7]
 8008dce:	e782      	b.n	8008cd6 <__kernel_rem_pio2f+0x422>
 8008dd0:	f85b 1024 	ldr.w	r1, [fp, r4, lsl #2]
 8008dd4:	f7f7 fdf2 	bl	80009bc <__addsf3>
 8008dd8:	3c01      	subs	r4, #1
 8008dda:	e780      	b.n	8008cde <__kernel_rem_pio2f+0x42a>
 8008ddc:	9900      	ldr	r1, [sp, #0]
 8008dde:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 8008de2:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008de6:	600a      	str	r2, [r1, #0]
 8008de8:	604b      	str	r3, [r1, #4]
 8008dea:	460a      	mov	r2, r1
 8008dec:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8008df0:	e77f      	b.n	8008cf2 <__kernel_rem_pio2f+0x43e>
 8008df2:	bf00      	nop

08008df4 <scalbnf>:
 8008df4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	460d      	mov	r5, r1
 8008dfe:	4604      	mov	r4, r0
 8008e00:	d02e      	beq.n	8008e60 <scalbnf+0x6c>
 8008e02:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008e06:	d304      	bcc.n	8008e12 <scalbnf+0x1e>
 8008e08:	4601      	mov	r1, r0
 8008e0a:	f7f7 fdd7 	bl	80009bc <__addsf3>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	e026      	b.n	8008e60 <scalbnf+0x6c>
 8008e12:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 8008e16:	d118      	bne.n	8008e4a <scalbnf+0x56>
 8008e18:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8008e1c:	f7f7 fed6 	bl	8000bcc <__aeabi_fmul>
 8008e20:	4a17      	ldr	r2, [pc, #92]	@ (8008e80 <scalbnf+0x8c>)
 8008e22:	4603      	mov	r3, r0
 8008e24:	4295      	cmp	r5, r2
 8008e26:	db0c      	blt.n	8008e42 <scalbnf+0x4e>
 8008e28:	4604      	mov	r4, r0
 8008e2a:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8008e2e:	3a19      	subs	r2, #25
 8008e30:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008e34:	428d      	cmp	r5, r1
 8008e36:	dd0a      	ble.n	8008e4e <scalbnf+0x5a>
 8008e38:	4912      	ldr	r1, [pc, #72]	@ (8008e84 <scalbnf+0x90>)
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f361 001e 	bfi	r0, r1, #0, #31
 8008e40:	e000      	b.n	8008e44 <scalbnf+0x50>
 8008e42:	4911      	ldr	r1, [pc, #68]	@ (8008e88 <scalbnf+0x94>)
 8008e44:	f7f7 fec2 	bl	8000bcc <__aeabi_fmul>
 8008e48:	e7e1      	b.n	8008e0e <scalbnf+0x1a>
 8008e4a:	0dd2      	lsrs	r2, r2, #23
 8008e4c:	e7f0      	b.n	8008e30 <scalbnf+0x3c>
 8008e4e:	1951      	adds	r1, r2, r5
 8008e50:	29fe      	cmp	r1, #254	@ 0xfe
 8008e52:	dcf1      	bgt.n	8008e38 <scalbnf+0x44>
 8008e54:	2900      	cmp	r1, #0
 8008e56:	dd05      	ble.n	8008e64 <scalbnf+0x70>
 8008e58:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008e5c:	ea44 53c1 	orr.w	r3, r4, r1, lsl #23
 8008e60:	4618      	mov	r0, r3
 8008e62:	bd38      	pop	{r3, r4, r5, pc}
 8008e64:	f111 0f16 	cmn.w	r1, #22
 8008e68:	da01      	bge.n	8008e6e <scalbnf+0x7a>
 8008e6a:	4907      	ldr	r1, [pc, #28]	@ (8008e88 <scalbnf+0x94>)
 8008e6c:	e7e5      	b.n	8008e3a <scalbnf+0x46>
 8008e6e:	f101 0019 	add.w	r0, r1, #25
 8008e72:	f024 44ff 	bic.w	r4, r4, #2139095040	@ 0x7f800000
 8008e76:	f04f 514c 	mov.w	r1, #855638016	@ 0x33000000
 8008e7a:	ea44 50c0 	orr.w	r0, r4, r0, lsl #23
 8008e7e:	e7e1      	b.n	8008e44 <scalbnf+0x50>
 8008e80:	ffff3cb0 	.word	0xffff3cb0
 8008e84:	7149f2ca 	.word	0x7149f2ca
 8008e88:	0da24260 	.word	0x0da24260

08008e8c <floorf>:
 8008e8c:	b570      	push	{r4, r5, r6, lr}
 8008e8e:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8008e92:	3d7f      	subs	r5, #127	@ 0x7f
 8008e94:	2d16      	cmp	r5, #22
 8008e96:	4601      	mov	r1, r0
 8008e98:	4604      	mov	r4, r0
 8008e9a:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8008e9e:	dc26      	bgt.n	8008eee <floorf+0x62>
 8008ea0:	2d00      	cmp	r5, #0
 8008ea2:	da0f      	bge.n	8008ec4 <floorf+0x38>
 8008ea4:	4917      	ldr	r1, [pc, #92]	@ (8008f04 <floorf+0x78>)
 8008ea6:	f7f7 fd89 	bl	80009bc <__addsf3>
 8008eaa:	2100      	movs	r1, #0
 8008eac:	f7f8 f84a 	bl	8000f44 <__aeabi_fcmpgt>
 8008eb0:	b130      	cbz	r0, 8008ec0 <floorf+0x34>
 8008eb2:	2c00      	cmp	r4, #0
 8008eb4:	da23      	bge.n	8008efe <floorf+0x72>
 8008eb6:	2e00      	cmp	r6, #0
 8008eb8:	4c13      	ldr	r4, [pc, #76]	@ (8008f08 <floorf+0x7c>)
 8008eba:	bf08      	it	eq
 8008ebc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	e01a      	b.n	8008efa <floorf+0x6e>
 8008ec4:	4e11      	ldr	r6, [pc, #68]	@ (8008f0c <floorf+0x80>)
 8008ec6:	412e      	asrs	r6, r5
 8008ec8:	4230      	tst	r0, r6
 8008eca:	d016      	beq.n	8008efa <floorf+0x6e>
 8008ecc:	490d      	ldr	r1, [pc, #52]	@ (8008f04 <floorf+0x78>)
 8008ece:	f7f7 fd75 	bl	80009bc <__addsf3>
 8008ed2:	2100      	movs	r1, #0
 8008ed4:	f7f8 f836 	bl	8000f44 <__aeabi_fcmpgt>
 8008ed8:	2800      	cmp	r0, #0
 8008eda:	d0f1      	beq.n	8008ec0 <floorf+0x34>
 8008edc:	2c00      	cmp	r4, #0
 8008ede:	bfbe      	ittt	lt
 8008ee0:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8008ee4:	412b      	asrlt	r3, r5
 8008ee6:	18e4      	addlt	r4, r4, r3
 8008ee8:	ea24 0406 	bic.w	r4, r4, r6
 8008eec:	e7e8      	b.n	8008ec0 <floorf+0x34>
 8008eee:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008ef2:	d302      	bcc.n	8008efa <floorf+0x6e>
 8008ef4:	f7f7 fd62 	bl	80009bc <__addsf3>
 8008ef8:	4601      	mov	r1, r0
 8008efa:	4608      	mov	r0, r1
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	2400      	movs	r4, #0
 8008f00:	e7de      	b.n	8008ec0 <floorf+0x34>
 8008f02:	bf00      	nop
 8008f04:	7149f2ca 	.word	0x7149f2ca
 8008f08:	bf800000 	.word	0xbf800000
 8008f0c:	007fffff 	.word	0x007fffff

08008f10 <_init>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr

08008f1c <_fini>:
 8008f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f1e:	bf00      	nop
 8008f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f22:	bc08      	pop	{r3}
 8008f24:	469e      	mov	lr, r3
 8008f26:	4770      	bx	lr
