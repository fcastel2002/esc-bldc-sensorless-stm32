
pwm_output.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000018e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000013a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000674  00000000  00000000  00000952  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  00000fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001238  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037f  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000092  00000000  00000000  000015ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001691  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7f 00 	call	0xfe	; 0xfe <main>
  88:	0c 94 9b 00 	jmp	0x136	; 0x136 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <leer_adc>:
 * Author : Usuario
 */ 
#include "main.h"
#define MUESTRAS 16

uint16_t leer_adc() {
  90:	cf 92       	push	r12
  92:	df 92       	push	r13
  94:	ef 92       	push	r14
  96:	ff 92       	push	r15
	uint32_t suma = 0;
	for (uint8_t i = 0; i < MUESTRAS; i++) {
  98:	20 e0       	ldi	r18, 0x00	; 0
 */ 
#include "main.h"
#define MUESTRAS 16

uint16_t leer_adc() {
	uint32_t suma = 0;
  9a:	c1 2c       	mov	r12, r1
  9c:	d1 2c       	mov	r13, r1
  9e:	76 01       	movw	r14, r12
	for (uint8_t i = 0; i < MUESTRAS; i++) {
  a0:	1a c0       	rjmp	.+52     	; 0xd6 <leer_adc+0x46>
		ADCSRA |= (1 << ADSC);
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	90 81       	ld	r25, Z
  a8:	90 64       	ori	r25, 0x40	; 64
  aa:	90 83       	st	Z, r25
		while (ADCSRA & (1 << ADSC));
  ac:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  b0:	96 fd       	sbrc	r25, 6
  b2:	fc cf       	rjmp	.-8      	; 0xac <leer_adc+0x1c>
		suma += ADCL | (ADCH << 8);
  b4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b8:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  bc:	50 e0       	ldi	r21, 0x00	; 0
  be:	54 2f       	mov	r21, r20
  c0:	44 27       	eor	r20, r20
  c2:	48 2b       	or	r20, r24
  c4:	05 2e       	mov	r0, r21
  c6:	00 0c       	add	r0, r0
  c8:	66 0b       	sbc	r22, r22
  ca:	77 0b       	sbc	r23, r23
  cc:	c4 0e       	add	r12, r20
  ce:	d5 1e       	adc	r13, r21
  d0:	e6 1e       	adc	r14, r22
  d2:	f7 1e       	adc	r15, r23
#include "main.h"
#define MUESTRAS 16

uint16_t leer_adc() {
	uint32_t suma = 0;
	for (uint8_t i = 0; i < MUESTRAS; i++) {
  d4:	2f 5f       	subi	r18, 0xFF	; 255
  d6:	20 31       	cpi	r18, 0x10	; 16
  d8:	20 f3       	brcs	.-56     	; 0xa2 <leer_adc+0x12>
		ADCSRA |= (1 << ADSC);
		while (ADCSRA & (1 << ADSC));
		suma += ADCL | (ADCH << 8);
	}
	return (suma + MUESTRAS/2) / MUESTRAS;  // Redondeo
  da:	d7 01       	movw	r26, r14
  dc:	c6 01       	movw	r24, r12
  de:	08 96       	adiw	r24, 0x08	; 8
  e0:	a1 1d       	adc	r26, r1
  e2:	b1 1d       	adc	r27, r1
  e4:	68 94       	set
  e6:	13 f8       	bld	r1, 3
  e8:	b6 95       	lsr	r27
  ea:	a7 95       	ror	r26
  ec:	97 95       	ror	r25
  ee:	87 95       	ror	r24
  f0:	16 94       	lsr	r1
  f2:	d1 f7       	brne	.-12     	; 0xe8 <leer_adc+0x58>
}
  f4:	ff 90       	pop	r15
  f6:	ef 90       	pop	r14
  f8:	df 90       	pop	r13
  fa:	cf 90       	pop	r12
  fc:	08 95       	ret

000000fe <main>:

int main(void) {
	ADMUX = (1 << REFS0);                   // AVCC como referencia
  fe:	80 e4       	ldi	r24, 0x40	; 64
 100:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // Preescalador 128
 104:	87 e8       	ldi	r24, 0x87	; 135
 106:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	DDRB |= (1 << DDB1);                    // PB1 (OC1A) como salida
 10a:	84 b1       	in	r24, 0x04	; 4
 10c:	82 60       	ori	r24, 0x02	; 2
 10e:	84 b9       	out	0x04, r24	; 4
	TCCR1A = (1 << COM1A1) | (1 << WGM11);  // Fast PWM, no invertido
 110:	82 e8       	ldi	r24, 0x82	; 130
 112:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10);  // Modo 14 (Fast PWM), TOP=ICR1
 116:	89 e1       	ldi	r24, 0x19	; 25
 118:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	ICR1 = 1023;                            // PWM de 10 bits (0–1023)
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	93 e0       	ldi	r25, 0x03	; 3
 120:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 124:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	while (1) {
		uint16_t adc_value = leer_adc();    // Lectura promediada
 128:	0e 94 48 00 	call	0x90	; 0x90 <leer_adc>
		OCR1A = adc_value;                  // Mapeo directo ADC ? PWM
 12c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 130:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 134:	f9 cf       	rjmp	.-14     	; 0x128 <main+0x2a>

00000136 <_exit>:
 136:	f8 94       	cli

00000138 <__stop_program>:
 138:	ff cf       	rjmp	.-2      	; 0x138 <__stop_program>
